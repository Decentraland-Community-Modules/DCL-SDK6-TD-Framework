[
  {
    "path": "node_modules\\@dcl\\amd\\dist\\amd.min.js",
    "content": "\"use strict\";const getGlobalThis=function(){if(typeof globalThis!==\"undefined\")return globalThis;if(typeof self!==\"undefined\")return self;if(typeof window!==\"undefined\")return window;if(typeof this!==\"undefined\")return this;throw new Error(\"Unable to locate global `this`\")};const globalObject=getGlobalThis();var loader;(function(e){\"use strict\";const n=1;const t=2;let o=0;const r=[];const i=[];const s={baseUrl:\"\"};const l={};function f(e){if(typeof e===\"object\"){for(const n in e){if(e.hasOwnProperty(n)){s[n]=e[n]}}}}e.config=f;function c(e,t,r){let i=null;let s={};let f=null;if(typeof e===\"function\"){s=e}else if(typeof e===\"string\"){i=e;if(typeof t===\"function\"){s=t}else if(t instanceof Array){f=t;s=r}}else if(e instanceof Array){f=e;if(typeof t===\"function\"){s=t}}f=f||[\"require\",\"exports\",\"module\"];if(i===null){i=`unnamed-module-${o++}`}i=g(i);function c(e){const n=l[i];if(!n)throw new Error(\"Could not access registered module \"+i);let t=n.exports;t=typeof s===\"function\"?s.apply(globalObject,e)||t:s;n.exports=t;d(i)}f=(f||[]).map((e=>m(i,e)));if(!l[i]){l[i]={name:i,parent:null,dclamd:n,dependencies:f,handlers:[],exports:{},dependants:new Set}}l[i].dependencies=f;p(f,c,(e=>{if(typeof onerror===\"function\"){onerror(e)}else{throw e}}),i)}e.define=c;(function(e){e.amd={};e.modules=l})(c=e.define||(e.define={}));function d(e){const n=l[e];if(!n)throw new Error(\"Could not access registered module \"+e);n.dclamd=t;const o=n.handlers;if(o&&o.length){for(let n=0;n<o.length;n++){o[n](l[e])}}}function u(e,n,t){if(!l[e]){return null}if(e===n||t===50)return[e];const o=l[e].dependencies;for(let r=0,i=o.length;r<i;r++){const i=u(o[r],n,t+1);if(i!==null){i.push(e);return i}}return null}function a(e,n){const t=l[e];if(!t){return false}const o={};for(const e in l){o[e]=false}const r=[];r.push(t);o[e]=true;while(r.length>0){const e=r.shift();const t=e.dependencies;if(t){for(let e=0,i=t.length;e<i;e++){const i=t[e];if(i===n){return true}const s=l[i];if(s&&!o[i]){o[i]=true;r.push(s)}}}}return false}function p(e,t,o,r){const s=new Array(e.length).fill(null);let f=0;let c=false;if(typeof e===\"string\"){if(l[e]){if(l[e].dclamd===n){throw new Error(`Trying to load ${e} from ${r}. The first module is still loading.`)}return l[e]}throw new Error(e+\" has not been defined. Please include it as a dependency in \"+r+\"'s define()\")}const d=e.length;for(let n=0;n<d;n++){switch(e[n]){case\"require\":const h=function(e,n,t){return p(e,n,t,r)};h.toUrl=function(e){return b(e,r)};s[n]=h;f++;break;case\"exports\":if(!l[r]){throw new Error(\"Parent module \"+r+\" not registered yet\")}s[n]=l[r].exports;f++;break;case\"module\":s[n]={id:r,uri:b(r)};f++;break;default:{const p=e[n];const h=a(p,r);const m=()=>{s[n]=l[p].exports;f++;if(f===d&&t){c=true;t(s)}};if(h){const e=u(p,r,0);if(e){e.reverse();e.push(p);i.push(e)}w(p,(()=>{}),o,r);m()}else{w(p,m,o,r)}break}}}if(!c&&f===d&&t){t(s)}}e.require=p;function h(e,n){return function(){return dcl.callRpc(e,n.name,r.slice.call(arguments,0))}}function m(e,n){return e?b(n,e):n}function w(e,t,o,r){if(l[e]){l[e].dependants.add(r);if(l[e].dclamd===n){t&&l[e].handlers.push(t)}else{t&&t(l[e])}return}else{l[e]={name:e,parent:r,dclamd:n,handlers:[t],dependencies:[],dependants:new Set([r]),exports:{}}}if(e.indexOf(\"@\")===0){const n=l[e].exports;if(typeof dcl.loadModule===\"function\"){dcl.loadModule(e,n).then((t=>{for(const e in t.methods){const o=t.methods[e];n[o.name]=h(t.rpcHandle,o)}d(e)})).catch((e=>{o(e)}))}else{throw new Error(\"Asynchronous modules will not work because loadModule function is not present\")}}}if(typeof dcl!==\"undefined\"){dcl.onStart((()=>{const e=new Set;const t=[];for(const o in l){if(l[o]){if(l[o].dclamd===n){t.push(l[o])}l[o].dependencies.forEach((n=>{if(n===\"require\"||n===\"exports\"||n===\"module\")return;if(!l[n])e.add(n)}))}}const o=[];if(i.length){o.push(`\\n> Cyclic dependencies: ${i.map((e=>\"\\n  - \"+e.join(\" -> \"))).join(\"\")}`)}if(e.size){o.push(`\\n> Undeclared/unknown modules: ${Array.from(e).map((e=>\"\\n  - \"+e)).join(\"\")}`)}if(t.length){o.push(`\\n> These modules didn't load: ${t.map((e=>\"\\n  - \"+e.name)).join(\"\")}.\\n`)}if(o.length){throw new Error(o.join(\"\\n\"))}}))}function g(e){let n=e,t;t=/\\/\\.\\//;while(t.test(n)){n=n.replace(t,\"/\")}n=n.replace(/^\\.\\//g,\"\");t=/\\/(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//;while(t.test(n)){n=n.replace(t,\"/\")}n=n.replace(/^(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//,\"\");n=n.replace(/^\\//g,\"\");return n}function y(e,n){let t=e;if(!t.startsWith(\"@\")){if(t.startsWith(\"./\")||t.startsWith(\"../\")){const e=n.split(\"/\");e.pop();t=g(e.join(\"/\")+\"/\"+t)}}return t}function b(e,n){switch(e){case\"require\":case\"exports\":case\"module\":return e}if(n){return y(e,n)}return g(e)}p.toUrl=b})(loader||(loader={}));globalObject.define=loader.define;globalObject.dclamd=loader;",
    "sha256": "0f7cce896683e444d7f1ea0b214197876131661aebeab8d6ff887f2ebca2030b"
  },
  {
    "path": "node_modules\\decentraland-ecs\\dist\\src\\index.min.js",
    "content": "!function(t){\"use strict\";var e=function(){function t(){}return t.AVATAR={getEntityRepresentation:function(t){return t.avatarEntity}},t.FIRST_PERSON_CAMERA={getEntityRepresentation:function(t){return t.firstPersonCameraEntity}},t}(),n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},n(t,e)};\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */function i(t,e){if(\"function\"!=typeof e&&null!==e)throw new TypeError(\"Class extends value \"+String(e)+\" is not a constructor or null\");function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}var o=function(){return o=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},o.apply(this,arguments)};function r(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if(\"object\"==typeof Reflect&&\"function\"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s}function s(t,e){if(\"object\"==typeof Reflect&&\"function\"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function a(t,e,n,i){return new(n||(n=Promise))((function(o,r){function s(t){try{d(i.next(t))}catch(t){r(t)}}function a(t){try{d(i.throw(t))}catch(t){r(t)}}function d(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}d((i=i.apply(t,e||[])).next())}))}function d(t,e){var n,i,o,r,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:a(0),throw:a(1),return:a(2)},\"function\"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(r){return function(a){return function(r){if(n)throw new TypeError(\"Generator is already executing.\");for(;s;)try{if(n=1,i&&(o=2&r[0]?i.return:r[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,r[1])).done)return o;switch(i=0,o&&(r=[2&r[0],o.value]),r[0]){case 0:case 1:o=r;break;case 4:return s.label++,{value:r[1],done:!1};case 5:s.label++,i=r[1],r=[0];continue;case 7:r=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==r[0]&&2!==r[0])){s=0;continue}if(3===r[0]&&(!o||r[1]>o[0]&&r[1]<o[3])){s.label=r[1];break}if(6===r[0]&&s.label<o[1]){s.label=o[1],o=r;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(r);break}o[2]&&s.ops.pop(),s.trys.pop();continue}r=e.call(t,s)}catch(t){r=[6,t],i=0}finally{n=o=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,a])}}}function h(t){var e=\"function\"==typeof Symbol&&Symbol.iterator,n=e&&t[e],i=0;if(n)return n.call(t);if(t&&\"number\"==typeof t.length)return{next:function(){return t&&i>=t.length&&(t=void 0),{value:t&&t[i++],done:!t}}};throw new TypeError(e?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")}function l(t,e){var n=\"function\"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var i,o,r=n.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(i=r.next()).done;)s.push(i.value)}catch(t){o={error:t}}finally{try{i&&!i.done&&(n=r.return)&&n.call(r)}finally{if(o)throw o.error}}return s}function p(t,e){for(var n=0,i=e.length,o=t.length;n<i;n++,o++)t[o]=e[n];return t}var c=0;function u(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];\"undefined\"!=typeof dcl?dcl.log.apply(dcl,p([],l(t))):console.log.apply(console,p([\"DEBUG:\"],l(t)))}function y(t,e){\"undefined\"!=typeof dcl?dcl.error(t,e):console.error(\"ERROR:\",t,e)}function f(t){if(c++,0===t.length)throw new Error(\"newId(type: string): type cannot be empty\");return t+c.toString(36)}function m(){return\"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g,(function(t){var e=16*Math.random()|0;return(\"x\"===t?e:3&e|8).toString(16)}))}var g=\"__event_name__\",v=[];function _(t){if(!(g in t)||\"string\"!=typeof t.__event_name__)throw new Error(\"The EventConstructor is not registered\");return t.__event_name__}var b=function(){function t(){this.listeners={}}return t.prototype.addListener=function(t,e,n){if(!t||\"function\"!=typeof t)throw new Error(\"Invalid EventConstructor\");var i=_(t),o=this.listeners[i];o||(o=this.listeners[i]=[]);for(var r=0;r<o.length;r++){if(o[r].listener===e)throw new Error(\"The provided listener is already registered\")}return o.push({listener:e,fn:n}),this},t.prototype.removeListener=function(t,e){if(!e||\"function\"!=typeof e)throw new Error(\"Invalid EventConstructor\");var n=_(e),i=this.listeners[n];if(!i)return!1;for(var o=0;o<i.length;o++){if(i[o].listener===t)return i.splice(o,1),!0}return!1},t.prototype.fireEvent=function(t){var e=_(t.constructor),n=this.listeners[e];if(n)for(var i=0;i<n.length;i++)try{var o=n[i];o.fn.call(o.listener,t)}catch(t){y(t)}return this},t}();function x(){var t=f(\"EV\");if(-1!==v.indexOf(t))throw new Error(\"The event name \".concat(t,\" is already taken\"));return v.push(t),function(e){return e.__event_name__=t,e}}var w,T=function(){function t(t,e,n){this.entity=t,this.componentName=e,this.component=n}return t=r([x(),s(\"design:paramtypes\",[Object,String,Object])],t)}(),A=function(){function t(t,e,n){this.entity=t,this.componentName=e,this.classId=n}return t=r([x(),s(\"design:paramtypes\",[Object,String,Object])],t)}(),R=function(){function t(t,e){this.entity=t,this.parent=e}return t=r([x(),s(\"design:paramtypes\",[Object,Object])],t)}();t.UIValueType=void 0,(w=t.UIValueType||(t.UIValueType={}))[w.PERCENT=0]=\"PERCENT\",w[w.PIXELS=1]=\"PIXELS\";var S=function(){function e(e){if(this.type=t.UIValueType.PIXELS,\"string\"==typeof e){var n=e;n.indexOf(\"px\")>-1?this.type=t.UIValueType.PIXELS:n.indexOf(\"%\")>-1&&(this.type=t.UIValueType.PERCENT),this.value=parseFloat(n)}else this.value=e}return e.prototype.toString=function(){var e=this.value.toString();return this.type===t.UIValueType.PERCENT?e+=\"%\":e+=\"px\",e},e}(),C=\"__name__symbol_\",E=\"__classId__symbol_\",I=\"__component__id_\",z=function(){function t(t,e,n){this.componentId=t,this.componentName=e,this.classId=n}return t=r([x(),s(\"design:paramtypes\",[String,String,Number])],t)}(),O=function(){function t(t){this.componentId=t}return t=r([x(),s(\"design:paramtypes\",[String])],t)}(),M=function(){function t(t,e){this.componentId=t,this.component=e}return t=r([x(),s(\"design:paramtypes\",[String,Object])],t)}();function P(t,e){return function(n){if(n.isComponent)throw new TypeError(\"You cannot extend a component. Trying to extend \".concat(n.originalClassName,\" with: \").concat(t));var i=n,o=function(){var n=Array.prototype.slice.call(arguments),o=new(i.bind.apply(i,p([void 0],l(n))));return Object.defineProperty(o,C,{enumerable:!1,writable:!1,configurable:!1,value:t}),void 0!==e&&Object.defineProperty(o,E,{enumerable:!1,writable:!1,configurable:!1,value:e}),o};return void 0!==e&&(o.__classId__symbol_=e),o.__name__symbol_=t,o.isComponent=!0,o.originalClassName=t,(o.prototype=n.prototype).constructor=n,o}}function N(t,e){return function(n){if(n.isComponent)throw new TypeError(\"You cannot extend a component. Trying to extend \".concat(n.originalClassName,\" with: \").concat(t));if(\"number\"!=typeof e||isNaN(e))throw new Error(\"classId: \".concat(e,\" is an invalid integer\"));var i=n,o=function(){if(!N.engine)throw new Error(\"You need to set a DisposableComponent.engine before creating disposable components\");var n=Array.prototype.slice.call(arguments),o=new(i.bind.apply(i,p([void 0],l(n)))),r=f(\"C\");return Object.defineProperty(o,C,{enumerable:!1,writable:!1,configurable:!1,value:t}),Object.defineProperty(o,I,{enumerable:!1,writable:!1,configurable:!1,value:r}),void 0!==e&&Object.defineProperty(o,E,{enumerable:!1,writable:!1,configurable:!1,value:e}),N.engine&&N.engine.registerComponent(o),o};return void 0!==e&&(o.__classId__symbol_=e),o.__name__symbol_=t,o.isComponent=!0,o.isDisposableComponent=!0,o.originalClassName=t,(o.prototype=n.prototype).constructor=n,o}}function F(t){if(!t)throw new TypeError(t+\" is not a component.\");if(t.__name__symbol_)return t.__name__symbol_;throw new TypeError(t+\" is not a registered component.\")}function L(t){if(!t)throw new TypeError(t+\" is not a component.\");if(t.__classId__symbol_)return t.__classId__symbol_;if(!t.__name__symbol_)throw new TypeError(t+\" is not a registered component.\");return null}function D(t){if(!t)throw new TypeError(t+\" is not a component.\");if(t.__component__id_)return t.__component__id_;throw new TypeError(t+\" is not a registered disposable component.\")}!function(t){t.engine=null}(N||(N={}));var B=function(){function t(){this.dirty=!1,this.data={},this.subscriptions=[]}return t.component=function(t,e){if(delete t[e]){var n=e+\"_\"+Math.random();t[n]=void 0,Object.defineProperty(t,n,o(o({},Object.getOwnPropertyDescriptor(t,n)),{enumerable:!1})),Object.defineProperty(t,e.toString(),{get:function(){return this[n]},set:function(t){var i=this[n];if(this.data[e]=t?D(t):null,this[n]=t,t!==i){this.dirty=!0;for(var o=0;o<this.subscriptions.length;o++)this.subscriptions[o](e,t,i)}},enumerable:!0})}},t.field=function(t,e){delete t[e]&&Object.defineProperty(t,e.toString(),{get:function(){return this.data[e]},set:function(t){var n=this.data[e];if(this.data[e]=t,t!==n){this.dirty=!0;for(var i=0;i<this.subscriptions.length;i++)this.subscriptions[i](e,t,n)}},enumerable:!0})},t.uiValue=function(t,e){delete t[e]&&Object.defineProperty(t,e.toString(),{get:function(){return this.data[e].toString()},set:function(t){var n=this.data[e],i=new S(t);if(this.data[e]=i,i!==n){this.dirty=!0;for(var o=0;o<this.subscriptions.length;o++)this.subscriptions[o](e,i,n)}},enumerable:!0})},t.readonly=function(t,e){delete t[e]&&Object.defineProperty(t,e.toString(),{get:function(){if(e in this.data==!1)throw new Error(\"The field \".concat(e,\" is uninitialized\"));return this.data[e]},set:function(t){if(e in this.data)throw new Error(\"The field \".concat(e,\" is readonly\"));this.data[e]=t,this.dirty=!0},enumerable:!0,configurable:!1})},t.prototype.onChange=function(t){return this.subscriptions.push(t),this},t.prototype.toJSON=function(){return this.data},t}();function U(t){return I in t}var V=function(){function t(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(this.entities=[],this.active=!1,this._requiresNames=[],!t)throw new Error(\"ComponentGroup: Could not load the requires list\");if(!(t instanceof Array))throw new Error(\"ComponentGroup: requires list is not an Array\");Object.defineProperty(this,\"requires\",{get:function(){return t.slice()}}),Object.defineProperty(this,\"requiresNames\",{get:function(){return this._requiresNames.slice()}});for(var n=function(e){var n=t[e],o=null;if(!n)throw new Error(\"ComponentGroup: the required component at location \".concat(e,\" is invalid\"));try{o=F(n)}catch(t){throw new Error(\"ComponentGroup: the required component at location \".concat(e,\" is not registered as a @Component. Remember to provide the class of the component, not the name\"))}if(i._requiresNames.some((function(t){return t===o})))throw new Error(\"ComponentGroup: the required component list has a repeated name \".concat(o));i._requiresNames.push(o)},i=this,o=0;o<t.length;o++)n(o)}return t.prototype.hasEntity=function(t){return!!t.isAddedToEngine()&&-1!==this.entities.indexOf(t)},t.prototype.addEntity=function(t){if(!t.isAddedToEngine())throw new TypeError(\"ComponentGroup: Cannot add a entity that is not added to the engine\");-1===this.entities.indexOf(t)&&this.entities.push(t)},t.prototype.removeEntity=function(t){var e=this.entities.indexOf(t);-1!==e&&this.entities.splice(e,1)},t.prototype.componentRemoved=function(t,e){-1!==this._requiresNames.indexOf(e)&&this.removeEntity(t)},t.prototype.meetsRequirements=function(t){for(var e=0;e<this._requiresNames.length;e++){if(!(this._requiresNames[e]in t.components))return!1}return!0},t}(),H=function(){function t(t){this.name=t,this.children={},this.eventManager=null,this.alive=!1,this.uuid=f(\"E\"),this.components={},this.engine=null,this._parent=null}return t.prototype.addComponentOrReplace=function(t){if(\"function\"==typeof t)throw new Error(\"You passed a function or class as a component, an instance of component is expected\");if(\"object\"!=typeof t)throw new Error(\"You passed a \".concat(typeof t,\", an instance of component is expected\"));var e=F(t);if(this.components[e]){if(this.components[e]===t)return t;this.removeComponent(this.components[e],!1)}return this.addComponent(t)},t.prototype.hasComponent=function(t){var e=typeof t;if(\"string\"!==e&&\"object\"!==e&&\"function\"!==e)throw new Error(\"Entity#has(component): component is not a class, name or instance\");if(null===t)return!1;var n=\"string\"===e?t:F(t),i=this.components[n];return!!i&&(\"object\"===e?i===t:\"function\"!==e||i instanceof t)},t.prototype.getComponent=function(t){var e=typeof t;if(\"string\"!==e&&\"function\"!==e)throw new Error(\"Entity#get(component): component is not a class or name\");var n=\"string\"===e?t:F(t),i=this.components[n];if(!i)throw new Error('Can not get component \"'.concat(n,'\" from entity \"').concat(this.identifier,'\"'));if(\"function\"===e){if(i instanceof t)return i;throw new Error('Can not get component \"'.concat(n,'\" from entity \"').concat(this.identifier,'\" (by instance)'))}return i},t.prototype.getComponentOrNull=function(t){var e=typeof t;if(\"string\"!==e&&\"function\"!==e)throw new Error(\"Entity#getOrNull(component): component is not a class or name\");var n=\"string\"===e?t:F(t),i=this.components[n];return i?\"function\"===e?i instanceof t?i:null:i:null},t.prototype.getComponentOrCreate=function(t){if(\"function\"!=typeof t)throw new Error(\"Entity#getOrCreate(component): component is not a class\");var e=this.getComponentOrNull(t);return e||(F(e=new t),this.addComponentOrReplace(e)),e},t.prototype.addComponent=function(t){if(\"object\"!=typeof t)throw new Error(\"Entity#add(component): You passed a function or class as a component, an instance of component is expected\");var e=F(t),n=L(t);if(this.components[e])throw new Error('A component of type \"'.concat(e,'\" is already present in entity \"').concat(this.identifier,'\"'));this.components[e]=t,this.eventManager&&this.eventManager.fireEvent(new A(this,e,n));var i=t;return\"function\"==typeof i.addedToEntity&&i.addedToEntity(this),t},t.prototype.removeComponent=function(t,e){void 0===e&&(e=!0);var n=typeof t;if(\"string\"!==n&&\"function\"!==n&&\"object\"!==n)throw new Error(\"Entity#remove(component): component is not a class, class or name\");var i=\"string\"===n?t:F(t),o=this.components[i];if(o){if(\"function\"===n)return o instanceof t?(delete this.components[i],void(o&&(e&&this.eventManager&&this.eventManager.fireEvent(new T(this,i,o)),\"function\"==typeof o.removedFromEntity&&o.removedFromEntity(this)))):void u('Entity Warning: Trying to remove wrong (by constructor) component \"'.concat(i,'\" from entity \"').concat(this.identifier,'\"'));delete this.components[i],o&&(e&&this.eventManager&&this.eventManager.fireEvent(new T(this,i,o)),\"function\"==typeof o.removedFromEntity&&o.removedFromEntity(this))}else u('Entity Warning: Trying to remove inexisting component \"'.concat(i,'\" from entity \"').concat(this.identifier,'\"'))},t.prototype.isAddedToEngine=function(){return!(!this.engine||!(this.uuid in this.engine.entities)&&this.engine.rootEntity!==this)},t.prototype.setParent=function(t){var e;if(t&&\"getEntityRepresentation\"in t){if(!this.engine)throw new Error(\"In order to set an attachable as parent, you first need to add the entity to the engine.\");e=t.getEntityRepresentation(this.engine)}else e=!t&&this.engine?this.engine.rootEntity:t;var n=this.getParent();if(e===this)throw new Error('Failed to set parent for entity \"'.concat(this.identifier,\"\\\": An entity can't set itself as a its own parent\"));if(e===n)return this;var i=this.getCircularAncestor(e);if(i)throw new Error('Failed to set parent for entity \"'.concat(this.identifier,'\": Circular parent references are not allowed (See entity \"').concat(i,'\")'));return n&&delete n.children[this.uuid],null!==e&&\"0\"!==e.uuid&&(!e.isAddedToEngine()&&this.isAddedToEngine()&&this.engine.removeEntity(this),e.isAddedToEngine()&&!this.isAddedToEngine()&&e.engine.addEntity(this)),this._parent=e||null,this.registerAsChild(),this.eventManager&&this.engine&&this.eventManager.fireEvent(new R(this,e)),this},t.prototype.getParent=function(){return this._parent},Object.defineProperty(t.prototype,\"identifier\",{get:function(){return this.name||this.uuid},enumerable:!1,configurable:!0}),t.prototype.getCircularAncestor=function(t){for(var e=this.engine?this.engine.rootEntity:null,n=t;n&&n!==e;){var i=n.getParent();if(i===this)return n.uuid;n=i}return null},t.prototype.registerAsChild=function(){var t=this.getParent();this.uuid&&t&&(t.children[this.uuid]=this)},t}(),k=function(){function t(t){this.eventManager=new b,this.systems=[],this.entityLists={},this.addedSystems=[],this._entities={},this._disposableComponents={},this._componentGroups={},this.simpleSystems=[],this.eventManager.addListener(A,this,this.componentAddedHandler),this.eventManager.addListener(T,this,this.componentRemovedHandler),this.rootEntity=t,this.firstPersonCameraEntity=new H,this.firstPersonCameraEntity.uuid=\"FirstPersonCameraEntityReference\",this.addEntity(this.firstPersonCameraEntity),this.avatarEntity=new H,this.avatarEntity.uuid=\"AvatarEntityReference\",this.addEntity(this.avatarEntity)}return Object.defineProperty(t.prototype,\"entities\",{get:function(){return this._entities},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,\"disposableComponents\",{get:function(){return this._disposableComponents},enumerable:!1,configurable:!0}),t.prototype.addEntity=function(t){var e=t.getParent();if(t.isAddedToEngine())return t;for(var n in t.eventManager=this.eventManager,t.engine=this,this._entities[t.uuid]=t,this.checkRequirementsAndAdd(t),e?e.isAddedToEngine()||e===this.rootEntity||u(\"Engine: warning, added an entity with a parent not present in the engine. Parent id: \"+e.uuid):t.setParent(this.rootEntity),t.alive=!0,t.children){var i=t.children[n];i&&(i.isAddedToEngine()||this.addEntity(i))}return t},t.prototype.removeEntity=function(t){var e=t.uuid;if(t.isAddedToEngine()){for(var n in t.components){var i=this._componentGroups[n];if(i)for(var o in i)i[o].removeEntity(t);delete this.entityLists[n][e]}for(var r=0;r<this.simpleSystems.length;r++){var s=this.simpleSystems[r];s.onRemoveEntity&&s.onRemoveEntity(t)}for(var r in t.children){var a=t.children[r];a&&this.removeEntity(a)}return t.alive=!1,t.eventManager=null,delete this._entities[e],!0}for(var n in u(\"Engine: Trying to remove non existent entity from engine.\"),t.isAddedToEngine()?u(\"Engine: Entity id: \"+e):u('Engine: Entity \"'.concat(t.uuid,'\" has not been added to any engine yet.')),u(\"Engine: Entity's components:\"),t.components)u(n);return!1},t.prototype.addSystem=function(t,e){if(void 0===e&&(e=0),-1!==this.addedSystems.indexOf(t))return u(\"Engine: Trying to add a system that is already added. Aborting\"),t;if(this.systems.length>0)for(var n=0;n<this.systems.length;n++){var i=this.systems[n],o=n===this.systems.length-1;if(i.priority>e){this.addedSystems.push(t),this.systems.splice(n,0,{system:t,priority:e});break}if(o){this.addedSystems.push(t),this.systems.splice(n+1,0,{system:t,priority:e});break}}else this.addedSystems.push(t),this.systems.splice(1,0,{system:t,priority:e});return this.registerSystem(t),t},t.prototype.removeSystem=function(t){var e=this.addedSystems.indexOf(t);if(-1!==e){t.active=!1,t.deactivate&&t.deactivate(),this.addedSystems.splice(e,1);for(var n=0;n<this.systems.length;n++){this.systems[n].system===t&&this.systems.splice(n,1)}return!0}return!1},t.prototype.update=function(t){for(var e in this.systems){var n=this.systems[e].system;if(n.active&&n.update)try{n.update(t)}catch(t){y(t)}}return this},t.prototype.getEntitiesWithComponent=function(t){var e=\"string\"==typeof t?t:F(t);return e in this.entityLists?this.entityLists[e]:this.entityLists[e]={}},t.prototype.registerComponent=function(t){var e=D(t),n=F(t),i=L(t);this._disposableComponents[e]=t,null!==i&&(this.eventManager.fireEvent(new z(e,n,i)),this.eventManager.fireEvent(new M(e,t)))},t.prototype.disposeComponent=function(t){var e=D(t);return delete this._disposableComponents[e]&&(this.eventManager.fireEvent(new O(e)),t.onDispose&&t.onDispose(),!0)},t.prototype.updateComponent=function(t){this.eventManager.fireEvent(new M(D(t),t))},t.prototype.getComponentGroup=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=void 0;if(t.length>0&&(d=this._componentGroups[F(t[0])]))for(var i=t.slice(),o=0;o<d.length;o++){var r=d[o];if(i.length===r.requires.length){for(var s=0;s<i.length&&-1!==r.requires.indexOf(i[s]);s++)s===i.length-1&&(n=r);if(n)break}}if(n)return n;(n=new(V.bind.apply(V,p([void 0],l(t))))).active=!0;var a=n.requiresNames;for(o=0;o<a.length;o++){var d,h=a[o];(d=this._componentGroups[h])||(this._componentGroups[h]=d=[]),-1===d.indexOf(n)&&d.push(n)}for(var c in this._entities)this.checkRequirements(this._entities[c],n);return n},t.prototype.removeComponentGroup=function(t){if(t.active){t.active=!1;for(var e=t.requiresNames,n=0;n<e.length;n++){var i=e[n],o=this._componentGroups[i];if(o){var r=o.indexOf(t);-1!==r&&o.splice(r,1)}}return!0}return!1},t.prototype.registerSystem=function(t){t.active=!0,t.activate&&t.activate(this),this.simpleSystems.push(t)},t.prototype.checkRequirementsAndAdd=function(t){if(t.isAddedToEngine()){for(var e in t.components){e in this.entityLists||(this.entityLists[e]={}),this.entityLists[e][t.uuid]=t;var n=this._componentGroups[e];if(n)for(var i in n)this.checkRequirements(t,n[i])}for(var o=0;o<this.simpleSystems.length;o++){var r=this.simpleSystems[o];r.onAddEntity&&r.onAddEntity(t)}}},t.prototype.checkRequirements=function(t,e){e.meetsRequirements(t)?e.hasEntity(t)||e.addEntity(t):e.hasEntity(t)&&e.removeEntity(t)},t.prototype.componentAddedHandler=function(t){var e,n=t.entity,i=t.componentName;if(n.isAddedToEngine()){this.entityLists[i]?this.entityLists[i][n.uuid]=n:this.entityLists[i]=((e={})[n.uuid]=n,e);var o=this._componentGroups[i];if(o)for(var r in o)this.checkRequirements(n,o[r])}},t.prototype.componentRemovedHandler=function(t){var e=t.entity,n=t.componentName;if(e.isAddedToEngine()){delete this.entityLists[n][e.uuid];var i=this._componentGroups[n];if(i)for(var o in i)this.checkRequirements(e,i[o])}},t}(),j=Promise.resolve().then.bind(Promise.resolve());function G(t){var e=j(t);return e.isComplete=!1,e.then((function(t){e.isComplete=!0,e.result=t,e.didFail=!1})).catch((function(t){e.isComplete=!0,e.error=t,e.didFail=!0,y(\"executeTask: FAILED \"+t.toString(),t)})),e}var q,W=function(){function t(t,e,n,i){void 0===e&&(e=!1),this.initalize(t,e,n,i)}return t.prototype.initalize=function(t,e,n,i){return void 0===e&&(e=!1),this.mask=t,this.skipNextObservers=e,this.target=n,this.currentTarget=i,this},t}(),Y=function(t,e,n){void 0===n&&(n=null),this.callback=t,this.mask=e,this.scope=n,this.unregisterOnNextCall=!1,this._willBeUnregistered=!1},X=function(){function t(){this._observers=null,this._observables=null}return t.Watch=function(e,n,i,o){var r,s;void 0===i&&(i=-1),void 0===o&&(o=null);var a=new t;a._observers=new Array,a._observables=e;try{for(var d=h(e),l=d.next();!l.done;l=d.next()){var p=l.value.add(n,i,!1,o);p&&a._observers.push(p)}}catch(t){r={error:t}}finally{try{l&&!l.done&&(s=d.return)&&s.call(d)}finally{if(r)throw r.error}}return a},t.prototype.dispose=function(){if(this._observers&&this._observables)for(var t=0;t<this._observers.length;t++)this._observables[t].remove(this._observers[t]);this._observers=null,this._observables=null},t}(),Q=function(){function t(t){this._observers=new Array,this._onObserverAdded=null,this._eventState=new W(0),t&&(this._onObserverAdded=t)}return t.prototype.add=function(t,e,n,i,o){if(void 0===e&&(e=-1),void 0===n&&(n=!1),void 0===i&&(i=null),void 0===o&&(o=!1),!t)return null;var r=new Y(t,e,i);return r.unregisterOnNextCall=o,n?this._observers.unshift(r):this._observers.push(r),this._onObserverAdded&&this._onObserverAdded(r),r},t.prototype.addOnce=function(t){return this.add(t,void 0,void 0,void 0,!0)},t.prototype.remove=function(t){return!!t&&(-1!==this._observers.indexOf(t)&&(this._deferUnregister(t),!0))},t.prototype.removeCallback=function(t,e){for(var n=0;n<this._observers.length;n++)if(this._observers[n].callback===t&&(!e||e===this._observers[n].scope))return this._deferUnregister(this._observers[n]),!0;return!1},t.prototype.notifyObservers=function(t,e,n,i){var o,r;if(void 0===e&&(e=-1),!this._observers.length)return!0;var s=this._eventState;s.mask=e,s.target=n,s.currentTarget=i,s.skipNextObservers=!1,s.lastReturnValue=t;try{for(var a=h(this._observers),d=a.next();!d.done;d=a.next()){var l=d.value;if(!l._willBeUnregistered&&(l.mask&e&&(l.scope?s.lastReturnValue=l.callback.apply(l.scope,[t,s]):s.lastReturnValue=l.callback(t,s),l.unregisterOnNextCall&&this._deferUnregister(l)),s.skipNextObservers))return!1}}catch(t){o={error:t}}finally{try{d&&!d.done&&(r=a.return)&&r.call(a)}finally{if(o)throw o.error}}return!0},t.prototype.notifyObserversWithPromise=function(t,e,n,i){var o=this;void 0===e&&(e=-1);var r=Promise.resolve(t);if(!this._observers.length)return r;var s=this._eventState;return s.mask=e,s.target=n,s.currentTarget=i,s.skipNextObservers=!1,this._observers.forEach((function(n){s.skipNextObservers||n._willBeUnregistered||n.mask&e&&(r=n.scope?r.then((function(e){return s.lastReturnValue=e,n.callback.apply(n.scope,[t,s])})):r.then((function(e){return s.lastReturnValue=e,n.callback(t,s)})),n.unregisterOnNextCall&&o._deferUnregister(n))})),r.then((function(){return t}))},t.prototype.notifyObserver=function(t,e,n){void 0===n&&(n=-1);var i=this._eventState;i.mask=n,i.skipNextObservers=!1,t.callback(e,i)},t.prototype.hasObservers=function(){return this._observers.length>0},t.prototype.clear=function(){this._observers=new Array,this._onObserverAdded=null},t.prototype.clone=function(){var e=new t;return e._observers=this._observers.slice(0),e},t.prototype.hasSpecificMask=function(t){var e,n;void 0===t&&(t=-1);try{for(var i=h(this._observers),o=i.next();!o.done;o=i.next()){var r=o.value;if(r.mask&t||r.mask===t)return!0}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}return!1},t.prototype._deferUnregister=function(t){var e=this;t.unregisterOnNextCall=!1,t._willBeUnregistered=!0,G((function(){return a(e,void 0,void 0,(function(){return d(this,(function(e){return[2,this._remove(t)]}))}))}))},t.prototype._remove=function(t){if(!t)return!1;var e=this._observers.indexOf(t);return-1!==e&&(this._observers.splice(e,1),!0)},t}();var Z,J=function(){function t(t,e){this.uuid=t,this.payload=e}return t=r([x(),s(\"design:paramtypes\",[String,Object])],t)}(),K=function(){function t(t){this.payload=t}return t=r([x(),s(\"design:paramtypes\",[Object])],t)}(),$=function(){function t(t){this.payload=t}return t=r([x(),s(\"design:paramtypes\",[Object])],t)}();function tt(t){return function(){Z&&Z.subscribe(t)}}var et=new Q(tt(\"cameraModeChanged\")),nt=new Q(tt(\"idleStateChanged\")),it=new Q(tt(\"onEnterScene\")),ot=it,rt=new Q(tt(\"onLeaveScene\")),st=rt,at=new Q(tt(\"sceneStart\")),dt=new Q(tt(\"playerExpression\")),ht=new Q(tt(\"onPointerLock\")),lt=new Q(tt(\"videoEvent\")),pt=new Q(tt(\"profileChanged\")),ct=new Q(tt(\"playerConnected\")),ut=new Q(tt(\"playerDisconnected\")),yt=new Q(tt(\"onRealmChanged\")),ft=new Q(tt(\"playerClicked\"));function mt(t){(Z=t)&&Z.onEvent((function(t){switch(t.type){case\"onEnterScene\":return void it.notifyObservers(t.data);case\"onLeaveScene\":return void rt.notifyObservers(t.data);case\"cameraModeChanged\":return void et.notifyObservers(t.data);case\"idleStateChanged\":return void nt.notifyObservers(t.data);case\"sceneStart\":return void at.notifyObservers(t.data);case\"playerExpression\":return void dt.notifyObservers(t.data);case\"videoEvent\":var e=t.data,n=N.engine.disposableComponents[e.componentId];return n&&n.update(e),void lt.notifyObservers(e);case\"profileChanged\":return void pt.notifyObservers(t.data);case\"onPointerLock\":return void ht.notifyObservers(t.data);case\"playerConnected\":return void ct.notifyObservers(t.data);case\"playerDisconnected\":return void ut.notifyObservers(t.data);case\"onRealmChanged\":return void yt.notifyObservers(t.data);case\"playerClicked\":return void ft.notifyObservers(t.data)}}))}var gt=function(){function t(t){this.dcl=t,this.cachedComponents={}}return t.prototype.activate=function(t){var e=this;this.engine=t,t.eventManager.addListener(A,this,this.componentAdded),t.eventManager.addListener(T,this,this.componentRemoved),t.eventManager.addListener(z,this,this.disposableComponentCreated),t.eventManager.addListener(O,this,this.disposableComponentRemoved),t.eventManager.addListener(M,this,this.disposableComponentUpdated),t.eventManager.addListener(R,this,this.parentChanged);var n=t.rootEntity.uuid;this.dcl.addEntity(n),this.dcl.onUpdate((function(n){t.update(n),e.presentEntities()})),this.dcl.onEvent((function(e){var n=e.data;switch(e.type){case\"uuidEvent\":t.eventManager.fireEvent(new J(n.uuid,n.payload));break;case\"raycastResponse\":(\"HitFirst\"===n.queryType||\"HitAll\"===n.queryType)&&t.eventManager.fireEvent(new K(n));break;case\"actionButtonEvent\":t.eventManager.fireEvent(new $(n.payload))}}))},t.prototype.onAddEntity=function(t){if(t&&t.isAddedToEngine()){var e=t.uuid,n=t.getParent();for(var i in this.dcl.addEntity(e),n&&this.dcl.setParent(e,n.uuid),this.cachedComponents[e]={},t.components){var o=t.components[i],r=L(o);if(null!==r)if(U(o))this.dcl.attachEntityComponent(t.uuid,i,D(o));else{var s=JSON.stringify(o);this.dcl.updateEntityComponent(e,i,r,s),this.cachedComponents[e][i]=s}}}},t.prototype.onRemoveEntity=function(t){if(t.isAddedToEngine()){var e=t.uuid;this.dcl.removeEntity(e),delete this.cachedComponents[e]}},t.prototype.presentEntities=function(){for(var t in this.engine.entities){var e=this.engine.entities[t];for(var n in e.components){var i=L(s=e.components[n]);if(null!==i&&!U(s)){var o=this.getJsonIfDirty(e.uuid,n,s);o&&(this.dcl.updateEntityComponent(e.uuid,n,i,o),this.clearDirty(e.uuid,n,s,o))}}}for(var r in this.engine.disposableComponents){var s;(s=this.engine.disposableComponents[r])instanceof B&&s.dirty&&(this.dcl.componentUpdated(r,JSON.stringify(s)),s.dirty=!1)}},t.prototype.componentAdded=function(t){if(t.entity.isAddedToEngine()){var e=t.entity.components[t.componentName];if(U(e))this.dcl.attachEntityComponent(t.entity.uuid,t.componentName,D(e));else if(null!==t.classId){var n=JSON.stringify(e);this.dcl.updateEntityComponent(t.entity.uuid,t.componentName,t.classId,n),this.cachedComponents[t.entity.uuid][t.componentName]=n}}},t.prototype.componentRemoved=function(t){t.entity.isAddedToEngine()&&(this.dcl.removeEntityComponent(t.entity.uuid,t.componentName),delete this.cachedComponents[t.entity.uuid][t.componentName])},t.prototype.disposableComponentCreated=function(t){this.dcl.componentCreated(t.componentId,t.componentName,t.classId)},t.prototype.disposableComponentRemoved=function(t){this.dcl.componentDisposed(t.componentId)},t.prototype.disposableComponentUpdated=function(t){this.dcl.componentUpdated(t.componentId,JSON.stringify(t.component))},t.prototype.parentChanged=function(t){this.dcl.setParent(t.entity.uuid,t.parent?t.parent.uuid:\"0\")},t.prototype.getJsonIfDirty=function(t,e,n){var i=JSON.stringify(n);return i!==this.cachedComponents[t][e]&&i},t.prototype.clearDirty=function(t,e,n,i){this.cachedComponents[t][e]=i},t}(),vt=\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:{},_t={},bt={};!function(t){var e,n;Object.defineProperty(t,\"__esModule\",{value:!0}),t.RAD2DEG=t.DEG2RAD=t.Epsilon=t.ToLinearSpace=t.ToGammaSpace=t.Space=t.Orientation=void 0,(e=t.Orientation||(t.Orientation={}))[e.CW=0]=\"CW\",e[e.CCW=1]=\"CCW\",(n=t.Space||(t.Space={}))[n.LOCAL=0]=\"LOCAL\",n[n.WORLD=1]=\"WORLD\",n[n.BONE=2]=\"BONE\",t.ToGammaSpace=1/2.2,t.ToLinearSpace=2.2,t.Epsilon=1e-6,t.DEG2RAD=Math.PI/180,t.RAD2DEG=360/(2*Math.PI)}(bt);var xt={},wt={};Object.defineProperty(wt,\"__esModule\",{value:!0}),wt.buildArray=void 0,wt.buildArray=function(t,e){const n=[];for(let i=0;i<t;++i)n.push(e());return n};var Tt={},At={},Rt={},St={},Ct={};Object.defineProperty(Ct,\"__esModule\",{value:!0}),Ct.Scalar=void 0;class Et{static WithinEpsilon(t,e,n=1401298e-51){const i=t-e;return-n<=i&&i<=n}static ToHex(t){const e=t.toString(16);return t<=15?(\"0\"+e).toUpperCase():e.toUpperCase()}static Sign(t){const e=+t;return 0===e||isNaN(e)?e:e>0?1:-1}static Clamp(t,e=0,n=1){return Math.min(n,Math.max(e,t))}static Log2(t){return Math.log(t)*Math.LOG2E}static Repeat(t,e){return t-Math.floor(t/e)*e}static Normalize(t,e,n){return(t-e)/(n-e)}static Denormalize(t,e,n){return t*(n-e)+e}static DeltaAngle(t,e){let n=Et.Repeat(e-t,360);return n>180&&(n-=360),n}static PingPong(t,e){const n=Et.Repeat(t,2*e);return e-Math.abs(n-e)}static SmoothStep(t,e,n){let i=Et.Clamp(n);return i=-2*i*i*i+3*i*i,e*i+t*(1-i)}static MoveTowards(t,e,n){let i=0;return i=Math.abs(e-t)<=n?e:t+Et.Sign(e-t)*n,i}static MoveTowardsAngle(t,e,n){const i=Et.DeltaAngle(t,e);let o=0;return o=-n<i&&i<n?e:Et.MoveTowards(t,t+i,n),o}static Lerp(t,e,n){return t+(e-t)*n}static LerpAngle(t,e,n){let i=Et.Repeat(e-t,360);return i>180&&(i-=360),t+i*Et.Clamp(n)}static InverseLerp(t,e,n){let i=0;return i=t!==e?Et.Clamp((n-t)/(e-t)):0,i}static Hermite(t,e,n,i,o){const r=o*o,s=o*r;return t*(2*s-3*r+1)+n*(-2*s+3*r)+e*(s-2*r+o)+i*(s-r)}static RandomRange(t,e){return t===e?t:Math.random()*(e-t)+t}static RangeToPercent(t,e,n){return(t-e)/(n-e)}static PercentToRange(t,e,n){return(n-e)*t+e}static NormalizeRadians(t){return t-Et.TwoPi*Math.floor((t+Math.PI)/Et.TwoPi)}}Ct.Scalar=Et,Et.TwoPi=2*Math.PI,Object.defineProperty(St,\"__esModule\",{value:!0}),St.Vector4=void 0;const It=bt,zt=Ct,Ot=Tt;class Mt{constructor(t,e,n,i){this.x=t,this.y=e,this.z=n,this.w=i}static Add(t,e){return new Mt(t.x,t.y,t.z,t.w).addInPlace(e)}static FromArray(t,e=0){return new Mt(t[e],t[e+1],t[e+2],t[e+3])}static FromArrayToRef(t,e,n){n.x=t[e],n.y=t[e+1],n.z=t[e+2],n.w=t[e+3]}static FromFloatArrayToRef(t,e,n){Mt.FromArrayToRef(t,e,n)}static FromFloatsToRef(t,e,n,i,o){o.x=t,o.y=e,o.z=n,o.w=i}static Zero(){return new Mt(0,0,0,0)}static One(){return new Mt(1,1,1,1)}static Normalize(t){const e=Mt.Zero();return Mt.NormalizeToRef(t,e),e}static NormalizeToRef(t,e){e.copyFrom(t),e.normalize()}static Minimize(t,e){const n=new Mt(t.x,t.y,t.z,t.w);return n.minimizeInPlace(e),n}static Maximize(t,e){const n=new Mt(t.x,t.y,t.z,t.w);return n.maximizeInPlace(e),n}static Distance(t,e){return Math.sqrt(Mt.DistanceSquared(t,e))}static DistanceSquared(t,e){const n=t.x-e.x,i=t.y-e.y,o=t.z-e.z,r=t.w-e.w;return n*n+i*i+o*o+r*r}static Center(t,e){const n=Mt.Add(t,e);return n.scaleInPlace(.5),n}static TransformNormal(t,e){const n=Mt.Zero();return Mt.TransformNormalToRef(t,e,n),n}static TransformNormalToRef(t,e,n){const i=e.m,o=t.x*i[0]+t.y*i[4]+t.z*i[8],r=t.x*i[1]+t.y*i[5]+t.z*i[9],s=t.x*i[2]+t.y*i[6]+t.z*i[10];n.x=o,n.y=r,n.z=s,n.w=t.w}static TransformNormalFromFloatsToRef(t,e,n,i,o,r){const s=o.m;r.x=t*s[0]+e*s[4]+n*s[8],r.y=t*s[1]+e*s[5]+n*s[9],r.z=t*s[2]+e*s[6]+n*s[10],r.w=i}toString(){return\"{X: \"+this.x+\" Y:\"+this.y+\" Z:\"+this.z+\" W:\"+this.w+\"}\"}getClassName(){return\"Vector4\"}getHashCode(){let t=this.x||0;return t=397*t^(this.y||0),t=397*t^(this.z||0),t=397*t^(this.w||0),t}asArray(){const t=new Array;return this.toArray(t,0),t}toArray(t,e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,this}addInPlace(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this}add(t){return new Mt(this.x+t.x,this.y+t.y,this.z+t.z,this.w+t.w)}addToRef(t,e){return e.x=this.x+t.x,e.y=this.y+t.y,e.z=this.z+t.z,e.w=this.w+t.w,this}subtractInPlace(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this}subtract(t){return new Mt(this.x-t.x,this.y-t.y,this.z-t.z,this.w-t.w)}subtractToRef(t,e){return e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z,e.w=this.w-t.w,this}subtractFromFloats(t,e,n,i){return new Mt(this.x-t,this.y-e,this.z-n,this.w-i)}subtractFromFloatsToRef(t,e,n,i,o){return o.x=this.x-t,o.y=this.y-e,o.z=this.z-n,o.w=this.w-i,this}negate(){return new Mt(-this.x,-this.y,-this.z,-this.w)}scaleInPlace(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}scale(t){return new Mt(this.x*t,this.y*t,this.z*t,this.w*t)}scaleToRef(t,e){return e.x=this.x*t,e.y=this.y*t,e.z=this.z*t,e.w=this.w*t,this}scaleAndAddToRef(t,e){return e.x+=this.x*t,e.y+=this.y*t,e.z+=this.z*t,e.w+=this.w*t,this}equals(t){return t&&this.x===t.x&&this.y===t.y&&this.z===t.z&&this.w===t.w}equalsWithEpsilon(t,e=It.Epsilon){return t&&zt.Scalar.WithinEpsilon(this.x,t.x,e)&&zt.Scalar.WithinEpsilon(this.y,t.y,e)&&zt.Scalar.WithinEpsilon(this.z,t.z,e)&&zt.Scalar.WithinEpsilon(this.w,t.w,e)}equalsToFloats(t,e,n,i){return this.x===t&&this.y===e&&this.z===n&&this.w===i}multiplyInPlace(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiply(t){return new Mt(this.x*t.x,this.y*t.y,this.z*t.z,this.w*t.w)}multiplyToRef(t,e){return e.x=this.x*t.x,e.y=this.y*t.y,e.z=this.z*t.z,e.w=this.w*t.w,this}multiplyByFloats(t,e,n,i){return new Mt(this.x*t,this.y*e,this.z*n,this.w*i)}divide(t){return new Mt(this.x/t.x,this.y/t.y,this.z/t.z,this.w/t.w)}divideToRef(t,e){return e.x=this.x/t.x,e.y=this.y/t.y,e.z=this.z/t.z,e.w=this.w/t.w,this}divideInPlace(t){return this.divideToRef(t,this)}minimizeInPlace(t){return t.x<this.x&&(this.x=t.x),t.y<this.y&&(this.y=t.y),t.z<this.z&&(this.z=t.z),t.w<this.w&&(this.w=t.w),this}maximizeInPlace(t){return t.x>this.x&&(this.x=t.x),t.y>this.y&&(this.y=t.y),t.z>this.z&&(this.z=t.z),t.w>this.w&&(this.w=t.w),this}floor(){return new Mt(Math.floor(this.x),Math.floor(this.y),Math.floor(this.z),Math.floor(this.w))}fract(){return new Mt(this.x-Math.floor(this.x),this.y-Math.floor(this.y),this.z-Math.floor(this.z),this.w-Math.floor(this.w))}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}lengthSquared(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}normalize(){const t=this.length();return 0===t?this:this.scaleInPlace(1/t)}toVector3(){return new Ot.Vector3(this.x,this.y,this.z)}clone(){return new Mt(this.x,this.y,this.z,this.w)}copyFrom(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}copyFromFloats(t,e,n,i){return this.x=t,this.y=e,this.z=n,this.w=i,this}set(t,e,n,i){return this.copyFromFloats(t,e,n,i)}setAll(t){return this.x=this.y=this.z=this.w=t,this}}St.Vector4=Mt,Object.defineProperty(Rt,\"__esModule\",{value:!0}),Rt.Matrix=void 0;const Pt=Tt,Nt=At,Ft=xt,Lt=St;class Dt{constructor(){this._isIdentity=!1,this._isIdentityDirty=!0,this._isIdentity3x2=!0,this._isIdentity3x2Dirty=!0,this._m=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],this._updateIdentityStatus(!1)}get m(){return this._m}static get IdentityReadOnly(){return Dt._identityReadOnly}static FromArray(t,e=0){const n=new Dt;return Dt.FromArrayToRef(t,e,n),n}static FromArrayToRef(t,e,n){for(let i=0;i<16;i++)n._m[i]=t[i+e];n._markAsUpdated()}static FromFloatArrayToRefScaled(t,e,n,i){for(let o=0;o<16;o++)i._m[o]=t[o+e]*n;i._markAsUpdated()}static FromValuesToRef(t,e,n,i,o,r,s,a,d,h,l,p,c,u,y,f,m){const g=m._m;g[0]=t,g[1]=e,g[2]=n,g[3]=i,g[4]=o,g[5]=r,g[6]=s,g[7]=a,g[8]=d,g[9]=h,g[10]=l,g[11]=p,g[12]=c,g[13]=u,g[14]=y,g[15]=f,m._markAsUpdated()}static FromValues(t,e,n,i,o,r,s,a,d,h,l,p,c,u,y,f){const m=new Dt,g=m._m;return g[0]=t,g[1]=e,g[2]=n,g[3]=i,g[4]=o,g[5]=r,g[6]=s,g[7]=a,g[8]=d,g[9]=h,g[10]=l,g[11]=p,g[12]=c,g[13]=u,g[14]=y,g[15]=f,m._markAsUpdated(),m}static Compose(t,e,n){const i=new Dt;return Dt.ComposeToRef(t,e,n,i),i}static ComposeToRef(t,e,n,i){Dt.ScalingToRef(t.x,t.y,t.z,Ft.MathTmp.Matrix[1]),e.toRotationMatrix(Ft.MathTmp.Matrix[0]),Ft.MathTmp.Matrix[1].multiplyToRef(Ft.MathTmp.Matrix[0],i),i.setTranslation(n)}static Identity(){const t=Dt.FromValues(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return t._updateIdentityStatus(!0),t}static IdentityToRef(t){Dt.FromValuesToRef(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,t),t._updateIdentityStatus(!0)}static Zero(){const t=Dt.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);return t._updateIdentityStatus(!1),t}static RotationX(t){const e=new Dt;return Dt.RotationXToRef(t,e),e}static Invert(t){const e=new Dt;return t.invertToRef(e),e}static RotationXToRef(t,e){const n=Math.sin(t),i=Math.cos(t);Dt.FromValuesToRef(1,0,0,0,0,i,n,0,0,-n,i,0,0,0,0,1,e),e._updateIdentityStatus(1===i&&0===n)}static RotationY(t){const e=new Dt;return Dt.RotationYToRef(t,e),e}static RotationYToRef(t,e){const n=Math.sin(t),i=Math.cos(t);Dt.FromValuesToRef(i,0,-n,0,0,1,0,0,n,0,i,0,0,0,0,1,e),e._updateIdentityStatus(1===i&&0===n)}static RotationZ(t){const e=new Dt;return Dt.RotationZToRef(t,e),e}static RotationZToRef(t,e){const n=Math.sin(t),i=Math.cos(t);Dt.FromValuesToRef(i,n,0,0,-n,i,0,0,0,0,1,0,0,0,0,1,e),e._updateIdentityStatus(1===i&&0===n)}static RotationAxis(t,e){const n=new Dt;return Dt.RotationAxisToRef(t,e,n),n}static RotationAxisToRef(t,e,n){const i=Math.sin(-e),o=Math.cos(-e),r=1-o;t.normalize();const s=n._m;s[0]=t.x*t.x*r+o,s[1]=t.x*t.y*r-t.z*i,s[2]=t.x*t.z*r+t.y*i,s[3]=0,s[4]=t.y*t.x*r+t.z*i,s[5]=t.y*t.y*r+o,s[6]=t.y*t.z*r-t.x*i,s[7]=0,s[8]=t.z*t.x*r-t.y*i,s[9]=t.z*t.y*r+t.x*i,s[10]=t.z*t.z*r+o,s[11]=0,s[12]=0,s[13]=0,s[14]=0,s[15]=1,n._markAsUpdated()}static RotationYawPitchRoll(t,e,n){const i=new Dt;return Dt.RotationYawPitchRollToRef(t,e,n,i),i}static RotationYawPitchRollToRef(t,e,n,i){Nt.Quaternion.RotationYawPitchRollToRef(t,e,n,Ft.MathTmp.Quaternion[0]),Ft.MathTmp.Quaternion[0].toRotationMatrix(i)}static Scaling(t,e,n){const i=new Dt;return Dt.ScalingToRef(t,e,n,i),i}static ScalingToRef(t,e,n,i){Dt.FromValuesToRef(t,0,0,0,0,e,0,0,0,0,n,0,0,0,0,1,i),i._updateIdentityStatus(1===t&&1===e&&1===n)}static Translation(t,e,n){const i=new Dt;return Dt.TranslationToRef(t,e,n,i),i}static TranslationToRef(t,e,n,i){Dt.FromValuesToRef(1,0,0,0,0,1,0,0,0,0,1,0,t,e,n,1,i),i._updateIdentityStatus(0===t&&0===e&&0===n)}static Lerp(t,e,n){const i=new Dt;return Dt.LerpToRef(t,e,n,i),i}static LerpToRef(t,e,n,i){for(let o=0;o<16;o++)i._m[o]=t._m[o]*(1-n)+e._m[o]*n;i._markAsUpdated()}static DecomposeLerp(t,e,n){const i=new Dt;return Dt.DecomposeLerpToRef(t,e,n,i),i}static DecomposeLerpToRef(t,e,n,i){const o=Ft.MathTmp.Vector3[0],r=Ft.MathTmp.Quaternion[0],s=Ft.MathTmp.Vector3[1];t.decompose(o,r,s);const a=Ft.MathTmp.Vector3[2],d=Ft.MathTmp.Quaternion[1],h=Ft.MathTmp.Vector3[3];e.decompose(a,d,h);const l=Ft.MathTmp.Vector3[4];Pt.Vector3.LerpToRef(o,a,n,l);const p=Ft.MathTmp.Quaternion[2];Nt.Quaternion.SlerpToRef(r,d,n,p);const c=Ft.MathTmp.Vector3[5];Pt.Vector3.LerpToRef(s,h,n,c),Dt.ComposeToRef(l,p,c,i)}static LookAtLH(t,e,n){const i=new Dt;return Dt.LookAtLHToRef(t,e,n,i),i}static LookAtLHToRef(t,e,n,i){const o=Ft.MathTmp.Vector3[0],r=Ft.MathTmp.Vector3[1],s=Ft.MathTmp.Vector3[2];e.subtractToRef(t,s),s.normalize(),Pt.Vector3.CrossToRef(n,s,o);const a=o.lengthSquared();0===a?o.x=1:o.normalizeFromLength(Math.sqrt(a)),Pt.Vector3.CrossToRef(s,o,r),r.normalize();const d=-Pt.Vector3.Dot(o,t),h=-Pt.Vector3.Dot(r,t),l=-Pt.Vector3.Dot(s,t);Dt.FromValuesToRef(o.x,r.x,s.x,0,o.y,r.y,s.y,0,o.z,r.z,s.z,0,d,h,l,1,i)}static LookAtRH(t,e,n){const i=new Dt;return Dt.LookAtRHToRef(t,e,n,i),i}static LookAtRHToRef(t,e,n,i){const o=Ft.MathTmp.Vector3[0],r=Ft.MathTmp.Vector3[1],s=Ft.MathTmp.Vector3[2];t.subtractToRef(e,s),s.normalize(),Pt.Vector3.CrossToRef(n,s,o);const a=o.lengthSquared();0===a?o.x=1:o.normalizeFromLength(Math.sqrt(a)),Pt.Vector3.CrossToRef(s,o,r),r.normalize();const d=-Pt.Vector3.Dot(o,t),h=-Pt.Vector3.Dot(r,t),l=-Pt.Vector3.Dot(s,t);Dt.FromValuesToRef(o.x,r.x,s.x,0,o.y,r.y,s.y,0,o.z,r.z,s.z,0,d,h,l,1,i)}static OrthoLH(t,e,n,i){const o=new Dt;return Dt.OrthoLHToRef(t,e,n,i,o),o}static OrthoLHToRef(t,e,n,i,o){const r=2/t,s=2/e,a=2/(i-n),d=-(i+n)/(i-n);Dt.FromValuesToRef(r,0,0,0,0,s,0,0,0,0,a,0,0,0,d,1,o),o._updateIdentityStatus(1===r&&1===s&&1===a&&0===d)}static OrthoOffCenterLH(t,e,n,i,o,r){const s=new Dt;return Dt.OrthoOffCenterLHToRef(t,e,n,i,o,r,s),s}static OrthoOffCenterLHToRef(t,e,n,i,o,r,s){const a=2/(e-t),d=2/(i-n),h=2/(r-o),l=-(r+o)/(r-o),p=(t+e)/(t-e),c=(i+n)/(n-i);Dt.FromValuesToRef(a,0,0,0,0,d,0,0,0,0,h,0,p,c,l,1,s),s._markAsUpdated()}static OrthoOffCenterRH(t,e,n,i,o,r){const s=new Dt;return Dt.OrthoOffCenterRHToRef(t,e,n,i,o,r,s),s}static OrthoOffCenterRHToRef(t,e,n,i,o,r,s){Dt.OrthoOffCenterLHToRef(t,e,n,i,o,r,s),s._m[10]*=-1}static PerspectiveLH(t,e,n,i){const o=new Dt,r=2*n/t,s=2*n/e,a=(i+n)/(i-n),d=-2*i*n/(i-n);return Dt.FromValuesToRef(r,0,0,0,0,s,0,0,0,0,a,1,0,0,d,0,o),o._updateIdentityStatus(!1),o}static PerspectiveFovLH(t,e,n,i){const o=new Dt;return Dt.PerspectiveFovLHToRef(t,e,n,i,o),o}static PerspectiveFovLHToRef(t,e,n,i,o,r=!0){const s=n,a=i,d=1/Math.tan(.5*t),h=r?d/e:d,l=r?d:d*e,p=(a+s)/(a-s),c=-2*a*s/(a-s);Dt.FromValuesToRef(h,0,0,0,0,l,0,0,0,0,p,1,0,0,c,0,o),o._updateIdentityStatus(!1)}static PerspectiveFovRH(t,e,n,i){const o=new Dt;return Dt.PerspectiveFovRHToRef(t,e,n,i,o),o}static PerspectiveFovRHToRef(t,e,n,i,o,r=!0){const s=n,a=i,d=1/Math.tan(.5*t),h=r?d/e:d,l=r?d:d*e,p=-(a+s)/(a-s),c=-2*a*s/(a-s);Dt.FromValuesToRef(h,0,0,0,0,l,0,0,0,0,p,-1,0,0,c,0,o),o._updateIdentityStatus(!1)}static PerspectiveFovWebVRToRef(t,e,n,i,o=!1){const r=o?-1:1,s=Math.tan(t.upDegrees*Math.PI/180),a=Math.tan(t.downDegrees*Math.PI/180),d=Math.tan(t.leftDegrees*Math.PI/180),h=Math.tan(t.rightDegrees*Math.PI/180),l=2/(d+h),p=2/(s+a),c=i._m;c[0]=l,c[1]=c[2]=c[3]=c[4]=0,c[5]=p,c[6]=c[7]=0,c[8]=(d-h)*l*.5,c[9]=-(s-a)*p*.5,c[10]=-n/(e-n),c[11]=1*r,c[12]=c[13]=c[15]=0,c[14]=-2*n*e/(n-e),i._markAsUpdated()}static GetAsMatrix2x2(t){return[t._m[0],t._m[1],t._m[4],t._m[5]]}static GetAsMatrix3x3(t){return[t._m[0],t._m[1],t._m[2],t._m[4],t._m[5],t._m[6],t._m[8],t._m[9],t._m[10]]}static Transpose(t){const e=new Dt;return Dt.TransposeToRef(t,e),e}static TransposeToRef(t,e){const n=e._m,i=t._m;n[0]=i[0],n[1]=i[4],n[2]=i[8],n[3]=i[12],n[4]=i[1],n[5]=i[5],n[6]=i[9],n[7]=i[13],n[8]=i[2],n[9]=i[6],n[10]=i[10],n[11]=i[14],n[12]=i[3],n[13]=i[7],n[14]=i[11],n[15]=i[15],e._updateIdentityStatus(t._isIdentity,t._isIdentityDirty)}static Reflection(t){const e=new Dt;return Dt.ReflectionToRef(t,e),e}static ReflectionToRef(t,e){t.normalize();const n=t.normal.x,i=t.normal.y,o=t.normal.z,r=-2*n,s=-2*i,a=-2*o;Dt.FromValuesToRef(r*n+1,s*n,a*n,0,r*i,s*i+1,a*i,0,r*o,s*o,a*o+1,0,r*t.d,s*t.d,a*t.d,1,e)}static FromXYZAxesToRef(t,e,n,i){Dt.FromValuesToRef(t.x,t.y,t.z,0,e.x,e.y,e.z,0,n.x,n.y,n.z,0,0,0,0,1,i)}static FromQuaternionToRef(t,e){const n=t.x*t.x,i=t.y*t.y,o=t.z*t.z,r=t.x*t.y,s=t.z*t.w,a=t.z*t.x,d=t.y*t.w,h=t.y*t.z,l=t.x*t.w;e._m[0]=1-2*(i+o),e._m[1]=2*(r+s),e._m[2]=2*(a-d),e._m[3]=0,e._m[4]=2*(r-s),e._m[5]=1-2*(o+n),e._m[6]=2*(h+l),e._m[7]=0,e._m[8]=2*(a+d),e._m[9]=2*(h-l),e._m[10]=1-2*(i+n),e._m[11]=0,e._m[12]=0,e._m[13]=0,e._m[14]=0,e._m[15]=1,e._markAsUpdated()}_markAsUpdated(){this.updateFlag=Dt._updateFlagSeed++,this._isIdentity=!1,this._isIdentity3x2=!1,this._isIdentityDirty=!0,this._isIdentity3x2Dirty=!0}isIdentity(){if(this._isIdentityDirty){this._isIdentityDirty=!1;const t=this._m;this._isIdentity=1===t[0]&&0===t[1]&&0===t[2]&&0===t[3]&&0===t[4]&&1===t[5]&&0===t[6]&&0===t[7]&&0===t[8]&&0===t[9]&&1===t[10]&&0===t[11]&&0===t[12]&&0===t[13]&&0===t[14]&&1===t[15]}return this._isIdentity}isIdentityAs3x2(){return this._isIdentity3x2Dirty&&(this._isIdentity3x2Dirty=!1,1!==this._m[0]||1!==this._m[5]||1!==this._m[15]||0!==this._m[1]||0!==this._m[2]||0!==this._m[3]||0!==this._m[4]||0!==this._m[6]||0!==this._m[7]||0!==this._m[8]||0!==this._m[9]||0!==this._m[10]||0!==this._m[11]||0!==this._m[12]||0!==this._m[13]||0!==this._m[14]?this._isIdentity3x2=!1:this._isIdentity3x2=!0),this._isIdentity3x2}determinant(){if(!0===this._isIdentity)return 1;const t=this._m,e=t[0],n=t[1],i=t[2],o=t[3],r=t[4],s=t[5],a=t[6],d=t[7],h=t[8],l=t[9],p=t[10],c=t[11],u=t[12],y=t[13],f=t[14],m=t[15],g=p*m-f*c,v=l*m-y*c,_=l*f-y*p,b=h*m-u*c,x=h*f-p*u,w=h*y-u*l;return e*+(s*g-a*v+d*_)+n*-(r*g-a*b+d*x)+i*+(r*v-s*b+d*w)+o*-(r*_-s*x+a*w)}toArray(){return this._m}asArray(){return this._m}invert(){return this.invertToRef(this),this}reset(){return Dt.FromValuesToRef(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,this),this._updateIdentityStatus(!1),this}add(t){const e=new Dt;return this.addToRef(t,e),e}addToRef(t,e){for(let n=0;n<16;n++)e._m[n]=this._m[n]+t._m[n];return e._markAsUpdated(),this}addToSelf(t){for(let e=0;e<16;e++)this._m[e]+=t._m[e];return this._markAsUpdated(),this}invertToRef(t){if(!0===this._isIdentity)return Dt.IdentityToRef(t),this;const e=this._m,n=e[0],i=e[1],o=e[2],r=e[3],s=e[4],a=e[5],d=e[6],h=e[7],l=e[8],p=e[9],c=e[10],u=e[11],y=e[12],f=e[13],m=e[14],g=e[15],v=c*g-m*u,_=p*g-f*u,b=p*m-f*c,x=l*g-y*u,w=l*m-c*y,T=l*f-y*p,A=+(a*v-d*_+h*b),R=-(s*v-d*x+h*w),S=+(s*_-a*x+h*T),C=-(s*b-a*w+d*T),E=n*A+i*R+o*S+r*C;if(0===E)return t.copyFrom(this),this;const I=1/E,z=d*g-m*h,O=a*g-f*h,M=a*m-f*d,P=s*g-y*h,N=s*m-y*d,F=s*f-y*a,L=d*u-c*h,D=a*u-p*h,B=a*c-p*d,U=s*u-l*h,V=s*c-l*d,H=s*p-l*a,k=-(i*v-o*_+r*b),j=+(n*v-o*x+r*w),G=-(n*_-i*x+r*T),q=+(n*b-i*w+o*T),W=+(i*z-o*O+r*M),Y=-(n*z-o*P+r*N),X=+(n*O-i*P+r*F),Q=-(n*M-i*N+o*F),Z=-(i*L-o*D+r*B),J=+(n*L-o*U+r*V),K=-(n*D-i*U+r*H),$=+(n*B-i*V+o*H);return Dt.FromValuesToRef(A*I,k*I,W*I,Z*I,R*I,j*I,Y*I,J*I,S*I,G*I,X*I,K*I,C*I,q*I,Q*I,$*I,t),this}addAtIndex(t,e){return this._m[t]+=e,this._markAsUpdated(),this}multiplyAtIndex(t,e){return this._m[t]*=e,this._markAsUpdated(),this}setTranslationFromFloats(t,e,n){return this._m[12]=t,this._m[13]=e,this._m[14]=n,this._markAsUpdated(),this}setTranslation(t){return this.setTranslationFromFloats(t.x,t.y,t.z)}getTranslation(){return new Pt.Vector3(this._m[12],this._m[13],this._m[14])}getTranslationToRef(t){return t.x=this._m[12],t.y=this._m[13],t.z=this._m[14],this}removeRotationAndScaling(){const t=this.m;return Dt.FromValuesToRef(1,0,0,0,0,1,0,0,0,0,1,0,t[12],t[13],t[14],t[15],this),this._updateIdentityStatus(0===t[12]&&0===t[13]&&0===t[14]&&1===t[15]),this}multiply(t){const e=new Dt;return this.multiplyToRef(t,e),e}copyFrom(t){t.copyToArray(this._m);const e=t;return this._updateIdentityStatus(e._isIdentity,e._isIdentityDirty,e._isIdentity3x2,e._isIdentity3x2Dirty),this}copyToArray(t,e=0){for(let n=0;n<16;n++)t[e+n]=this._m[n];return this}multiplyToRef(t,e){return this._isIdentity?(e.copyFrom(t),this):t._isIdentity?(e.copyFrom(this),this):(this.multiplyToArray(t,e._m,0),e._markAsUpdated(),this)}multiplyToArray(t,e,n){const i=this._m,o=t.m,r=i[0],s=i[1],a=i[2],d=i[3],h=i[4],l=i[5],p=i[6],c=i[7],u=i[8],y=i[9],f=i[10],m=i[11],g=i[12],v=i[13],_=i[14],b=i[15],x=o[0],w=o[1],T=o[2],A=o[3],R=o[4],S=o[5],C=o[6],E=o[7],I=o[8],z=o[9],O=o[10],M=o[11],P=o[12],N=o[13],F=o[14],L=o[15];return e[n]=r*x+s*R+a*I+d*P,e[n+1]=r*w+s*S+a*z+d*N,e[n+2]=r*T+s*C+a*O+d*F,e[n+3]=r*A+s*E+a*M+d*L,e[n+4]=h*x+l*R+p*I+c*P,e[n+5]=h*w+l*S+p*z+c*N,e[n+6]=h*T+l*C+p*O+c*F,e[n+7]=h*A+l*E+p*M+c*L,e[n+8]=u*x+y*R+f*I+m*P,e[n+9]=u*w+y*S+f*z+m*N,e[n+10]=u*T+y*C+f*O+m*F,e[n+11]=u*A+y*E+f*M+m*L,e[n+12]=g*x+v*R+_*I+b*P,e[n+13]=g*w+v*S+_*z+b*N,e[n+14]=g*T+v*C+_*O+b*F,e[n+15]=g*A+v*E+_*M+b*L,this}equals(t){const e=t;if(!e)return!1;if((this._isIdentity||e._isIdentity)&&!this._isIdentityDirty&&!e._isIdentityDirty)return this._isIdentity&&e._isIdentity;const n=this.m,i=e.m;return n[0]===i[0]&&n[1]===i[1]&&n[2]===i[2]&&n[3]===i[3]&&n[4]===i[4]&&n[5]===i[5]&&n[6]===i[6]&&n[7]===i[7]&&n[8]===i[8]&&n[9]===i[9]&&n[10]===i[10]&&n[11]===i[11]&&n[12]===i[12]&&n[13]===i[13]&&n[14]===i[14]&&n[15]===i[15]}clone(){const t=new Dt;return t.copyFrom(this),t}getClassName(){return\"Matrix\"}getHashCode(){let t=this._m[0]||0;for(let e=1;e<16;e++)t=397*t^(this._m[e]||0);return t}decompose(t,e,n){if(this._isIdentity)return n&&n.setAll(0),t&&t.setAll(1),e&&e.copyFromFloats(0,0,0,1),!0;const i=this._m;n&&n.copyFromFloats(i[12],i[13],i[14]);const o=t||Ft.MathTmp.Vector3[0];if(o.x=Math.sqrt(i[0]*i[0]+i[1]*i[1]+i[2]*i[2]),o.y=Math.sqrt(i[4]*i[4]+i[5]*i[5]+i[6]*i[6]),o.z=Math.sqrt(i[8]*i[8]+i[9]*i[9]+i[10]*i[10]),this.determinant()<=0&&(o.y*=-1),0===o.x||0===o.y||0===o.z)return e&&e.copyFromFloats(0,0,0,1),!1;if(e){const t=1/o.x,n=1/o.y,r=1/o.z;Dt.FromValuesToRef(i[0]*t,i[1]*t,i[2]*t,0,i[4]*n,i[5]*n,i[6]*n,0,i[8]*r,i[9]*r,i[10]*r,0,0,0,0,1,Ft.MathTmp.Matrix[0]),Nt.Quaternion.FromRotationMatrixToRef(Ft.MathTmp.Matrix[0],e)}return!0}getRow(t){if(t<0||t>3)return null;const e=4*t;return new Lt.Vector4(this._m[e+0],this._m[e+1],this._m[e+2],this._m[e+3])}setRow(t,e){return this.setRowFromFloats(t,e.x,e.y,e.z,e.w)}transpose(){return Dt.Transpose(this)}transposeToRef(t){return Dt.TransposeToRef(this,t),this}setRowFromFloats(t,e,n,i,o){if(t<0||t>3)return this;const r=4*t;return this._m[r+0]=e,this._m[r+1]=n,this._m[r+2]=i,this._m[r+3]=o,this._markAsUpdated(),this}scale(t){const e=new Dt;return this.scaleToRef(t,e),e}scaleToRef(t,e){for(let n=0;n<16;n++)e._m[n]=this._m[n]*t;return e._markAsUpdated(),this}scaleAndAddToRef(t,e){for(let n=0;n<16;n++)e._m[n]+=this._m[n]*t;return e._markAsUpdated(),this}toNormalMatrix(t){const e=Ft.MathTmp.Matrix[0];this.invertToRef(e),e.transposeToRef(t);const n=t._m;Dt.FromValuesToRef(n[0],n[1],n[2],0,n[4],n[5],n[6],0,n[8],n[9],n[10],0,0,0,0,1,t)}getRotationMatrix(){const t=new Dt;return this.getRotationMatrixToRef(t),t}getRotationMatrixToRef(t){const e=Ft.MathTmp.Vector3[0];if(!this.decompose(e))return Dt.IdentityToRef(t),this;const n=this._m,i=1/e.x,o=1/e.y,r=1/e.z;return Dt.FromValuesToRef(n[0]*i,n[1]*i,n[2]*i,0,n[4]*o,n[5]*o,n[6]*o,0,n[8]*r,n[9]*r,n[10]*r,0,0,0,0,1,t),this}toggleModelMatrixHandInPlace(){const t=this._m;t[2]*=-1,t[6]*=-1,t[8]*=-1,t[9]*=-1,t[14]*=-1,this._markAsUpdated()}toggleProjectionMatrixHandInPlace(){const t=this._m;t[8]*=-1,t[9]*=-1,t[10]*=-1,t[11]*=-1,this._markAsUpdated()}_updateIdentityStatus(t,e=!1,n=!1,i=!0){this.updateFlag=Dt._updateFlagSeed++,this._isIdentity=t,this._isIdentity3x2=t||n,this._isIdentityDirty=!this._isIdentity&&e,this._isIdentity3x2Dirty=!this._isIdentity3x2&&i}}Rt.Matrix=Dt,Dt._updateFlagSeed=0,Dt._identityReadOnly=Dt.Identity(),Object.defineProperty(At,\"__esModule\",{value:!0}),At.Quaternion=void 0;const Bt=Rt,Ut=Tt,Vt=xt,Ht=bt,kt=Ct;class jt{constructor(t=0,e=0,n=0,i=1){this.x=t,this.y=e,this.z=n,this.w=i}static FromRotationMatrix(t){const e=new jt;return jt.FromRotationMatrixToRef(t,e),e}static FromRotationMatrixToRef(t,e){const n=t.m,i=n[0],o=n[4],r=n[8],s=n[1],a=n[5],d=n[9],h=n[2],l=n[6],p=n[10],c=i+a+p;let u;c>0?(u=.5/Math.sqrt(c+1),e.w=.25/u,e.x=(l-d)*u,e.y=(r-h)*u,e.z=(s-o)*u):i>a&&i>p?(u=2*Math.sqrt(1+i-a-p),e.w=(l-d)/u,e.x=.25*u,e.y=(o+s)/u,e.z=(r+h)/u):a>p?(u=2*Math.sqrt(1+a-i-p),e.w=(r-h)/u,e.x=(o+s)/u,e.y=.25*u,e.z=(d+l)/u):(u=2*Math.sqrt(1+p-i-a),e.w=(s-o)/u,e.x=(r+h)/u,e.y=(d+l)/u,e.z=.25*u)}static Dot(t,e){return t.x*e.x+t.y*e.y+t.z*e.z+t.w*e.w}static AreClose(t,e){return jt.Dot(t,e)>=0}static Zero(){return new jt(0,0,0,0)}static Inverse(t){return new jt(-t.x,-t.y,-t.z,t.w)}static IsIdentity(t){return t&&0===t.x&&0===t.y&&0===t.z&&1===t.w}static RotationAxis(t,e){const n=e*Ht.DEG2RAD;return jt.RotationAxisToRef(t,n,new jt)}static RotationAxisToRef(t,e,n){const i=e*Ht.DEG2RAD,o=Math.sin(i/2);return t.normalize(),n.w=Math.cos(i/2),n.x=t.x*o,n.y=t.y*o,n.z=t.z*o,n}static FromArray(t,e=0){return new jt(t[e],t[e+1],t[e+2],t[e+3])}static FromEulerAnglesRef(t,e,n,i){return jt.RotationYawPitchRollToRef(e*Ht.DEG2RAD,t*Ht.DEG2RAD,n*Ht.DEG2RAD,i)}static RotationYawPitchRoll(t,e,n){const i=new jt;return jt.RotationYawPitchRollToRef(t,e,n,i),i}static RotationYawPitchRollToRef(t,e,n,i){const o=.5*e,r=.5*t,s=.5*n,a=Math.cos(o),d=Math.cos(r),h=Math.cos(s),l=Math.sin(o),p=Math.sin(r),c=Math.sin(s);i.x=d*l*h+p*a*c,i.y=p*a*h-d*l*c,i.z=d*a*c-p*l*h,i.w=d*a*h+p*l*c}static RotationAlphaBetaGamma(t,e,n){const i=new jt;return jt.RotationAlphaBetaGammaToRef(t,e,n,i),i}static RotationAlphaBetaGammaToRef(t,e,n,i){const o=.5*(n+t),r=.5*(n-t),s=.5*e;i.x=Math.cos(r)*Math.sin(s),i.y=Math.sin(r)*Math.sin(s),i.z=Math.sin(o)*Math.cos(s),i.w=Math.cos(o)*Math.cos(s)}static RotationQuaternionFromAxis(t,e,n){const i=new jt(0,0,0,0);return jt.RotationQuaternionFromAxisToRef(t,e,n,i),i}static RotationQuaternionFromAxisToRef(t,e,n,i){const o=Vt.MathTmp.Matrix[0];Bt.Matrix.FromXYZAxesToRef(t.normalize(),e.normalize(),n.normalize(),o),jt.FromRotationMatrixToRef(o,i)}static Slerp(t,e,n){const i=jt.Identity;return jt.SlerpToRef(t,e,n,i),i}static SlerpToRef(t,e,n,i){let o,r,s=t.x*e.x+t.y*e.y+t.z*e.z+t.w*e.w,a=!1;if(s<0&&(a=!0,s=-s),s>.999999)r=1-n,o=a?-n:n;else{const t=Math.acos(s),e=1/Math.sin(t);r=Math.sin((1-n)*t)*e,o=a?-Math.sin(n*t)*e:Math.sin(n*t)*e}i.x=r*t.x+o*e.x,i.y=r*t.y+o*e.y,i.z=r*t.z+o*e.z,i.w=r*t.w+o*e.w}static Hermite(t,e,n,i,o){const r=o*o,s=o*r,a=2*s-3*r+1,d=-2*s+3*r,h=s-2*r+o,l=s-r,p=t.x*a+n.x*d+e.x*h+i.x*l,c=t.y*a+n.y*d+e.y*h+i.y*l,u=t.z*a+n.z*d+e.z*h+i.z*l,y=t.w*a+n.w*d+e.w*h+i.w*l;return new jt(p,c,u,y)}static get Identity(){return new jt(0,0,0,1)}static Angle(t,e){const n=jt.Dot(t,e);return 2*Math.acos(Math.min(Math.abs(n),1))*Ht.RAD2DEG}static Euler(t,e,n){return jt.RotationYawPitchRoll(e*Ht.DEG2RAD,t*Ht.DEG2RAD,n*Ht.DEG2RAD)}static LookRotation(t,e=Vt.MathTmp.staticUp){const n=Ut.Vector3.Normalize(t),i=Ut.Vector3.Normalize(Ut.Vector3.Cross(e,n)),o=Ut.Vector3.Cross(n,i),r=i.x,s=i.y,a=i.z,d=o.x,h=o.y,l=o.z,p=n.x,c=n.y,u=n.z,y=r+h+u,f=new jt;if(y>0){let t=Math.sqrt(y+1);return f.w=.5*t,t=.5/t,f.x=(l-c)*t,f.y=(p-a)*t,f.z=(s-d)*t,f}if(r>=h&&r>=u){const t=Math.sqrt(1+r-h-u),e=.5/t;return f.x=.5*t,f.y=(s+d)*e,f.z=(a+p)*e,f.w=(l-c)*e,f}if(h>u){const t=Math.sqrt(1+h-r-u),e=.5/t;return f.x=(d+s)*e,f.y=.5*t,f.z=(c+l)*e,f.w=(p-a)*e,f}const m=Math.sqrt(1+u-r-h),g=.5/m;return f.x=(p+a)*g,f.y=(c+l)*g,f.z=.5*m,f.w=(s-d)*g,f}static RotateTowards(t,e,n){const i=jt.Angle(t,e);if(0===i)return e;const o=Math.min(1,n/i);return jt.Slerp(t,e,o)}static FromToRotation(t,e,n=Vt.MathTmp.staticUp){const i=t.normalize(),o=e.normalize(),r=Ut.Vector3.Cross(i,o),s=Math.sqrt(i.lengthSquared()*o.lengthSquared())+Ut.Vector3.Dot(i,o);return r.lengthSquared()<1e-4?Math.abs(s)<1e-4?new jt(n.x,n.y,n.z,0).normalized:jt.Identity:new jt(r.x,r.y,r.z,s).normalized}get normalized(){return this.normalize()}setFromToRotation(t,e,n=Vt.MathTmp.staticUp){const i=jt.FromToRotation(t,e,n);this.x=i.x,this.y=i.y,this.z=i.z,this.w=i.w}set eulerAngles(t){this.setEuler(t.x,t.y,t.z)}get eulerAngles(){const t=new Ut.Vector3,e=this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w,n=this.x*this.w-this.y*this.z;return n>.4995*e?(t.x=Math.PI/2,t.y=2*Math.atan2(this.y,this.x),t.z=0):n<-.4995*e?(t.x=-Math.PI/2,t.y=-2*Math.atan2(this.y,this.x),t.z=0):(t.x=Math.asin(2*(this.w*this.x-this.y*this.z)),t.y=Math.atan2(2*this.w*this.y+2*this.z*this.x,1-2*(this.x*this.x+this.y*this.y)),t.z=Math.atan2(2*this.w*this.z+2*this.x*this.y,1-2*(this.z*this.z+this.x*this.x))),t.x*=Ht.RAD2DEG,t.y*=Ht.RAD2DEG,t.z*=Ht.RAD2DEG,t.x=kt.Scalar.Repeat(t.x,360),t.y=kt.Scalar.Repeat(t.y,360),t.z=kt.Scalar.Repeat(t.z,360),t}toString(){return`(${this.x}, ${this.y}, ${this.z}, ${this.w})`}get length(){return Math.sqrt(this.lengthSquared)}get lengthSquared(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}getClassName(){return\"Quaternion\"}getHashCode(){let t=this.x||0;return t=397*t^(this.y||0),t=397*t^(this.z||0),t=397*t^(this.w||0),t}asArray(){return[this.x,this.y,this.z,this.w]}equals(t){return t&&this.x===t.x&&this.y===t.y&&this.z===t.z&&this.w===t.w}clone(){return new jt(this.x,this.y,this.z,this.w)}copyFrom(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}copyFromFloats(t,e,n,i){return this.x=t,this.y=e,this.z=n,this.w=i,this}set(t,e,n,i){return this.copyFromFloats(t,e,n,i)}setEuler(t,e,n){return jt.RotationYawPitchRollToRef(e*Ht.DEG2RAD,t*Ht.DEG2RAD,n*Ht.DEG2RAD,this),this}add(t){return new jt(this.x+t.x,this.y+t.y,this.z+t.z,this.w+t.w)}addInPlace(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this}subtract(t){return new jt(this.x-t.x,this.y-t.y,this.z-t.z,this.w-t.w)}scale(t){return new jt(this.x*t,this.y*t,this.z*t,this.w*t)}scaleToRef(t,e){return e.x=this.x*t,e.y=this.y*t,e.z=this.z*t,e.w=this.w*t,this}scaleInPlace(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}scaleAndAddToRef(t,e){return e.x+=this.x*t,e.y+=this.y*t,e.z+=this.z*t,e.w+=this.w*t,this}multiply(t){const e=new jt(0,0,0,1);return this.multiplyToRef(t,e),e}multiplyToRef(t,e){const n=this.x*t.w+this.y*t.z-this.z*t.y+this.w*t.x,i=-this.x*t.z+this.y*t.w+this.z*t.x+this.w*t.y,o=this.x*t.y-this.y*t.x+this.z*t.w+this.w*t.z,r=-this.x*t.x-this.y*t.y-this.z*t.z+this.w*t.w;return e.copyFromFloats(n,i,o,r),this}multiplyInPlace(t){return this.multiplyToRef(t,this),this}conjugateToRef(t){return t.copyFromFloats(-this.x,-this.y,-this.z,this.w),this}conjugateInPlace(){return this.x*=-1,this.y*=-1,this.z*=-1,this}conjugate(){return new jt(-this.x,-this.y,-this.z,this.w)}normalize(){const t=1/this.length;return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}angleAxis(t,e){if(0===e.lengthSquared())return jt.Identity;const n=jt.Identity;let i=t*Ht.DEG2RAD;i*=.5;let o=e.normalize();return o=e.scaleInPlace(Math.sin(i)),n.x=o.x,n.y=o.y,n.z=o.z,n.w=Math.cos(i),n.normalize()}toRotationMatrix(t){return Bt.Matrix.FromQuaternionToRef(this,t),this}fromRotationMatrix(t){return jt.FromRotationMatrixToRef(t,this),this}}At.Quaternion=jt,Object.defineProperty(Tt,\"__esModule\",{value:!0}),Tt.Vector3=void 0;const Gt=xt,qt=bt,Wt=At,Yt=Ct;class Xt{constructor(t=0,e=0,n=0){this.x=t,this.y=e,this.z=n}get isNonUniform(){const t=Math.abs(this.x),e=Math.abs(this.y);if(t!==e)return!0;const n=Math.abs(this.z);return t!==n||e!==n}static Add(t,e){return new Xt(t.x,t.y,t.z).addInPlace(e)}static GetClipFactor(t,e,n,i){const o=Xt.Dot(t,n)-i;return o/(o-(Xt.Dot(e,n)-i))}static GetAngleBetweenVectors(t,e,n){const i=t.normalizeToRef(Gt.MathTmp.Vector3[1]),o=e.normalizeToRef(Gt.MathTmp.Vector3[2]),r=Xt.Dot(i,o),s=Gt.MathTmp.Vector3[3];return Xt.CrossToRef(i,o,s),Xt.Dot(s,n)>0?Math.acos(r):-Math.acos(r)}static FromArray(t,e=0){return new Xt(t[e],t[e+1],t[e+2])}static FromFloatArray(t,e){return Xt.FromArray(t,e)}static FromArrayToRef(t,e,n){n.x=t[e],n.y=t[e+1],n.z=t[e+2]}static FromFloatArrayToRef(t,e,n){return Xt.FromArrayToRef(t,e,n)}static FromFloatsToRef(t,e,n,i){i.copyFromFloats(t,e,n)}static Zero(){return new Xt(0,0,0)}static One(){return new Xt(1,1,1)}static Up(){return new Xt(0,1,0)}static Down(){return new Xt(0,-1,0)}static Forward(){return new Xt(0,0,1)}static Backward(){return new Xt(0,0,-1)}static Right(){return new Xt(1,0,0)}static Left(){return new Xt(-1,0,0)}static TransformCoordinates(t,e){const n=Xt.Zero();return Xt.TransformCoordinatesToRef(t,e,n),n}static TransformCoordinatesToRef(t,e,n){return Xt.TransformCoordinatesFromFloatsToRef(t.x,t.y,t.z,e,n)}static TransformCoordinatesFromFloatsToRef(t,e,n,i,o){const r=i.m,s=t*r[0]+e*r[4]+n*r[8]+r[12],a=t*r[1]+e*r[5]+n*r[9]+r[13],d=t*r[2]+e*r[6]+n*r[10]+r[14],h=1/(t*r[3]+e*r[7]+n*r[11]+r[15]);o.x=s*h,o.y=a*h,o.z=d*h}static TransformNormal(t,e){const n=Xt.Zero();return Xt.TransformNormalToRef(t,e,n),n}static TransformNormalToRef(t,e,n){this.TransformNormalFromFloatsToRef(t.x,t.y,t.z,e,n)}static TransformNormalFromFloatsToRef(t,e,n,i,o){const r=i.m;o.x=t*r[0]+e*r[4]+n*r[8],o.y=t*r[1]+e*r[5]+n*r[9],o.z=t*r[2]+e*r[6]+n*r[10]}static CatmullRom(t,e,n,i,o){const r=o*o,s=o*r,a=.5*(2*e.x+(-t.x+n.x)*o+(2*t.x-5*e.x+4*n.x-i.x)*r+(-t.x+3*e.x-3*n.x+i.x)*s),d=.5*(2*e.y+(-t.y+n.y)*o+(2*t.y-5*e.y+4*n.y-i.y)*r+(-t.y+3*e.y-3*n.y+i.y)*s),h=.5*(2*e.z+(-t.z+n.z)*o+(2*t.z-5*e.z+4*n.z-i.z)*r+(-t.z+3*e.z-3*n.z+i.z)*s);return new Xt(a,d,h)}static Clamp(t,e,n){const i=new Xt;return Xt.ClampToRef(t,e,n,i),i}static ClampToRef(t,e,n,i){let o=t.x;o=o>n.x?n.x:o,o=o<e.x?e.x:o;let r=t.y;r=r>n.y?n.y:r,r=r<e.y?e.y:r;let s=t.z;s=s>n.z?n.z:s,s=s<e.z?e.z:s,i.copyFromFloats(o,r,s)}static Hermite(t,e,n,i,o){const r=o*o,s=o*r,a=2*s-3*r+1,d=-2*s+3*r,h=s-2*r+o,l=s-r,p=t.x*a+n.x*d+e.x*h+i.x*l,c=t.y*a+n.y*d+e.y*h+i.y*l,u=t.z*a+n.z*d+e.z*h+i.z*l;return new Xt(p,c,u)}static Lerp(t,e,n){const i=new Xt(0,0,0);return Xt.LerpToRef(t,e,n,i),i}static LerpToRef(t,e,n,i){i.x=t.x+(e.x-t.x)*n,i.y=t.y+(e.y-t.y)*n,i.z=t.z+(e.z-t.z)*n}static Dot(t,e){return t.x*e.x+t.y*e.y+t.z*e.z}static Cross(t,e){const n=Xt.Zero();return Xt.CrossToRef(t,e,n),n}static CrossToRef(t,e,n){const i=t.y*e.z-t.z*e.y,o=t.z*e.x-t.x*e.z,r=t.x*e.y-t.y*e.x;n.copyFromFloats(i,o,r)}static Normalize(t){const e=Xt.Zero();return Xt.NormalizeToRef(t,e),e}static NormalizeToRef(t,e){t.normalizeToRef(e)}static Minimize(t,e){const n=new Xt(t.x,t.y,t.z);return n.minimizeInPlace(e),n}static Maximize(t,e){const n=new Xt(t.x,t.y,t.z);return n.maximizeInPlace(e),n}static Distance(t,e){return Math.sqrt(Xt.DistanceSquared(t,e))}static DistanceSquared(t,e){const n=t.x-e.x,i=t.y-e.y,o=t.z-e.z;return n*n+i*i+o*o}static Center(t,e){const n=Xt.Add(t,e);return n.scaleInPlace(.5),n}static RotationFromAxis(t,e,n){const i=Xt.Zero();return Xt.RotationFromAxisToRef(t,e,n,i),i}static RotationFromAxisToRef(t,e,n,i){const o=Gt.MathTmp.Quaternion[0];Wt.Quaternion.RotationQuaternionFromAxisToRef(t,e,n,o),i.copyFrom(o.eulerAngles)}toString(){return`(${this.x}, ${this.y}, ${this.z})`}getClassName(){return\"Vector3\"}getHashCode(){let t=this.x||0;return t=397*t^(this.y||0),t=397*t^(this.z||0),t}asArray(){const t=[];return this.toArray(t,0),t}toArray(t,e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,this}toQuaternion(){return Wt.Quaternion.Identity.setEuler(this.y,this.x,this.z)}addInPlace(t){return this.addInPlaceFromFloats(t.x,t.y,t.z)}addInPlaceFromFloats(t,e,n){return this.x+=t,this.y+=e,this.z+=n,this}add(t){return new Xt(this.x+t.x,this.y+t.y,this.z+t.z)}addToRef(t,e){return e.copyFromFloats(this.x+t.x,this.y+t.y,this.z+t.z)}subtractInPlace(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}subtract(t){return new Xt(this.x-t.x,this.y-t.y,this.z-t.z)}subtractToRef(t,e){return this.subtractFromFloatsToRef(t.x,t.y,t.z,e)}subtractFromFloats(t,e,n){return new Xt(this.x-t,this.y-e,this.z-n)}subtractFromFloatsToRef(t,e,n,i){return i.copyFromFloats(this.x-t,this.y-e,this.z-n)}applyMatrix4(t){this.applyMatrix4ToRef(t,this)}applyMatrix4ToRef(t,e){const{x:n,y:i,z:o}=this,{m:r}=t,s=1/(r[3]*n+r[7]*i+r[11]*o+r[15]);return e.x=(r[0]*n+r[4]*i+r[8]*o+r[12])*s,e.y=(r[1]*n+r[5]*i+r[9]*o+r[13])*s,e.z=(r[2]*n+r[6]*i+r[10]*o+r[14])*s,e}rotate(t){return this.rotateToRef(t,this)}rotateToRef(t,e){const{x:n,y:i,z:o}=this,{x:r,y:s,z:a,w:d}=t,h=d*n+s*o-a*i,l=d*i+a*n-r*o,p=d*o+r*i-s*n,c=-r*n-s*i-a*o;return e.x=h*d+c*-r+l*-a-p*-s,e.y=l*d+c*-s+p*-r-h*-a,e.z=p*d+c*-a+h*-s-l*-r,e}negate(){return new Xt(-this.x,-this.y,-this.z)}scaleInPlace(t){return this.x*=t,this.y*=t,this.z*=t,this}scale(t){return new Xt(this.x*t,this.y*t,this.z*t)}scaleToRef(t,e){return e.copyFromFloats(this.x*t,this.y*t,this.z*t)}scaleAndAddToRef(t,e){return e.addInPlaceFromFloats(this.x*t,this.y*t,this.z*t)}equals(t){return t&&this.x===t.x&&this.y===t.y&&this.z===t.z}equalsWithEpsilon(t,e=qt.Epsilon){return t&&Yt.Scalar.WithinEpsilon(this.x,t.x,e)&&Yt.Scalar.WithinEpsilon(this.y,t.y,e)&&Yt.Scalar.WithinEpsilon(this.z,t.z,e)}equalsToFloats(t,e,n){return this.x===t&&this.y===e&&this.z===n}multiplyInPlace(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this}multiply(t){return this.multiplyByFloats(t.x,t.y,t.z)}multiplyToRef(t,e){return e.copyFromFloats(this.x*t.x,this.y*t.y,this.z*t.z)}multiplyByFloats(t,e,n){return new Xt(this.x*t,this.y*e,this.z*n)}divide(t){return new Xt(this.x/t.x,this.y/t.y,this.z/t.z)}divideToRef(t,e){return e.copyFromFloats(this.x/t.x,this.y/t.y,this.z/t.z)}divideInPlace(t){return this.divideToRef(t,this)}minimizeInPlace(t){return this.minimizeInPlaceFromFloats(t.x,t.y,t.z)}maximizeInPlace(t){return this.maximizeInPlaceFromFloats(t.x,t.y,t.z)}minimizeInPlaceFromFloats(t,e,n){return t<this.x&&(this.x=t),e<this.y&&(this.y=e),n<this.z&&(this.z=n),this}maximizeInPlaceFromFloats(t,e,n){return t>this.x&&(this.x=t),e>this.y&&(this.y=e),n>this.z&&(this.z=n),this}floor(){return new Xt(Math.floor(this.x),Math.floor(this.y),Math.floor(this.z))}fract(){return new Xt(this.x-Math.floor(this.x),this.y-Math.floor(this.y),this.z-Math.floor(this.z))}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}lengthSquared(){return this.x*this.x+this.y*this.y+this.z*this.z}normalize(){return this.normalizeFromLength(this.length())}normalizeFromLength(t){return 0===t||1===t?this:this.scaleInPlace(1/t)}normalizeToNew(){const t=new Xt(0,0,0);return this.normalizeToRef(t),t}normalizeToRef(t){const e=this.length();return 0===e||1===e?t.copyFromFloats(this.x,this.y,this.z):this.scaleToRef(1/e,t)}clone(){return new Xt(this.x,this.y,this.z)}copyFrom(t){return this.copyFromFloats(t.x,t.y,t.z)}copyFromFloats(t,e,n){return this.x=t,this.y=e,this.z=n,this}set(t,e,n){return this.copyFromFloats(t,e,n)}setAll(t){return this.x=this.y=this.z=t,this}}Tt.Vector3=Xt,Object.defineProperty(xt,\"__esModule\",{value:!0}),xt.MathTmp=void 0;const Qt=wt,Zt=Tt,Jt=At,Kt=Rt;xt.MathTmp={Vector3:(0,Qt.buildArray)(6,Zt.Vector3.Zero),Matrix:(0,Qt.buildArray)(2,Kt.Matrix.Identity),Quaternion:(0,Qt.buildArray)(3,Jt.Quaternion.Zero),staticUp:Zt.Vector3.Up(),tmpMatrix:Kt.Matrix.Zero()};var $t={};Object.defineProperty($t,\"__esModule\",{value:!0}),$t.Angle=void 0;class te{constructor(t){this._radians=t,this._radians<0&&(this._radians+=2*Math.PI)}static BetweenTwoPoints(t,e){const n=e.subtract(t),i=Math.atan2(n.y,n.x);return new te(i)}static FromRadians(t){return new te(t)}static FromDegrees(t){return new te(t*Math.PI/180)}degrees(){return 180*this._radians/Math.PI}radians(){return this._radians}}$t.Angle=te;var ee={},ne={};Object.defineProperty(ne,\"__esModule\",{value:!0}),ne.Vector2=void 0;const ie=bt,oe=Ct;class re{constructor(t=0,e=0){this.x=t,this.y=e}static Zero(){return new re(0,0)}static One(){return new re(1,1)}static Add(t,e){return new re(t.x,t.y).addInPlace(e)}static FromArray(t,e=0){return new re(t[e],t[e+1])}static FromArrayToRef(t,e,n){n.x=t[e],n.y=t[e+1]}static CatmullRom(t,e,n,i,o){const r=o*o,s=o*r,a=.5*(2*e.x+(-t.x+n.x)*o+(2*t.x-5*e.x+4*n.x-i.x)*r+(-t.x+3*e.x-3*n.x+i.x)*s),d=.5*(2*e.y+(-t.y+n.y)*o+(2*t.y-5*e.y+4*n.y-i.y)*r+(-t.y+3*e.y-3*n.y+i.y)*s);return new re(a,d)}static Clamp(t,e,n){let i=t.x;i=i>n.x?n.x:i,i=i<e.x?e.x:i;let o=t.y;return o=o>n.y?n.y:o,o=o<e.y?e.y:o,new re(i,o)}static Hermite(t,e,n,i,o){const r=o*o,s=o*r,a=2*s-3*r+1,d=-2*s+3*r,h=s-2*r+o,l=s-r,p=t.x*a+n.x*d+e.x*h+i.x*l,c=t.y*a+n.y*d+e.y*h+i.y*l;return new re(p,c)}static Lerp(t,e,n){const i=t.x+(e.x-t.x)*n,o=t.y+(e.y-t.y)*n;return new re(i,o)}static Dot(t,e){return t.x*e.x+t.y*e.y}static Normalize(t){const e=new re(t.x,t.y);return e.normalize(),e}static Minimize(t,e){const n=t.x<e.x?t.x:e.x,i=t.y<e.y?t.y:e.y;return new re(n,i)}static Maximize(t,e){const n=t.x>e.x?t.x:e.x,i=t.y>e.y?t.y:e.y;return new re(n,i)}static Transform(t,e){const n=re.Zero();return re.TransformToRef(t,e,n),n}static TransformToRef(t,e,n){const i=e.m,o=t.x*i[0]+t.y*i[4]+i[12],r=t.x*i[1]+t.y*i[5]+i[13];n.x=o,n.y=r}static PointInTriangle(t,e,n,i){const o=.5*(-n.y*i.x+e.y*(-n.x+i.x)+e.x*(n.y-i.y)+n.x*i.y),r=o<0?-1:1,s=(e.y*i.x-e.x*i.y+(i.y-e.y)*t.x+(e.x-i.x)*t.y)*r,a=(e.x*n.y-e.y*n.x+(e.y-n.y)*t.x+(n.x-e.x)*t.y)*r;return s>0&&a>0&&s+a<2*o*r}static Distance(t,e){return Math.sqrt(re.DistanceSquared(t,e))}static DistanceSquared(t,e){const n=t.x-e.x,i=t.y-e.y;return n*n+i*i}static Center(t,e){const n=re.Add(t,e);return n.scaleInPlace(.5),n}static DistanceOfPointFromSegment(t,e,n){const i=re.DistanceSquared(e,n);if(0===i)return re.Distance(t,e);const o=n.subtract(e),r=Math.max(0,Math.min(1,re.Dot(t.subtract(e),o)/i)),s=e.add(o.multiplyByFloats(r,r));return re.Distance(t,s)}toString(){return\"{X: \"+this.x+\" Y:\"+this.y+\"}\"}getClassName(){return\"Vector2\"}getHashCode(){let t=this.x||0;return t=397*t^(this.y||0),t}toArray(t,e=0){return t[e]=this.x,t[e+1]=this.y,this}asArray(){const t=new Array;return this.toArray(t,0),t}copyFrom(t){return this.x=t.x,this.y=t.y,this}copyFromFloats(t,e){return this.x=t,this.y=e,this}set(t,e){return this.copyFromFloats(t,e)}add(t){return new re(this.x+t.x,this.y+t.y)}addToRef(t,e){return e.x=this.x+t.x,e.y=this.y+t.y,this}addInPlace(t){return this.x+=t.x,this.y+=t.y,this}addVector3(t){return new re(this.x+t.x,this.y+t.y)}subtract(t){return new re(this.x-t.x,this.y-t.y)}subtractToRef(t,e){return e.x=this.x-t.x,e.y=this.y-t.y,this}subtractInPlace(t){return this.x-=t.x,this.y-=t.y,this}multiplyInPlace(t){return this.x*=t.x,this.y*=t.y,this}multiply(t){return new re(this.x*t.x,this.y*t.y)}multiplyToRef(t,e){return e.x=this.x*t.x,e.y=this.y*t.y,this}multiplyByFloats(t,e){return new re(this.x*t,this.y*e)}divide(t){return new re(this.x/t.x,this.y/t.y)}divideToRef(t,e){return e.x=this.x/t.x,e.y=this.y/t.y,this}divideInPlace(t){return this.divideToRef(t,this)}negate(){return new re(-this.x,-this.y)}scaleInPlace(t){return this.x*=t,this.y*=t,this}scale(t){const e=new re(0,0);return this.scaleToRef(t,e),e}scaleToRef(t,e){return e.x=this.x*t,e.y=this.y*t,this}scaleAndAddToRef(t,e){return e.x+=this.x*t,e.y+=this.y*t,this}equals(t){return t&&this.x===t.x&&this.y===t.y}equalsWithEpsilon(t,e=ie.Epsilon){return t&&oe.Scalar.WithinEpsilon(this.x,t.x,e)&&oe.Scalar.WithinEpsilon(this.y,t.y,e)}floor(){return new re(Math.floor(this.x),Math.floor(this.y))}fract(){return new re(this.x-Math.floor(this.x),this.y-Math.floor(this.y))}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}lengthSquared(){return this.x*this.x+this.y*this.y}normalize(){const t=this.length();if(0===t)return this;const e=1/t;return this.x*=e,this.y*=e,this}clone(){return new re(this.x,this.y)}}ne.Vector2=re,Object.defineProperty(ee,\"__esModule\",{value:!0}),ee.Arc2=void 0;const se=$t,ae=ne,de=bt;ee.Arc2=class{constructor(t,e,n){this.startPoint=t,this.midPoint=e,this.endPoint=n;const i=Math.pow(e.x,2)+Math.pow(e.y,2),o=(Math.pow(t.x,2)+Math.pow(t.y,2)-i)/2,r=(i-Math.pow(n.x,2)-Math.pow(n.y,2))/2,s=(t.x-e.x)*(e.y-n.y)-(e.x-n.x)*(t.y-e.y);this.centerPoint=new ae.Vector2((o*(e.y-n.y)-r*(t.y-e.y))/s,((t.x-e.x)*r-(e.x-n.x)*o)/s),this.radius=this.centerPoint.subtract(this.startPoint).length(),this.startAngle=se.Angle.BetweenTwoPoints(this.centerPoint,this.startPoint);const a=this.startAngle.degrees();let d=se.Angle.BetweenTwoPoints(this.centerPoint,this.midPoint).degrees(),h=se.Angle.BetweenTwoPoints(this.centerPoint,this.endPoint).degrees();d-a>180&&(d-=360),d-a<-180&&(d+=360),h-d>180&&(h-=360),h-d<-180&&(h+=360),this.orientation=d-a<0?de.Orientation.CW:de.Orientation.CCW,this.angle=se.Angle.FromDegrees(this.orientation===de.Orientation.CW?a-h:h-a)}};var he={};Object.defineProperty(he,\"__esModule\",{value:!0}),he.Axis=void 0;const le=Tt;class pe{}he.Axis=pe,pe.X=new le.Vector3(1,0,0),pe.Y=new le.Vector3(0,1,0),pe.Z=new le.Vector3(0,0,1);var ce={};Object.defineProperty(ce,\"__esModule\",{value:!0}),ce.BezierCurve=void 0;ce.BezierCurve=class{static Interpolate(t,e,n,i,o){const r=1-3*i+3*e,s=3*i-6*e,a=3*e;let d=t;for(let e=0;e<5;e++){const e=d*d;d-=(r*(e*d)+s*e+a*d-t)*(1/(3*r*e+2*s*d+a)),d=Math.min(1,Math.max(0,d))}return 3*Math.pow(1-d,2)*d*n+3*(1-d)*Math.pow(d,2)*o+Math.pow(d,3)}};var ue={},ye={};Object.defineProperty(ye,\"__esModule\",{value:!0}),ye.Color4=void 0;const fe=Ct,me=bt;class ge{constructor(t=0,e=0,n=0,i=1){this.r=t,this.g=e,this.b=n,this.a=i}static FromHexString(t){if(\"#\"!==t.substring(0,1)||9!==t.length)return new ge(0,0,0,0);const e=parseInt(t.substring(1,3),16),n=parseInt(t.substring(3,5),16),i=parseInt(t.substring(5,7),16),o=parseInt(t.substring(7,9),16);return ge.FromInts(e,n,i,o)}static Lerp(t,e,n){const i=new ge(0,0,0,0);return ge.LerpToRef(t,e,n,i),i}static LerpToRef(t,e,n,i){i.r=t.r+(e.r-t.r)*n,i.g=t.g+(e.g-t.g)*n,i.b=t.b+(e.b-t.b)*n,i.a=t.a+(e.a-t.a)*n}static Red(){return new ge(1,0,0,1)}static Green(){return new ge(0,1,0,1)}static Blue(){return new ge(0,0,1,1)}static Black(){return new ge(0,0,0,1)}static White(){return new ge(1,1,1,1)}static Purple(){return new ge(.5,0,.5,1)}static Magenta(){return new ge(1,0,1,1)}static Yellow(){return new ge(1,1,0,1)}static Gray(){return new ge(.5,.5,.5,1)}static Teal(){return new ge(0,1,1,1)}static Clear(){return new ge(0,0,0,0)}static FromColor3(t,e=1){return new ge(t.r,t.g,t.b,e)}static FromArray(t,e=0){return new ge(t[e],t[e+1],t[e+2],t[e+3])}static FromInts(t,e,n,i){return new ge(t/255,e/255,n/255,i/255)}static CheckColors4(t,e){if(t.length===3*e){const e=[];for(let n=0;n<t.length;n+=3){const i=n/3*4;e[i]=t[n],e[i+1]=t[n+1],e[i+2]=t[n+2],e[i+3]=1}return e}return t}addInPlace(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this.a+=t.a,this}asArray(){const t=new Array;return this.toArray(t,0),t}toArray(t,e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t[e+3]=this.a,this}add(t){return new ge(this.r+t.r,this.g+t.g,this.b+t.b,this.a+t.a)}subtract(t){return new ge(this.r-t.r,this.g-t.g,this.b-t.b,this.a-t.a)}subtractToRef(t,e){return e.r=this.r-t.r,e.g=this.g-t.g,e.b=this.b-t.b,e.a=this.a-t.a,this}scale(t){return new ge(this.r*t,this.g*t,this.b*t,this.a*t)}scaleToRef(t,e){return e.r=this.r*t,e.g=this.g*t,e.b=this.b*t,e.a=this.a*t,this}scaleAndAddToRef(t,e){return e.r+=this.r*t,e.g+=this.g*t,e.b+=this.b*t,e.a+=this.a*t,this}clampToRef(t=0,e=1,n){return n.r=fe.Scalar.Clamp(this.r,t,e),n.g=fe.Scalar.Clamp(this.g,t,e),n.b=fe.Scalar.Clamp(this.b,t,e),n.a=fe.Scalar.Clamp(this.a,t,e),this}multiply(t){return new ge(this.r*t.r,this.g*t.g,this.b*t.b,this.a*t.a)}multiplyToRef(t,e){return e.r=this.r*t.r,e.g=this.g*t.g,e.b=this.b*t.b,e.a=this.a*t.a,e}toString(){return\"{R: \"+this.r+\" G:\"+this.g+\" B:\"+this.b+\" A:\"+this.a+\"}\"}getClassName(){return\"Color4\"}getHashCode(){let t=this.r||0;return t=397*t^(this.g||0),t=397*t^(this.b||0),t=397*t^(this.a||0),t}clone(){return new ge(this.r,this.g,this.b,this.a)}copyFrom(t){return this.r=t.r,this.g=t.g,this.b=t.b,this.a=t.a,this}copyFromFloats(t,e,n,i){return this.r=t,this.g=e,this.b=n,this.a=i,this}set(t,e,n,i){return this.copyFromFloats(t,e,n,i)}toHexString(){const t=255*this.r|0,e=255*this.g|0,n=255*this.b|0,i=255*this.a|0;return\"#\"+fe.Scalar.ToHex(t)+fe.Scalar.ToHex(e)+fe.Scalar.ToHex(n)+fe.Scalar.ToHex(i)}toLinearSpace(){const t=new ge;return this.toLinearSpaceToRef(t),t}toLinearSpaceToRef(t){return t.r=Math.pow(this.r,me.ToLinearSpace),t.g=Math.pow(this.g,me.ToLinearSpace),t.b=Math.pow(this.b,me.ToLinearSpace),t.a=this.a,this}toGammaSpace(){const t=new ge;return this.toGammaSpaceToRef(t),t}toGammaSpaceToRef(t){return t.r=Math.pow(this.r,me.ToGammaSpace),t.g=Math.pow(this.g,me.ToGammaSpace),t.b=Math.pow(this.b,me.ToGammaSpace),t.a=this.a,this}}ye.Color4=ge,Object.defineProperty(ue,\"__esModule\",{value:!0}),ue.Color3=void 0;const ve=bt,_e=ye,be=Ct;class xe{constructor(t=0,e=0,n=0){this.r=t,this.g=e,this.b=n}static FromHexString(t){if(\"#\"!==t.substring(0,1)||7!==t.length)return new xe(0,0,0);const e=parseInt(t.substring(1,3),16),n=parseInt(t.substring(3,5),16),i=parseInt(t.substring(5,7),16);return xe.FromInts(e,n,i)}static FromArray(t,e=0){return new xe(t[e],t[e+1],t[e+2])}static FromInts(t,e,n){return new xe(t/255,e/255,n/255)}static Lerp(t,e,n){const i=new xe(0,0,0);return xe.LerpToRef(t,e,n,i),i}static LerpToRef(t,e,n,i){i.r=t.r+(e.r-t.r)*n,i.g=t.g+(e.g-t.g)*n,i.b=t.b+(e.b-t.b)*n}static Red(){return new xe(1,0,0)}static Green(){return new xe(0,1,0)}static Blue(){return new xe(0,0,1)}static Black(){return new xe(0,0,0)}static White(){return new xe(1,1,1)}static Purple(){return new xe(.5,0,.5)}static Magenta(){return new xe(1,0,1)}static Yellow(){return new xe(1,1,0)}static Gray(){return new xe(.5,.5,.5)}static Teal(){return new xe(0,1,1)}static Random(){return new xe(Math.random(),Math.random(),Math.random())}toString(){return\"{R: \"+this.r+\" G:\"+this.g+\" B:\"+this.b+\"}\"}getClassName(){return\"Color3\"}getHashCode(){let t=this.r||0;return t=397*t^(this.g||0),t=397*t^(this.b||0),t}toArray(t,e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,this}toColor4(t=1){return new _e.Color4(this.r,this.g,this.b,t)}asArray(){const t=new Array;return this.toArray(t,0),t}toLuminance(){return.3*this.r+.59*this.g+.11*this.b}multiply(t){return new xe(this.r*t.r,this.g*t.g,this.b*t.b)}multiplyToRef(t,e){return e.r=this.r*t.r,e.g=this.g*t.g,e.b=this.b*t.b,this}equals(t){return t&&this.r===t.r&&this.g===t.g&&this.b===t.b}equalsFloats(t,e,n){return this.r===t&&this.g===e&&this.b===n}scale(t){return new xe(this.r*t,this.g*t,this.b*t)}scaleToRef(t,e){return e.r=this.r*t,e.g=this.g*t,e.b=this.b*t,this}scaleAndAddToRef(t,e){return e.r+=this.r*t,e.g+=this.g*t,e.b+=this.b*t,this}clampToRef(t=0,e=1,n){return n.r=be.Scalar.Clamp(this.r,t,e),n.g=be.Scalar.Clamp(this.g,t,e),n.b=be.Scalar.Clamp(this.b,t,e),this}add(t){return new xe(this.r+t.r,this.g+t.g,this.b+t.b)}addToRef(t,e){return e.r=this.r+t.r,e.g=this.g+t.g,e.b=this.b+t.b,this}subtract(t){return new xe(this.r-t.r,this.g-t.g,this.b-t.b)}subtractToRef(t,e){return e.r=this.r-t.r,e.g=this.g-t.g,e.b=this.b-t.b,this}clone(){return new xe(this.r,this.g,this.b)}copyFrom(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copyFromFloats(t,e,n){return this.r=t,this.g=e,this.b=n,this}set(t,e,n){return this.copyFromFloats(t,e,n)}toHexString(){const t=255*this.r|0,e=255*this.g|0,n=255*this.b|0;return\"#\"+be.Scalar.ToHex(t)+be.Scalar.ToHex(e)+be.Scalar.ToHex(n)}toLinearSpace(){const t=new xe;return this.toLinearSpaceToRef(t),t}toLinearSpaceToRef(t){return t.r=Math.pow(this.r,ve.ToLinearSpace),t.g=Math.pow(this.g,ve.ToLinearSpace),t.b=Math.pow(this.b,ve.ToLinearSpace),this}toGammaSpace(){const t=new xe;return this.toGammaSpaceToRef(t),t}toGammaSpaceToRef(t){return t.r=Math.pow(this.r,ve.ToGammaSpace),t.g=Math.pow(this.g,ve.ToGammaSpace),t.b=Math.pow(this.b,ve.ToGammaSpace),this}toJSON(){return{r:this.r,g:this.g,b:this.b}}}ue.Color3=xe;var we={};Object.defineProperty(we,\"__esModule\",{value:!0}),we.Curve3=void 0;const Te=Tt;class Ae{constructor(t){this._length=0,this._points=t,this._length=this._computeLength(t)}static CreateQuadraticBezier(t,e,n,i){i=i>2?i:3;const o=new Array,r=(t,e,n,i)=>(1-t)*(1-t)*e+2*t*(1-t)*n+t*t*i;for(let s=0;s<=i;s++)o.push(new Te.Vector3(r(s/i,t.x,e.x,n.x),r(s/i,t.y,e.y,n.y),r(s/i,t.z,e.z,n.z)));return new Ae(o)}static CreateCubicBezier(t,e,n,i,o){o=o>3?o:4;const r=new Array,s=(t,e,n,i,o)=>(1-t)*(1-t)*(1-t)*e+3*t*(1-t)*(1-t)*n+3*t*t*(1-t)*i+t*t*t*o;for(let a=0;a<=o;a++)r.push(new Te.Vector3(s(a/o,t.x,e.x,n.x,i.x),s(a/o,t.y,e.y,n.y,i.y),s(a/o,t.z,e.z,n.z,i.z)));return new Ae(r)}static CreateHermiteSpline(t,e,n,i,o){const r=new Array,s=1/o;for(let a=0;a<=o;a++)r.push(Te.Vector3.Hermite(t,e,n,i,a*s));return new Ae(r)}static CreateCatmullRomSpline(t,e,n){const i=new Array,o=1/e;let r=0;if(n){const n=t.length;for(let s=0;s<n;s++){r=0;for(let a=0;a<e;a++)i.push(Te.Vector3.CatmullRom(t[s%n],t[(s+1)%n],t[(s+2)%n],t[(s+3)%n],r)),r+=o}i.push(i[0])}else{const n=new Array;n.push(t[0].clone()),Array.prototype.push.apply(n,t),n.push(t[t.length-1].clone());let s=0;for(s=0;s<n.length-3;s++){r=0;for(let t=0;t<e;t++)i.push(Te.Vector3.CatmullRom(n[s],n[s+1],n[s+2],n[s+3],r)),r+=o}s--,i.push(Te.Vector3.CatmullRom(n[s],n[s+1],n[s+2],n[s+3],r))}return new Ae(i)}getPoints(){return this._points}length(){return this._length}continue(t){const e=this._points[this._points.length-1],n=this._points.slice(),i=t.getPoints();for(let t=1;t<i.length;t++)n.push(i[t].subtract(i[0]).add(e));return new Ae(n)}_computeLength(t){let e=0;for(let n=1;n<t.length;n++)e+=t[n].subtract(t[n-1]).length();return e}}we.Curve3=Ae;var Re={},Se={};Object.defineProperty(Se,\"__esModule\",{value:!0}),Se.Plane=void 0;const Ce=Tt,Ee=Rt,Ie=xt;class ze{constructor(t,e,n,i){this.normal=new Ce.Vector3(t,e,n),this.d=i}static FromArray(t){return new ze(t[0],t[1],t[2],t[3])}static FromPoints(t,e,n){const i=new ze(0,0,0,0);return i.copyFromPoints(t,e,n),i}static FromPositionAndNormal(t,e){const n=new ze(0,0,0,0);return e.normalize(),n.normal=e,n.d=-(e.x*t.x+e.y*t.y+e.z*t.z),n}static SignedDistanceToPlaneFromPositionAndNormal(t,e,n){const i=-(e.x*t.x+e.y*t.y+e.z*t.z);return Ce.Vector3.Dot(n,e)+i}asArray(){return[this.normal.x,this.normal.y,this.normal.z,this.d]}clone(){return new ze(this.normal.x,this.normal.y,this.normal.z,this.d)}getClassName(){return\"Plane\"}getHashCode(){let t=this.normal.getHashCode();return t=397*t^(this.d||0),t}normalize(){const t=Math.sqrt(this.normal.x*this.normal.x+this.normal.y*this.normal.y+this.normal.z*this.normal.z);let e=0;return 0!==t&&(e=1/t),this.normal.x*=e,this.normal.y*=e,this.normal.z*=e,this.d*=e,this}transform(t){const e=Ie.MathTmp.Matrix[0];Ee.Matrix.TransposeToRef(t,e);const n=e.m,i=this.normal.x,o=this.normal.y,r=this.normal.z,s=this.d,a=i*n[0]+o*n[1]+r*n[2]+s*n[3],d=i*n[4]+o*n[5]+r*n[6]+s*n[7],h=i*n[8]+o*n[9]+r*n[10]+s*n[11],l=i*n[12]+o*n[13]+r*n[14]+s*n[15];return new ze(a,d,h,l)}dotCoordinate(t){return this.normal.x*t.x+this.normal.y*t.y+this.normal.z*t.z+this.d}copyFromPoints(t,e,n){const i=e.x-t.x,o=e.y-t.y,r=e.z-t.z,s=n.x-t.x,a=n.y-t.y,d=n.z-t.z,h=o*d-r*a,l=r*s-i*d,p=i*a-o*s,c=Math.sqrt(h*h+l*l+p*p);let u;return u=0!==c?1/c:0,this.normal.x=h*u,this.normal.y=l*u,this.normal.z=p*u,this.d=-(this.normal.x*t.x+this.normal.y*t.y+this.normal.z*t.z),this}isFrontFacingTo(t,e){return Ce.Vector3.Dot(this.normal,t)<=e}signedDistanceTo(t){return Ce.Vector3.Dot(t,this.normal)+this.d}}Se.Plane=ze,Object.defineProperty(Re,\"__esModule\",{value:!0}),Re.Frustum=void 0;const Oe=Se;class Me{static GetPlanes(t){const e=[];for(let t=0;t<6;t++)e.push(new Oe.Plane(0,0,0,0));return Me.GetPlanesToRef(t,e),e}static GetNearPlaneToRef(t,e){const n=t.m;e.normal.x=n[3]+n[2],e.normal.y=n[7]+n[6],e.normal.z=n[11]+n[10],e.d=n[15]+n[14],e.normalize()}static GetFarPlaneToRef(t,e){const n=t.m;e.normal.x=n[3]-n[2],e.normal.y=n[7]-n[6],e.normal.z=n[11]-n[10],e.d=n[15]-n[14],e.normalize()}static GetLeftPlaneToRef(t,e){const n=t.m;e.normal.x=n[3]+n[0],e.normal.y=n[7]+n[4],e.normal.z=n[11]+n[8],e.d=n[15]+n[12],e.normalize()}static GetRightPlaneToRef(t,e){const n=t.m;e.normal.x=n[3]-n[0],e.normal.y=n[7]-n[4],e.normal.z=n[11]-n[8],e.d=n[15]-n[12],e.normalize()}static GetTopPlaneToRef(t,e){const n=t.m;e.normal.x=n[3]-n[1],e.normal.y=n[7]-n[5],e.normal.z=n[11]-n[9],e.d=n[15]-n[13],e.normalize()}static GetBottomPlaneToRef(t,e){const n=t.m;e.normal.x=n[3]+n[1],e.normal.y=n[7]+n[5],e.normal.z=n[11]+n[9],e.d=n[15]+n[13],e.normalize()}static GetPlanesToRef(t,e){Me.GetNearPlaneToRef(t,e[0]),Me.GetFarPlaneToRef(t,e[1]),Me.GetLeftPlaneToRef(t,e[2]),Me.GetRightPlaneToRef(t,e[3]),Me.GetTopPlaneToRef(t,e[4]),Me.GetBottomPlaneToRef(t,e[5])}}Re.Frustum=Me;var Pe={};Object.defineProperty(Pe,\"__esModule\",{value:!0}),Pe.Path2=void 0;const Ne=ne,Fe=ee,Le=bt;class De{constructor(t,e){this.closed=!1,this._points=new Array,this._length=0,this._points.push(new Ne.Vector2(t,e))}static StartingAt(t,e){return new De(t,e)}addLineTo(t,e){if(this.closed)return this;const n=new Ne.Vector2(t,e),i=this._points[this._points.length-1];return this._points.push(n),this._length+=n.subtract(i).length(),this}addArcTo(t,e,n,i,o=36){if(this.closed)return this;const r=this._points[this._points.length-1],s=new Ne.Vector2(t,e),a=new Ne.Vector2(n,i),d=new Fe.Arc2(r,s,a);let h=d.angle.radians()/o;d.orientation===Le.Orientation.CW&&(h*=-1);let l=d.startAngle.radians()+h;for(let t=0;t<o;t++){const t=Math.cos(l)*d.radius+d.centerPoint.x,e=Math.sin(l)*d.radius+d.centerPoint.y;this.addLineTo(t,e),l+=h}return this}close(){return this.closed=!0,this}length(){let t=this._length;if(!this.closed){const e=this._points[this._points.length-1];t+=this._points[0].subtract(e).length()}return t}getPoints(){return this._points}getPointAtLengthPosition(t){if(t<0||t>1)return Ne.Vector2.Zero();const e=t*this.length();let n=0;for(let t=0;t<this._points.length;t++){const i=(t+1)%this._points.length,o=this._points[t],r=this._points[i].subtract(o),s=r.length()+n;if(e>=n&&e<=s){const t=r.normalize(),i=e-n;return new Ne.Vector2(o.x+t.x*i,o.y+t.y*i)}n=s}return Ne.Vector2.Zero()}}Pe.Path2=De;var Be={};Object.defineProperty(Be,\"__esModule\",{value:!0}),Be.Path3D=void 0;const Ue=Tt,Ve=bt,He=Ct;Be.Path3D=class{constructor(t,e=null,n){this.path=t,this._curve=new Array,this._distances=new Array,this._tangents=new Array,this._normals=new Array,this._binormals=new Array;for(let e=0;e<t.length;e++)this._curve[e]=t[e].clone();this._raw=n||!1,this._compute(e)}getCurve(){return this._curve}getTangents(){return this._tangents}getNormals(){return this._normals}getBinormals(){return this._binormals}getDistances(){return this._distances}update(t,e=null){for(let e=0;e<t.length;e++)this._curve[e].x=t[e].x,this._curve[e].y=t[e].y,this._curve[e].z=t[e].z;return this._compute(e),this}_compute(t){const e=this._curve.length;this._tangents[0]=this._getFirstNonNullVector(0),this._raw||this._tangents[0].normalize(),this._tangents[e-1]=this._curve[e-1].subtract(this._curve[e-2]),this._raw||this._tangents[e-1].normalize();const n=this._tangents[0],i=this._normalVector(this._curve[0],n,t);let o,r,s,a;this._normals[0]=i,this._raw||this._normals[0].normalize(),this._binormals[0]=Ue.Vector3.Cross(n,this._normals[0]),this._raw||this._binormals[0].normalize(),this._distances[0]=0;for(let t=1;t<e;t++)o=this._getLastNonNullVector(t),t<e-1&&(r=this._getFirstNonNullVector(t),this._tangents[t]=o.add(r),this._tangents[t].normalize()),this._distances[t]=this._distances[t-1]+o.length(),s=this._tangents[t],a=this._binormals[t-1],this._normals[t]=Ue.Vector3.Cross(a,s),this._raw||this._normals[t].normalize(),this._binormals[t]=Ue.Vector3.Cross(s,this._normals[t]),this._raw||this._binormals[t].normalize()}_getFirstNonNullVector(t){let e=1,n=this._curve[t+e].subtract(this._curve[t]);for(;0===n.length()&&t+e+1<this._curve.length;)e++,n=this._curve[t+e].subtract(this._curve[t]);return n}_getLastNonNullVector(t){let e=1,n=this._curve[t].subtract(this._curve[t-e]);for(;0===n.length()&&t>e+1;)e++,n=this._curve[t].subtract(this._curve[t-e]);return n}_normalVector(t,e,n){let i,o=e.length();if(0===o&&(o=1),null==n){let t;t=He.Scalar.WithinEpsilon(Math.abs(e.y)/o,1,Ve.Epsilon)?He.Scalar.WithinEpsilon(Math.abs(e.x)/o,1,Ve.Epsilon)?He.Scalar.WithinEpsilon(Math.abs(e.z)/o,1,Ve.Epsilon)?Ue.Vector3.Zero():new Ue.Vector3(0,0,1):new Ue.Vector3(1,0,0):new Ue.Vector3(0,-1,0),i=Ue.Vector3.Cross(e,t)}else i=Ue.Vector3.Cross(e,n),Ue.Vector3.CrossToRef(i,e,i);return i.normalize(),i}};var ke={};Object.defineProperty(ke,\"__esModule\",{value:!0}),ke.Size=void 0;class je{constructor(t,e){this.width=t,this.height=e}get surface(){return this.width*this.height}static Zero(){return new je(0,0)}static Lerp(t,e,n){const i=t.width+(e.width-t.width)*n,o=t.height+(e.height-t.height)*n;return new je(i,o)}toString(){return`{W: ${this.width}, H: ${this.height}}`}getClassName(){return\"Size\"}getHashCode(){let t=this.width||0;return t=397*t^(this.height||0),t}copyFrom(t){this.width=t.width,this.height=t.height}copyFromFloats(t,e){return this.width=t,this.height=e,this}set(t,e){return this.copyFromFloats(t,e)}multiplyByFloats(t,e){return new je(this.width*t,this.height*e)}clone(){return new je(this.width,this.height)}equals(t){return!!t&&(this.width===t.width&&this.height===t.height)}add(t){return new je(this.width+t.width,this.height+t.height)}subtract(t){return new je(this.width-t.width,this.height-t.height)}}ke.Size=je,function(t){var e=vt&&vt.__createBinding||(Object.create?function(t,e,n,i){void 0===i&&(i=n),Object.defineProperty(t,i,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,i){void 0===i&&(i=n),t[i]=e[n]}),n=vt&&vt.__exportStar||function(t,n){for(var i in t)\"default\"===i||Object.prototype.hasOwnProperty.call(n,i)||e(n,t,i)};Object.defineProperty(t,\"__esModule\",{value:!0}),n(bt,t),n(xt,t),n($t,t),n(ee,t),n(he,t),n(ce,t),n(ue,t),n(ye,t),n(we,t),n(Re,t),n(Rt,t),n(Pe,t),n(Be,t),n(Se,t),n(At,t),n(Ct,t),n(ke,t),n(ne,t),n(Tt,t),n(St,t),n(_t,t)}(_t);var Ge,qe,We={looping:!0,speed:1,weight:1,layer:0},Ye=function(t){function e(e,n){void 0===n&&(n=We);var i=t.call(this)||this;return i.isAnimationClip=!0,i.looping=We.looping,i.weight=We.weight,i.playing=!1,i.shouldReset=!1,i.speed=We.speed,i.name=f(\"AnimClip\"),i.layer=We.layer,i.clip=e,i.setParams(o({},n)),i}return i(e,t),e.prototype.setParams=function(t){return this.looping=void 0!==t.looping?t.looping:this.looping,this.speed=t.speed||this.speed,this.weight=t.weight||this.weight,this.layer=t.layer||this.layer,this},e.prototype.toJSON=function(){var e=JSON.parse(JSON.stringify(t.prototype.toJSON.call(this)));return this.shouldReset&&(this.shouldReset=!1),e},e.prototype.play=function(t){var e;void 0===t&&(t=!1),null===(e=this.owner)||void 0===e||e.play(this,t)},e.prototype.pause=function(){var t;null===(t=this.owner)||void 0===t||t.pause(this)},e.prototype.reset=function(){this.shouldReset=!0},e.prototype.stop=function(){var t;null===(t=this.owner)||void 0===t||t.stop(this)},r([B.readonly,s(\"design:type\",String)],e.prototype,\"clip\",void 0),r([B.field,s(\"design:type\",Boolean)],e.prototype,\"looping\",void 0),r([B.field,s(\"design:type\",Number)],e.prototype,\"weight\",void 0),r([B.field,s(\"design:type\",Boolean)],e.prototype,\"playing\",void 0),r([B.field,s(\"design:type\",Boolean)],e.prototype,\"shouldReset\",void 0),r([B.field,s(\"design:type\",Number)],e.prototype,\"speed\",void 0),r([B.readonly,s(\"design:type\",String)],e.prototype,\"name\",void 0),e}(B);t.InputEventType=void 0,(Ge=t.InputEventType||(t.InputEventType={}))[Ge.DOWN=0]=\"DOWN\",Ge[Ge.UP=1]=\"UP\",t.CameraMode=void 0,(qe=t.CameraMode||(t.CameraMode={}))[qe.FirstPerson=0]=\"FirstPerson\",qe[qe.ThirdPerson=1]=\"ThirdPerson\",qe[qe.BuildingToolGodMode=2]=\"BuildingToolGodMode\";var Xe,Qe;t.LandRole=void 0,(Xe=t.LandRole||(t.LandRole={})).OWNER=\"owner\",Xe.OPERATOR=\"operator\",t.ActionButton=void 0,(Qe=t.ActionButton||(t.ActionButton={})).POINTER=\"POINTER\",Qe.PRIMARY=\"PRIMARY\",Qe.SECONDARY=\"SECONDARY\",Qe.ANY=\"ANY\",Qe.FORWARD=\"FORWARD\",Qe.BACKWARD=\"BACKWARD\",Qe.RIGHT=\"RIGHT\",Qe.LEFT=\"LEFT\",Qe.JUMP=\"JUMP\",Qe.WALK=\"WALK\",Qe.ACTION_3=\"ACTION_3\",Qe.ACTION_4=\"ACTION_4\",Qe.ACTION_5=\"ACTION_5\",Qe.ACTION_6=\"ACTION_6\";var Ze,Je,Ke=function(t){if(this.callback=t,!t||!(\"apply\"in t)||!(\"call\"in t))throw new Error(\"Callback is not a function\");nn.ensureInstance()},$e=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e=r([P(\"pointerDown\")],e)}(Ke),tn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e=r([P(\"pointerUp\")],e)}(Ke),en=function(t,e){this.fn=t,this.useRaycast=e},nn=function(){function e(){this.buttonIdMapping=[t.ActionButton.POINTER,t.ActionButton.PRIMARY,t.ActionButton.SECONDARY,t.ActionButton.ANY,t.ActionButton.FORWARD,t.ActionButton.BACKWARD,t.ActionButton.RIGHT,t.ActionButton.LEFT,t.ActionButton.JUMP,t.ActionButton.WALK,t.ActionButton.ACTION_3,t.ActionButton.ACTION_4,t.ActionButton.ACTION_5,t.ActionButton.ACTION_6],this.subscriptions=this.buttonIdMapping.reduce((function(t,e){var n;return o(o({},t),((n={})[e]={BUTTON_DOWN:[],BUTTON_UP:[]},n))}),{}),this.internalState=this.buttonIdMapping.reduce((function(t,e){var n;return o(o({},t),((n={})[e]={BUTTON_DOWN:!1},n))}),{})}return Object.defineProperty(e,\"instance\",{get:function(){return e.ensureInstance(),e._instance},enumerable:!1,configurable:!0}),e.ensureInstance=function(){e._instance||(e._instance=new e)},e.prototype.isButtonPressed=function(t){return this.internalState[t]},e.prototype.subscribe=function(t,e,n,i){var o=this;return this.subscriptions[e][t].push(new en(i,n)),function(){o.unsubscribe(t,e,i)}},e.prototype.unsubscribe=function(t,e,n){var i=this.getSubscriptionId(t,e,n);return i>-1&&this.subscriptions[e][t].splice(i,1)},e.prototype.handlePointerEvent=function(e){var n=this.getPointerById(e.buttonId);if(n){var i=o(o({},e),{button:n,direction:(new _t.Vector3).copyFrom(e.direction),origin:(new _t.Vector3).copyFrom(e.origin),hit:void 0}),r=e.hit?o(o({},e.hit),{hitPoint:(new _t.Vector3).copyFrom(e.hit.hitPoint),normal:(new _t.Vector3).copyFrom(e.hit.normal),worldNormal:(new _t.Vector3).copyFrom(e.hit.worldNormal)}):void 0;if(e.type===t.InputEventType.DOWN){this.internalState[n].BUTTON_DOWN=!0;for(var s=0;s<this.subscriptions[n].BUTTON_DOWN.length;s++){(a=this.subscriptions[n].BUTTON_DOWN[s]).useRaycast?i.hit=r:i.hit=void 0,a.fn(i)}if(r&&r.entityId&&N.engine)(h=(d=N.engine.entities[r.entityId])&&d.getComponentOrNull($e))&&(i.hit=r,h.callback(i))}else{this.internalState[n].BUTTON_DOWN=!1;for(s=0;s<this.subscriptions[n].BUTTON_UP.length;s++){var a;(a=this.subscriptions[n].BUTTON_UP[s]).useRaycast?i.hit=r:i.hit=void 0,a.fn(i)}var d,h;if(r&&r.entityId&&N.engine)(h=(d=N.engine.entities[r.entityId])&&d.getComponentOrNull(tn))&&(i.hit=r,h.callback(i))}}},e.prototype.getSubscriptionId=function(t,e,n){for(var i=0;i<this.subscriptions[e][t].length;i++)if(this.subscriptions[e][t][i].fn===n)return i;return-1},e.prototype.getPointerById=function(e){if(e<0||e>=this.buttonIdMapping.length)return null;var n=this.buttonIdMapping[e];return n===t.ActionButton.ANY?null:n},e}();t.CLASS_ID=void 0,(Ze=t.CLASS_ID||(t.CLASS_ID={}))[Ze.TRANSFORM=1]=\"TRANSFORM\",Ze[Ze.UUID_CALLBACK=8]=\"UUID_CALLBACK\",Ze[Ze.BOX_SHAPE=16]=\"BOX_SHAPE\",Ze[Ze.SPHERE_SHAPE=17]=\"SPHERE_SHAPE\",Ze[Ze.PLANE_SHAPE=18]=\"PLANE_SHAPE\",Ze[Ze.CONE_SHAPE=19]=\"CONE_SHAPE\",Ze[Ze.CYLINDER_SHAPE=20]=\"CYLINDER_SHAPE\",Ze[Ze.TEXT_SHAPE=21]=\"TEXT_SHAPE\",Ze[Ze.NFT_SHAPE=22]=\"NFT_SHAPE\",Ze[Ze.UI_WORLD_SPACE_SHAPE=23]=\"UI_WORLD_SPACE_SHAPE\",Ze[Ze.UI_SCREEN_SPACE_SHAPE=24]=\"UI_SCREEN_SPACE_SHAPE\",Ze[Ze.UI_CONTAINER_RECT=25]=\"UI_CONTAINER_RECT\",Ze[Ze.UI_CONTAINER_STACK=26]=\"UI_CONTAINER_STACK\",Ze[Ze.UI_TEXT_SHAPE=27]=\"UI_TEXT_SHAPE\",Ze[Ze.UI_INPUT_TEXT_SHAPE=28]=\"UI_INPUT_TEXT_SHAPE\",Ze[Ze.UI_IMAGE_SHAPE=29]=\"UI_IMAGE_SHAPE\",Ze[Ze.UI_SLIDER_SHAPE=30]=\"UI_SLIDER_SHAPE\",Ze[Ze.CIRCLE_SHAPE=31]=\"CIRCLE_SHAPE\",Ze[Ze.BILLBOARD=32]=\"BILLBOARD\",Ze[Ze.ANIMATION=33]=\"ANIMATION\",Ze[Ze.FONT=34]=\"FONT\",Ze[Ze.UI_FULLSCREEN_SHAPE=40]=\"UI_FULLSCREEN_SHAPE\",Ze[Ze.UI_BUTTON_SHAPE=41]=\"UI_BUTTON_SHAPE\",Ze[Ze.GLTF_SHAPE=54]=\"GLTF_SHAPE\",Ze[Ze.OBJ_SHAPE=55]=\"OBJ_SHAPE\",Ze[Ze.AVATAR_SHAPE=56]=\"AVATAR_SHAPE\",Ze[Ze.BASIC_MATERIAL=64]=\"BASIC_MATERIAL\",Ze[Ze.PBR_MATERIAL=65]=\"PBR_MATERIAL\",Ze[Ze.HIGHLIGHT_ENTITY=66]=\"HIGHLIGHT_ENTITY\",Ze[Ze.SOUND=67]=\"SOUND\",Ze[Ze.TEXTURE=68]=\"TEXTURE\",Ze[Ze.VIDEO_CLIP=70]=\"VIDEO_CLIP\",Ze[Ze.VIDEO_TEXTURE=71]=\"VIDEO_TEXTURE\",Ze[Ze.AVATAR_TEXTURE=72]=\"AVATAR_TEXTURE\",Ze[Ze.AUDIO_CLIP=200]=\"AUDIO_CLIP\",Ze[Ze.AUDIO_SOURCE=201]=\"AUDIO_SOURCE\",Ze[Ze.AUDIO_STREAM=202]=\"AUDIO_STREAM\",Ze[Ze.GIZMOS=203]=\"GIZMOS\",Ze[Ze.SMART_ITEM=204]=\"SMART_ITEM\",Ze[Ze.AVATAR_MODIFIER_AREA=205]=\"AVATAR_MODIFIER_AREA\",Ze[Ze.AVATAR_ATTACH=206]=\"AVATAR_ATTACH\",Ze[Ze.CAMERA_MODE_AREA=207]=\"CAMERA_MODE_AREA\",Ze[Ze.NAME=300]=\"NAME\",Ze[Ze.LOCKED_ON_EDIT=301]=\"LOCKED_ON_EDIT\",Ze[Ze.VISIBLE_ON_EDIT=302]=\"VISIBLE_ON_EDIT\",t.AvatarModifiers=void 0,(Je=t.AvatarModifiers||(t.AvatarModifiers={})).HIDE_AVATARS=\"HIDE_AVATARS\",Je.DISABLE_PASSPORTS=\"DISABLE_PASSPORTS\";var on,rn=function(e){function n(t){var n=e.call(this)||this;return n.area=t.area,n.modifiers=t.modifiers,n.excludeIds=t.excludeIds,n}return i(n,e),r([B.field,s(\"design:type\",Object)],n.prototype,\"area\",void 0),r([B.field,s(\"design:type\",Array)],n.prototype,\"modifiers\",void 0),r([B.field,s(\"design:type\",Array)],n.prototype,\"excludeIds\",void 0),n=r([P(\"engine.avatarModifierArea\",t.CLASS_ID.AVATAR_MODIFIER_AREA),s(\"design:paramtypes\",[Object])],n)}(B),sn=function(e){function n(t){void 0===t&&(t={});var n=e.call(this)||this;return n.position=t.position||_t.Vector3.Zero(),n.rotation=t.rotation||_t.Quaternion.Identity,n.scale=t.scale||new _t.Vector3(1,1,1),n}return i(n,e),Object.defineProperty(n.prototype,\"eulerAngles\",{get:function(){return this.rotation.eulerAngles},enumerable:!1,configurable:!0}),n.prototype.lookAt=function(t,e){void 0===e&&(e=_t.MathTmp.staticUp);var n=new _t.Matrix;return _t.Matrix.LookAtLHToRef(this.position,t,e,n),n.invert(),_t.Quaternion.FromRotationMatrixToRef(n,this.rotation),this},n.prototype.rotate=function(t,e){return this.rotation.multiplyInPlace(this.rotation.angleAxis(e,t)),this},n.prototype.translate=function(t){return this.position.addInPlace(t),this},r([B.field,s(\"design:type\",_t.Vector3)],n.prototype,\"position\",void 0),r([B.field,s(\"design:type\",_t.Quaternion)],n.prototype,\"rotation\",void 0),r([B.field,s(\"design:type\",_t.Vector3)],n.prototype,\"scale\",void 0),n=r([P(\"engine.transform\",t.CLASS_ID.TRANSFORM),s(\"design:paramtypes\",[Object])],n)}(B);t.AttachToAvatarAnchorPointId=void 0,(on=t.AttachToAvatarAnchorPointId||(t.AttachToAvatarAnchorPointId={}))[on.Position=0]=\"Position\",on[on.NameTag=1]=\"NameTag\",on[on.LeftHand=2]=\"LeftHand\",on[on.RightHand=3]=\"RightHand\";var an,dn=function(e){function n(n){void 0===n&&(n={});var i=e.call(this)||this;return i.avatarId=n.avatarId||\"\",i.anchorPointId=n.anchorPointId||t.AttachToAvatarAnchorPointId.Position,i}return i(n,e),r([B.field,s(\"design:type\",String)],n.prototype,\"avatarId\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"anchorPointId\",void 0),r([B.field,s(\"design:type\",String)],n.prototype,\"avatarSceneId\",void 0),n=r([P(\"engine.transform\",t.CLASS_ID.AVATAR_ATTACH),s(\"design:paramtypes\",[Object])],n)}(B),hn=function(e){function n(t,n,i){void 0===t&&(t=!0),void 0===n&&(n=!0),void 0===i&&(i=!0);var o=e.call(this)||this;return o.x=!0,o.y=!0,o.z=!0,o.x=t,o.y=n,o.z=i,o}return i(n,e),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"x\",void 0),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"y\",void 0),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"z\",void 0),n=r([P(\"engine.billboard\",t.CLASS_ID.BILLBOARD),s(\"design:paramtypes\",[Boolean,Boolean,Boolean])],n)}(B),ln=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.withCollisions=!0,e.isPointerBlocker=!0,e.visible=!0,e}return i(e,t),r([B.field,s(\"design:type\",Boolean)],e.prototype,\"withCollisions\",void 0),r([B.field,s(\"design:type\",Boolean)],e.prototype,\"isPointerBlocker\",void 0),r([B.field,s(\"design:type\",Boolean)],e.prototype,\"visible\",void 0),e}(B),pn=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return i(n,e),r([B.field,s(\"design:type\",Array)],n.prototype,\"uvs\",void 0),n=r([N(\"engine.shape\",t.CLASS_ID.BOX_SHAPE)],n)}(ln),cn=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return i(n,e),n=r([N(\"engine.shape\",t.CLASS_ID.SPHERE_SHAPE)],n)}(ln),un=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return i(n,e),r([B.field,s(\"design:type\",Number)],n.prototype,\"segments\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"arc\",void 0),n=r([N(\"engine.shape\",t.CLASS_ID.CIRCLE_SHAPE)],n)}(ln),yn=function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.width=1,t.height=1,t}return i(n,e),r([B.field,s(\"design:type\",Number)],n.prototype,\"width\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"height\",void 0),r([B.field,s(\"design:type\",Array)],n.prototype,\"uvs\",void 0),n=r([N(\"engine.shape\",t.CLASS_ID.PLANE_SHAPE)],n)}(ln),fn=function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.radiusTop=0,t.radiusBottom=1,t.segmentsHeight=1,t.segmentsRadial=36,t.openEnded=!1,t.radius=null,t.arc=360,t}return i(n,e),r([B.field,s(\"design:type\",Number)],n.prototype,\"radiusTop\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"radiusBottom\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"segmentsHeight\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"segmentsRadial\",void 0),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"openEnded\",void 0),r([B.field,s(\"design:type\",Object)],n.prototype,\"radius\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"arc\",void 0),n=r([N(\"engine.shape\",t.CLASS_ID.CONE_SHAPE)],n)}(ln),mn=function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.radiusTop=1,t.radiusBottom=1,t.segmentsHeight=1,t.segmentsRadial=36,t.openEnded=!1,t.radius=null,t.arc=360,t}return i(n,e),r([B.field,s(\"design:type\",Number)],n.prototype,\"radiusTop\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"radiusBottom\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"segmentsHeight\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"segmentsRadial\",void 0),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"openEnded\",void 0),r([B.field,s(\"design:type\",Object)],n.prototype,\"radius\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"arc\",void 0),n=r([N(\"engine.shape\",t.CLASS_ID.CYLINDER_SHAPE)],n)}(ln),gn=function(e){function n(t){var n=e.call(this)||this;return n.src=t,n}return i(n,e),r([ln.readonly,s(\"design:type\",String)],n.prototype,\"src\",void 0),n=r([N(\"engine.shape\",t.CLASS_ID.GLTF_SHAPE),s(\"design:paramtypes\",[String])],n)}(ln);t.PictureFrameStyle=void 0,(an=t.PictureFrameStyle||(t.PictureFrameStyle={}))[an.Classic=0]=\"Classic\",an[an.Baroque_Ornament=1]=\"Baroque_Ornament\",an[an.Diamond_Ornament=2]=\"Diamond_Ornament\",an[an.Minimal_Wide=3]=\"Minimal_Wide\",an[an.Minimal_Grey=4]=\"Minimal_Grey\",an[an.Blocky=5]=\"Blocky\",an[an.Gold_Edges=6]=\"Gold_Edges\",an[an.Gold_Carved=7]=\"Gold_Carved\",an[an.Gold_Wide=8]=\"Gold_Wide\",an[an.Gold_Rounded=9]=\"Gold_Rounded\",an[an.Metal_Medium=10]=\"Metal_Medium\",an[an.Metal_Wide=11]=\"Metal_Wide\",an[an.Metal_Slim=12]=\"Metal_Slim\",an[an.Metal_Rounded=13]=\"Metal_Rounded\",an[an.Pins=14]=\"Pins\",an[an.Minimal_Black=15]=\"Minimal_Black\",an[an.Minimal_White=16]=\"Minimal_White\",an[an.Tape=17]=\"Tape\",an[an.Wood_Slim=18]=\"Wood_Slim\",an[an.Wood_Wide=19]=\"Wood_Wide\",an[an.Wood_Twigs=20]=\"Wood_Twigs\",an[an.Canvas=21]=\"Canvas\",an[an.None=22]=\"None\";var vn,_n=function(e){function n(n,i){void 0===i&&(i={});var o=e.call(this)||this;o.src=n;var r=new _t.Color3(.6404918,.611472,.8584906),s=t.PictureFrameStyle.Classic;return\"r\"in i?r=i:null!==i&&(i.color&&(r=i.color),i.style&&(s=i.style)),o.color=r,o.style=s,o}return i(n,e),r([ln.readonly,s(\"design:type\",String)],n.prototype,\"src\",void 0),r([ln.readonly,s(\"design:type\",Number)],n.prototype,\"style\",void 0),r([B.field,s(\"design:type\",_t.Color3)],n.prototype,\"color\",void 0),n=r([N(\"engine.shape\",t.CLASS_ID.NFT_SHAPE),s(\"design:paramtypes\",[String,Object])],n)}(ln),bn=function(e){function n(t,n){var i=e.call(this)||this,o=new RegExp(\"data:[a-z-]+/[a-z-]+;base64\");if((t.length>2048||o.test(t))&&u(\"⚠️🚨 Base64 textures will be deprecated in version 7 of decentraland-ecs\"),i.src=t,n)for(var r in n){i[r]=n[r]}return i}return i(n,e),r([B.readonly,s(\"design:type\",String)],n.prototype,\"src\",void 0),r([B.readonly,s(\"design:type\",Number)],n.prototype,\"samplingMode\",void 0),r([B.readonly,s(\"design:type\",Number)],n.prototype,\"wrap\",void 0),r([B.readonly,s(\"design:type\",Boolean)],n.prototype,\"hasAlpha\",void 0),n=r([N(\"engine.texture\",t.CLASS_ID.TEXTURE),s(\"design:paramtypes\",[String,Object])],n)}(B),xn=function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.states=[],t}return i(n,e),n.prototype.addClip=function(t){var e=this;return this.states.push(t),t.onChange((function(){e.dirty=!0})),t.owner=this,this},n.prototype.getClip=function(t){for(var e=0;e<this.states.length;e++){var n=this.states[e];if(n.clip===t)return n}var i=new Ye(t);return this.addClip(i),i},n.prototype.stop=function(t){if(t)t.playing=!1,t.shouldReset=!0;else for(var e=0;e<this.states.length;e++){var n=this.states[e];this.stop(n)}},n.prototype.play=function(t,e){void 0===e&&(e=!1);for(var n=0;n<this.states.length;n++){var i=this.states[n];i.layer===t.layer&&t!==i&&this.pause(i)}e&&(t.shouldReset=!0),t.playing=!0,t.dirty=!0,t.data.nonce=Math.random()},n.prototype.pause=function(t){if(t)t.playing=!1;else for(var e=0;e<this.states.length;e++){var n=this.states[e];this.pause(n)}},r([B.readonly,s(\"design:type\",Array)],n.prototype,\"states\",void 0),n=r([P(\"engine.animator\",t.CLASS_ID.ANIMATION)],n)}(ln),wn=function(e){function n(t){var n=e.call(this)||this;return n.src=t,n}return i(n,e),r([B.readonly,s(\"design:type\",String)],n.prototype,\"src\",void 0),n=r([N(\"engine.shape\",t.CLASS_ID.OBJ_SHAPE),s(\"design:paramtypes\",[String])],n)}(ln),Tn=function(e){function n(t){void 0===t&&(t=\"\");var n=e.call(this)||this;return n.src=t,n}return i(n,e),r([B.readonly,s(\"design:type\",String)],n.prototype,\"src\",void 0),n=r([N(\"engine.font\",t.CLASS_ID.FONT),s(\"design:paramtypes\",[String])],n)}(B);t.Fonts=void 0,(vn=t.Fonts||(t.Fonts={})).SanFrancisco=\"builtin:SF-UI-Text-Regular SDF\",vn.SanFrancisco_Heavy=\"builtin:SF-UI-Text-Heavy SDF\",vn.SanFrancisco_Semibold=\"builtin:SF-UI-Text-Semibold SDF\",vn.LiberationSans=\"builtin:LiberationSans SDF\",vn.SansSerif=\"SansSerif\",vn.SansSerif_Heavy=\"SansSerif_Heavy\",vn.SansSerif_Bold=\"SansSerif_Bold\",vn.SansSerif_SemiBold=\"SansSerif_SemiBold\";var An,Rn=function(e){function n(t){var n=e.call(this)||this;return n.outlineWidth=0,n.outlineColor=new _t.Color3(1,1,1),n.color=new _t.Color3(1,1,1),n.fontSize=10,n.opacity=1,n.value=\"\",n.lineSpacing=\"0px\",n.lineCount=0,n.textWrapping=!1,n.shadowBlur=0,n.shadowOffsetX=0,n.shadowOffsetY=0,n.shadowColor=new _t.Color3(1,1,1),n.hTextAlign=\"center\",n.vTextAlign=\"center\",n.width=1,n.height=1,n.paddingTop=0,n.paddingRight=0,n.paddingBottom=0,n.paddingLeft=0,n.billboard=!1,n.visible=!0,t&&(n.value=t),n}return i(n,e),r([B.field,s(\"design:type\",Number)],n.prototype,\"outlineWidth\",void 0),r([B.field,s(\"design:type\",_t.Color3)],n.prototype,\"outlineColor\",void 0),r([B.field,s(\"design:type\",_t.Color3)],n.prototype,\"color\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"fontSize\",void 0),r([B.component,s(\"design:type\",Tn)],n.prototype,\"font\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"opacity\",void 0),r([B.field,s(\"design:type\",String)],n.prototype,\"value\",void 0),r([B.field,s(\"design:type\",String)],n.prototype,\"lineSpacing\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"lineCount\",void 0),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"textWrapping\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"shadowBlur\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"shadowOffsetX\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"shadowOffsetY\",void 0),r([B.field,s(\"design:type\",_t.Color3)],n.prototype,\"shadowColor\",void 0),r([B.field,s(\"design:type\",String)],n.prototype,\"hTextAlign\",void 0),r([B.field,s(\"design:type\",String)],n.prototype,\"vTextAlign\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"width\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"height\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"paddingTop\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"paddingRight\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"paddingBottom\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"paddingLeft\",void 0),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"billboard\",void 0),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"visible\",void 0),n=r([P(\"engine.text\",t.CLASS_ID.TEXT_SHAPE),s(\"design:paramtypes\",[String])],n)}(B);t.TransparencyMode=void 0,(An=t.TransparencyMode||(t.TransparencyMode={}))[An.OPAQUE=0]=\"OPAQUE\",An[An.ALPHA_TEST=1]=\"ALPHA_TEST\",An[An.ALPHA_BLEND=2]=\"ALPHA_BLEND\",An[An.ALPHA_TEST_AND_BLEND=3]=\"ALPHA_TEST_AND_BLEND\",An[An.AUTO=4]=\"AUTO\";var Sn,Cn=function(e){function n(){var n=null!==e&&e.apply(this,arguments)||this;return n.alphaTest=.5,n.castShadows=!0,n.transparencyMode=t.TransparencyMode.AUTO,n}return i(n,e),r([B.field,s(\"design:type\",Number)],n.prototype,\"alphaTest\",void 0),r([B.field,s(\"design:type\",Object)],n.prototype,\"albedoColor\",void 0),r([B.field,s(\"design:type\",_t.Color3)],n.prototype,\"emissiveColor\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"metallic\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"roughness\",void 0),r([B.field,s(\"design:type\",_t.Color3)],n.prototype,\"reflectivityColor\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"directIntensity\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"microSurface\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"emissiveIntensity\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"specularIntensity\",void 0),r([B.component,s(\"design:type\",Object)],n.prototype,\"albedoTexture\",void 0),r([B.component,s(\"design:type\",Object)],n.prototype,\"alphaTexture\",void 0),r([B.component,s(\"design:type\",Object)],n.prototype,\"emissiveTexture\",void 0),r([B.component,s(\"design:type\",Object)],n.prototype,\"bumpTexture\",void 0),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"castShadows\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"transparencyMode\",void 0),n=r([N(\"engine.material\",t.CLASS_ID.PBR_MATERIAL)],n)}(B),En=function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.alphaTest=.5,t.castShadows=!0,t}return i(n,e),r([B.component,s(\"design:type\",Object)],n.prototype,\"texture\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"alphaTest\",void 0),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"castShadows\",void 0),n=r([N(\"engine.material\",t.CLASS_ID.BASIC_MATERIAL)],n)}(B),In=function(t){function e(e){var n=t.call(this)||this;if(n.uuid=f(\"UUID\"),!e||!(\"apply\"in e)||!(\"call\"in e))throw new Error(\"Callback is not a function\");return n.callback=e,n}return i(e,t),e.uuidEvent=function(t,n){if(delete t[n]){var i=n+\"_\"+Math.random();t[i]=void 0,Object.defineProperty(t,i,o(o({},Object.getOwnPropertyDescriptor(t,i)),{enumerable:!1})),Object.defineProperty(t,n.toString(),{get:function(){return this[i]},set:function(t){var o=this[i];if(t){if(!(t instanceof e))throw new Error(\"value is not an OnUUIDEvent\");this.data[n]=t.uuid}else this.data[n]=null;if(this[i]=t,t!==o){this.dirty=!0;for(var r=0;r<this.subscriptions.length;r++)this.subscriptions[r](n,t,o)}},enumerable:!0})}},e.prototype.toJSON=function(){return{uuid:this.uuid,type:this.type}},r([B.field,s(\"design:type\",Function)],e.prototype,\"callback\",void 0),e}(B),zn=function(e){function n(){var n=null!==e&&e.apply(this,arguments)||this;return n.button=t.ActionButton.ANY,n.hoverText=\"Interact\",n.distance=10,n.showFeedback=!0,n}return i(n,e),n.prototype.toJSON=function(){return{uuid:this.uuid,type:this.type,button:this.button,hoverText:this.hoverText,distance:this.distance,showFeedback:this.showFeedback}},r([B.field,s(\"design:type\",String)],n.prototype,\"button\",void 0),r([B.field,s(\"design:type\",String)],n.prototype,\"hoverText\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"distance\",void 0),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"showFeedback\",void 0),n}(In),On=function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.type=\"onPointerLock\",t}return i(n,e),r([B.readonly,s(\"design:type\",String)],n.prototype,\"type\",void 0),n=r([P(\"engine.onPointerLock\",t.CLASS_ID.UUID_CALLBACK)],n)}(In),Mn=function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.type=\"onAnimationEnd\",t}return i(n,e),r([B.readonly,s(\"design:type\",String)],n.prototype,\"type\",void 0),n=r([P(\"engine.onAnimationEnd\",t.CLASS_ID.UUID_CALLBACK)],n)}(In),Pn=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return i(n,e),n=r([P(\"engine.smartItem\",t.CLASS_ID.SMART_ITEM)],n)}(B),Nn=function(e){function n(t){var n=e.call(this)||this;return n.url=t,n}return i(n,e),r([B.readonly,s(\"design:type\",String)],n.prototype,\"url\",void 0),n=r([N(\"engine.VideoClip\",t.CLASS_ID.VIDEO_CLIP),s(\"design:paramtypes\",[String])],n)}(B);t.VideoStatus=void 0,(Sn=t.VideoStatus||(t.VideoStatus={}))[Sn.NONE=0]=\"NONE\",Sn[Sn.ERROR=1]=\"ERROR\",Sn[Sn.LOADING=2]=\"LOADING\",Sn[Sn.READY=3]=\"READY\",Sn[Sn.PLAYING=4]=\"PLAYING\",Sn[Sn.BUFFERING=5]=\"BUFFERING\";var Fn,Ln=function(e){function n(n,i){var o=e.call(this)||this;if(o.volume=1,o.playbackRate=1,o.loop=!1,o.seek=-1,o._position=-1,o._videoLength=-1,o._status=t.VideoStatus.NONE,o.playing=!1,!(n instanceof Nn))throw new Error(\"Trying to create VideoTexture(VideoClip) with an invalid VideoClip\");if(o.videoClipId=D(n),i)for(var r in i){o[r]=i[r]}return o}return i(n,e),n.prototype.play=function(){this.playing=!0},n.prototype.pause=function(){this.playing=!1},n.prototype.reset=function(){this.seekTime(0),this.pause()},n.prototype.seekTime=function(t){this.seek=t,this.dirty=!0,this.data.nonce=Math.random()},n.prototype.toJSON=function(){if(this.seek>=0){var t=JSON.parse(JSON.stringify(e.prototype.toJSON.call(this)));return this.seek=-1,t}return e.prototype.toJSON.call(this)},n.prototype.update=function(e){e.videoClipId===this.videoClipId&&(this._status=e.videoStatus||t.VideoStatus.NONE,this._videoLength=e.totalVideoLength,this._position=e.currentOffset)},Object.defineProperty(n.prototype,\"position\",{get:function(){return this._position},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,\"videoLength\",{get:function(){return this._videoLength},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,\"status\",{get:function(){return this._status},enumerable:!1,configurable:!0}),r([B.readonly,s(\"design:type\",String)],n.prototype,\"videoClipId\",void 0),r([B.readonly,s(\"design:type\",Number)],n.prototype,\"samplingMode\",void 0),r([B.readonly,s(\"design:type\",Number)],n.prototype,\"wrap\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"volume\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"playbackRate\",void 0),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"loop\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"seek\",void 0),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"playing\",void 0),n=r([N(\"engine.VideoTexture\",t.CLASS_ID.VIDEO_TEXTURE),s(\"design:paramtypes\",[Nn,Object])],n)}(B),Dn=function(e){function n(t){var n=e.call(this)||this;return n.area=t.area,n.cameraMode=t.cameraMode,n}return i(n,e),r([B.field,s(\"design:type\",Object)],n.prototype,\"area\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"cameraMode\",void 0),n=r([P(\"engine.cameraModeArea\",t.CLASS_ID.CAMERA_MODE_AREA),s(\"design:paramtypes\",[Object])],n)}(B),Bn=function(e){function n(t,n){var i=e.call(this)||this;if(i.userId=t,n)for(var o in n){i[o]=n[o]}return i}return i(n,e),r([B.readonly,s(\"design:type\",String)],n.prototype,\"userId\",void 0),r([B.readonly,s(\"design:type\",Number)],n.prototype,\"samplingMode\",void 0),r([B.readonly,s(\"design:type\",Number)],n.prototype,\"wrap\",void 0),r([B.readonly,s(\"design:type\",Boolean)],n.prototype,\"hasAlpha\",void 0),n=r([N(\"engine.texture\",t.CLASS_ID.AVATAR_TEXTURE),s(\"design:paramtypes\",[String,Object])],n)}(B),Un=function(){function e(){var e=this;this.position=new _t.Vector3,this.rotation=new _t.Quaternion,this.feetPosition=new _t.Vector3,this.worldPosition=new _t.Vector3,this.lastEventPosition={x:0,y:0,z:0},this.lastEventWorldPosition={x:0,y:0,z:0},this.lastEventRotation={x:0,y:0,z:0,w:1},this._playerHeight=1.6,this._cameraMode=t.CameraMode.ThirdPerson,\"undefined\"!=typeof dcl&&(dcl.subscribe(\"positionChanged\"),dcl.subscribe(\"rotationChanged\"),dcl.subscribe(\"cameraModeChanged\"),dcl.onEvent((function(t){switch(t.type){case\"positionChanged\":e.positionChanged(t.data);break;case\"rotationChanged\":e.rotationChanged(t.data);break;case\"cameraModeChanged\":e.cameraModeChanged(t.data)}}))),Object.defineProperty(this.position,\"x\",{get:function(){return e.lastEventPosition.x}}),Object.defineProperty(this.position,\"y\",{get:function(){return e.lastEventPosition.y}}),Object.defineProperty(this.position,\"z\",{get:function(){return e.lastEventPosition.z}}),Object.defineProperty(this.worldPosition,\"x\",{get:function(){return e.lastEventWorldPosition.x}}),Object.defineProperty(this.worldPosition,\"y\",{get:function(){return e.lastEventWorldPosition.y}}),Object.defineProperty(this.worldPosition,\"z\",{get:function(){return e.lastEventWorldPosition.z}}),Object.defineProperty(this.feetPosition,\"x\",{get:function(){return e.lastEventPosition.x}}),Object.defineProperty(this.feetPosition,\"y\",{get:function(){return e.lastEventPosition.y-e.playerHeight}}),Object.defineProperty(this.feetPosition,\"z\",{get:function(){return e.lastEventPosition.z}}),Object.defineProperty(this.rotation,\"x\",{get:function(){return e.lastEventRotation.x}}),Object.defineProperty(this.rotation,\"y\",{get:function(){return e.lastEventRotation.y}}),Object.defineProperty(this.rotation,\"z\",{get:function(){return e.lastEventRotation.z}}),Object.defineProperty(this.rotation,\"w\",{get:function(){return e.lastEventRotation.w}})}return Object.defineProperty(e,\"instance\",{get:function(){return e._instance||(e._instance=new e),e._instance},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,\"playerHeight\",{get:function(){return this._playerHeight},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,\"cameraMode\",{get:function(){return this._cameraMode},enumerable:!1,configurable:!0}),e.prototype.positionChanged=function(t){this.lastEventPosition=t.position,this.lastEventWorldPosition=t.cameraPosition,this._playerHeight=t.playerHeight},e.prototype.rotationChanged=function(t){this.lastEventRotation=t.quaternion},e.prototype.cameraModeChanged=function(t){this._cameraMode=t.cameraMode},e}();!function(t){t.HitFirst=\"rqhf\",t.HitAll=\"rqha\"}(Fn||(Fn={}));var Vn,Hn=function(){function t(){this.queries={}}return Object.defineProperty(t,\"instance\",{get:function(){return t.ensureInstance(),t._instance},enumerable:!1,configurable:!0}),t.ensureInstance=function(){t._instance||(t._instance=new t)},t.prototype.getRayFromCamera=function(t){var e=Un.instance.rotation,n=_t.Matrix.Identity();e.toRotationMatrix(n);var i=_t.Vector3.TransformCoordinates(_t.Vector3.Forward(),n);return{origin:Un.instance.position,direction:i,distance:t}},t.prototype.getRayFromPositions=function(t,e){var n=e.subtract(t),i=n.length();return{origin:t,direction:n.normalize(),distance:i}},t.prototype.hitFirst=function(t,e,n){var i=\"number\"==typeof n?Fn.HitFirst+n:m();this.queries[i]=e,\"undefined\"!=typeof dcl&&dcl.query(\"raycast\",{queryId:i,queryType:\"HitFirst\",ray:t})},t.prototype.hitAll=function(t,e,n){var i=\"number\"==typeof n?Fn.HitAll+n:m();this.queries[i]=e,\"undefined\"!=typeof dcl&&dcl.query(\"raycast\",{queryId:i,queryType:\"HitAll\",ray:t})},t.prototype.hitFirstAvatar=function(t,e){u(\"not implemented yet\")},t.prototype.hitAllAvatars=function(t,e){u(\"not implemented yet\")},t.prototype.handleRaycastHitFirstResponse=function(t){this.queries[t.payload.queryId](t.payload.payload),delete this.queries[t.payload.queryId]},t.prototype.handleRaycastHitAllResponse=function(t){this.queries[t.payload.queryId](t.payload.payload),delete this.queries[t.payload.queryId]},t}(),kn=function(){function t(){}return t.prototype.activate=function(t){t.eventManager.addListener(K,this,(function(t){\"HitFirst\"===t.payload.queryType?Hn.instance.handleRaycastHitFirstResponse(t):\"HitAll\"===t.payload.queryType&&Hn.instance.handleRaycastHitAllResponse(t)})),\"undefined\"!=typeof dcl&&dcl.subscribe(\"raycastResponse\")},t.prototype.deactivate=function(){\"undefined\"!=typeof dcl&&dcl.unsubscribe(\"raycastResponse\")},t}(),jn=function(){function t(){}return t.prototype.activate=function(t){t.eventManager.addListener($,this,(function(t){nn.instance.handlePointerEvent(t.payload)})),\"undefined\"!=typeof dcl&&(dcl.subscribe(\"pointerUp\"),dcl.subscribe(\"pointerDown\"),dcl.subscribe(\"actionButtonEvent\"))},t.prototype.deactivate=function(){\"undefined\"!=typeof dcl&&(dcl.unsubscribe(\"pointerUp\"),dcl.unsubscribe(\"pointerDown\"),dcl.unsubscribe(\"actionButtonEvent\"))},t}(),Gn=function(){function t(){this.handlerMap={}}return t.prototype.activate=function(t){t.eventManager.addListener(J,this,this.handleEvent),t.eventManager.addListener(A,this,this.componentAdded),t.eventManager.addListener(T,this,this.componentRemoved),\"undefined\"!=typeof dcl&&dcl.subscribe(\"uuidEvent\")},t.prototype.deactivate=function(){\"undefined\"!=typeof dcl&&dcl.unsubscribe(\"uuidEvent\")},t.prototype.onAddEntity=function(t){for(var e in t.components){var n=t.components[e];n instanceof In&&(this.handlerMap[n.uuid]=n)}},t.prototype.onRemoveEntity=function(t){for(var e in t.components){var n=t.components[e];n instanceof In&&delete this.handlerMap[n.uuid]}},t.prototype.componentAdded=function(t){if(t.entity.isAddedToEngine()){var e=t.entity.components[t.componentName];e instanceof In&&(this.handlerMap[e.uuid]=e)}},t.prototype.componentRemoved=function(t){t.entity.isAddedToEngine()&&t.component instanceof In&&delete this.handlerMap[t.component.uuid]},t.prototype.handleEvent=function(t){if(t.uuid in this.handlerMap){var e=this.handlerMap[t.uuid];e&&e.callback&&\"call\"in e.callback&&e.callback(t.payload)}},t}(),qn=new kn,Wn=new jn,Yn=new Gn,Xn=function(e){function n(t){var n=e.call(this)||this;return n.loop=!1,n.volume=1,n.url=t,n}return i(n,e),r([B.readonly,s(\"design:type\",String)],n.prototype,\"url\",void 0),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"loop\",void 0),r([B.field,s(\"design:type\",String)],n.prototype,\"loadingCompleteEventId\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"volume\",void 0),n=r([N(\"engine.AudioClip\",t.CLASS_ID.AUDIO_CLIP),s(\"design:paramtypes\",[String])],n)}(B),Qn=function(e){function n(t){var n=e.call(this)||this;if(n.audioClip=t,n.loop=!1,n.volume=1,n.playing=!1,n.pitch=1,n.playedAtTimestamp=Date.now(),!(t instanceof Xn))throw new Error(\"Trying to create AudioSource(AudioClip) with an invalid AudioClip\");return n.audioClipId=D(t),n}return i(n,e),n.prototype.playOnce=function(){return this.playing=!0,this.dirty=!0,this.playedAtTimestamp=Date.now(),this.data.nonce=Math.random(),this},r([B.readonly,s(\"design:type\",String)],n.prototype,\"audioClipId\",void 0),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"loop\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"volume\",void 0),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"playing\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"pitch\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"playedAtTimestamp\",void 0),n=r([P(\"engine.AudioSource\",t.CLASS_ID.AUDIO_SOURCE),s(\"design:paramtypes\",[Xn])],n)}(B),Zn=function(e){function n(t){var n=e.call(this)||this;return n.playing=!1,n.volume=1,n.url=t,n.playing=!0,n}return i(n,e),r([B.readonly,s(\"design:type\",String)],n.prototype,\"url\",void 0),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"playing\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"volume\",void 0),n=r([P(\"engine.AudioStream\",t.CLASS_ID.AUDIO_STREAM),s(\"design:paramtypes\",[String])],n)}(B);t.Gizmo=void 0,(Vn=t.Gizmo||(t.Gizmo={})).MOVE=\"MOVE\",Vn.ROTATE=\"ROTATE\",Vn.SCALE=\"SCALE\",Vn.NONE=\"NONE\";var Jn,Kn=function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.type=\"gizmoEvent\",t}return i(n,e),r([B.readonly,s(\"design:type\",String)],n.prototype,\"type\",void 0),n=r([P(\"engine.gizmoEvent\",t.CLASS_ID.UUID_CALLBACK)],n)}(In),$n=function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.position=!0,t.rotation=!0,t.scale=!0,t.cycle=!0,t.localReference=!1,t}return i(n,e),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"position\",void 0),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"rotation\",void 0),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"scale\",void 0),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"cycle\",void 0),r([B.field,s(\"design:type\",String)],n.prototype,\"selectedGizmo\",void 0),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"localReference\",void 0),n=r([P(\"engine.gizmos\",t.CLASS_ID.GIZMOS)],n)}(B),ti=function(e){function n(t){var n=e.call(this,t)||this;return n.type=\"onFocus\",Yn.handlerMap[n.uuid]=n,n}return i(n,e),r([B.readonly,s(\"design:type\",String)],n.prototype,\"type\",void 0),n=r([P(\"engine.onFocus\",t.CLASS_ID.UUID_CALLBACK),s(\"design:paramtypes\",[Function])],n)}(In),ei=function(e){function n(t){var n=e.call(this,t)||this;return n.type=\"onTextSubmit\",Yn.handlerMap[n.uuid]=n,n}return i(n,e),r([B.readonly,s(\"design:type\",String)],n.prototype,\"type\",void 0),n=r([P(\"engine.onTextSubmit\",t.CLASS_ID.UUID_CALLBACK),s(\"design:paramtypes\",[Function])],n)}(In),ni=function(e){function n(t){var n=e.call(this,t)||this;return n.type=\"onBlur\",Yn.handlerMap[n.uuid]=n,n}return i(n,e),r([B.readonly,s(\"design:type\",String)],n.prototype,\"type\",void 0),n=r([P(\"engine.onBlur\",t.CLASS_ID.UUID_CALLBACK),s(\"design:paramtypes\",[Function])],n)}(In),ii=function(e){function n(t){var n=e.call(this,t)||this;return n.type=\"onEnter\",Yn.handlerMap[n.uuid]=n,n}return i(n,e),r([B.readonly,s(\"design:type\",String)],n.prototype,\"type\",void 0),n=r([P(\"engine.onEnter\",t.CLASS_ID.UUID_CALLBACK),s(\"design:paramtypes\",[Function])],n)}(In),oi=function(e){function n(t){var n=e.call(this,t)||this;return n.type=\"onChange\",Yn.handlerMap[n.uuid]=n,n}return i(n,e),r([B.readonly,s(\"design:type\",String)],n.prototype,\"type\",void 0),n=r([P(\"engine.onChange\",t.CLASS_ID.UUID_CALLBACK),s(\"design:paramtypes\",[Function])],n)}(In),ri=function(e){function n(t,n){var i=e.call(this,t)||this;return i.type=\"onClick\",Yn.handlerMap[i.uuid]=i,n&&(i.showFeedback=!(!1===n.showFeedback),n.button&&(i.button=n.button),n.hoverText&&(i.hoverText=n.hoverText),n.distance&&(i.distance=n.distance)),i}return i(n,e),r([B.readonly,s(\"design:type\",String)],n.prototype,\"type\",void 0),n=r([P(\"engine.onClick\",t.CLASS_ID.UUID_CALLBACK),s(\"design:paramtypes\",[Function,Object])],n)}(zn),si=function(e){function n(t,n){var i=e.call(this,t)||this;return i.type=\"pointerDown\",Yn.handlerMap[i.uuid]=i,n&&(i.showFeedback=!(!1===n.showFeedback),n.button&&(i.button=n.button),n.hoverText&&(i.hoverText=n.hoverText),n.distance&&(i.distance=n.distance)),i}return i(n,e),r([B.readonly,s(\"design:type\",String)],n.prototype,\"type\",void 0),n=r([P(\"engine.pointerDown\",t.CLASS_ID.UUID_CALLBACK),s(\"design:paramtypes\",[Function,Object])],n)}(zn),ai=function(e){function n(t,n){var i=e.call(this,t)||this;return i.type=\"pointerUp\",Yn.handlerMap[i.uuid]=i,n&&(i.showFeedback=!(!1===n.showFeedback),n.button&&(i.button=n.button),n.hoverText&&(i.hoverText=n.hoverText),n.distance&&(i.distance=n.distance)),i}return i(n,e),r([B.readonly,s(\"design:type\",String)],n.prototype,\"type\",void 0),n=r([P(\"engine.pointerUp\",t.CLASS_ID.UUID_CALLBACK),s(\"design:paramtypes\",[Function,Object])],n)}(zn),di=function(e){function n(t,n){var i=e.call(this,t)||this;return i.type=\"pointerHoverEnter\",Yn.handlerMap[i.uuid]=i,n&&n.distance&&(i.distance=n.distance),i}return i(n,e),r([B.readonly,s(\"design:type\",String)],n.prototype,\"type\",void 0),n=r([P(\"engine.pointerHoverEnter\",t.CLASS_ID.UUID_CALLBACK),s(\"design:paramtypes\",[Function,Object])],n)}(zn),hi=function(e){function n(t){var n=e.call(this,t)||this;return n.type=\"pointerHoverExit\",Yn.handlerMap[n.uuid]=n,n.distance=160,n}return i(n,e),r([B.readonly,s(\"design:type\",String)],n.prototype,\"type\",void 0),n=r([P(\"engine.pointerHoverExit\",t.CLASS_ID.UUID_CALLBACK),s(\"design:paramtypes\",[Function])],n)}(zn),li=function(t){function e(e){var n=t.call(this)||this;return n.name=null,n.visible=!0,n.opacity=1,n.hAlign=\"center\",n.vAlign=\"center\",n.width=\"100px\",n.height=\"50px\",n.positionX=\"0px\",n.positionY=\"0px\",n.isPointerBlocker=!0,e&&(n._parent=e,n.data.parentComponent=D(e)),n}return i(e,t),Object.defineProperty(e.prototype,\"parent\",{get:function(){return this._parent},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,\"parentComponent\",{get:function(){return this.data.parentComponent},enumerable:!1,configurable:!0}),r([B.field,s(\"design:type\",Object)],e.prototype,\"name\",void 0),r([B.field,s(\"design:type\",Boolean)],e.prototype,\"visible\",void 0),r([B.field,s(\"design:type\",Number)],e.prototype,\"opacity\",void 0),r([B.field,s(\"design:type\",String)],e.prototype,\"hAlign\",void 0),r([B.field,s(\"design:type\",String)],e.prototype,\"vAlign\",void 0),r([B.uiValue,s(\"design:type\",Object)],e.prototype,\"width\",void 0),r([B.uiValue,s(\"design:type\",Object)],e.prototype,\"height\",void 0),r([B.uiValue,s(\"design:type\",Object)],e.prototype,\"positionX\",void 0),r([B.uiValue,s(\"design:type\",Object)],e.prototype,\"positionY\",void 0),r([B.field,s(\"design:type\",Boolean)],e.prototype,\"isPointerBlocker\",void 0),e}(B),pi=function(e){function n(){return e.call(this,null)||this}return i(n,e),n=r([N(\"engine.shape\",t.CLASS_ID.UI_FULLSCREEN_SHAPE),s(\"design:paramtypes\",[])],n)}(li),ci=function(e){function n(){return e.call(this,null)||this}return i(n,e),n=r([N(\"engine.shape\",t.CLASS_ID.UI_WORLD_SPACE_SHAPE),s(\"design:paramtypes\",[])],n)}(li),ui=function(e){function n(){return e.call(this,null)||this}return i(n,e),n=r([N(\"engine.shape\",t.CLASS_ID.UI_SCREEN_SPACE_SHAPE),s(\"design:paramtypes\",[])],n)}(li),yi=function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.thickness=0,t.color=_t.Color4.Clear(),t.alignmentUsesSize=!0,t}return i(n,e),r([B.field,s(\"design:type\",Number)],n.prototype,\"thickness\",void 0),r([B.field,s(\"design:type\",_t.Color4)],n.prototype,\"color\",void 0),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"alignmentUsesSize\",void 0),n=r([N(\"engine.shape\",t.CLASS_ID.UI_CONTAINER_RECT)],n)}(li);t.UIStackOrientation=void 0,(Jn=t.UIStackOrientation||(t.UIStackOrientation={}))[Jn.VERTICAL=0]=\"VERTICAL\",Jn[Jn.HORIZONTAL=1]=\"HORIZONTAL\";var fi=function(e){function n(){var n=null!==e&&e.apply(this,arguments)||this;return n.adaptWidth=!0,n.adaptHeight=!0,n.color=_t.Color4.Clear(),n.stackOrientation=t.UIStackOrientation.VERTICAL,n.spacing=0,n}return i(n,e),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"adaptWidth\",void 0),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"adaptHeight\",void 0),r([B.field,s(\"design:type\",_t.Color4)],n.prototype,\"color\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"stackOrientation\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"spacing\",void 0),n=r([N(\"engine.shape\",t.CLASS_ID.UI_CONTAINER_STACK)],n)}(li),mi=function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.fontSize=10,t.fontWeight=\"normal\",t.thickness=0,t.cornerRadius=0,t.color=_t.Color4.White(),t.background=_t.Color4.White(),t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0,t.paddingLeft=0,t.shadowBlur=0,t.shadowOffsetX=0,t.shadowOffsetY=0,t.shadowColor=_t.Color4.Black(),t.text=\"button\",t}return i(n,e),r([B.field,s(\"design:type\",Number)],n.prototype,\"fontSize\",void 0),r([B.field,s(\"design:type\",String)],n.prototype,\"fontWeight\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"thickness\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"cornerRadius\",void 0),r([B.field,s(\"design:type\",_t.Color4)],n.prototype,\"color\",void 0),r([B.field,s(\"design:type\",_t.Color4)],n.prototype,\"background\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"paddingTop\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"paddingRight\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"paddingBottom\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"paddingLeft\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"shadowBlur\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"shadowOffsetX\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"shadowOffsetY\",void 0),r([B.field,s(\"design:type\",_t.Color4)],n.prototype,\"shadowColor\",void 0),r([B.field,s(\"design:type\",String)],n.prototype,\"text\",void 0),n=r([N(\"engine.shape\",t.CLASS_ID.UI_BUTTON_SHAPE)],n)}(li),gi=function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.outlineWidth=0,t.outlineColor=_t.Color4.White(),t.color=_t.Color4.White(),t.fontSize=10,t.fontAutoSize=!1,t.value=\"\",t.lineSpacing=0,t.lineCount=0,t.adaptWidth=!1,t.adaptHeight=!1,t.textWrapping=!1,t.shadowBlur=0,t.shadowOffsetX=0,t.shadowOffsetY=0,t.shadowColor=_t.Color4.Black(),t.hTextAlign=\"left\",t.vTextAlign=\"bottom\",t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0,t.paddingLeft=0,t}return i(n,e),r([B.field,s(\"design:type\",Number)],n.prototype,\"outlineWidth\",void 0),r([B.field,s(\"design:type\",_t.Color4)],n.prototype,\"outlineColor\",void 0),r([B.field,s(\"design:type\",_t.Color4)],n.prototype,\"color\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"fontSize\",void 0),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"fontAutoSize\",void 0),r([B.component,s(\"design:type\",Tn)],n.prototype,\"font\",void 0),r([B.field,s(\"design:type\",String)],n.prototype,\"value\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"lineSpacing\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"lineCount\",void 0),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"adaptWidth\",void 0),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"adaptHeight\",void 0),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"textWrapping\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"shadowBlur\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"shadowOffsetX\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"shadowOffsetY\",void 0),r([B.field,s(\"design:type\",_t.Color4)],n.prototype,\"shadowColor\",void 0),r([B.field,s(\"design:type\",String)],n.prototype,\"hTextAlign\",void 0),r([B.field,s(\"design:type\",String)],n.prototype,\"vTextAlign\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"paddingTop\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"paddingRight\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"paddingBottom\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"paddingLeft\",void 0),n=r([N(\"engine.shape\",t.CLASS_ID.UI_TEXT_SHAPE)],n)}(li),vi=function(e){function n(t){var n=e.call(this,t)||this;return n.outlineWidth=0,n.outlineColor=_t.Color4.Black(),n.color=_t.Color4.Clear(),n.fontSize=10,n.value=\"\",n.placeholder=\"\",n.margin=10,n.hTextAlign=\"left\",n.vTextAlign=\"bottom\",n.focusedBackground=_t.Color4.Black(),n.textWrapping=!1,n.shadowBlur=0,n.shadowOffsetX=0,n.shadowOffsetY=0,n.shadowColor=_t.Color4.White(),n.paddingTop=0,n.paddingRight=0,n.paddingBottom=0,n.paddingLeft=0,n.onTextSubmit=null,n.onChanged=null,n.onFocus=null,n.onBlur=null,n.onTextChanged=new oi((function(t){var e=t.value,i=e.value,o=e.isSubmit,r=n.dirty;if(n.value=i,n.dirty=r,o&&n.onTextSubmit){var s={text:i};n.onTextSubmit.callback(s)}else if(!o&&n.onChanged){var a={value:i,pointerId:t.pointerId};n.onChanged.callback(a)}})),n}return i(n,e),r([B.field,s(\"design:type\",Number)],n.prototype,\"outlineWidth\",void 0),r([B.field,s(\"design:type\",_t.Color4)],n.prototype,\"outlineColor\",void 0),r([B.field,s(\"design:type\",_t.Color4)],n.prototype,\"color\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"fontSize\",void 0),r([B.component,s(\"design:type\",Tn)],n.prototype,\"font\",void 0),r([B.field,s(\"design:type\",String)],n.prototype,\"value\",void 0),r([B.field,s(\"design:type\",String)],n.prototype,\"placeholder\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"margin\",void 0),r([B.field,s(\"design:type\",String)],n.prototype,\"hTextAlign\",void 0),r([B.field,s(\"design:type\",String)],n.prototype,\"vTextAlign\",void 0),r([B.field,s(\"design:type\",_t.Color4)],n.prototype,\"focusedBackground\",void 0),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"textWrapping\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"shadowBlur\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"shadowOffsetX\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"shadowOffsetY\",void 0),r([B.field,s(\"design:type\",_t.Color4)],n.prototype,\"shadowColor\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"paddingTop\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"paddingRight\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"paddingBottom\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"paddingLeft\",void 0),r([In.uuidEvent,s(\"design:type\",oi)],n.prototype,\"onTextChanged\",void 0),r([In.uuidEvent,s(\"design:type\",Object)],n.prototype,\"onFocus\",void 0),r([In.uuidEvent,s(\"design:type\",Object)],n.prototype,\"onBlur\",void 0),n=r([N(\"engine.shape\",t.CLASS_ID.UI_INPUT_TEXT_SHAPE),s(\"design:paramtypes\",[Object])],n)}(li),_i=function(e){function n(t,n){var i=e.call(this,t)||this;return i.sourceLeft=0,i.sourceTop=0,i.sourceWidth=1,i.sourceHeight=1,i.paddingTop=0,i.paddingRight=0,i.paddingBottom=0,i.paddingLeft=0,i.sizeInPixels=!0,i.onClick=null,i.source=n,i}return i(n,e),r([B.field,s(\"design:type\",Number)],n.prototype,\"sourceLeft\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"sourceTop\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"sourceWidth\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"sourceHeight\",void 0),r([B.component,s(\"design:type\",Object)],n.prototype,\"source\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"paddingTop\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"paddingRight\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"paddingBottom\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"paddingLeft\",void 0),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"sizeInPixels\",void 0),r([In.uuidEvent,s(\"design:type\",Object)],n.prototype,\"onClick\",void 0),n=r([N(\"engine.shape\",t.CLASS_ID.UI_IMAGE_SHAPE),s(\"design:paramtypes\",[li,Object])],n)}(li),bi=function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.valueX=0,t.valueY=0,t.backgroundColor=_t.Color4.Clear(),t.isHorizontal=!1,t.isVertical=!1,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0,t.paddingLeft=0,t.onChanged=null,t}return i(n,e),r([B.field,s(\"design:type\",Number)],n.prototype,\"valueX\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"valueY\",void 0),r([B.field,s(\"design:type\",_t.Color4)],n.prototype,\"backgroundColor\",void 0),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"isHorizontal\",void 0),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"isVertical\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"paddingTop\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"paddingRight\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"paddingBottom\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"paddingLeft\",void 0),r([In.uuidEvent,s(\"design:type\",Object)],n.prototype,\"onChanged\",void 0),n=r([N(\"engine.shape\",t.CLASS_ID.UI_SLIDER_SHAPE)],n)}(li),xi=function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.useDummyModel=!1,t.talking=!1,t}var o;return i(n,e),o=n,n.Dummy=function(){var t=new o;return t.useDummyModel=!0,t},r([B.field,s(\"design:type\",String)],n.prototype,\"id\",void 0),r([B.field,s(\"design:type\",String)],n.prototype,\"name\",void 0),r([B.field,s(\"design:type\",String)],n.prototype,\"expressionTriggerId\",void 0),r([B.field,s(\"design:type\",Number)],n.prototype,\"expressionTriggerTimestamp\",void 0),r([B.field,s(\"design:type\",String)],n.prototype,\"bodyShape\",void 0),r([B.field,s(\"design:type\",Array)],n.prototype,\"wearables\",void 0),r([B.field,s(\"design:type\",Array)],n.prototype,\"emotes\",void 0),r([B.field,s(\"design:type\",Object)],n.prototype,\"skinColor\",void 0),r([B.field,s(\"design:type\",Object)],n.prototype,\"hairColor\",void 0),r([B.field,s(\"design:type\",Object)],n.prototype,\"eyeColor\",void 0),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"useDummyModel\",void 0),r([B.field,s(\"design:type\",Boolean)],n.prototype,\"talking\",void 0),n=o=r([P(\"engine.avatarShape\",t.CLASS_ID.AVATAR_SHAPE)],n)}(B),wi=null,Ti=null,Ai=null;function Ri(){return Ai||(Ai=new Q),Ai}var Si=function(){function t(){var t=this;this.messageQueue=[],this.connected=!1,this.flushing=!1,function(){if(!Ti){(Ti=dcl.loadModule(\"@decentraland/CommunicationsController\",{})).then((function(t){wi=t}));var t=Ri();dcl.subscribe(\"comms\"),dcl.onEvent((function(e){\"comms\"===e.type&&t.notifyObservers(e.data)}))}return Ti}().then((function(){t.connected=!0,t.flush()}))}return t.prototype.on=function(t,e){return Ri().add((function(n){try{var i=JSON.parse(n.message);i.message===t&&e(i.payload,n.sender)}catch(n){dcl.error(\"Error parsing comms message \"+(n.message||\"\"),n)}}))},t.prototype.sendRaw=function(t){this.messageQueue.push(t),this.connected&&this.flush()},t.prototype.emit=function(t,e){var n=JSON.stringify({message:t,payload:e});this.sendRaw(n),Ri().notifyObservers({message:n,sender:\"self\"})},t.prototype.flush=function(){var t=this;if(0!==this.messageQueue.length&&this.connected&&wi&&!this.flushing){var e=this.messageQueue.shift();this.flushing=!0,dcl.callRpc(wi.rpcHandle,\"send\",[e]).then((function(e){t.flushing=!1,t.flush()}),(function(e){t.flushing=!1,y(\"Error flushing MessageBus\",e)}))}},t}(),Ci=new H(\"scene\");Ci.uuid=\"0\";var Ei=new k(Ci);N.engine=Ei,\"undefined\"!=typeof dcl&&(Ei.addSystem(new gt(dcl),1/0),mt(dcl)),Ei.addSystem(Yn),Ei.addSystem(Wn),Ei.addSystem(qn),t.AVATAR_OBSERVABLE=\"AVATAR_OBSERVABLE\",t.Angle=_t.Angle,t.AnimationState=Ye,t.Animator=xn,t.Arc2=_t.Arc2,t.AttachToAvatar=dn,t.Attachable=e,t.AudioClip=Xn,t.AudioSource=Qn,t.AudioStream=Zn,t.AvatarModifierArea=rn,t.AvatarShape=xi,t.AvatarTexture=Bn,t.Axis=_t.Axis,t.BasicMaterial=En,t.BezierCurve=_t.BezierCurve,t.Billboard=hn,t.BoxShape=pn,t.Camera=Un,t.CameraModeArea=Dn,t.CircleShape=un,t.Color3=_t.Color3,t.Color4=_t.Color4,t.Component=P,t.ComponentAdded=A,t.ComponentGroup=V,t.ComponentRemoved=T,t.ConeShape=fn,t.Curve3=_t.Curve3,t.CylinderShape=mn,t.DEG2RAD=_t.DEG2RAD,t.DisposableComponent=N,t.DisposableComponentCreated=z,t.DisposableComponentRemoved=O,t.DisposableComponentUpdated=M,t.Engine=k,t.Entity=H,t.Epsilon=_t.Epsilon,t.EventConstructor=x,t.EventManager=b,t.Font=Tn,t.Frustum=_t.Frustum,t.GLTFShape=gn,t.Gizmos=$n,t.GlobalPointerDown=$e,t.GlobalPointerUp=tn,t.Input=nn,t.Material=Cn,t.Matrix=_t.Matrix,t.MessageBus=Si,t.MultiObserver=X,t.NFTShape=_n,t.OBJShape=wn,t.Observable=Q,t.ObservableComponent=B,t.Observer=Y,t.ObserverEventState=W,t.OnAnimationEnd=Mn,t.OnBlur=ni,t.OnChanged=oi,t.OnClick=ri,t.OnEnter=ii,t.OnFocus=ti,t.OnGizmoEvent=Kn,t.OnPointerDown=si,t.OnPointerHoverEnter=di,t.OnPointerHoverExit=hi,t.OnPointerLock=On,t.OnPointerUUIDEvent=zn,t.OnPointerUp=ai,t.OnTextSubmit=ei,t.OnUUIDEvent=In,t.Orientation=_t.Orientation,t.ParentChanged=R,t.Path2=_t.Path2,t.Path3D=_t.Path3D,t.PhysicsCast=Hn,t.Plane=_t.Plane,t.PlaneShape=yn,t.PointerEvent=$,t.PointerEventComponent=Ke,t.PointerEventSystem=jn,t.Quaternion=_t.Quaternion,t.RAD2DEG=_t.RAD2DEG,t.RaycastEventSystem=kn,t.RaycastResponse=K,t.Scalar=_t.Scalar,t.Shape=ln,t.Size=_t.Size,t.SmartItem=Pn,t.Space=_t.Space,t.SphereShape=cn,t.Subscription=en,t.TextShape=Rn,t.Texture=bn,t.ToGammaSpace=_t.ToGammaSpace,t.ToLinearSpace=_t.ToLinearSpace,t.Transform=sn,t.UIButton=mi,t.UICanvas=ui,t.UIContainerRect=yi,t.UIContainerStack=fi,t.UIFullScreen=pi,t.UIImage=_i,t.UIInputText=vi,t.UIScrollRect=bi,t.UIShape=li,t.UIText=gi,t.UIValue=S,t.UIWorldSpace=ci,t.UUIDEvent=J,t.UUIDEventSystem=Gn,t.Vector2=_t.Vector2,t.Vector3=_t.Vector3,t.Vector4=_t.Vector4,t.VideoClip=Nn,t.VideoTexture=Ln,t._initEventObservables=mt,t.buildArray=function(t,e){for(var n=[],i=0;i<t;++i)n.push(e());return n},t.engine=Ei,t.error=y,t.executeTask=G,t.getComponentClassId=L,t.getComponentId=D,t.getComponentName=F,t.getMessageObserver=Ri,t.isDisposableComponent=U,t.log=u,t.newId=f,t.onCameraModeChangedObservable=et,t.onEnterScene=ot,t.onEnterSceneObservable=it,t.onIdleStateChangedObservable=nt,t.onLeaveScene=st,t.onLeaveSceneObservable=rt,t.onPlayerClickedObservable=ft,t.onPlayerConnectedObservable=ct,t.onPlayerDisconnectedObservable=ut,t.onPlayerExpressionObservable=dt,t.onPointerLockedStateChange=ht,t.onProfileChanged=pt,t.onRealmChangedObservable=yt,t.onSceneReadyObservable=at,t.onVideoEvent=lt,t.openExternalURL=function(t){\"undefined\"!=typeof dcl?dcl.openExternalUrl(t):y(\"ERROR: openExternalURL dcl is undefined\")},t.openNFTDialog=function(t,e){if(void 0===e&&(e=null),\"undefined\"!=typeof dcl){var n=t.match(/ethereum:\\/\\/(.+)\\/(.+)/);if(!n||n.length<3)return;dcl.openNFTDialog(n[1],n[2],e)}else y(\"ERROR: openNFTDialog dcl is undefined\")},t.pointerEventSystem=Wn,t.raycastEventSystem=qn,t.teleportTo=function(t){var e,n;e=\"requestTeleport\",n=[t],void 0===q&&\"undefined\"!=typeof dcl&&(q=dcl.loadModule(\"@decentraland/UserActionModule\",{})),void 0!==q&&\"undefined\"!=typeof dcl&&q.then((function(t){dcl.callRpc(t.rpcHandle,e,n)}))},t.uuid=m,t.uuidEventSystem=Yn,Object.defineProperty(t,\"__esModule\",{value:!0})}(this.self=this.self||{});",
    "sha256": "23778a76f13e57dd2878d299001215ff20e2f62b2a4be99b9bd334966fdce517"
  },
  {
    "path": "node_modules\\@dcl\\ecs-scene-utils\\dist\\index.js",
    "content": "define(\"@dcl/ecs-scene-utils\",[\"exports\",\"@decentraland/EnvironmentAPI\"],(function(e,t){\"use strict\";\n/*! *****************************************************************************\n    Copyright (c) Microsoft Corporation.\n\n    Permission to use, copy, modify, and/or distribute this software for any\n    purpose with or without fee is hereby granted.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n    PERFORMANCE OF THIS SOFTWARE.\n    ***************************************************************************** */var n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)};function i(e,t){function i(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}function r(e,t,n,i){var r,o=arguments.length,a=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if(\"object\"==typeof Reflect&&\"function\"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,i);else for(var s=e.length-1;s>=0;s--)(r=e[s])&&(a=(o<3?r(a):o>3?r(t,n,a):r(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a}function o(e,t,n,i){return new(n||(n=Promise))((function(r,o){function a(e){try{u(i.next(e))}catch(e){o(e)}}function s(e){try{u(i.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}u((i=i.apply(e,t||[])).next())}))}function a(e,t){var n,i,r,o,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError(\"Generator is already executing.\");for(;a;)try{if(n=1,i&&(r=2&o[0]?i.return:o[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,o[1])).done)return r;switch(i=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,i=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(r=a.trys,(r=r.length>0&&r[r.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){a.label=o[1];break}if(6===o[0]&&a.label<r[1]){a.label=r[1],r=o;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(o);break}r[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],i=0}finally{n=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function s(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,n=t&&e[t],i=0;if(n)return n.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")}var u,c=function(){function e(){this._components=[],this._componentGroups=[],e._instance=this}return e.createAndAddToEngine=function(){return null==this._instance&&(this._instance=new e,engine.addSystem(this._instance)),this._instance},e.registerCustomComponent=function(e){this.createAndAddToEngine()._components.push(e)},e.prototype.addComponentType=function(e){var t,n;try{for(var i=s(this._components),r=i.next();!r.done;r=i.next()){if(e==r.value)return}}catch(e){t={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}this._components.push(e),this._componentGroups.push(engine.getComponentGroup(e,Transform))},e.prototype.update=function(e){for(var t=0;t<this._components.length;t++)this.updateComponent(e,this._components[t],this._componentGroups[t])},e.prototype.updateComponent=function(e,t,n){n.entities.forEach((function(n){var i=n.getComponent(Transform),r=n.getComponent(t);r.update(e),r.assignValueToTransform(i),r.hasFinished()&&(n.removeComponent(r),null!=r.onFinishCallback&&r.onFinishCallback())}))},e._instance=null,e}();function h(t,n){switch(t){case e.InterpolationType.LINEAR:return n;case e.InterpolationType.EASEINQUAD:return function(e){return e*e}(n);case e.InterpolationType.EASEOUTQUAD:return function(e){return e*(2-e)}(n);case e.InterpolationType.EASEQUAD:return function(e){return e*e/(2*(e*e-e)+1)}(n);case e.InterpolationType.EASEINSINE:return function(e){return 1-Math.cos(e*Math.PI/2)}(n);case e.InterpolationType.EASEOUTSINE:return function(e){return Math.sin(e*Math.PI/2)}(n);case e.InterpolationType.EASESINE:return function(e){return-(Math.cos(Math.PI*e)-1)/2}(n);case e.InterpolationType.EASEINEXPO:return function(e){return 0===e?0:Math.pow(2,10*e-10)}(n);case e.InterpolationType.EASEOUTEXPO:return function(e){return 1===e?1:1-Math.pow(2,-10*e)}(n);case e.InterpolationType.EASEEXPO:return function(e){return 0===e?0:1===e?1:e<.5?Math.pow(2,20*e-10)/2:(2-Math.pow(2,-20*e+10))/2}(n);case e.InterpolationType.EASEINELASTIC:return function(e){var t=2*Math.PI/3;return 0===e?0:1===e?1:-Math.pow(2,10*e-10)*Math.sin((10*e-10.75)*t)}(n);case e.InterpolationType.EASEOUTELASTIC:return function(e){var t=2*Math.PI/3;return 0===e?0:1===e?1:Math.pow(2,-10*e)*Math.sin((10*e-.75)*t)+1}(n);case e.InterpolationType.EASEELASTIC:return function(e){var t=2*Math.PI/4.5;return 0===e?0:1===e?1:e<.5?-Math.pow(2,20*e-10)*Math.sin((20*e-11.125)*t)/2:Math.pow(2,-20*e+10)*Math.sin((20*e-11.125)*t)/2+1}(n);case e.InterpolationType.EASEINBOUNCE:return function(e){return 1-l(1-e)}(n);case e.InterpolationType.EASEOUTEBOUNCE:return function(e){return l(e)}(n);case e.InterpolationType.EASEBOUNCE:return function(e){return e<.5?(1-l(1-2*e))/2:(1+l(2*e-1))/2}(n);default:return n}}function l(e){var t=7.5625,n=2.75;return e<1/n?t*e*e:e<2/n?t*(e-=1.5/n)*e+.75:e<2.5/n?t*(e-=2.25/n)*e+.9375:t*(e-=2.625/n)*e+.984375}e.InterpolationType=void 0,(u=e.InterpolationType||(e.InterpolationType={}))[u.LINEAR=0]=\"LINEAR\",u[u.EASEINQUAD=1]=\"EASEINQUAD\",u[u.EASEOUTQUAD=2]=\"EASEOUTQUAD\",u[u.EASEQUAD=3]=\"EASEQUAD\",u.EASEINSINE=\"easeinsine\",u.EASEOUTSINE=\"easeoutsine\",u.EASESINE=\"easeinoutsine\",u.EASEINEXPO=\"easeinexpo\",u.EASEOUTEXPO=\"easeoutexpo\",u.EASEEXPO=\"easeinoutexpo\",u.EASEINELASTIC=\"easeinelastic\",u.EASEOUTELASTIC=\"easeoutelastic\",u.EASEELASTIC=\"easeinoutelastic\",u.EASEINBOUNCE=\"easeinbounce\",u.EASEOUTEBOUNCE=\"easeoutbounce\",u.EASEBOUNCE=\"easeinoutbounce\";var p,d=function(){function t(t,i,r,o,a){void 0===a&&(a=e.InterpolationType.LINEAR),this.start=t,this.end=i,this.normalizedTime=0,this.lerpTime=0,this.onFinishCallback=o,this.interpolationType=a,0!=r?this.speed=1/r:(this.speed=0,this.normalizedTime=1,this.lerpTime=1),c.createAndAddToEngine().addComponentType(n)}var n;return n=t,t.prototype.update=function(e){this.normalizedTime=Scalar.Clamp(this.normalizedTime+e*this.speed,0,1),this.lerpTime=h(this.interpolationType,this.normalizedTime)},t.prototype.hasFinished=function(){return this.normalizedTime>=1},t.prototype.assignValueToTransform=function(e){e.position=Vector3.Lerp(this.start,this.end,this.lerpTime)},t=n=r([Component(\"moveTransformComponent\")],t)}(),g=function(){function t(t,i,r,o,a){void 0===a&&(a=e.InterpolationType.LINEAR),this.start=t,this.end=i,this.normalizedTime=0,this.lerpTime=0,this.onFinishCallback=o,this.interpolationType=a,0!=r?this.speed=1/r:(this.speed=0,this.normalizedTime=1,this.lerpTime=1),c.createAndAddToEngine().addComponentType(n)}var n;return n=t,t.prototype.update=function(e){this.normalizedTime=Scalar.Clamp(this.normalizedTime+e*this.speed,0,1),this.lerpTime=h(this.interpolationType,this.normalizedTime)},t.prototype.hasFinished=function(){return this.normalizedTime>=1},t.prototype.assignValueToTransform=function(e){e.rotation=Quaternion.Slerp(this.start,this.end,this.lerpTime)},t=n=r([Component(\"rotateTransformComponent\")],t)}(),f=function(){function t(t,i,r,o,a){void 0===a&&(a=e.InterpolationType.LINEAR),this.start=t,this.end=i,this.normalizedTime=0,this.lerpTime=0,this.onFinishCallback=o,this.interpolationType=a,0!=r?this.speed=1/r:(this.speed=0,this.normalizedTime=1,this.lerpTime=1),c.createAndAddToEngine().addComponentType(n)}var n;return n=t,t.prototype.update=function(e){this.normalizedTime=Scalar.Clamp(this.normalizedTime+e*this.speed,0,1),this.lerpTime=h(this.interpolationType,this.normalizedTime)},t.prototype.hasFinished=function(){return this.normalizedTime>=1},t.prototype.assignValueToTransform=function(e){e.scale=Vector3.Lerp(this.start,this.end,this.lerpTime)},t=n=r([Component(\"scaleTransformComponent\")],t)}(),m=function(){function e(e,n,i,r){if(this.speed=[],this.normalizedTime=0,this.currentIndex=0,this.points=e,this.onFinishCallback=i,this.onPointReachedCallback=r,e.length<2)throw new Error(\"At least 2 points are needed for FollowPathComponent.\");if(n>0){for(var o=0,a=[],s=0;s<e.length-1;s++){var u=Vector3.Distance(e[s],e[s+1]);o+=u,a.push(u)}for(s=0;s<a.length;s++)this.speed.push(1/(a[s]/o*n))}else this.normalizedTime=1,this.currentIndex=e.length-2;c.createAndAddToEngine().addComponentType(t)}var t;return t=e,e.prototype.update=function(e){this.normalizedTime=Scalar.Clamp(this.normalizedTime+e*this.speed[this.currentIndex],0,1),this.normalizedTime>=1&&this.currentIndex<this.points.length-2&&(this.currentIndex++,this.normalizedTime=0,this.onPointReachedCallback&&this.currentIndex<this.points.length-1&&this.onPointReachedCallback(this.points[this.currentIndex],this.points[this.currentIndex+1]))},e.prototype.hasFinished=function(){return this.currentIndex>=this.points.length-2&&this.normalizedTime>=1},e.prototype.assignValueToTransform=function(e){e.position=Vector3.Lerp(this.points[this.currentIndex],this.points[this.currentIndex+1],this.normalizedTime)},e=t=r([Component(\"followPathComponent\")],e)}(),y=function(){function e(e,n,i,r,o,a){if(this.speed=[],this.turnToFaceNext=!1,this.facingNext=!1,this.normalizedTime=0,this.currentIndex=0,this.points=Curve3.CreateCatmullRomSpline(e,i,!!o).getPoints(),this.onFinishCallback=a,this.turnToFaceNext=r||!1,this.points.length<2)throw new Error(\"At least 2 points are needed for FollowPathComponent.\");if(n>0){for(var s=0,u=[],h=0;h<this.points.length-1;h++){var l=Vector3.Distance(this.points[h],this.points[h+1]);s+=l,u.push(l)}for(h=0;h<u.length;h++)this.speed.push(1/(u[h]/s*n))}else this.normalizedTime=1,this.currentIndex=e.length-2;c.createAndAddToEngine().addComponentType(t)}var t;return t=e,e.prototype.update=function(e){this.normalizedTime=Scalar.Clamp(this.normalizedTime+e*this.speed[this.currentIndex],0,1),this.normalizedTime>=1&&this.currentIndex<this.points.length-2&&(this.currentIndex++,this.normalizedTime=0,1==this.turnToFaceNext&&(this.facingNext=!1))},e.prototype.hasFinished=function(){return this.currentIndex>=this.points.length-2&&this.normalizedTime>=1},e.prototype.assignValueToTransform=function(e){e.position=Vector3.Lerp(this.points[this.currentIndex],this.points[this.currentIndex+1],this.normalizedTime),this.facingNext||(this.facingNext=!0,this.currentIndex<this.points.length-1?e.lookAt(this.points[this.currentIndex+1]):e.lookAt(this.points[0]))},e=t=r([Component(\"followCurvedPathComponent\")],e)}(),T=function(){function e(e,n){this.rotationVelocity=e,this.onFinishCallback=n,this.rotation=Quaternion.Identity,this.finished=!1,c.createAndAddToEngine().addComponentType(t)}var t;return t=e,e.prototype.update=function(e){this.rotation=Quaternion.Slerp(Quaternion.Identity,this.rotationVelocity,e)},e.prototype.hasFinished=function(){return this.finished},e.prototype.assignValueToTransform=function(e){e.rotation=e.rotation.multiply(this.rotation)},e.prototype.stop=function(){this.finished=!0},e=t=r([Component(\"keepRotatingComponent\")],e)}();e.ToggleState=void 0,(p=e.ToggleState||(e.ToggleState={}))[p.Off=0]=\"Off\",p[p.On=1]=\"On\";var S=function(){function t(t,n){void 0===t&&(t=e.ToggleState.On),this.enabled=!0,this.state=e.ToggleState.Off,this.set(t),n&&this.setCallback(n)}return t.prototype.set=function(e){this.state=e,this.onValueChangedCallback&&this.onValueChangedCallback(e)},t.prototype.toggle=function(){this.enabled&&this.set(1-this.state)},t.prototype.isOn=function(){return this.state==e.ToggleState.On},t.prototype.setCallback=function(e){this.onValueChangedCallback=e},t=r([Component(\"toggle\")],t)}(),E=function(){function e(){this._components=[],e._instance=this}return e.createAndAddToEngine=function(){return null==this._instance&&(this._instance=new e,engine.addSystem(this._instance)),this._instance},e.registerCustomComponent=function(e){this.createAndAddToEngine()._components.push(e)},e.prototype.addComponentType=function(e){var t,n;try{for(var i=s(this._components),r=i.next();!r.done;r=i.next()){if(e==r.value)return}}catch(e){t={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}this._components.push(e)},e.prototype.update=function(e){var t=this;this._components.forEach((function(n){t.updateComponent(e,n)}))},e.prototype.updateComponent=function(e,t){var n=engine.getEntitiesWithComponent(t);for(var i in n)if(n.hasOwnProperty(i)){var r=n[i],o=r.getComponent(t);o.elapsedTime+=e,o.elapsedTime>=o.targetTime&&o.onTargetTimeReached(r)}},e._instance=null,e}(),C=function(){function e(e,n){var i=this;E.createAndAddToEngine().addComponentType(t),this.elapsedTime=0,this.targetTime=e/1e3,this.onTimeReachedCallback=n,this.onTargetTimeReached=function(e){i.onTimeReachedCallback&&i.onTimeReachedCallback(),e.removeComponent(i)}}var t;return t=e,e.prototype.setCallback=function(e){this.onTimeReachedCallback=e},e=t=r([Component(\"timerDelay\")],e)}(),b=function(){function e(e,n){var i=this;E.createAndAddToEngine().addComponentType(t),this.elapsedTime=0,this.targetTime=e/1e3,this.onTimeReachedCallback=n,this.onTargetTimeReached=function(e){i.onTimeReachedCallback&&i.onTimeReachedCallback(),e.removeComponent(i),engine.removeEntity(e)}}var t;return t=e,e.prototype.setCallback=function(e){this.onTimeReachedCallback=e},e=t=r([Component(\"timerExpireIn\")],e)}(),v=function(){function e(e,n){var i=this;E.createAndAddToEngine().addComponentType(t),this.elapsedTime=0,this.targetTime=e/1e3,this.onTimeReachedCallback=n,this.onTargetTimeReached=function(){i.elapsedTime=0,i.onTimeReachedCallback&&i.onTimeReachedCallback()}}var t;return t=e,e.prototype.setCallback=function(e){this.onTimeReachedCallback=e},e=t=r([Component(\"timerInterval\")],e)}();function I(e,t,n,i,r,o){var a=new Entity;a.addComponent(new Transform(o||{position:new Vector3(0,1.5,0)})),a.setParent(t);var s=new TextShape(e);return s.fontSize=r||3,s.color=i||Color3.Black(),a.addComponent(s),n&&a.addComponent(new Billboard),engine.addEntity(a),a}var A,_,w=function(){function e(){this._triggers={},e._instance=this,this._cameraTriggerWrapper=new q(new P(new Vector3(.5,1.8,.5),new Vector3(0,.91,0))),this._componentGroup=engine.getComponentGroup(N)}return Object.defineProperty(e,\"instance\",{get:function(){return this.createAndAddToEngine()},enumerable:!1,configurable:!0}),e.createAndAddToEngine=function(){return null==this._instance&&(this._instance=new e,engine.addSystem(this._instance)),this._instance},e.prototype.setCameraTriggerShape=function(e){this._cameraTriggerWrapper.setShape(e)},e.prototype.update=function(){var t=this,n=this._componentGroup.entities;for(var i in n.forEach((function(e){t.shouldWrapTriggerEntity(e)&&t.wrapTriggerEntity(e)})),this._triggers)if(this._triggers.hasOwnProperty(i)){var r=this._triggers[i];r.isDebugging()&&r.updateDebugEntity(),r.isInEngine()?null!=r.trigger&&r.trigger.enabled?(r.wasEnabled||r.isDebugging()&&r.addDebugEntity(),r.wasEnabled=!0,(r.trigger.onCameraEnter||r.trigger.onCameraExit)&&this.checkCollisionAgainstCamera(r),(r.trigger.onTriggerEnter||r.trigger.onTriggerExit)&&this.checkCollisionAgainstOtherTriggers(r)):r.wasEnabled&&(r.wasEnabled=!1,r.isDebugging()&&r.removeDebugEntity(),e.removeTriggerFromSystem(r)):(r.isDebugging()&&r.removeDebugEntity(),e.removeTriggerFromSystem(r),delete this._triggers[i])}},e.prototype.shouldWrapTriggerEntity=function(e){return null==this._triggers[e.uuid]||null==this._triggers[e.uuid]},e.prototype.wrapTriggerEntity=function(e){this._triggers[e.uuid]=new x(e)},e.removeTriggerFromSystem=function(t){for(var n,i=t.getActiveCollisions(),r=0;r<i.length;r++){!(i[r]===(null===(n=e._instance)||void 0===n?void 0:n._cameraTriggerWrapper)||null==i[r].trigger)&&i[r].trigger.onTriggerExit&&t.entity&&i[r].trigger.onTriggerExit(t.entity),i[r].disengageActiveCollision(t),t.disengageActiveCollision(i[r])}},e.disengageCollision=function(e,t){e.disengageActiveCollision(t),t.disengageActiveCollision(e),e.trigger.onTriggerExit&&t.entity&&e.trigger.onTriggerExit(t.entity),t.trigger.onTriggerExit&&e.entity&&t.trigger.onTriggerExit(e.entity)},e.engageCollision=function(e,t){e.engageCollision(t),t.engageCollision(e),e.trigger.onTriggerEnter&&t.entity&&e.trigger.onTriggerEnter(t.entity),t.trigger.onTriggerEnter&&e.entity&&t.trigger.onTriggerEnter(e.entity)},e.prototype.checkCollisionAgainstCamera=function(t){var n=t.hasActiveCollision(this._cameraTriggerWrapper),i=e.areColliding(t,this._cameraTriggerWrapper);n&&!i?(t.disengageActiveCollision(this._cameraTriggerWrapper),t.trigger.onCameraExit&&t.trigger.onCameraExit()):!n&&i&&(t.engageCollision(this._cameraTriggerWrapper),t.trigger.onCameraEnter&&t.trigger.onCameraEnter())},e.prototype.checkCollisionAgainstOtherTriggers=function(t){for(var n in this._triggers)if(this._triggers.hasOwnProperty(n)&&n!=t.uuid&&this._triggers[n].trigger.enabled&&e.canTriggersCollide(t,this._triggers[n])){var i=t.hasActiveCollision(this._triggers[n]),r=e.areColliding(t,this._triggers[n]);i&&!r?e.disengageCollision(t,this._triggers[n]):!i&&r&&e.engageCollision(t,this._triggers[n])}},e.canTriggersCollide=function(e,t){return 0==e.trigger.triggeredByLayer||0!=(t.trigger.layer&e.trigger.triggeredByLayer)},e.areColliding=function(t,n){return t.getShape()instanceof P&&n.getShape()instanceof P?e.areCollidingAABB(t.getGlobalPosition(),t.getShape(),n.getGlobalPosition(),n.getShape()):t.getShape()instanceof k&&n.getShape()instanceof k?e.areCollidingSphere(t.getGlobalPosition(),t.getShape(),n.getGlobalPosition(),n.getShape()):t.getShape()instanceof P&&n.getShape()instanceof k?e.areCollidingAABBSphere(t.getGlobalPosition(),t.getShape(),n.getGlobalPosition(),n.getShape()):t.getShape()instanceof k&&n.getShape()instanceof P&&e.areCollidingAABBSphere(n.getGlobalPosition(),n.getShape(),t.getGlobalPosition(),t.getShape())},e.areCollidingAABB=function(t,n,i,r){var o=e.getBoxShapeValues(t,n),a=e.getBoxShapeValues(i,r);return o.min.x<=a.max.x&&o.max.x>=a.min.x&&o.min.y<=a.max.y&&o.max.y>=a.min.y&&o.min.z<=a.max.z&&o.max.z>=a.min.z},e.areCollidingSphere=function(e,t,n,i){return Vector3.DistanceSquared(e.add(t.position),n.add(i.position))<t.radius*t.radius+i.radius*i.radius},e.areCollidingAABBSphere=function(t,n,i,r){var o=e.getBoxShapeValues(t,n),a=i.add(r.position),s=r.radius,u=0;return a.x<o.min.x&&(u+=(o.min.x-a.x)*(o.min.x-a.x)),a.x>o.max.x&&(u+=(a.x-o.max.x)*(a.x-o.max.x)),a.y<o.min.y&&(u+=(o.min.y-a.y)*(o.min.y-a.y)),a.y>o.max.y&&(u+=(a.y-o.max.y)*(a.y-o.max.y)),a.z<o.min.z&&(u+=(o.min.z-a.z)*(o.min.z-a.z)),a.z>o.max.z&&(u+=(a.z-o.max.z)*(a.z-o.max.z)),u<s*s},e.getBoxShapeValues=function(e,t){var n=e.add(t.position);return{center:n,min:n.subtract(t.size.scale(.5)),max:n.add(t.size.scale(.5))}},e._instance=null,e}(),x=function(){function e(e){this.wasEnabled=!0,this._uuid=\"\",this._collidingWith={},this._isDebug=!1,this._debugEntity=null,this._entity=e,e&&(this._trigger=e.getComponent(N),this._uuid=e.uuid,this._isDebug=this._trigger.debugEnabled,this._isDebug&&this.addDebugEntity())}return Object.defineProperty(e.prototype,\"entity\",{get:function(){return this._entity},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,\"trigger\",{get:function(){return this._trigger},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,\"uuid\",{get:function(){return this._uuid},enumerable:!1,configurable:!0}),e.prototype.getGlobalPosition=function(){return this._entity?e.getEntityWorldPosition(this._entity):Vector3.Zero()},e.prototype.getShape=function(){return this._trigger.shape},e.prototype.isInEngine=function(){return null!=this._entity&&this._entity.isAddedToEngine()},e.prototype.getActiveCollisions=function(){var e=[];for(var t in this._collidingWith)this._collidingWith.hasOwnProperty(t)&&e.push(this._collidingWith[t]);return e},e.prototype.hasActiveCollision=function(e){return null!=this._collidingWith[e.uuid]&&null!=this._collidingWith[e.uuid]},e.prototype.disengageActiveCollision=function(e){delete this._collidingWith[e.uuid]},e.prototype.engageCollision=function(e){this._collidingWith[e.uuid]=e},e.prototype.isDebugging=function(){return this._isDebug},e.prototype.addDebugEntity=function(){return o(this,void 0,void 0,(function(){var n,i,r;return a(this,(function(o){switch(o.label){case 0:return[4,!t.isPreviewMode()];case 1:return o.sent()||(e._debugMaterial||(e._debugMaterial=new Material,e._debugMaterial.alphaTest=.5),null==this._debugEntity&&(this._debugEntity=new Entity,n=new Transform,this._debugEntity.addComponent(n),this._debugEntity.addComponent(e._debugMaterial),this.getShape()instanceof P&&((i=new BoxShape).withCollisions=!1,this._debugEntity.addComponent(i),n.scale=this.getShape().size),this.getShape()instanceof k&&((i=new SphereShape).withCollisions=!1,this._debugEntity.addComponent(i),r=this.getShape().radius,n.scale=new Vector3(r,r,r))),engine.addEntity(this._debugEntity)),[2]}}))}))},e.prototype.removeDebugEntity=function(){null!=this._debugEntity&&engine.removeEntity(this._debugEntity)},e.prototype.updateDebugEntity=function(){this._debugEntity&&(this._debugEntity.getComponent(Transform).position=this.getGlobalPosition().add(this.getShape().position))},e.getEntityWorldPosition=function(e){var t=e.hasComponent(Transform)?e.getComponent(Transform).position.clone():Vector3.Zero(),n=e.getParent();if(null!=n){var i=n.hasComponent(Transform)?n.getComponent(Transform).rotation:Quaternion.Identity;return this.getEntityWorldPosition(n).add(t.rotate(i))}return t},e._debugMaterial=null,e}(),q=function(e){function t(t){var n=e.call(this)||this;return n._shape=t,n._uuid=\"cameraTrigger\",n}return i(t,e),t.prototype.getGlobalPosition=function(){return Camera.instance.position},t.prototype.getShape=function(){return this._shape},t.prototype.setShape=function(e){this._shape=e},t.prototype.isInEngine=function(){return!1},t.prototype.hasActiveCollision=function(e){return!1},t.prototype.disengageActiveCollision=function(e){},t.prototype.engageCollision=function(e){},t.prototype.isDebugging=function(){return!1},t}(x),N=function(){function e(e,t){this.enabled=!0,this.layer=0,this.triggeredByLayer=0,this._debugEnabled=!1,w.createAndAddToEngine(),this.shape=e,t&&(t.layer&&(this.layer=t.layer),t.triggeredByLayer&&(this.triggeredByLayer=t.triggeredByLayer),t.onTriggerEnter&&(this.onTriggerEnter=t.onTriggerEnter),t.onTriggerExit&&(this.onTriggerExit=t.onTriggerExit),t.onCameraEnter&&(this.onCameraEnter=t.onCameraEnter),t.onCameraExit&&(this.onCameraExit=t.onCameraExit),t.enableDebug&&(this._debugEnabled=t.enableDebug))}return Object.defineProperty(e.prototype,\"debugEnabled\",{get:function(){return this._debugEnabled},enumerable:!1,configurable:!0}),e=r([Component(\"triggerComponent\")],e)}(),P=function(e,t){void 0===e&&(e=Vector3.One().scale(2)),void 0===t&&(t=Vector3.Zero()),this.size=e,this.position=t},k=function(e,t){void 0===e&&(e=2),void 0===t&&(t=Vector3.Zero()),this.radius=e,this.position=t};e.ActionsSequenceSystem=function(){function e(e){this.beginSequenceNode=null,this.currentSequenceNode=null,this.running=!1,this.started=!1,e&&this.startSequence(e)}return e.prototype.startSequence=function(e){this.beginSequenceNode=e.beginSequenceNode,this.currentSequenceNode=this.beginSequenceNode,this.running=!0,this.started=!1},e.prototype.setOnFinishCallback=function(e){this.onFinishCallback=e},e.prototype.isRunning=function(){return this.running},e.prototype.stop=function(){this.running=!1},e.prototype.resume=function(){null!=this.beginSequenceNode&&(this.running=!0)},e.prototype.reset=function(){this.currentSequenceNode=this.beginSequenceNode,this.running=!0,this.started=!1},e.prototype.getRunningAction=function(){var e=this.currentSequenceNode;if(this.currentSequenceNode instanceof z)do{e=e.currentInnerSequence}while(e instanceof z);return e.action},e.prototype.update=function(e){this.running&&(this.started?this.currentSequenceNode.hasFinish()?(this.currentSequenceNode.onFinish(),this.currentSequenceNode=this.currentSequenceNode.next,this.currentSequenceNode?this.currentSequenceNode.onStart():(this.running=!1,this.onFinishCallback&&this.onFinishCallback())):this.currentSequenceNode.update(e):(this.currentSequenceNode.onStart(),this.started=!0))},e}(),A=e.ActionsSequenceSystem||(e.ActionsSequenceSystem={}),_=function(){function e(){this.currentSequenceNode=null,this.beginSequenceNode=null,this.whileNodeStack=[]}return e.prototype.then=function(e){if(null==this.currentSequenceNode)this.currentSequenceNode=new O,this.currentSequenceNode.action=e,this.beginSequenceNode=this.currentSequenceNode;else{var t=new O;t.action=e,this.currentSequenceNode=this.currentSequenceNode.then(t)}return this},e.prototype.if=function(e){var t=new F(e);return null==this.currentSequenceNode?(this.currentSequenceNode=t,this.beginSequenceNode=t):this.currentSequenceNode=this.currentSequenceNode.then(t),this},e.prototype.else=function(){var e=this.currentSequenceNode.getSequence();if(!(e instanceof F))throw new Error(\"IF statement is needed to be called before ELSE statement.\");e.closed=!0;var t=new R(e);return this.currentSequenceNode=this.currentSequenceNode.then(t),this},e.prototype.endIf=function(){var e=this.currentSequenceNode.getSequence();if(!(e instanceof F||e instanceof R))throw new Error(\"IF statement is needed to be called before ENDIF statement.\");return e.closed=!0,this},e.prototype.while=function(e){var t=new D(e);return null==this.currentSequenceNode?(this.currentSequenceNode=t,this.beginSequenceNode=t):this.currentSequenceNode=this.currentSequenceNode.then(t),this.whileNodeStack.push(t),this},e.prototype.endWhile=function(){var e=this.currentSequenceNode.getSequence();if(!(e instanceof D))throw new Error(\"WHILE statement is needed to be called before ENDWHILE statement.\");return e.closed=!0,this.whileNodeStack.length>0&&this.whileNodeStack.splice(this.whileNodeStack.length-1,1),this},e.prototype.breakWhile=function(){if(!(this.whileNodeStack.length>0))throw new Error(\"WHILE statement is needed to be called before BREAKWHILE statement.\");return this.currentSequenceNode=this.currentSequenceNode.then(new B(this.whileNodeStack[this.whileNodeStack.length-1])),this},e}(),A.SequenceBuilder=_;var O=function(){function e(){this.action=null,this.next=null}return e.prototype.then=function(e){return this.next=e,e},e.prototype.onStart=function(){this.action&&this.action.onStart()},e.prototype.update=function(e){this.action&&this.action.update(e)},e.prototype.onFinish=function(){this.action&&this.action.onFinish()},e.prototype.hasFinish=function(){return!this.action||this.action.hasFinished},e.prototype.getSequence=function(){return this},e}(),z=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.currentInnerSequence=null,t.startingInnerSequence=null,t.closed=!1,t}return i(t,e),t.prototype.then=function(e){if(null==this.currentInnerSequence)this.currentInnerSequence=e,this.startingInnerSequence=e;else{if(this.closed)return this.next=e,e;this.currentInnerSequence=this.currentInnerSequence.then(e)}return this},t.prototype.onStart=function(){this.currentInnerSequence=this.startingInnerSequence,this.currentInnerSequence&&this.currentInnerSequence.onStart()},t.prototype.update=function(e){this.currentInnerSequence&&(this.currentInnerSequence.hasFinish()?(this.currentInnerSequence.onFinish(),this.currentInnerSequence=this.currentInnerSequence.next,this.currentInnerSequence&&this.currentInnerSequence.onStart()):this.currentInnerSequence.update(e))},t.prototype.onFinish=function(){this.currentInnerSequence&&this.currentInnerSequence.onFinish()},t.prototype.hasFinish=function(){return null==this.currentInnerSequence},t.prototype.getSequence=function(){if(this.currentInnerSequence){var e=this.currentInnerSequence.getSequence();if(e instanceof t&&!e.closed)return e}return this},t}(O),F=function(e){function t(t){var n=e.call(this)||this;return n.result=!1,n.condition=t,n}return i(t,e),t.prototype.onStart=function(){this.result=this.condition(),this.result?e.prototype.onStart.call(this):this.currentInnerSequence=null},t}(z),R=function(e){function t(t){var n=e.call(this)||this;return n.ifSequence=null,n.ifSequence=t,n}return i(t,e),t.prototype.onStart=function(){this.ifSequence&&!this.ifSequence.result?e.prototype.onStart.call(this):this.currentInnerSequence=null},t}(z),D=function(e){function t(t){var n=e.call(this)||this;return n.breakWhile=!1,n.condition=t,n}return i(t,e),t.prototype.onStart=function(){this.breakWhile=!1,this.condition()?e.prototype.onStart.call(this):this.currentInnerSequence=null},t.prototype.update=function(e){this.currentInnerSequence&&(this.currentInnerSequence.hasFinish()?(this.currentInnerSequence.onFinish(),this.currentInnerSequence=this.currentInnerSequence.next,null==this.currentInnerSequence&&(this.currentInnerSequence=this.startingInnerSequence),this.currentInnerSequence&&this.currentInnerSequence.onStart()):this.currentInnerSequence.update(e))},t.prototype.hasFinish=function(){return this.breakWhile||!this.condition()},t}(z),B=function(e){function t(t){var n=e.call(this)||this;return n.whileNode=t,n}return i(t,e),t.prototype.onStart=function(){this.whileNode.breakWhile=!0},t}(O);e.Delay=C,e.ExpireIn=b,e.FollowCurvedPathComponent=y,e.FollowPathComponent=m,e.Interpolate=h,e.Interval=v,e.KeepRotatingComponent=T,e.MoveTransformComponent=d,e.RotateTransformComponent=g,e.ScaleTransformComponent=f,e.SequenceNode=O,e.ToggleComponent=S,e.TransformSystem=c,e.TriggerBoxShape=P,e.TriggerComponent=N,e.TriggerSphereShape=k,e.TriggerSystem=w,e.addLabel=I,e.addOneTimeTrigger=function(e,t,n){var i=!1,r=!1,o=new Entity;o.addComponent(new Transform({}));var a={};return t.layer&&(a.layer=t.layer),t.triggeredByLayer&&(a.triggeredByLayer=t.triggeredByLayer),t.onCameraEnter&&(a.onCameraEnter=function(){i||(i=!0,t.onCameraEnter()),!i&&t.onCameraEnter||!r&&t.onCameraExit||engine.removeEntity(o)}),t.onCameraExit&&(a.onCameraExit=function(){r||(r=!0,t.onCameraExit()),!i&&t.onCameraEnter||!r&&t.onCameraExit||engine.removeEntity(o)}),t.enableDebug&&(a.enableDebug=t.enableDebug),o.addComponent(new N(e,a)),n&&o.setParent(n),engine.addEntity(o),o},e.addTestCube=function(e,n,i,r,s,u,c){return o(this,void 0,void 0,(function(){var o,h,l;return a(this,(function(a){switch(a.label){case 0:return(o=!c)?[4,!t.isPreviewMode()]:[3,2];case 1:o=a.sent(),a.label=2;case 2:return o?[2]:((h=new Entity).addComponent(new Transform(e)),s?(h.addComponent(new SphereShape),h.getComponent(Transform).scale.setAll(.5)):h.addComponent(new BoxShape),engine.addEntity(h),h.addComponent(new OnPointerDown(n,{hoverText:i||\"click\",button:ActionButton.POINTER})),r&&((l=new Material).albedoColor=r,h.addComponent(l)),u&&(h.getComponent(BoxShape).withCollisions=!1),i&&I(i,h,!0),[2,h])}}))}))},e.clamp=function(e,t,n){var i=e;return e>n?i=n:e<t&&(i=t),i},e.getEntityWorldPosition=function e(t){var n=t.hasComponent(Transform)?t.getComponent(Transform).position.clone():Vector3.Zero(),i=t.getParent();if(null!=i&&\"0\"!=i.uuid){if(\"FirstPersonCameraEntityReference\"==i.uuid){var r=Camera.instance.rotation.clone();return Camera.instance.position.clone().add(n.rotate(r))}if(\"AvatarEntityReference\"==i.uuid){var o=Camera.instance.rotation;r=Quaternion.Euler(0,o.eulerAngles.y,0);return Camera.instance.position.clone().add(n.rotate(r)).add(new Vector3(0,-.875,0))}r=i.hasComponent(Transform)?i.getComponent(Transform).rotation:Quaternion.Identity;return e(i).add(n.rotate(r))}return n},e.getEntityWorldRotation=function e(t){var n=t.hasComponent(Transform)?t.getComponent(Transform).rotation.clone():Quaternion.Zero(),i=t.getParent();if(null!=i&&\"0\"!=i.uuid){if(\"FirstPersonCameraEntityReference\"==i.uuid){var r=Camera.instance.rotation.clone();return n.multiply(r)}if(\"AvatarEntityReference\"==i.uuid){r=Quaternion.Euler(0,Camera.instance.rotation.eulerAngles.y,0);return n.multiply(r)}r=e(i);return n.multiply(r)}return n},e.map=function(e,t,n,i,r){return(e-t)/(n-t)*(r-i)+i},e.sendRequest=function(e,t,n,i){return o(this,void 0,void 0,(function(){var r,o,s;return a(this,(function(a){switch(a.label){case 0:return a.trys.push([0,6,,7]),r={method:t||\"GET\"},n&&(r.headers=n),i&&(r.body=JSON.stringify(i)),[4,fetch(e,r)];case 1:o=a.sent(),a.label=2;case 2:return a.trys.push([2,4,,5]),[4,o.json()];case 3:return[2,a.sent()];case 4:return a.sent(),[2,o];case 5:return[3,7];case 6:return s=a.sent(),log(\"error fetching from \",e,\" : \",s),[3,7];case 7:return[2]}}))}))},e.setTimeout=function(e,t){var n=new Entity;return n.addComponent(new C(e,(function(){t(),engine.removeEntity(n)}))),engine.addEntity(n),n},Object.defineProperty(e,\"__esModule\",{value:!0})}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n",
    "sha256": "e1b6bea5ee8233239ce1634d81b71ea24cfcc8771cf66b1310bd79195a437778"
  },
  {
    "path": "src\\game.ts",
    "content": "var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\ndefine(\"td-core/data/difficulty-data\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.DifficultyData = void 0;\r\n    /*      DIFFICULTY DATA\r\n        contains all data used to define certain diffuclties. the\r\n        selected difficulty directly impacts game elements, such as\r\n        enemy health, currency gain rate, etc.\r\n    */\r\n    exports.DifficultyData = [\r\n        //difficulties\r\n        {\r\n            DisplayName: \"Very Easy\",\r\n            //stage details\r\n            PlayerHealth: 50,\r\n            //enemy details\r\n            EnemyHealthPercent: 70,\r\n            EnemyArmorPercent: 70,\r\n            EnemySpeedPercent: 70,\r\n            //economy details\r\n            PointGainPercent: 120,\r\n        },\r\n        {\r\n            DisplayName: \"Easy\",\r\n            //stage details\r\n            PlayerHealth: 40,\r\n            //enemy details\r\n            EnemyHealthPercent: 85,\r\n            EnemyArmorPercent: 85,\r\n            EnemySpeedPercent: 85,\r\n            //economy details\r\n            PointGainPercent: 110,\r\n        },\r\n        {\r\n            DisplayName: \"Standard\",\r\n            //stage details\r\n            PlayerHealth: 30,\r\n            //enemy details\r\n            EnemyHealthPercent: 100,\r\n            EnemyArmorPercent: 100,\r\n            EnemySpeedPercent: 100,\r\n            //economy details\r\n            PointGainPercent: 100,\r\n        },\r\n        {\r\n            DisplayName: \"Hard\",\r\n            //stage details\r\n            PlayerHealth: 25,\r\n            //enemy details\r\n            EnemyHealthPercent: 120,\r\n            EnemyArmorPercent: 120,\r\n            EnemySpeedPercent: 105,\r\n            //economy details\r\n            PointGainPercent: 90,\r\n        },\r\n        {\r\n            DisplayName: \"Very Hard\",\r\n            //stage details\r\n            PlayerHealth: 20,\r\n            //enemy details\r\n            EnemyHealthPercent: 140,\r\n            EnemyArmorPercent: 140,\r\n            EnemySpeedPercent: 110,\r\n            //economy details\r\n            PointGainPercent: 80,\r\n        },\r\n    ];\r\n});\r\ndefine(\"td-core/data/tower-data\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.dataTowers = void 0;\r\n    /*      TOWER DATA\r\n        contains all data definitions for defence towers. towers come\r\n        in a variety of types, with different attributes, and upgrade\r\n        features.\r\n    \r\n        defence tower models need to be placed under 'models/td-core/tower'. the\r\n        following animations should exist on the model and follow these parameters:\r\n            -anim_attack: used when the tower is attacking an enemy\r\n            -anim_idle: used when the tower is not attacking\r\n        animations should start on frame 0\r\n    \r\n        animation lengths are automatically scaled to the tower's rate of fire.\r\n    \r\n        defence towers deal damage, apply debuffs to enemies, and buff ally towers.\r\n        these factors can be further modified by providing upgrades for the tower.\r\n        upgrades are number sets that define the cost, target, and effect of the\r\n        upgrade when purchased.\r\n        NOTE: SYSTEM EXPECTS A MAX OF 3 UPGRADES AT THIS TIME, to add more modify the menues\r\n            [attr_target, purchase_cost, puchase_count, attr_effect]\r\n        example:\r\n            Upgrades [ [\"ValueAttackSpeed\", 200, 5, -10] ]\r\n            creates an upgrade that costs 200 points, can be purchased 5 times,\r\n            decreases the attack interval of the tower by 10% (increasing attack rate)\r\n        \r\n        'attributes' define what effects the tower applies on an enemy when it deals damage. these\r\n        effects are processed every 0.25s (ticks to reduce processing), so every 4 intervals is equal\r\n        to 1 second.\r\n        attribute entry: [type, power, length]\r\n            types: 0=slow %, 1=damage hp, 2=damange armour\r\n            power: value\r\n            length: number of ticks\r\n        example: [1, 10, 4] will cause 10 points of damage every tick for 4 ticks (40 DPS)\r\n    */\r\n    exports.dataTowers = [\r\n        //PROJECTILE TOWERS\r\n        //  gun tower\r\n        {\r\n            //asset\r\n            Path: \"ProjectileStandard\",\r\n            Offset: [0, 0.3, 0],\r\n            Scale: [2, 2, 2],\r\n            //animations\r\n            ValueAttackIntervalFull: 1.0,\r\n            ValueAttackIntervalDamage: 0.3,\r\n            //display\r\n            DisplayName: \"Bullet Tower\",\r\n            DisplayDesc: \"Balanced capabilities between power, speed, and range\",\r\n            //stats\r\n            ValueCost: 80,\r\n            ValueAttackDamage: 40,\r\n            ValueAttackPenetration: 2,\r\n            ValueAttackRend: 0,\r\n            ValueAttackRange: 2.2,\r\n            ValueAttackSpeed: 0.8,\r\n            //upgrades\r\n            Upgrades: [\r\n                [\"ValueAttackDamage\", 10, 5, 4],\r\n                [\"ValueAttackSpeed\", 20, 6, 0.05],\r\n                [\"ValueAttackPenetration\", 15, 5, 1], //pen\r\n            ],\r\n            //mechanics\r\n            Attributes: []\r\n        },\r\n        //  gatling tower\r\n        {\r\n            //asset\r\n            Path: \"ProjectileGatling\",\r\n            Offset: [0, 0.3, 0],\r\n            Scale: [2, 2, 2],\r\n            //animation details\r\n            ValueAttackIntervalFull: 1.0,\r\n            ValueAttackIntervalDamage: 0.3,\r\n            //display\r\n            DisplayName: \"Gatling Tower\",\r\n            DisplayDesc: \"Extremely fast rate of fire and decent armor rend, but lower damage\",\r\n            //combat\r\n            ValueCost: 95,\r\n            ValueAttackDamage: 18,\r\n            ValueAttackPenetration: 0,\r\n            ValueAttackRend: 1,\r\n            ValueAttackRange: 1.5,\r\n            ValueAttackSpeed: 1.5,\r\n            //upgrades\r\n            Upgrades: [\r\n                [\"ValueAttackSpeed\", 20, 5, 0.15],\r\n                [\"ValueAttackPenetration\", 15, 5, 1],\r\n                [\"ValueAttackRend\", 30, 5, 1], //rend\r\n            ],\r\n            //mechanics\r\n            Attributes: []\r\n        },\r\n        //  sniper tower\r\n        {\r\n            //asset\r\n            Path: \"ProjectileSniper\",\r\n            Offset: [0, 0.3, 0],\r\n            Scale: [2, 2, 2],\r\n            //animation details\r\n            ValueAttackIntervalFull: 1.0,\r\n            ValueAttackIntervalDamage: 0.3,\r\n            //display\r\n            DisplayName: \"Sniper Tower\",\r\n            DisplayDesc: \"High damage, range, and armor penetration, but a slow rate of fire\",\r\n            //combat\r\n            ValueCost: 140,\r\n            ValueAttackDamage: 120,\r\n            ValueAttackPenetration: 10,\r\n            ValueAttackRend: 4,\r\n            ValueAttackRange: 3,\r\n            ValueAttackSpeed: 0.225,\r\n            //upgrades\r\n            Upgrades: [\r\n                [\"ValueAttackDamage\", 10, 5, 15],\r\n                [\"ValueAttackPenetration\", 15, 5, 4],\r\n                [\"ValueAttackRange\", 30, 5, 0.2], //range\r\n            ],\r\n            //mechanics\r\n            Attributes: []\r\n        },\r\n        //ELEMENTAL TOWERS \r\n        //  fire\r\n        {\r\n            //asset\r\n            Path: \"ElementalFire\",\r\n            Offset: [0, 0.3, 0],\r\n            Scale: [2, 2, 2],\r\n            //animation details\r\n            ValueAttackIntervalFull: 1.0,\r\n            ValueAttackIntervalDamage: 0.3,\r\n            //display\r\n            DisplayName: \"Flamethrower Tower\",\r\n            DisplayDesc: \"Applies a burning effect that deals damage over time\",\r\n            //combat\r\n            ValueCost: 120,\r\n            ValueAttackDamage: 12,\r\n            ValueAttackPenetration: 0,\r\n            ValueAttackRend: 0,\r\n            ValueAttackRange: 1.4,\r\n            ValueAttackSpeed: 1.2,\r\n            //upgrades\r\n            Upgrades: [\r\n                [\"ValueAttackDamage\", 10, 5, 2],\r\n                [\"ValueAttackSpeed\", 30, 6, 0.1], //speed\r\n                //[\"ValueAttackRend\", 30, 5, 2], //burn increase\r\n            ],\r\n            //mechanics\r\n            Attributes: [[1, 2, 12]] //applies burn\r\n        },\r\n        //  corrosion\r\n        {\r\n            //asset\r\n            Path: \"ElementalAcid\",\r\n            Offset: [0, 0.3, 0],\r\n            Scale: [2, 2, 2],\r\n            //animation details\r\n            ValueAttackIntervalFull: 1.0,\r\n            ValueAttackIntervalDamage: 0.3,\r\n            //display\r\n            DisplayName: \"Corrosion Tower\",\r\n            DisplayDesc: \"Most effective at removing enemy armour\",\r\n            //combat\r\n            ValueCost: 90,\r\n            ValueAttackDamage: 13,\r\n            ValueAttackPenetration: 4,\r\n            ValueAttackRend: 6,\r\n            ValueAttackRange: 1.4,\r\n            ValueAttackSpeed: 0.8,\r\n            //upgrades\r\n            Upgrades: [\r\n                [\"ValueAttackSpeed\", 30, 5, 0.02],\r\n                [\"ValueAttackRend\", 30, 5, 3], //rend\r\n                //[\"ValueAttackPenetration\", 30, 5, 2], //acid intensify\r\n            ],\r\n            //mechanics\r\n            Attributes: [[2, 1, 8]] //applies armour melt\r\n        },\r\n        //  electric\r\n        {\r\n            //asset\r\n            Path: \"ElementalLightning\",\r\n            Offset: [0, 0.3, 0],\r\n            Scale: [2, 2, 2],\r\n            //animation details\r\n            ValueAttackIntervalFull: 1.0,\r\n            ValueAttackIntervalDamage: 0.3,\r\n            //display\r\n            DisplayName: \"Lightning Tower\",\r\n            DisplayDesc: \"Applies a disruptive shock that slows enemies\",\r\n            //combat\r\n            ValueCost: 100,\r\n            ValueAttackDamage: 14,\r\n            ValueAttackPenetration: 0,\r\n            ValueAttackRend: 0,\r\n            ValueAttackRange: 1.6,\r\n            ValueAttackSpeed: 0.6,\r\n            //upgrades\r\n            Upgrades: [\r\n                [\"ValueAttackDamage\", 15, 5, 2],\r\n                [\"ValueAttackPenetration\", 20, 5, 1], //pen\r\n                //[\"ValueAttackRend\", 30, 5, 2], //slow intensify\r\n            ],\r\n            //mechanics\r\n            Attributes: [[0, 30, 40]] //applies move slow\r\n        }\r\n    ];\r\n});\r\ndefine(\"utilities/collections\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.Dictionary = exports.List = void 0;\r\n    var List = /** @class */ (function () {\r\n        function List() {\r\n            this.items = [];\r\n        }\r\n        List.prototype.size = function () {\r\n            return this.items.length;\r\n        };\r\n        List.prototype.addItem = function (value) {\r\n            this.items.push(value);\r\n        };\r\n        List.prototype.getItem = function (index) {\r\n            return this.items[index];\r\n        };\r\n        //assigns the given <e> instance to targeted position in array\r\n        List.prototype.assignItem = function (pos, instance) {\r\n            this.items[pos] = instance;\r\n        };\r\n        //removes the selected element from the list, maintaining the order of elements\r\n        List.prototype.removeItem = function (value) {\r\n            //shift selected element to last spot in array\r\n            var i = 0;\r\n            var tmp;\r\n            while (i < this.items.length) {\r\n                //if end of list\r\n                if (i == this.items.length - 1) {\r\n                    this.items.pop();\r\n                    return;\r\n                }\r\n                //if item is found\r\n                if (this.items[i] == value) {\r\n                    //swap targeted element with next element in list\r\n                    tmp = this.items[i];\r\n                    this.items[i] = this.items[i + 1];\r\n                    this.items[i + 1] = tmp;\r\n                }\r\n                //force next case\r\n                i++;\r\n            }\r\n        };\r\n        return List;\r\n    }());\r\n    exports.List = List;\r\n    var Dictionary = /** @class */ (function () {\r\n        function Dictionary() {\r\n            this.items = {};\r\n            this.count = 0;\r\n        }\r\n        Dictionary.prototype.size = function () {\r\n            return this.count;\r\n        };\r\n        Dictionary.prototype.getKeys = function () {\r\n            var keySet = [];\r\n            for (var property in this.items) {\r\n                if (this.items.hasOwnProperty(property)) {\r\n                    keySet.push(property);\r\n                }\r\n            }\r\n            return keySet;\r\n        };\r\n        Dictionary.prototype.containsKey = function (key) {\r\n            return this.items.hasOwnProperty(key);\r\n        };\r\n        Dictionary.prototype.addItem = function (key, value) {\r\n            if (!this.items.hasOwnProperty(key)) {\r\n                this.count++;\r\n            }\r\n            this.items[key] = value;\r\n            return;\r\n        };\r\n        Dictionary.prototype.getItem = function (key) {\r\n            return this.items[key];\r\n        };\r\n        Dictionary.prototype.removeItem = function (key) {\r\n            var value = this.items[key];\r\n            delete this.items[key];\r\n            this.count--;\r\n            return value;\r\n        };\r\n        Dictionary.prototype.values = function () {\r\n            var values = [];\r\n            for (var property in this.items) {\r\n                if (this.items.hasOwnProperty(property)) {\r\n                    values.push(this.items[property]);\r\n                }\r\n            }\r\n            return values;\r\n        };\r\n        return Dictionary;\r\n    }());\r\n    exports.Dictionary = Dictionary;\r\n    exports.default = Dictionary;\r\n});\r\ndefine(\"td-core/data/enemy-data\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.EnemyData = void 0;\r\n    /*      ENEMY DATA\r\n        contains all data definitions for enemy units. units come\r\n        in a variety of types, with different attributes, and belong\r\n        to seperate wave spawn types.\r\n    \r\n        enemy unit models need to be placed under 'models/td-core/enemy'. the\r\n        following animations should exist on the model and follow these parameters:\r\n            -anim_attack: used when an enemy attacks the player's base\r\n            -anim_death: used when enemy\r\n            -\r\n    \r\n        the main segment for types is split along a size/complexity basis: smaller\r\n        units take less in-scene resources, so more are spawned per wave; the opposite\r\n        is true for larger units. spawning managed by 'enemy-wave.ts', while each\r\n        individual unit is controlled by the 'enemy-unit.ts'.\r\n            wave type: used to determine what wave group to spawn in\r\n                0 - small\r\n                1 - medium\r\n                2 - large\r\n                3 - boss\r\n            spawn cost: used to dertermine how many of these units will spawn during a\r\n            wave. when a new wave is being spawned, the wave manager is given a unit type\r\n            and budget to spend on spawnable units when constructing the wave. this enables\r\n            composite waves (waves containing multiple types of enemy units), which adds more\r\n            variety into the game.\r\n    \r\n        each enemy has survival elements: these deterimine their in-game speed and durability.\r\n        some of these elements grow over the course of the game, making units more difficult to\r\n        defeat. example: at wave 3 an enemy's health = healthBase + (healthGrowth*waveCurrent).\r\n    \r\n        certain attribute tags are also available which will apply certain effects on an enemy\r\n        unit when it is spawned:\r\n            -Shielded: appliese a damage reduction shield to nearby enemies\r\n            -Spawner: spawns small creatures over time\r\n    \r\n    */\r\n    exports.EnemyData = [\r\n        //### SMALL ENEMIES ###\r\n        //  swarmer\r\n        {\r\n            //object\r\n            ObjectPath: \"enemyCrawler\",\r\n            ObjectOffset: [0, 0.1, 0],\r\n            ObjectScale: [0.05, 0.05, 0.05],\r\n            HealthPos: [0, 0.5, 0],\r\n            HealthScale: [0.25, 0.25, 0.25],\r\n            //timing\r\n            ValueAttackIntervalFull: 2,\r\n            ValueAttackIntervalDamage: 1,\r\n            ValueDeathLength: 1.4,\r\n            ValueDeathLengthScale: 2,\r\n            //display\r\n            DisplayName: \"Crawler\",\r\n            DisplayDesc: \"Small, fast moving unit that travels in large groups\",\r\n            //spawning\r\n            SpawnType: 0,\r\n            SpawnCost: 0.45,\r\n            //survival\r\n            ValueSpeed: 0.80,\r\n            ValueHealthBase: 10,\r\n            ValueHealthGrowth: 0.25,\r\n            ValueArmourBase: 10,\r\n            ValueArmourGrowth: 0.25,\r\n            //rewards\r\n            ValueRewards: 1,\r\n            //mechanics\r\n            Attributes: [\r\n                \"\"\r\n            ]\r\n        },\r\n        //  drone\r\n        {\r\n            //model path\r\n            ObjectPath: \"enemyDrone\",\r\n            ObjectOffset: [0, 0.5, 0],\r\n            ObjectScale: [0.25, 0.25, 0.25],\r\n            HealthPos: [0, 1, 0],\r\n            HealthScale: [0.25, 0.25, 0.25],\r\n            //timing\r\n            ValueAttackIntervalFull: 2,\r\n            ValueAttackIntervalDamage: 1,\r\n            ValueDeathLength: 1.4,\r\n            ValueDeathLengthScale: 2,\r\n            //display\r\n            DisplayName: \"Drone\",\r\n            DisplayDesc: \"Agile flying unit\",\r\n            //spawning\r\n            SpawnType: 0,\r\n            SpawnCost: 0.45,\r\n            //survival\r\n            ValueSpeed: 0.85,\r\n            ValueHealthBase: 30,\r\n            ValueHealthGrowth: 1,\r\n            ValueArmourBase: 0,\r\n            ValueArmourGrowth: 0,\r\n            //rewards\r\n            ValueRewards: 1,\r\n            //mechanics\r\n            Attributes: [\r\n                \"\"\r\n            ]\r\n        },\r\n        //### MEDIUM ENEMIES ###\r\n        //  walker\r\n        {\r\n            //model path\r\n            ObjectPath: \"enemyStandard\",\r\n            ObjectOffset: [0, 0.525, 0],\r\n            ObjectScale: [0.2, 0.2, 0.2],\r\n            HealthPos: [0, 1, 0],\r\n            HealthScale: [0.25, 0.25, 0.25],\r\n            //timing\r\n            ValueAttackIntervalFull: 2,\r\n            ValueAttackIntervalDamage: 1,\r\n            ValueDeathLength: 1.4,\r\n            ValueDeathLengthScale: 2,\r\n            //display\r\n            DisplayName: \"Defender\",\r\n            DisplayDesc: \"Standard unit\",\r\n            //spawning\r\n            SpawnType: 1,\r\n            SpawnCost: 1,\r\n            //survival\r\n            ValueSpeed: 0.65,\r\n            ValueHealthBase: 50,\r\n            ValueHealthGrowth: 2.25,\r\n            ValueArmourBase: 5,\r\n            ValueArmourGrowth: 0,\r\n            //rewards\r\n            ValueRewards: 2,\r\n            //mechanics\r\n            Attributes: [\r\n                \"\"\r\n            ]\r\n        },\r\n        //### LARGE ENEMIES ###\r\n        //  bruiser\r\n        {\r\n            //model path\r\n            ObjectPath: \"enemyBruiser\",\r\n            ObjectOffset: [0, 0.15, 0],\r\n            ObjectScale: [0.25, 0.25, 0.25],\r\n            HealthPos: [0, 0.75, 0],\r\n            HealthScale: [0.25, 0.25, 0.25],\r\n            //timing\r\n            ValueAttackIntervalFull: 2,\r\n            ValueAttackIntervalDamage: 1,\r\n            ValueDeathLength: 1.4,\r\n            ValueDeathLengthScale: 2,\r\n            //display\r\n            DisplayName: \"Bruiser\",\r\n            DisplayDesc: \"Tanky unit\",\r\n            //spawning\r\n            SpawnType: 2,\r\n            SpawnCost: 3,\r\n            //survival\r\n            ValueSpeed: 0.45,\r\n            ValueHealthBase: 120,\r\n            ValueHealthGrowth: 4,\r\n            ValueArmourBase: 14,\r\n            ValueArmourGrowth: 1,\r\n            //rewards\r\n            ValueRewards: 4,\r\n            //mechanics\r\n            Attributes: [\r\n                \"\"\r\n            ]\r\n        },\r\n        //### BOSS ENEMIES ###\r\n        //  champion\r\n        {\r\n            //model path\r\n            ObjectPath: \"enemyBruiser\",\r\n            ObjectOffset: [0, 0.5, 0],\r\n            ObjectScale: [0.25, 0.25, 0.25],\r\n            HealthPos: [0, 1, 0],\r\n            HealthScale: [0.25, 0.25, 0.25],\r\n            //timing\r\n            ValueAttackIntervalFull: 2,\r\n            ValueAttackIntervalDamage: 1,\r\n            ValueDeathLength: 1.4,\r\n            ValueDeathLengthScale: 2,\r\n            //display\r\n            DisplayName: \"Champion\",\r\n            DisplayDesc: \"Massive tank unit\",\r\n            //spawning\r\n            SpawnType: 3,\r\n            SpawnCost: 30,\r\n            //survival\r\n            ValueSpeed: 0.25,\r\n            ValueHealthBase: 300,\r\n            ValueHealthGrowth: 8,\r\n            ValueArmourBase: 30,\r\n            ValueArmourGrowth: 2.5,\r\n            //rewards\r\n            ValueRewards: 25,\r\n            //mechanics\r\n            Attributes: [\r\n                \"\"\r\n            ]\r\n        },\r\n        //  Spawner\r\n        {\r\n            //model path\r\n            ObjectPath: \"enemyBruiser\",\r\n            ObjectOffset: [0, 0.5, 0],\r\n            ObjectScale: [0.25, 0.25, 0.25],\r\n            HealthPos: [0, 1, 0],\r\n            HealthScale: [0.25, 0.25, 0.25],\r\n            //timing\r\n            ValueAttackIntervalFull: 2,\r\n            ValueAttackIntervalDamage: 1,\r\n            ValueDeathLength: 1.4,\r\n            ValueDeathLengthScale: 2,\r\n            //display\r\n            DisplayName: \"Mobile Spawner\",\r\n            DisplayDesc: \"Periodically spawns enemies around the unit\",\r\n            //spawning\r\n            SpawnType: 3,\r\n            SpawnCost: 50,\r\n            //survival\r\n            ValueSpeed: 0.25,\r\n            ValueHealthBase: 250,\r\n            ValueHealthGrowth: 12,\r\n            ValueArmourBase: 50,\r\n            ValueArmourGrowth: 1,\r\n            //rewards\r\n            ValueRewards: 35,\r\n            //mechanics\r\n            Attributes: [\r\n                \"\"\r\n            ]\r\n        },\r\n    ];\r\n});\r\ndefine(\"td-core/game-states\", [\"require\", \"exports\", \"td-core/data/difficulty-data\"], function (require, exports, difficulty_data_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.GameState = void 0;\r\n    /*      GAME STATE\r\n        contains all details for the current game settings and state.\r\n        also contains global switches for debugging systems.\r\n    */\r\n    var GameState = /** @class */ (function () {\r\n        function GameState() {\r\n        }\r\n        Object.defineProperty(GameState, \"MoneyStart\", {\r\n            get: function () { return GameState.moneyStart * difficulty_data_1.DifficultyData[GameState.DifficultyCur].PointGainPercent / 100; },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        //debugging toggles\r\n        //  overhead\r\n        GameState.debuggingManager = false;\r\n        GameState.debuggingPath = false;\r\n        //  tower\r\n        GameState.debuggingTower = false;\r\n        //  enemy\r\n        GameState.debuggingEnemy = false;\r\n        GameState.debuggingWave = false;\r\n        //current game state\r\n        //  0 - idle\r\n        //  1 - active, in between waves\r\n        //  2 - active, wave on-going, spawning on-going\r\n        //  3 - active, wave on-going, spawning completed\r\n        //  4 - game over, win\r\n        //  5 - game over, loss\r\n        GameState.stateCur = 0;\r\n        GameState.stateStrings = [\r\n            \"Idle\",\r\n            \"Game Active:\\nStart Wave\",\r\n            \"Game Active:\\Wave Active\",\r\n            \"Game Active:\\nWave Over\",\r\n            \"Game Over:\\nVictory\",\r\n            \"Game Over:\\nDefeat\"\r\n        ];\r\n        //difficulty\r\n        GameState.DifficultyCur = 2;\r\n        //waves\r\n        GameState.WaveCur = 0;\r\n        GameState.WaveMax = 30;\r\n        //player\r\n        GameState.PlayerHealth = 0;\r\n        GameState.PlayerMoney = 0;\r\n        //economy\r\n        GameState.moneyStart = 150;\r\n        GameState.MoneyRewardWave = 50;\r\n        return GameState;\r\n    }());\r\n    exports.GameState = GameState;\r\n});\r\ndefine(\"td-core/config/pathing-config\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.configPathing = exports.configSpawners = void 0;\r\n    /*      SPAWNER CONFIG\r\n        defines spawner states for certain waves, boils down to switch\r\n        logic for de/activation of spawn locations. given index MUST be\r\n        the index as defined in the pathing config.\r\n    */\r\n    exports.configSpawners = [\r\n        //activation event\r\n        {\r\n            //index of target wave\r\n            wave: 0,\r\n            //all actions to conduct during wave\r\n            actions: [\r\n                //index of targeted spawn & state to set (0=off, 1=on)\r\n                { index: 7, state: 1 },\r\n                { index: 9, state: 1 },\r\n            ]\r\n        },\r\n        {\r\n            wave: 1,\r\n            actions: [\r\n                { index: 7, state: 1 },\r\n                { index: 9, state: 0 },\r\n            ]\r\n        },\r\n        {\r\n            wave: 2,\r\n            actions: [\r\n                { index: 7, state: 1 },\r\n                { index: 9, state: 1 },\r\n            ]\r\n        },\r\n    ];\r\n    /*      PATHING CONFIG\r\n        defines waypoints used to create pathing nodes for enemy units.\r\n        an enemy unit progresses from one waypoint to another, when the\r\n        unit collides with the waypoint object the next waypoint is assigned.\r\n    \r\n        types:\r\n            0 - no function\r\n            1 - spawn\r\n            2 - end point\r\n    */\r\n    exports.configPathing = [\r\n        //  end-point\r\n        {\r\n            Index: 0,\r\n            Type: 2,\r\n            Target: [],\r\n            Scale: [1, 1, 1],\r\n            Position: [29, 0, 23],\r\n            Rotation: [0, 0, 0],\r\n        },\r\n        //  corner\r\n        {\r\n            Index: 1,\r\n            Type: 0,\r\n            Target: [0],\r\n            Scale: [1, 1, 1],\r\n            Position: [41, 0, 23],\r\n            Rotation: [0, 0, 0],\r\n        },\r\n        //  corner\r\n        {\r\n            Index: 2,\r\n            Type: 0,\r\n            Target: [1],\r\n            Scale: [1, 1, 1],\r\n            Position: [41, 0, 29],\r\n            Rotation: [0, 0, 0],\r\n        },\r\n        //  corner\r\n        {\r\n            Index: 3,\r\n            Type: 0,\r\n            Target: [2],\r\n            Scale: [1, 1, 1],\r\n            Position: [29, 0, 29],\r\n            Rotation: [0, 0, 0],\r\n        },\r\n        //  corner\r\n        {\r\n            Index: 4,\r\n            Type: 0,\r\n            Target: [3],\r\n            Scale: [1, 1, 1],\r\n            Position: [29, 0, 35],\r\n            Rotation: [0, 0, 0],\r\n        },\r\n        //  split 1\r\n        {\r\n            Index: 5,\r\n            Type: 0,\r\n            Target: [4],\r\n            Scale: [1, 1, 1],\r\n            Position: [35, 0, 35],\r\n            Rotation: [0, 0, 0],\r\n        },\r\n        //  split 1, fork 1\r\n        {\r\n            Index: 6,\r\n            Type: 0,\r\n            Target: [5],\r\n            Scale: [1, 1, 1],\r\n            Position: [41, 0, 35],\r\n            Rotation: [0, 0, 0],\r\n        },\r\n        //  spawnpoint\r\n        {\r\n            Index: 7,\r\n            Type: 1,\r\n            Target: [6],\r\n            Scale: [1, 1, 1],\r\n            Position: [41, 0, 41],\r\n            Rotation: [0, 0, 0],\r\n        },\r\n        //  split 1, fork 2\r\n        {\r\n            Index: 8,\r\n            Type: 0,\r\n            Target: [5],\r\n            Scale: [1, 1, 1],\r\n            Position: [35, 0, 41],\r\n            Rotation: [0, 0, 0],\r\n        },\r\n        //  spawnpoint\r\n        {\r\n            Index: 9,\r\n            Type: 1,\r\n            Target: [8],\r\n            Scale: [1, 1, 1],\r\n            Position: [29, 0, 41],\r\n            Rotation: [0, 0, 0],\r\n        },\r\n    ];\r\n});\r\ndefine(\"td-core/map-pathing\", [\"require\", \"exports\", \"utilities/collections\", \"td-core/config/pathing-config\", \"td-core/game-states\"], function (require, exports, collections_1, pathing_config_1, game_states_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.Waypoint = exports.WaypointManager = void 0;\r\n    var WaypointManager = /** @class */ (function (_super) {\r\n        __extends(WaypointManager, _super);\r\n        //constructor\r\n        function WaypointManager() {\r\n            var _this = _super.call(this) || this;\r\n            //animation names\r\n            _this.animKeys = [];\r\n            //collections\r\n            //  waypoints\r\n            _this.WaypointList = new collections_1.List();\r\n            _this.WaypointDict = new collections_1.Dictionary();\r\n            //  spawnpoints\r\n            _this.SpawnPoints = new collections_1.List();\r\n            //returns the a spawn point, pointer is persistent and iterates through all spawn points\r\n            _this.spawnPointIndex = 0;\r\n            _this.spawnPointIndexCheck = 0;\r\n            //called before a wave begins, displays \r\n            _this.configIndex = -1;\r\n            //returns the total distance of the waypoint path that will be travelled by a unit based on the given spawn and seed\r\n            _this.distance = 0;\r\n            //object\r\n            _this.addComponent(new Transform({\r\n                position: new Vector3(0, 0, 0),\r\n                scale: new Vector3(1, 1, 1),\r\n                rotation: new Quaternion().setEuler(0, 0, 0)\r\n            }));\r\n            return _this;\r\n        }\r\n        Object.defineProperty(WaypointManager, \"Instance\", {\r\n            get: function () {\r\n                //ensure instance is set\r\n                if (WaypointManager.instance === undefined) {\r\n                    WaypointManager.instance = new WaypointManager();\r\n                }\r\n                return WaypointManager.instance;\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        //generates waypoints, loading from defs stored in pathing-config\r\n        WaypointManager.prototype.GenerateWaypoints = function () {\r\n            //create all waypoint objects\r\n            if (game_states_1.GameState.debuggingPath)\r\n                log(\"MAP PATHING: generating waypoint objects...\");\r\n            for (var i = 0; i < pathing_config_1.configPathing.length; i++) {\r\n                //object\r\n                var waypoint = new Waypoint(pathing_config_1.configPathing[i].Index);\r\n                waypoint.setParent(this);\r\n                //add to collections\r\n                this.WaypointList.addItem(waypoint);\r\n                this.WaypointDict.addItem(waypoint.Index.toString(), waypoint);\r\n                if (pathing_config_1.configPathing[i].Type == 1) {\r\n                    this.SpawnPoints.addItem(waypoint);\r\n                }\r\n            }\r\n            if (game_states_1.GameState.debuggingPath)\r\n                log(\"MAP PATHING: generated waypoint objects, count: \" + this.WaypointList.size());\r\n        };\r\n        WaypointManager.prototype.GetSpawnPoint = function () {\r\n            //push to next index\r\n            this.spawnPointIndexCheck = this.spawnPointIndex;\r\n            this.spawnPointIndex++;\r\n            if (this.spawnPointIndex >= this.SpawnPoints.size()) {\r\n                this.spawnPointIndex = 0;\r\n            }\r\n            //check state\r\n            while (this.spawnPointIndex != this.spawnPointIndexCheck) {\r\n                //conduct check\r\n                if (this.SpawnPoints.getItem(this.spawnPointIndex).State == 1) {\r\n                    break;\r\n                }\r\n                //push next index\r\n                this.spawnPointIndex++;\r\n                if (this.spawnPointIndex >= this.SpawnPoints.size()) {\r\n                    this.spawnPointIndex = 0;\r\n                }\r\n            }\r\n            return this.SpawnPoints.getItem(this.spawnPointIndex);\r\n        };\r\n        //returns the next waypoint in the chain based on the given index and seed\r\n        WaypointManager.prototype.GetNextWaypoint = function (index, seed) {\r\n            //if target length is zero, waypoint is end of path\r\n            if (this.WaypointDict.getItem(index.toString()).Target.length == 0) {\r\n                return undefined;\r\n            }\r\n            //randomize and return path selection\r\n            var pathRand = (seed + index) % this.WaypointDict.getItem(index.toString()).Target.length;\r\n            return this.WaypointDict.getItem(this.WaypointDict.getItem(index.toString()).Target[pathRand]);\r\n        };\r\n        //resets the state of all spawners, activating them all\r\n        WaypointManager.prototype.ResetSpawner = function () {\r\n            //process every spawnpoint\r\n            for (var i = 0; i < this.SpawnPoints.size(); i++) {\r\n                //enable spawn point\r\n                this.SpawnPoints.getItem(i).SetSpawnerState(1);\r\n            }\r\n        };\r\n        WaypointManager.prototype.ParseSpawnerConfig = function () {\r\n            //check for current wave in config files\r\n            this.configIndex = -1;\r\n            for (var i = 0; i < pathing_config_1.configSpawners.length; i++) {\r\n                if (game_states_1.GameState.WaveCur == pathing_config_1.configSpawners[i].wave) {\r\n                    this.configIndex = i;\r\n                    break;\r\n                }\r\n            }\r\n            if (this.configIndex == -1)\r\n                return;\r\n            //conduct required actions (dis/enabling spawners)\r\n            for (var i = 0; i < pathing_config_1.configSpawners[this.configIndex].actions.length; i++) {\r\n                this.WaypointDict.getItem(pathing_config_1.configSpawners[this.configIndex].actions[i].index.toString()).SetSpawnerState(pathing_config_1.configSpawners[this.configIndex].actions[i].state);\r\n            }\r\n        };\r\n        WaypointManager.prototype.GetRouteDistance = function (spawn, seed) {\r\n            this.distance = 0;\r\n            this.waypointPrev = undefined;\r\n            this.waypointCur = this.WaypointDict.getItem(spawn.toString());\r\n            //process path\r\n            while (true) {\r\n                //ensure entry waypoint is value\r\n                if (this.waypointCur == undefined) {\r\n                    return -1;\r\n                }\r\n                //get next waypoint pair\r\n                this.waypointPrev = this.waypointCur;\r\n                this.waypointCur = this.GetNextWaypoint(this.waypointPrev.Index, seed);\r\n                //reached end of path\r\n                if (this.waypointCur == undefined) {\r\n                    return this.distance;\r\n                }\r\n                //add path distance\r\n                this.distance += Math.abs(Vector3.Distance(this.waypointPrev.getComponent(Transform).position, this.waypointCur.getComponent(Transform).position));\r\n            }\r\n        };\r\n        return WaypointManager;\r\n    }(Entity));\r\n    exports.WaypointManager = WaypointManager;\r\n    //acts as a single node along the path\r\n    var Waypoint = /** @class */ (function (_super) {\r\n        __extends(Waypoint, _super);\r\n        //constructor\r\n        function Waypoint(ind) {\r\n            var _this = _super.call(this) || this;\r\n            //data\r\n            _this.Index = ind;\r\n            _this.State = 1;\r\n            _this.Target = [];\r\n            for (var i = 0; i < pathing_config_1.configPathing[_this.Index].Target.length; i++) {\r\n                _this.Target.push(pathing_config_1.configPathing[_this.Index].Target[i].toString());\r\n            }\r\n            //position\r\n            _this.addComponent(new Transform({\r\n                position: new Vector3(pathing_config_1.configPathing[_this.Index].Position[0], pathing_config_1.configPathing[_this.Index].Position[1], pathing_config_1.configPathing[_this.Index].Position[2]),\r\n                scale: new Vector3(pathing_config_1.configPathing[_this.Index].Scale[0], pathing_config_1.configPathing[_this.Index].Scale[1], pathing_config_1.configPathing[_this.Index].Scale[2]),\r\n                rotation: new Quaternion().setEuler(pathing_config_1.configPathing[_this.Index].Rotation[0], pathing_config_1.configPathing[_this.Index].Rotation[1], pathing_config_1.configPathing[_this.Index].Rotation[2])\r\n            }));\r\n            if (game_states_1.GameState.debuggingPath) {\r\n                //create preview object\r\n                _this.addComponent(new BoxShape());\r\n                _this.getComponent(BoxShape).withCollisions = false;\r\n            }\r\n            //if spawner\r\n            if (pathing_config_1.configPathing[_this.Index].Type == 1) {\r\n                //create display object\r\n                _this.DisplayObject = new Entity();\r\n                _this.DisplayObject.setParent(_this);\r\n                _this.DisplayObject.addComponent(new GLTFShape(\"models/pathingSpawner.glb\"));\r\n                //animations\r\n                //  controller\r\n                _this.animator = _this.DisplayObject.addComponent(new Animator());\r\n                //  states\r\n                _this.animations = [];\r\n                _this.animations.push(new AnimationState('anim_SpawnDisabled', { looping: true, speed: 1 }));\r\n                _this.animations.push(new AnimationState('anim_SpawnEnabled', { looping: true, speed: 1 }));\r\n                _this.animations.push(new AnimationState('anim_SpawnEndpoint', { looping: true, speed: 1 }));\r\n                //  clips\r\n                _this.animator.addClip(_this.animations[0]);\r\n                _this.animator.addClip(_this.animations[1]);\r\n                _this.animator.addClip(_this.animations[2]);\r\n                //set default clip\r\n                _this.SetAnimationState(1);\r\n            }\r\n            //if player base (currently just varient packed into spawner)\r\n            if (pathing_config_1.configPathing[_this.Index].Type == 2) {\r\n                //create display object\r\n                _this.DisplayObject = new Entity();\r\n                _this.DisplayObject.setParent(_this);\r\n                _this.DisplayObject.addComponent(new GLTFShape(\"models/pathingSpawner.glb\"));\r\n                //animations\r\n                //  controller\r\n                _this.animator = _this.DisplayObject.addComponent(new Animator());\r\n                //  states\r\n                _this.animations = [];\r\n                _this.animations.push(new AnimationState('anim_SpawnDisabled', { looping: true, speed: 1 }));\r\n                _this.animations.push(new AnimationState('anim_SpawnEnabled', { looping: true, speed: 1 }));\r\n                _this.animations.push(new AnimationState('anim_SpawnEndpoint', { looping: true, speed: 1 }));\r\n                //  clips\r\n                _this.animator.addClip(_this.animations[0]);\r\n                _this.animator.addClip(_this.animations[1]);\r\n                _this.animator.addClip(_this.animations[2]);\r\n                //set default clip\r\n                _this.SetAnimationState(2);\r\n            }\r\n            return _this;\r\n        }\r\n        Waypoint.prototype.SetAnimationState = function (state) {\r\n            if (this.animator == undefined)\r\n                return;\r\n            if (this.animations == undefined)\r\n                return;\r\n            //disable all other animations\r\n            this.animations[0].stop();\r\n            this.animations[1].stop();\r\n            this.animations[2].stop();\r\n            //activate targeted animation\r\n            this.animations[state].play();\r\n        };\r\n        //sets the state of spawner\r\n        Waypoint.prototype.SetSpawnerState = function (state) {\r\n            this.State = state;\r\n            this.SetAnimationState(state);\r\n        };\r\n        return Waypoint;\r\n    }(Entity));\r\n    exports.Waypoint = Waypoint;\r\n});\r\ndefine(\"td-core/config/tower-config\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.configTower = exports.settingTower = void 0;\r\n    /*      TOWER CONFIG\r\n        defines locations for tower foundations. these are\r\n        locations where towers can be built\r\n    */\r\n    exports.settingTower = [\r\n        {\r\n            //foundation\r\n            foundationSpacing: [1, 1],\r\n            foundationOffset: [0, 0, 0],\r\n            foundationScale: [0.5, 0.5, 0.5],\r\n            //structure\r\n            structureOffset: [0, 0, 0],\r\n            structureScale: [1, 1, 1],\r\n            //gimbal\r\n            gimbalOffset: [0, 0, 0],\r\n            gimbalScale: [1, 1, 1]\r\n        }\r\n    ];\r\n    exports.configTower = [\r\n        //top left\r\n        {\r\n            GridLocation: [29.5, 0, 36.5],\r\n            GridSize: [5, 4]\r\n        },\r\n        //top right\r\n        {\r\n            GridLocation: [36.5, 0, 36.5],\r\n            GridSize: [4, 4]\r\n        },\r\n        //center middle\r\n        {\r\n            GridLocation: [30.5, 0, 30.5],\r\n            GridSize: [10, 4]\r\n        },\r\n        //bottom middle\r\n        {\r\n            GridLocation: [30.5, 0, 24.5],\r\n            GridSize: [10, 4]\r\n        }\r\n    ];\r\n});\r\n/*      TOWER ENTITY\r\n    holds functional components for all tower pieces. towers are\r\n    composed of 4 objects and 1 system:\r\n        -tower foundation object: interaction point for building and moving towers\r\n        -tower structure object: combat structure that attacks enemy units\r\n        -tower gimbal object: positioning object used for look-at rotations\r\n        -tower timer system: contains logic for targeting and attacking\r\n        enemy units that come within range of the tower\r\n*/\r\ndefine(\"td-core/tower-entity\", [\"require\", \"exports\", \"utilities/collections\", \"td-core/config/tower-config\", \"td-core/data/tower-data\", \"@dcl/ecs-scene-utils\", \"td-core/enemy-manager\", \"td-core/game-states\"], function (require, exports, collections_2, tower_config_1, tower_data_1, ecs_scene_utils_1, enemy_manager_1, game_states_2) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.TowerStructureSystem = exports.TowerFrame = exports.TowerFoundation = void 0;\r\n    /**\r\n     * provides the player with an interactable object used to build tower frames.\r\n     * interacting with a foundation that has a tower frame already constructed on it will\r\n     * allow the player to manage that tower frame and move the frame to a different unoccupied foundation\r\n     */\r\n    var TowerFoundation = /** @class */ (function (_super) {\r\n        __extends(TowerFoundation, _super);\r\n        /**\r\n         * constructor\r\n         * @param ind unique index of this tower foundation\r\n         * @param shapeFoundation object shape used to display foundation base\r\n         * @param shapeGimbal object shape used to display foundation gimbal/rotational point for tower\r\n         * @param shapeRange object shape used to display tower's range (should be transparent)\r\n         * @param enemyEnter callback function called when an enemy unit enters the tower's radius\r\n         * @param enemyExit callback function called when an enemy unit exits the tower's radius\r\n         */\r\n        function TowerFoundation(index, getSelectedTower, getTowerShape, enemyEnter, enemyExit) {\r\n            var _this = _super.call(this) || this;\r\n            //data\r\n            _this.index = index;\r\n            //set callback\r\n            _this.getSelectedTower = getSelectedTower;\r\n            _this.getTowerShape = getTowerShape;\r\n            //this.getTowerMaterial = getTowerMaterial;\r\n            //create foundation object\r\n            _this.addComponent(_this.getTowerShape(0, 0));\r\n            //this.addComponent(this.getTowerMaterial(0, 0));\r\n            _this.addComponent(new Transform({\r\n                position: new Vector3(0, 0, 0),\r\n                scale: new Vector3(0, 0, 0),\r\n                rotation: new Quaternion().setEuler(0, 0, 0)\r\n            }));\r\n            //trigger shape\r\n            _this.triggerShape = new ecs_scene_utils_1.TriggerSphereShape();\r\n            _this.triggerComponent = _this.addComponent(new ecs_scene_utils_1.TriggerComponent(_this.triggerShape, {\r\n                //targeted layer: enemy\r\n                triggeredByLayer: 2,\r\n                //calls\r\n                onTriggerEnter: function (entity) {\r\n                    if (game_states_2.GameState.debuggingTower)\r\n                        log(\"TOWER FOUNDATION: enemy entity:\" + entity.Index + \" entered foundation trigger, ID:\" + index.toString());\r\n                    enemyEnter(index, entity.Index);\r\n                },\r\n                onTriggerExit: function (entity) {\r\n                    if (game_states_2.GameState.debuggingTower)\r\n                        log(\"TOWER FOUNDATION: enemy entity:\" + entity.Index + \" exited foundation trigger, ID:\" + index.toString());\r\n                    enemyExit(index, entity.Index);\r\n                },\r\n            }));\r\n            //prepare tower frame entity\r\n            _this.TowerFrame = new TowerFrame(_this.triggerShape, getSelectedTower, getTowerShape);\r\n            _this.SetTowerFrame(_this.TowerFrame);\r\n            return _this;\r\n        }\r\n        Object.defineProperty(TowerFoundation.prototype, \"Index\", {\r\n            get: function () { return this.index; },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        ;\r\n        TowerFoundation.prototype.SetTowerFrame = function (towerFrame) {\r\n            this.TowerFrame = towerFrame;\r\n            this.TowerFrame.setParent(this);\r\n            this.TowerFrame.SetTriggerShape(this.triggerShape);\r\n            this.TowerFrame.TowerSystem.TowerAnchorTransform = this.getComponent(Transform);\r\n        };\r\n        return TowerFoundation;\r\n    }(Entity));\r\n    exports.TowerFoundation = TowerFoundation;\r\n    /**\r\n     * represents the functional components of a constructed tower (linkage to definition, colliders for\r\n     * catching enemy's entering radiud, etc). this has been split apart to allow towers to be moved between\r\n     * foundations during game run-time\r\n    */\r\n    var TowerFrame = /** @class */ (function (_super) {\r\n        __extends(TowerFrame, _super);\r\n        //public getTowerMaterial:(type:number, index:number) => Material;\r\n        //constructor\r\n        function TowerFrame(triggerShape, getSelectedTower, getTowerShape) {\r\n            var _this = _super.call(this) || this;\r\n            //current tower def\r\n            _this.TowerDef = -1;\r\n            //current upgrades\r\n            _this.TowerUpgrades = [];\r\n            //set callback\r\n            _this.getSelectedTower = getSelectedTower;\r\n            _this.getTowerShape = getTowerShape;\r\n            //this.getTowerMaterial = getTowerMaterial;\r\n            _this.triggerShape = triggerShape;\r\n            //set position\r\n            _this.addComponent(new Transform({\r\n                position: new Vector3(0, 0, 0),\r\n                scale: new Vector3(1, 1, 1),\r\n                rotation: new Quaternion().setEuler(0, 0, 0)\r\n            }));\r\n            //generate tower objects\r\n            //  structure object\r\n            _this.towerObjStructure = new Entity();\r\n            _this.towerObjStructure.addComponent(_this.getTowerShape(0, 1));\r\n            //towerObjStructure.addComponent(this.getTowerMaterial(0, 0));\r\n            _this.towerObjStructure.addComponent(new Transform({\r\n                position: new Vector3(tower_config_1.settingTower[0].structureOffset[0], tower_config_1.settingTower[0].structureOffset[1], tower_config_1.settingTower[0].structureOffset[2]),\r\n                scale: new Vector3(tower_config_1.settingTower[0].structureScale[0], tower_config_1.settingTower[0].structureScale[1], tower_config_1.settingTower[0].structureScale[2]),\r\n                rotation: new Quaternion().setEuler(0, 0, 0)\r\n            }));\r\n            _this.towerObjStructure.setParent(_this);\r\n            engine.removeEntity(_this.towerObjStructure);\r\n            //  gimbal object\r\n            _this.towerObjGimbal = new Entity();\r\n            _this.towerObjGimbal.addComponent(_this.getTowerShape(0, 2));\r\n            //this.towerObjGimbal.addComponent(this.getTowerMaterial(0, 0));\r\n            _this.towerObjGimbal.addComponent(new Transform({\r\n                position: new Vector3(tower_config_1.settingTower[0].gimbalOffset[0], tower_config_1.settingTower[0].gimbalOffset[1], tower_config_1.settingTower[0].gimbalOffset[2]),\r\n                scale: new Vector3(tower_config_1.settingTower[0].gimbalScale[0], tower_config_1.settingTower[0].gimbalScale[1], tower_config_1.settingTower[0].gimbalScale[2]),\r\n                rotation: new Quaternion().setEuler(0, 0, 0)\r\n            }));\r\n            _this.towerObjGimbal.setParent(_this);\r\n            engine.removeEntity(_this.towerObjGimbal);\r\n            //  frame\r\n            _this.towerObjFrame = new Entity();\r\n            _this.towerObjFrame.addComponent(new Transform({\r\n                position: new Vector3(0, 0, 0),\r\n                scale: new Vector3(1, 1, 1),\r\n                rotation: new Quaternion().setEuler(0, 0, 0)\r\n            }));\r\n            _this.towerObjFrame.setParent(_this.towerObjGimbal);\r\n            engine.removeEntity(_this.towerObjFrame);\r\n            //  range indicator\r\n            _this.rangeIndicator = new Entity();\r\n            _this.rangeIndicator.addComponent(_this.getTowerShape(0, 3));\r\n            //this.rangeIndicator.addComponent(this.getTowerMaterial(0, 0));\r\n            _this.rangeIndicator.addComponent(new Transform({\r\n                position: new Vector3(0, 0.21, 0),\r\n                scale: new Vector3(0, 0, 0),\r\n                rotation: new Quaternion().setEuler(0, 0, 0)\r\n            }));\r\n            _this.rangeIndicator.setParent(_this);\r\n            //system\r\n            _this.TowerSystem = new TowerStructureSystem(_this.getComponent(Transform), _this.towerObjGimbal.getComponent(Transform), _this.towerObjFrame);\r\n            return _this;\r\n        }\r\n        /**\r\n         * toggles range indicator visibility\r\n         */\r\n        TowerFrame.prototype.ToggleRangeIndicator = function () {\r\n            if (this.rangeIndicator.isAddedToEngine()) {\r\n                this.SetRangeIndicator(false);\r\n            }\r\n            else {\r\n                this.SetRangeIndicator(true);\r\n            }\r\n        };\r\n        /**\r\n         * sets range indicator visibility to provided state\r\n         * @param state target state of range indicator\r\n         */\r\n        TowerFrame.prototype.SetRangeIndicator = function (state) {\r\n            if (state) {\r\n                if (!this.rangeIndicator.isAddedToEngine())\r\n                    engine.addEntity(this.rangeIndicator);\r\n            }\r\n            else {\r\n                if (this.rangeIndicator.isAddedToEngine())\r\n                    engine.removeEntity(this.rangeIndicator);\r\n            }\r\n        };\r\n        TowerFrame.prototype.SetTriggerShape = function (triggerShape) {\r\n            //zero out previous trigger size\r\n            this.triggerShape.radius = 0;\r\n            //set up new trigger shape\r\n            if (this.TowerDef != -1) {\r\n                this.triggerShape = triggerShape;\r\n                this.triggerShape.radius = tower_data_1.dataTowers[this.TowerDef].ValueAttackRange;\r\n            }\r\n        };\r\n        /**\r\n         * used to set default/entry state\r\n         */\r\n        TowerFrame.prototype.Initialize = function () {\r\n            //hide tower objects\r\n            this.SetDisplayState(false);\r\n            //reset tower def index\r\n            this.TowerDef = -1;\r\n            //ensure system is off\r\n            engine.removeSystem(this.TowerSystem);\r\n            //  trigger shape scale (halt unneeded collider capture)\r\n            this.triggerShape.radius = 0;\r\n            //  indicator\r\n            this.rangeIndicator.getComponent(Transform).scale = new Vector3(0, 0, 0);\r\n            //  target and list\r\n            this.TowerSystem.TowerTarget = undefined;\r\n            while (this.TowerSystem.TowerTargets.size() > 0) {\r\n                this.TowerSystem.TowerTargets.removeItem(this.TowerSystem.TowerTargets.getItem(0));\r\n            }\r\n        };\r\n        /**\r\n         * changes display state of frame objects\r\n         * @param state target state\r\n         */\r\n        TowerFrame.prototype.SetDisplayState = function (state) {\r\n            if (state) {\r\n                if (!this.towerObjStructure.isAddedToEngine())\r\n                    engine.addEntity(this.towerObjStructure);\r\n                if (!this.towerObjGimbal.isAddedToEngine())\r\n                    engine.addEntity(this.towerObjGimbal);\r\n                if (!this.towerObjFrame.isAddedToEngine())\r\n                    engine.addEntity(this.towerObjFrame);\r\n            }\r\n            else {\r\n                if (this.towerObjStructure.isAddedToEngine())\r\n                    engine.removeEntity(this.towerObjStructure);\r\n                if (this.towerObjGimbal.isAddedToEngine())\r\n                    engine.removeEntity(this.towerObjGimbal);\r\n                if (this.towerObjFrame.isAddedToEngine())\r\n                    engine.removeEntity(this.towerObjFrame);\r\n            }\r\n        };\r\n        /**\r\n         * sets the foundation's current tower\r\n         * @param index targeted definition index\r\n         * @param shape shape object used to display the tower's current type\r\n         */\r\n        TowerFrame.prototype.SetTower = function (index, shape) {\r\n            //set index\r\n            this.TowerDef = index;\r\n            this.TowerSystem.TowerDef = index;\r\n            //display frame\r\n            this.SetDisplayState(true);\r\n            //reset upgrades\r\n            this.TowerUpgrades = [];\r\n            while (this.TowerUpgrades.length < tower_data_1.dataTowers[this.TowerDef].Upgrades.length) {\r\n                this.TowerUpgrades.push(0);\r\n            }\r\n            //clear previous \r\n            if (this.towerObjFrame.hasComponent(GLTFShape) != undefined)\r\n                this.towerObjFrame.removeComponent(GLTFShape);\r\n            //set frame shape and positioning\r\n            this.towerObjFrame.addComponent(shape);\r\n            this.towerObjFrame.getComponent(Transform).position = new Vector3(tower_data_1.dataTowers[this.TowerDef].Offset[0], tower_data_1.dataTowers[this.TowerDef].Offset[1], tower_data_1.dataTowers[this.TowerDef].Offset[2]);\r\n            this.towerObjFrame.getComponent(Transform).scale = new Vector3(tower_data_1.dataTowers[this.TowerDef].Scale[0], tower_data_1.dataTowers[this.TowerDef].Scale[1], tower_data_1.dataTowers[this.TowerDef].Scale[2]);\r\n            //update trigger radius\r\n            this.triggerShape.radius = tower_data_1.dataTowers[this.TowerDef].ValueAttackRange;\r\n            //  indicator\r\n            this.rangeIndicator.getComponent(Transform).scale = new Vector3(tower_data_1.dataTowers[this.TowerDef].ValueAttackRange * 2.22, 1, tower_data_1.dataTowers[this.TowerDef].ValueAttackRange * 2.22);\r\n            this.SetRangeIndicator(false);\r\n            //pull in functional details\r\n            //  attack animator raw details\r\n            this.TowerSystem.attackAnimDamagePoint = tower_data_1.dataTowers[this.TowerDef].ValueAttackIntervalDamage;\r\n            this.TowerSystem.attackAnimLength = tower_data_1.dataTowers[this.TowerDef].ValueAttackIntervalFull;\r\n            //  attack details\r\n            this.TowerSystem.attackDamage = tower_data_1.dataTowers[this.TowerDef].ValueAttackDamage;\r\n            this.TowerSystem.attackRend = tower_data_1.dataTowers[this.TowerDef].ValueAttackRend;\r\n            this.TowerSystem.attackPen = tower_data_1.dataTowers[this.TowerDef].ValueAttackPenetration;\r\n            this.TowerSystem.attackRange = tower_data_1.dataTowers[this.TowerDef].ValueAttackRange;\r\n            //calculate attack cooldown\r\n            this.TowerSystem.attackPerSecond = tower_data_1.dataTowers[this.TowerDef].ValueAttackSpeed;\r\n            this.TowerSystem.attackCooldown = (1 / this.TowerSystem.attackPerSecond);\r\n            //reset system\r\n            this.TowerSystem.Reset();\r\n        };\r\n        /**\r\n         * increases the level of the targeted upgrade and applies its effects\r\n         * @param index index of targeted upgrade that will be increased\r\n         */\r\n        TowerFrame.prototype.ApplyUpgrade = function (index) {\r\n            //increase count\r\n            this.TowerUpgrades[index]++;\r\n            //recalculate tower's data based on upgrade type\r\n            switch (tower_data_1.dataTowers[this.TowerDef].Upgrades[index][0]) {\r\n                case \"ValueAttackDamage\":\r\n                    this.TowerSystem.attackDamage = tower_data_1.dataTowers[this.TowerDef].ValueAttackDamage\r\n                        + (this.TowerUpgrades[index] * (+tower_data_1.dataTowers[this.TowerDef].Upgrades[index][3]));\r\n                    break;\r\n                case \"ValueAttackPenetration\":\r\n                    this.TowerSystem.attackPen = tower_data_1.dataTowers[this.TowerDef].ValueAttackPenetration\r\n                        + (this.TowerUpgrades[index] * (+tower_data_1.dataTowers[this.TowerDef].Upgrades[index][3]));\r\n                    break;\r\n                case \"ValueAttackRend\":\r\n                    this.TowerSystem.attackRend = tower_data_1.dataTowers[this.TowerDef].ValueAttackRend\r\n                        + (this.TowerUpgrades[index] * (+tower_data_1.dataTowers[this.TowerDef].Upgrades[index][3]));\r\n                    break;\r\n                case \"ValueAttackRange\":\r\n                    this.TowerSystem.attackRange = tower_data_1.dataTowers[this.TowerDef].ValueAttackRange\r\n                        + (this.TowerUpgrades[index] * (+tower_data_1.dataTowers[this.TowerDef].Upgrades[index][3]));\r\n                    break;\r\n                case \"ValueAttackSpeed\":\r\n                    //set attacks per second\r\n                    this.TowerSystem.attackPerSecond = tower_data_1.dataTowers[this.TowerDef].ValueAttackSpeed\r\n                        + (this.TowerUpgrades[index] * (+tower_data_1.dataTowers[this.TowerDef].Upgrades[index][3]));\r\n                    //calculate attack cooldown\r\n                    this.TowerSystem.attackCooldown = (1 / this.TowerSystem.attackPerSecond);\r\n                    //scale animation\r\n                    this.TowerSystem.animations[1].speed = this.TowerSystem.attackAnimLength * this.TowerSystem.attackPerSecond;\r\n                    break;\r\n            }\r\n        };\r\n        /**\r\n         * called when an enemy enters the tower's trigger field\r\n         * @param enemy index of enemy unit that has entered targeting\r\n         */\r\n        TowerFrame.prototype.EnemyEnter = function (enemy) {\r\n            this.TowerSystem.AddTarget(enemy);\r\n        };\r\n        /**\r\n         * called when an enemy exits the tower's trigger field,\r\n         *  does not interrupt an on-going attack on target if unit passes out of range during attack\r\n         * @param enemy index of enemy unit that has exited targeting\r\n         */\r\n        TowerFrame.prototype.EnemyExit = function (enemy) {\r\n            this.TowerSystem.RemoveTarget(enemy);\r\n        };\r\n        return TowerFrame;\r\n    }(Entity));\r\n    exports.TowerFrame = TowerFrame;\r\n    /**\r\n     * handles all real-time processing for the tower, including looking at and damaging enemies\r\n     * TODO: create callback from enemy to tower system upon death to remove target and reset attack if enemy was target\r\n     */\r\n    var TowerStructureSystem = /** @class */ (function () {\r\n        //initializes unit upon object creation\r\n        //  takes in index for this unit and starting waypoint\r\n        function TowerStructureSystem(towerAnchor, towerGimbal, objFrame) {\r\n            this.TowerDef = 0;\r\n            //active data, derived from def and upgrade levels\r\n            //  attack damage\r\n            this.attackDamage = 0;\r\n            this.attackPen = 0;\r\n            this.attackRend = 0;\r\n            //  attack range\r\n            this.attackRange = 0;\r\n            //  attack speed\r\n            //      animation raw lengths\r\n            this.attackAnimLength = 2; //full length of animation\r\n            this.attackAnimDamagePoint = 1; //point in animation when damage is dealt\r\n            //  attacks per second\r\n            this.attackPerSecond = 0;\r\n            //  actual length of attacks\r\n            this.attackCooldown = 0;\r\n            //  special modifiers (WIP)\r\n            //attackModifiers:number[][];\r\n            this.TargetingType = 0;\r\n            //attack\r\n            //  damage is dealt a portion of the way through the attack animation\r\n            //  ex: if attackDamagePeriod is 0.5, damage is dealt 0.5s after the attack animation has begun\r\n            //onAttack:() => void;\r\n            this.isAttacking = false;\r\n            this.attackTimer = [0, 0];\r\n            this.hasDamaged = false;\r\n            //all different methods for processing which unit will be targeted by the tower\r\n            //  there is a fair bit of repetitive code here, but because of how often these functions are processed\r\n            //  by towers it is well worth the storage-processing trade-off\r\n            this.targetTestUnit = undefined;\r\n            this.targetTestValue = 0;\r\n            //targets\r\n            this.TowerTarget = undefined;\r\n            this.TowerTargets = new collections_2.List();\r\n            //objects\r\n            this.TowerAnchorTransform = towerAnchor;\r\n            this.TowerGimbalTransform = towerGimbal;\r\n            this.TowerFrame = objFrame;\r\n            //animations\r\n            //  controller\r\n            this.animator = this.TowerFrame.addComponent(new Animator());\r\n            //  states\r\n            this.animations = [];\r\n            this.animations.push(new AnimationState('anim_idle', { looping: true, speed: 0.2 }));\r\n            this.animations.push(new AnimationState('anim_attack', { looping: false, speed: 1 }));\r\n            //  clips\r\n            this.animator.addClip(this.animations[0]);\r\n            this.animator.addClip(this.animations[1]);\r\n            //  halt clips by default\r\n            this.SetAnimationState(0);\r\n            //link event\r\n            this.DamageEnemy = this.damageEnemy;\r\n            this.ApplyEffect = this.applyEffect;\r\n        }\r\n        TowerStructureSystem.prototype.SetAnimationState = function (state) {\r\n            //disable all other animations\r\n            this.animations[0].stop();\r\n            this.animations[1].stop();\r\n            //activate targeted animation\r\n            this.animations[state].play();\r\n        };\r\n        /**\r\n         * adds an enemy unit to the list of possible targets\r\n         * @param enemy index of enemy to be added\r\n         */\r\n        TowerStructureSystem.prototype.AddTarget = function (enemy) {\r\n            if (game_states_2.GameState.debuggingTower)\r\n                log(\"TOWER SYSTEM: adding target ID:\" + enemy.toString());\r\n            //add enemy index to listing on tower\r\n            this.TowerTargets.addItem(enemy_manager_1.EnemyUnitManager.Instance.enemyDict.getItem(enemy.toString()));\r\n            //if there were no other targets, re-enable system\r\n            if (this.TowerTargets.size() == 1) {\r\n                if (game_states_2.GameState.debuggingTower)\r\n                    log(\"TOWER SYSTEM: no previous targets existed, reactivating system...\");\r\n                this.Reset();\r\n                engine.addSystem(this);\r\n            }\r\n            if (game_states_2.GameState.debuggingTower)\r\n                log(\"TOWER SYSTEM: new targeting list size = \" + this.TowerTargets.size());\r\n        };\r\n        /**\r\n         * removes an enemy unit from the list of possible targets\r\n         * sometimes the enemy clean up phase happens before this state and this can removal can be thrown twice\r\n         * once during death check and second when object leaves collider, only process this call if the enemy is alive\r\n         * @param enemy index of enemy to be removed\r\n         */\r\n        TowerStructureSystem.prototype.RemoveTarget = function (enemy) {\r\n            if (enemy_manager_1.EnemyUnitManager.Instance.enemyDict.getItem(enemy.toString()).IsAlive) {\r\n                if (game_states_2.GameState.debuggingTower)\r\n                    log(\"TOWER SYSTEM: removing target ID:\" + enemy.toString());\r\n                //remove enemy index from listing on tower\r\n                this.TowerTargets.removeItem(enemy_manager_1.EnemyUnitManager.Instance.enemyDict.getItem(enemy.toString()));\r\n                //if enemy is the current target\r\n                if (this.TowerTarget === enemy_manager_1.EnemyUnitManager.Instance.enemyDict.getItem(enemy.toString())) {\r\n                    //halt any on-going attack\r\n                    this.Reset();\r\n                }\r\n                if (game_states_2.GameState.debuggingTower)\r\n                    log(\"TOWER SYSTEM: new targeting list size = \" + this.TowerTargets.size());\r\n            }\r\n        };\r\n        TowerStructureSystem.prototype.damageEnemy = function (index, dam, pen, rend) { log(\"TOWER SYSTEM: tower callback not set - damage enemy:\" + index.toString()); };\r\n        TowerStructureSystem.prototype.applyEffect = function (index, type, power, length) { log(\"TOWER SYSTEM: tower callback not set - apply effect:\" + index.toString()); };\r\n        //processing over time\r\n        TowerStructureSystem.prototype.update = function (dt) {\r\n            //if target, look at target\r\n            if (this.TowerTarget != undefined) {\r\n                //look at enemy\r\n                this.TowerGimbalTransform.rotation =\r\n                    Quaternion.LookRotation(this.TowerTarget.getComponent(Transform).position.subtract(this.TowerAnchorTransform.position));\r\n            }\r\n            //if not attacking and off cooldown, attempt to find target and begin attack\r\n            if (!this.isAttacking && this.attackTimer[1] <= 0) {\r\n                //attempt to find target\r\n                this.FindTarget();\r\n                //ensure target has been found\r\n                if (this.TowerTarget != undefined) {\r\n                    if (game_states_2.GameState.debuggingTower)\r\n                        log(\"TOWER SYSTEM: attack beginning on target\");\r\n                    //attack animation\r\n                    this.SetAnimationState(1);\r\n                    //timing\r\n                    this.isAttacking = true;\r\n                    this.hasDamaged = false;\r\n                    //  scale timing based on attack speed\r\n                    this.attackTimer[0] = (this.attackCooldown * (this.attackAnimDamagePoint / this.attackAnimLength));\r\n                    this.attackTimer[1] = this.attackCooldown * ((this.attackAnimLength - this.attackAnimDamagePoint) / this.attackAnimLength);\r\n                    //log(\"TEST: attackCD=\"+this.attackCooldown+\", timeBefore=\"+this.attackTimer[0]+\", timeAfter=\"+this.attackTimer[1]);\r\n                }\r\n            }\r\n            //if attacking, reduce cooldown\r\n            if (this.isAttacking) {\r\n                //if damage has not been dealt yet\r\n                if (!this.hasDamaged) {\r\n                    //count ticker down\r\n                    this.attackTimer[0] -= dt;\r\n                    //check if damage should be dealt\r\n                    if (this.attackTimer[0] <= 0) {\r\n                        //log(\"TEST: DAM, \"+this.attackTimer[0]);\r\n                        //deal damage\r\n                        this.hasDamaged = true;\r\n                        if (this.TowerTarget != undefined) {\r\n                            if (game_states_2.GameState.debuggingTower)\r\n                                log(\"TOWER SYSTEM: attack completed, attack damage \" + this.attackDamage.toString() + \" dealt to target \" + this.TowerTarget.Index.toString());\r\n                            this.DamageEnemy(this.TowerTarget.Index, this.attackDamage, this.attackPen, this.attackRend);\r\n                            //apply effects\r\n                            for (var x = 0; x < tower_data_1.dataTowers[this.TowerDef].Attributes.length; x++) {\r\n                                this.ApplyEffect(this.TowerTarget.Index, tower_data_1.dataTowers[this.TowerDef].Attributes[x][0], tower_data_1.dataTowers[this.TowerDef].Attributes[x][1], tower_data_1.dataTowers[this.TowerDef].Attributes[x][2]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (game_states_2.GameState.debuggingTower)\r\n                                log(\"TOWER SYSTEM: attack completed, no target exists\");\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    //count ticker down\r\n                    this.attackTimer[1] -= dt;\r\n                    //check if attack has finished\r\n                    if (this.attackTimer[1] <= 0) {\r\n                        //finish attack\r\n                        this.isAttacking = false;\r\n                        //log(\"TEST: FIN, \"+this.attackTimer[1]);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        //resets the tower's state to pre-attack defaults\r\n        TowerStructureSystem.prototype.Reset = function () {\r\n            if (game_states_2.GameState.debuggingTower)\r\n                log(\"TOWER SYSTEM: system has been reset\");\r\n            this.TowerTarget = undefined;\r\n            this.isAttacking = false;\r\n            this.hasDamaged = false;\r\n            this.attackTimer[0] = 1;\r\n            this.attackTimer[1] = 0;\r\n            this.animations[1].speed = 1;\r\n            this.SetAnimationState(0);\r\n        };\r\n        //conducts a target check on the given enemy, called when an enemy is killed\r\n        //  only take action if enemy is the current target and an attack has not yet dealt damage,\r\n        //  all other dead units culled on next target find\r\n        TowerStructureSystem.prototype.TargetDeathCheck = function (index) {\r\n            var _a;\r\n            //if enemy is tower's target\r\n            if (((_a = this.TowerTarget) === null || _a === void 0 ? void 0 : _a.Index) == index) {\r\n                if (game_states_2.GameState.debuggingTower)\r\n                    log(\"TOWER SYSTEM: currently targeted enemy=\" + index.toString() + \" has been killed, reassigning target\");\r\n                //remove target from list\r\n                this.TowerTargets.removeItem(this.TowerTarget);\r\n                //if tower has not fired yet, reset tower to find new target\r\n                if (!this.hasDamaged) {\r\n                    this.Reset();\r\n                }\r\n                //else, wait out existing cooldown\r\n            }\r\n        };\r\n        //attempts to find target\r\n        TowerStructureSystem.prototype.FindTarget = function () {\r\n            var _a, _b;\r\n            if (game_states_2.GameState.debuggingTower)\r\n                log(\"TOWER SYSTEM: attempting to find valid target from targeting list, size = \" + this.TowerTargets.size().toString());\r\n            //purge list of dead enemies\r\n            var i = 0;\r\n            var target;\r\n            while (i < this.TowerTargets.size()) {\r\n                //if enemy is dead, remove unit\r\n                target = this.TowerTargets.getItem(i);\r\n                if (!target.IsAlive) {\r\n                    this.TowerTargets.removeItem(target);\r\n                }\r\n                //else push target forward\r\n                else {\r\n                    i++;\r\n                }\r\n            }\r\n            //if there are no targets, begin idle\r\n            if (this.TowerTargets.size() <= 0) {\r\n                if (game_states_2.GameState.debuggingTower)\r\n                    log(\"TOWER SYSTEM: no valid enemy target found, removing system from engine\");\r\n                //reset tower\r\n                this.Reset();\r\n                //remove system\r\n                engine.removeSystem(this);\r\n                return;\r\n            }\r\n            //apply sorting technique\r\n            switch (this.TargetingType) {\r\n                case 0:\r\n                    this.GetTargetDistance();\r\n                    break;\r\n                case 1:\r\n                    this.GetTargetByHealthValueHighest();\r\n                    break;\r\n                case 2:\r\n                    this.GetTargetByHealthValueLowest();\r\n                    break;\r\n                case 3:\r\n                    this.GetTargetByHealthPercentHighest();\r\n                    break;\r\n                case 4:\r\n                    this.GetTargetByHealthPercentLowest();\r\n                    break;\r\n                case 5:\r\n                    this.GetTargetByArmourValueHighest();\r\n                    break;\r\n                case 6:\r\n                    this.GetTargetByArmourValueLowest();\r\n                    break;\r\n            }\r\n            if (game_states_2.GameState.debuggingTower)\r\n                log(\"TOWER SYSTEM: found valid enemy target = \" + ((_a = this.TowerTarget) === null || _a === void 0 ? void 0 : _a.Index.toString()) + \", unit has travelled = \" + ((_b = this.TowerTarget) === null || _b === void 0 ? void 0 : _b.unitSystem.distanceTotal.toString()));\r\n        };\r\n        //  travelled furthest distance down lane\r\n        TowerStructureSystem.prototype.GetTargetDistance = function () {\r\n            this.TowerTarget = this.TowerTargets.getItem(0);\r\n            this.targetTestValue = this.TowerTarget.unitSystem.distanceTotal;\r\n            //process every target\r\n            for (var i = 0; i < this.TowerTargets.size(); i++) {\r\n                //test value \r\n                this.targetTestUnit = this.TowerTargets.getItem(i);\r\n                if (this.targetTestValue > this.targetTestUnit.unitSystem.distanceTotal) {\r\n                    this.TowerTarget = this.targetTestUnit;\r\n                    this.targetTestValue = this.targetTestUnit.unitSystem.distanceTotal;\r\n                }\r\n            }\r\n        };\r\n        //  highest health value\r\n        TowerStructureSystem.prototype.GetTargetByHealthValueHighest = function () {\r\n            this.TowerTarget = this.TowerTargets.getItem(0);\r\n            this.targetTestValue = this.TowerTarget.HealthCur;\r\n            //process every target\r\n            for (var i = 0; i < this.TowerTargets.size(); i++) {\r\n                //test value \r\n                this.targetTestUnit = this.TowerTargets.getItem(i);\r\n                if (this.targetTestValue < this.targetTestUnit.HealthCur) {\r\n                    this.TowerTarget = this.targetTestUnit;\r\n                    this.targetTestValue = this.targetTestUnit.HealthCur;\r\n                }\r\n            }\r\n        };\r\n        //  lowest health value\r\n        TowerStructureSystem.prototype.GetTargetByHealthValueLowest = function () {\r\n            this.TowerTarget = this.TowerTargets.getItem(0);\r\n            this.targetTestValue = this.TowerTarget.HealthCur;\r\n            //process every target\r\n            for (var i = 0; i < this.TowerTargets.size(); i++) {\r\n                //test value \r\n                this.targetTestUnit = this.TowerTargets.getItem(i);\r\n                if (this.targetTestValue > this.targetTestUnit.HealthCur) {\r\n                    this.TowerTarget = this.targetTestUnit;\r\n                    this.targetTestValue = this.targetTestUnit.HealthCur;\r\n                }\r\n            }\r\n        };\r\n        //  highest health percent\r\n        TowerStructureSystem.prototype.GetTargetByHealthPercentHighest = function () {\r\n            this.TowerTarget = this.TowerTargets.getItem(0);\r\n            this.targetTestValue = this.TowerTarget.HealthCur / this.TowerTarget.HealthMax;\r\n            //process every target\r\n            for (var i = 0; i < this.TowerTargets.size(); i++) {\r\n                //test value \r\n                this.targetTestUnit = this.TowerTargets.getItem(i);\r\n                if (this.targetTestValue < this.targetTestUnit.HealthCur / this.targetTestUnit.HealthMax) {\r\n                    this.TowerTarget = this.targetTestUnit;\r\n                    this.targetTestValue = this.TowerTarget.HealthCur / this.TowerTarget.HealthMax;\r\n                }\r\n            }\r\n        };\r\n        //  lowest health percent\r\n        TowerStructureSystem.prototype.GetTargetByHealthPercentLowest = function () {\r\n            this.TowerTarget = this.TowerTargets.getItem(0);\r\n            this.targetTestValue = this.TowerTarget.HealthCur / this.TowerTarget.HealthMax;\r\n            //process every target\r\n            for (var i = 0; i < this.TowerTargets.size(); i++) {\r\n                //test value \r\n                this.targetTestUnit = this.TowerTargets.getItem(i);\r\n                if (this.targetTestValue > this.targetTestUnit.HealthCur / this.targetTestUnit.HealthMax) {\r\n                    this.TowerTarget = this.targetTestUnit;\r\n                    this.targetTestValue = this.TowerTarget.HealthCur / this.TowerTarget.HealthMax;\r\n                }\r\n            }\r\n        };\r\n        //  highest armor value\r\n        TowerStructureSystem.prototype.GetTargetByArmourValueHighest = function () {\r\n            this.TowerTarget = this.TowerTargets.getItem(0);\r\n            this.targetTestValue = this.TowerTarget.Armour;\r\n            //process every target\r\n            for (var i = 0; i < this.TowerTargets.size(); i++) {\r\n                //test value \r\n                this.targetTestUnit = this.TowerTargets.getItem(i);\r\n                if (this.targetTestValue < this.targetTestUnit.Armour) {\r\n                    this.TowerTarget = this.targetTestUnit;\r\n                    this.targetTestValue = this.targetTestUnit.Armour;\r\n                }\r\n            }\r\n        };\r\n        //  lowest armor value\r\n        TowerStructureSystem.prototype.GetTargetByArmourValueLowest = function () {\r\n            this.TowerTarget = this.TowerTargets.getItem(0);\r\n            this.targetTestValue = this.TowerTarget.Armour;\r\n            //process every target\r\n            for (var i = 0; i < this.TowerTargets.size(); i++) {\r\n                //test value \r\n                this.targetTestUnit = this.TowerTargets.getItem(i);\r\n                if (this.targetTestValue > this.targetTestUnit.Armour) {\r\n                    this.TowerTarget = this.targetTestUnit;\r\n                    this.targetTestValue = this.targetTestUnit.Armour;\r\n                }\r\n            }\r\n        };\r\n        return TowerStructureSystem;\r\n    }());\r\n    exports.TowerStructureSystem = TowerStructureSystem;\r\n});\r\ndefine(\"td-core/enemy-entity\", [\"require\", \"exports\", \"@dcl/ecs-scene-utils\", \"td-core/data/difficulty-data\", \"td-core/data/enemy-data\", \"td-core/game-states\", \"td-core/map-pathing\", \"utilities/collections\"], function (require, exports, ecs_scene_utils_2, difficulty_data_2, enemy_data_1, game_states_3, map_pathing_1, collections_3) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.EnemyUnitSystem = exports.EnemyUnitObject = void 0;\r\n    //object that represents an enemy in scene\r\n    var EnemyUnitObject = /** @class */ (function (_super) {\r\n        __extends(EnemyUnitObject, _super);\r\n        /**\r\n         * constructor\r\n         * @param index unique access index\r\n         * @param healthShapeCur shape reference for displaying current health\r\n         * @param triggerShape shape reference for collision interaction\r\n         * @param unitAttack callback for unit attack\r\n         * @param unitDeath callback for unit death\r\n         */\r\n        function EnemyUnitObject(index, healthShapeCur, triggerShape, unitAttack, unitDeath, unitKill, unitDamage) {\r\n            var _this = \r\n            //object\r\n            _super.call(this) || this;\r\n            //whether unit is in use\r\n            _this.IsAlive = false;\r\n            //unit type\r\n            _this.Type = 0;\r\n            //unit survival details\r\n            _this.HealthCur = 0;\r\n            _this.HealthMax = 0;\r\n            _this.Armour = 0;\r\n            _this.addComponent(new Transform({\r\n                position: new Vector3(0, 0, 0),\r\n                scale: new Vector3(1, 1, 1),\r\n                rotation: new Quaternion().setEuler(0, 0, 0)\r\n            }));\r\n            //data\r\n            _this.index = index;\r\n            //health bar\r\n            //  current\r\n            _this.healthBarCur = new Entity();\r\n            _this.healthBarCur.addComponent(healthShapeCur);\r\n            _this.healthBarCur.addComponent(new Transform({\r\n                position: new Vector3(0, 2, 0),\r\n                scale: new Vector3(1, 1, 1),\r\n                rotation: new Quaternion().setEuler(0, 0, 0)\r\n            }));\r\n            _this.healthBarCur.setParent(_this);\r\n            //unit object\r\n            _this.unitAvatar = new Entity();\r\n            _this.unitAvatar.addComponent(new Transform({\r\n                position: new Vector3(0, 0, 0),\r\n                scale: new Vector3(1, 1, 1),\r\n                rotation: new Quaternion().setEuler(0, 0, 0)\r\n            }));\r\n            _this.unitAvatar.setParent(_this);\r\n            //unit system\r\n            _this.unitSystem = new EnemyUnitSystem(_this.Index, _this, _this.unitAvatar, unitAttack, unitKill, unitDamage);\r\n            //trigger\r\n            _this.addComponent(new ecs_scene_utils_2.TriggerComponent(triggerShape, {\r\n                //designated layer: enemy\r\n                layer: 2,\r\n            }));\r\n            //callbacks\r\n            _this.OnDeath = unitDeath;\r\n            return _this;\r\n        }\r\n        Object.defineProperty(EnemyUnitObject.prototype, \"Index\", {\r\n            get: function () { return this.index; },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        ;\r\n        EnemyUnitObject.CalcHealth = function (type, wave) {\r\n            return (enemy_data_1.EnemyData[type].ValueHealthBase + (enemy_data_1.EnemyData[type].ValueHealthGrowth * wave)) * (difficulty_data_2.DifficultyData[game_states_3.GameState.DifficultyCur].EnemyHealthPercent / 100);\r\n        };\r\n        EnemyUnitObject.CalcArmour = function (type, wave) {\r\n            return (enemy_data_1.EnemyData[type].ValueArmourBase + (enemy_data_1.EnemyData[type].ValueArmourGrowth * wave)) * (difficulty_data_2.DifficultyData[game_states_3.GameState.DifficultyCur].EnemyArmorPercent / 100);\r\n        };\r\n        EnemyUnitObject.CalcMoveSpeed = function (type, wave) {\r\n            return enemy_data_1.EnemyData[type].ValueSpeed * (difficulty_data_2.DifficultyData[game_states_3.GameState.DifficultyCur].EnemySpeedPercent / 100);\r\n        };\r\n        /**\r\n         * prepares the unit for use, setting up their survival details for the given wave\r\n         *  the unit is then pushed to a spawn point and begins traversal\r\n         * @param type index of definition this unit will be typed as\r\n         * @param shape shape object to change to\r\n         * @returns reference to this unit\r\n         */\r\n        EnemyUnitObject.prototype.Initialize = function (type, waypoint, shape) {\r\n            //claim unit\r\n            this.IsAlive = true;\r\n            //set type\r\n            this.Type = type;\r\n            //calculate survivability\r\n            this.HealthMax = EnemyUnitObject.CalcHealth(type, game_states_3.GameState.WaveCur);\r\n            this.HealthCur = this.HealthMax;\r\n            this.Armour = EnemyUnitObject.CalcArmour(type, game_states_3.GameState.WaveCur);\r\n            //set waypoints\r\n            this.unitSystem.SetTarget(map_pathing_1.WaypointManager.Instance.GetSpawnPoint(), true);\r\n            this.unitSystem.unitMoveSpeedMod = 1;\r\n            this.unitSystem.unitMoveSpeed = EnemyUnitObject.CalcMoveSpeed(type, game_states_3.GameState.WaveCur);\r\n            this.unitSystem.attackLength = enemy_data_1.EnemyData[type].ValueAttackIntervalFull;\r\n            this.unitSystem.attackDamagePeriod = enemy_data_1.EnemyData[type].ValueAttackIntervalDamage;\r\n            if (game_states_3.GameState.debuggingEnemy) {\r\n                log(\"Enemy Unit \" + this.Index.toString() + \": unit initialized, health = \" + this.HealthMax.toString() + \", armour = \" + this.Armour.toString() + \", speed = \" + this.unitSystem.unitMoveSpeed.toString());\r\n            }\r\n            //reset health bar\r\n            this.healthBarCur.getComponent(Transform).position = new Vector3(enemy_data_1.EnemyData[type].HealthPos[0], enemy_data_1.EnemyData[type].HealthPos[1], enemy_data_1.EnemyData[type].HealthPos[2]);\r\n            this.healthBarCur.getComponent(Transform).scale = new Vector3(enemy_data_1.EnemyData[type].HealthScale[0], enemy_data_1.EnemyData[type].HealthScale[1], enemy_data_1.EnemyData[type].HealthScale[2]);\r\n            //process shape change\r\n            if (this.unitAvatar.hasComponent(GLTFShape)) {\r\n                //check if shape must be removed\r\n                if (this.Type != type) {\r\n                    //remove shape\r\n                    this.unitAvatar.removeComponent(GLTFShape);\r\n                }\r\n            }\r\n            if (!this.unitAvatar.hasComponent(GLTFShape)) {\r\n                //add new shape\r\n                this.unitAvatar.addComponent(shape);\r\n                //apply type specific details\r\n                this.unitAvatar.getComponent(Transform).position = new Vector3(enemy_data_1.EnemyData[type].ObjectOffset[0], enemy_data_1.EnemyData[type].ObjectOffset[1], enemy_data_1.EnemyData[type].ObjectOffset[2]);\r\n                this.unitAvatar.getComponent(Transform).scale = new Vector3(enemy_data_1.EnemyData[type].ObjectScale[0], enemy_data_1.EnemyData[type].ObjectScale[1], enemy_data_1.EnemyData[type].ObjectScale[2]);\r\n            }\r\n            //clean up existing delay\r\n            if (this.hasComponent(ecs_scene_utils_2.Delay)) {\r\n                this.removeComponent(ecs_scene_utils_2.Delay);\r\n            }\r\n            return this;\r\n        };\r\n        /**\r\n         * applies damage to enemy unit, calculating damage to armour and health\r\n         *  damage to health is applied after armour is removed\r\n         * @param dam amount of health to be removed from unit\r\n         * @param pen amount of armour ignored when dealing damage\r\n         * @param rend amount of armour to be removed from unit\r\n         * @returns boolean: true = unit alive, false = unit dead\r\n         */\r\n        EnemyUnitObject.prototype.ApplyDamage = function (dam, pen, rend) {\r\n            if (this.HealthCur == 0) {\r\n                log(\"Enemy Unit \" + this.Index.toString() + \": ERROR attempting to damage already dead enemy, could be a unit clean-up desync\");\r\n                return true;\r\n            }\r\n            //remove and clamp health\r\n            this.HealthCur -= dam - Math.max(0, this.Armour - pen);\r\n            if (this.HealthCur < 0)\r\n                this.HealthCur = 0;\r\n            //adjust health bar\r\n            this.healthBarCur.getComponent(Transform).scale = new Vector3(this.HealthCur / this.HealthMax * enemy_data_1.EnemyData[this.Type].ObjectScale[0], this.HealthCur / this.HealthMax * enemy_data_1.EnemyData[this.Type].ObjectScale[1], this.HealthCur / this.HealthMax * enemy_data_1.EnemyData[this.Type].ObjectScale[2]);\r\n            if (game_states_3.GameState.debuggingEnemy) {\r\n                log(\"Enemy Unit \" + this.Index.toString() + \": damage dealt to unit, health remaining = \" + this.HealthCur.toString());\r\n            }\r\n            if (this.HealthCur == 0) {\r\n                this.KillUnit(true);\r\n                //enemy has been killed\r\n                return false;\r\n            }\r\n            else {\r\n                //rend and clamp armour\r\n                this.Armour -= rend;\r\n                if (this.Armour >= 0) {\r\n                    this.Armour = 0;\r\n                }\r\n                //enemy is still alive\r\n                return true;\r\n            }\r\n        };\r\n        /**\r\n         * kills the unit, playing death animation then removes the entity from scene\r\n         * @param rewarded if true player is rewarded/credited for killing enemy\r\n         */\r\n        EnemyUnitObject.prototype.KillUnit = function (rewarded) {\r\n            var _this = this;\r\n            //play death anim\r\n            this.unitSystem.SetAnimationState(3);\r\n            //hide entity from scene after death\r\n            this.addComponent(new ecs_scene_utils_2.Delay(enemy_data_1.EnemyData[this.Type].ValueDeathLength * (1000 / enemy_data_1.EnemyData[this.Type].ValueDeathLengthScale), function () {\r\n                log(\"Enemy Unit \" + _this.index.toString() + \": death delay completed, unit is being reset\");\r\n                _this.IsAlive = false;\r\n                _this.SetEngineState(false);\r\n            }));\r\n            //halt movement\r\n            engine.removeSystem(this.unitSystem);\r\n            //death callback, with reward\r\n            this.OnDeath(this.Index, rewarded);\r\n        };\r\n        /**\r\n         * de/activates object and system within the engine state\r\n         * @param state new state for object: true = object is active, false = object is hidden\r\n         */\r\n        EnemyUnitObject.prototype.SetEngineState = function (state) {\r\n            //check if state change is needed\r\n            if (this.isAddedToEngine() != state) {\r\n                if (state) {\r\n                    //add to engine\r\n                    engine.addEntity(this);\r\n                    engine.addSystem(this.unitSystem);\r\n                    //  prepare system\r\n                    this.unitSystem.Initialize(this.Type);\r\n                }\r\n                else {\r\n                    //remove from engine\r\n                    engine.removeEntity(this);\r\n                    engine.removeSystem(this.unitSystem);\r\n                }\r\n            }\r\n        };\r\n        return EnemyUnitObject;\r\n    }(Entity));\r\n    exports.EnemyUnitObject = EnemyUnitObject;\r\n    //handles all real-time processing for the unit, including movement and damage over time\r\n    //TODO: push unit effects back into the main fork after optimizations are completed\r\n    var EnemyUnitSystem = /** @class */ (function () {\r\n        /**\r\n         * constructor\r\n         * @param object link to unit object\r\n         * @param unitAttack callback for unit attack\r\n         */\r\n        function EnemyUnitSystem(ind, object, avatar, unitAttack, killUnit, damageEnemy) {\r\n            //movement\r\n            this.seed = -1;\r\n            this.distanceTotal = 0;\r\n            //  unit is at final waypoint/player base\r\n            this.arrived = false;\r\n            //  unit speed\r\n            this.unitMoveSpeedMod = 1;\r\n            this.unitMoveSpeed = 0.55;\r\n            this.unitRotSpeed = 10;\r\n            //attack\r\n            //  damage is dealt a portion of the way through the attack animation\r\n            //  ex: if attackDamagePeriod is 0.5, damage is dealt 0.5s after the attack animation has begun\r\n            this.isAttacking = false;\r\n            this.hasDamaged = false;\r\n            this.attackLength = 0;\r\n            this.attackDamagePeriod = 0;\r\n            this.attackTimer = [0, 0];\r\n            this.animations = [];\r\n            this.activeEffectTicker = 0;\r\n            this.activeEffects = new collections_3.List();\r\n            //assign index\r\n            this.index = ind;\r\n            this.type = -1;\r\n            //create enemy unit object\r\n            this.unitObject = object;\r\n            this.unitAvatar = avatar;\r\n            this.unitObjectTransform = this.unitObject.getComponent(Transform);\r\n            //link events\r\n            this.unitKill = killUnit;\r\n            this.unitDamage = damageEnemy;\r\n            this.onAttack = unitAttack;\r\n        }\r\n        EnemyUnitSystem.prototype.SetAnimationState = function (state) {\r\n            //disable all other animations\r\n            this.animations[0].stop();\r\n            this.animations[1].stop();\r\n            this.animations[2].stop();\r\n            this.animations[3].stop();\r\n            //activate targeted animation\r\n            this.animations[state].play();\r\n        };\r\n        /**\r\n         * resets to initial state\r\n         */\r\n        EnemyUnitSystem.prototype.Initialize = function (type) {\r\n            //set type\r\n            this.type = type;\r\n            //animations\r\n            //  controller\r\n            if (this.unitAvatar.hasComponent(Animator)) {\r\n                this.unitAvatar.removeComponent(Animator);\r\n            }\r\n            this.animator = this.unitAvatar.addComponent(new Animator());\r\n            //  states\r\n            this.animations = [];\r\n            this.animations.push(new AnimationState('anim_idle', { looping: true, speed: 1 }));\r\n            this.animations.push(new AnimationState('anim_walk', { looping: true, speed: 1 }));\r\n            this.animations.push(new AnimationState('anim_attack', { looping: true, speed: 1 }));\r\n            this.animations.push(new AnimationState('anim_death', { looping: true, speed: enemy_data_1.EnemyData[this.type].ValueDeathLengthScale }));\r\n            //  clips\r\n            this.animator.addClip(this.animations[0]);\r\n            this.animator.addClip(this.animations[1]);\r\n            this.animator.addClip(this.animations[2]);\r\n            this.animator.addClip(this.animations[3]);\r\n            //clear effects\r\n            while (this.activeEffects.size() > 0) {\r\n                this.activeEffects.removeItem(this.activeEffects.getItem(0));\r\n            }\r\n            this.activeEffectTicker = EnemyUnitSystem.activeEffectTickerLength;\r\n        };\r\n        /**\r\n         * processing over time\r\n         * @param dt delta time\r\n         */\r\n        EnemyUnitSystem.prototype.update = function (dt) {\r\n            //if there are effects\r\n            if (this.activeEffects.size() > 0) {\r\n                //dec effect ticker\r\n                if (this.activeEffectTicker <= 0) {\r\n                    //process effects\r\n                    this.ProcessEffects(true, true);\r\n                    this.activeEffectTicker = EnemyUnitSystem.activeEffectTickerLength;\r\n                }\r\n            }\r\n            //avatar is moving towards waypoint\r\n            if (!this.arrived && this.waypoint != undefined && this.waypointTransform != undefined) {\r\n                //change rotation of avatar towards target spawnpoint\r\n                //  target direction = waypoint pos - avatar pos\r\n                var direction = this.waypointTransform.position.subtract(this.unitObjectTransform.position);\r\n                this.unitObjectTransform.rotation = Quaternion.Slerp(this.unitObjectTransform.rotation, Quaternion.LookRotation(direction), dt * this.unitRotSpeed);\r\n                //move avatar towards current waypoint\r\n                var distance = Vector3.DistanceSquared(this.unitObjectTransform.position, this.waypointTransform.position);\r\n                if (distance >= 0.015) {\r\n                    //move unit toward destination\r\n                    var forwardVector = Vector3.Forward().rotate(this.unitObjectTransform.rotation);\r\n                    var increment = forwardVector.scale(dt * this.unitMoveSpeed * this.unitMoveSpeedMod);\r\n                    this.unitObjectTransform.translate(increment);\r\n                    //add to total distance travelled\r\n                    this.distanceTotal -= dt * this.unitMoveSpeed;\r\n                    //log(\"ID:\"+this.index.toString()+\", distance:\"+this.distanceTotal.toString());\r\n                }\r\n                //avatar has reached target waypoint\r\n                else {\r\n                    //attempt to get next waypoint\r\n                    var nextWP = map_pathing_1.WaypointManager.Instance.GetNextWaypoint(this.waypoint.Index, this.seed);\r\n                    //get next waypoint\r\n                    if (nextWP != undefined) {\r\n                        //set animation to walking\r\n                        this.SetAnimationState(1);\r\n                        //set next waypoint\r\n                        this.SetTarget(nextWP);\r\n                    }\r\n                    //arrived at player's base\r\n                    else {\r\n                        if (game_states_3.GameState.debuggingEnemy) {\r\n                            log(\"Enemy System \" + this.index.toString() + \": enemy unit arrived at final waypoint\");\r\n                        }\r\n                        this.arrived = true;\r\n                    }\r\n                }\r\n            }\r\n            //unit has arrived at player's base: process attack timer, then deal damage and despawn enemy\r\n            else {\r\n                //reset attack\r\n                if (!this.isAttacking) {\r\n                    //timing\r\n                    this.isAttacking = true;\r\n                    this.hasDamaged = false;\r\n                    this.attackTimer[0] = this.attackLength - this.attackDamagePeriod;\r\n                    this.attackTimer[1] = this.attackDamagePeriod;\r\n                    //animation to attack\r\n                    this.SetAnimationState(2);\r\n                }\r\n                //if damage has not been dealt yet\r\n                if (!this.hasDamaged) {\r\n                    //count ticker down\r\n                    this.attackTimer[0] -= dt;\r\n                    //check if damage should be dealt\r\n                    if (this.attackTimer[0] <= 0) {\r\n                        if (game_states_3.GameState.debuggingEnemy)\r\n                            log(\"Enemy System \" + this.index.toString() + \": enemy attacking player base\");\r\n                        //deal damage based on type\r\n                        this.hasDamaged = true;\r\n                        if (enemy_data_1.EnemyData[this.type].SpawnType != 3)\r\n                            this.onAttack(1);\r\n                        else\r\n                            this.onAttack(10);\r\n                        //auto-kill enemy without reward\r\n                        this.unitKill(this.index, false);\r\n                    }\r\n                }\r\n                else {\r\n                    //count ticker down\r\n                    this.attackTimer[1] -= dt;\r\n                    //check if attack has finished\r\n                    if (this.attackTimer[1] <= 0) {\r\n                        //finish attack\r\n                        this.isAttacking = false;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * sets the provided waypoint as the target and begins traversal towards position\r\n         * @param waypoint waypoint object to be set as target\r\n         * @param spawn whether waypoint is a spawnpoint, if true unit is repositioned to location\r\n         */\r\n        EnemyUnitSystem.prototype.SetTarget = function (waypoint, spawn) {\r\n            if (spawn === void 0) { spawn = false; }\r\n            if (game_states_3.GameState.debuggingEnemy) {\r\n                log(\"Enemy System \" + this.index.toString() + \": unit is now targeting waypoint \" + waypoint.Index);\r\n            }\r\n            //set up next waypoint\r\n            this.waypoint = waypoint;\r\n            this.waypointTransform = this.waypoint.getComponent(Transform);\r\n            //place object at given waypoint\r\n            if (spawn) {\r\n                this.unitObjectTransform.position = new Vector3(this.waypointTransform.position.x, this.waypointTransform.position.y, this.waypointTransform.position.z);\r\n                this.seed = Math.floor((Math.random() * 64) + 64); //randomize seed\r\n                this.distanceTotal = map_pathing_1.WaypointManager.Instance.GetRouteDistance(this.waypoint.Index, this.seed); //get total distance\r\n            }\r\n            //update distance estimation\r\n            this.distanceTotal = map_pathing_1.WaypointManager.Instance.GetRouteDistance(this.waypoint.Index, this.seed);\r\n            //start traversal\r\n            this.arrived = false;\r\n        };\r\n        //adds an effect to the unit\r\n        EnemyUnitSystem.prototype.AddEffect = function (type, power, length) {\r\n            //check for existance\r\n            var found = false;\r\n            for (var i = 0; i < this.activeEffects.size(); i++) {\r\n                //over-write effect\r\n                if (this.activeEffects.getItem(i).Type == type) {\r\n                    this.activeEffects.getItem(i).Intialize(type, power, length);\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n            //add new effect\r\n            if (!found) {\r\n                this.activeEffects.addItem(new EnemyEntityEffect(type, power, length));\r\n            }\r\n            //process effects\r\n            this.ProcessEffects(false, false);\r\n        };\r\n        EnemyUnitSystem.prototype.ProcessEffects = function (isCounting, isDamaging) {\r\n            //process effect\r\n            for (var i = 0; i < this.activeEffects.size(); i++) {\r\n                this.selectedEffect = this.activeEffects.getItem(i);\r\n                //\r\n                switch (this.selectedEffect.Type) {\r\n                    //slowing effect\r\n                    case 0:\r\n                        this.unitMoveSpeedMod += this.selectedEffect.Power;\r\n                        break;\r\n                    //damage health\r\n                    case 1:\r\n                        if (isDamaging)\r\n                            this.unitDamage(this.index, this.selectedEffect.Power, 50, 0);\r\n                        break;\r\n                    //damange armour\r\n                    case 2:\r\n                        if (isDamaging)\r\n                            this.unitDamage(this.index, 0, 0, this.selectedEffect.Power);\r\n                        break;\r\n                }\r\n                //count down time\r\n                if (isCounting) {\r\n                    //check expiry\r\n                    this.selectedEffect.Length--;\r\n                    if (this.selectedEffect.Length <= 0) {\r\n                        //remove slowing\r\n                        if (this.selectedEffect.Type == 0)\r\n                            this.unitMoveSpeedMod = 100;\r\n                        //remove effect\r\n                        this.activeEffects.removeItem(this.selectedEffect);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        //effects\r\n        EnemyUnitSystem.activeEffectTickerLength = 0.25;\r\n        return EnemyUnitSystem;\r\n    }());\r\n    exports.EnemyUnitSystem = EnemyUnitSystem;\r\n    //defines an active effect on an enemy\r\n    var EnemyEntityEffect = /** @class */ (function () {\r\n        //\r\n        function EnemyEntityEffect(type, power, length) {\r\n            this.Type = type;\r\n            this.Power = power;\r\n            this.Length = length;\r\n        }\r\n        //\r\n        EnemyEntityEffect.prototype.Intialize = function (type, power, length) {\r\n            this.Type = type;\r\n            this.Power = power;\r\n            this.Length = length;\r\n        };\r\n        return EnemyEntityEffect;\r\n    }());\r\n});\r\ndefine(\"td-core/enemy-manager\", [\"require\", \"exports\", \"@dcl/ecs-scene-utils\", \"utilities/collections\", \"td-core/data/enemy-data\", \"td-core/enemy-entity\", \"td-core/game-states\"], function (require, exports, ecs_scene_utils_3, collections_4, enemy_data_2, enemy_entity_1, game_states_4) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.EnemyUnitManager = void 0;\r\n    var EnemyUnitManager = /** @class */ (function (_super) {\r\n        __extends(EnemyUnitManager, _super);\r\n        /**\r\n         * constructor\r\n         */\r\n        function EnemyUnitManager() {\r\n            var _this = \r\n            //object\r\n            _super.call(this) || this;\r\n            //max allowed count of units allowed\r\n            _this.enemySizeMax = 1;\r\n            //number of enemies in use\r\n            _this.enemySizeCur = 0;\r\n            //number of enemies remaining in wave\r\n            _this.enemySizeRemaining = 0;\r\n            //access collections\r\n            //  list of ALL enemy unit objects\r\n            _this.enemyList = new collections_4.List();\r\n            //  dict access by unit index\r\n            _this.enemyDict = new collections_4.Dictionary();\r\n            //  sorted lists of enemy objects by type\r\n            _this.enemyTypeDict = new collections_4.Dictionary();\r\n            //reusable shapes for health bars\r\n            _this.enemyHealthBarShapeCur = new GLTFShape(\"models/enemy/core/healthDisplayCur.glb\");\r\n            _this.enemyHealthBarShapeMax = new GLTFShape(\"models/enemy/core/healthDisplayMax.glb\");\r\n            //reusable shape attached to enemies for collision\r\n            _this.enemyTriggerShape = new ecs_scene_utils_3.TriggerBoxShape();\r\n            //assortment of all enemy models, by type\r\n            _this.enemyModelDict = new collections_4.Dictionary();\r\n            /**\r\n             * attempts to find an unused/out of use unit object\r\n             * @returns reference to this unit or undefined if unit was not found\r\n             */\r\n            _this.iterationIndex = 0;\r\n            _this.iterationHalt = 0;\r\n            _this.addComponent(new Transform({\r\n                position: new Vector3(0, 0, 0),\r\n                scale: new Vector3(1, 1, 1),\r\n                rotation: new Quaternion().setEuler(0, 0, 0)\r\n            }));\r\n            //generate enemy unit shapes\r\n            for (var i = 0; i < enemy_data_2.EnemyData.length; i++) {\r\n                _this.enemyModelDict.addItem(i.toString(), new GLTFShape(\"models/enemy/\" + enemy_data_2.EnemyData[i].ObjectPath + \".glb\"));\r\n            }\r\n            //set filler callbacks\r\n            _this.UnitAttack = _this.unitAttack;\r\n            _this.UnitDeath = _this.unitDeath;\r\n            return _this;\r\n        }\r\n        Object.defineProperty(EnemyUnitManager, \"Instance\", {\r\n            get: function () {\r\n                //ensure instance is set\r\n                if (EnemyUnitManager.instance === undefined) {\r\n                    EnemyUnitManager.instance = new EnemyUnitManager();\r\n                }\r\n                return EnemyUnitManager.instance;\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        EnemyUnitManager.prototype.unitAttack = function (value) { log(\"Enemy Manager: callback not set - start wave\"); };\r\n        EnemyUnitManager.prototype.unitDeath = function (index, rewarded) { log(\"Enemy Manager: callback not set - unit death:\" + index.toString()); };\r\n        /**\r\n         * initializes the system for a new game, clearing all units\r\n         */\r\n        EnemyUnitManager.prototype.Initialize = function () {\r\n            if (game_states_4.GameState.debuggingEnemy) {\r\n                log(\"Enemy Manager: - initializing...\");\r\n            }\r\n            //pre-warm all objects\r\n            while (this.enemyList.size() < this.enemySizeMax) {\r\n                this.AddEnemyUnit();\r\n            }\r\n            //ensure every unit is disabled\r\n            this.ClearUnits();\r\n            if (game_states_4.GameState.debuggingEnemy) {\r\n                log(\"Enemy Manager: - initialized!\\n\\tenemy count: \" + this.enemyList.size());\r\n            }\r\n        };\r\n        /**\r\n         * creates a new unit, readying it to be used by this system\r\n         */\r\n        EnemyUnitManager.prototype.AddEnemyUnit = function () {\r\n            //create object\r\n            var index = this.enemyList.size();\r\n            var obj = new enemy_entity_1.EnemyUnitObject(index, this.enemyHealthBarShapeCur, this.enemyTriggerShape, this.UnitAttack, this.UnitDeath, this.callbackKillUnit, this.callbackDamageUnit);\r\n            obj.setParent(this);\r\n            //add to collections\r\n            this.enemyList.addItem(obj);\r\n            this.enemyDict.addItem(obj.Index.toString(), obj);\r\n        };\r\n        EnemyUnitManager.prototype.GetEnemyUnit = function () {\r\n            //reset processing index\r\n            this.iterationHalt = this.iterationIndex;\r\n            //push next index\r\n            this.iterationIndex++;\r\n            if (this.iterationIndex >= this.enemyList.size()) {\r\n                this.iterationIndex = 0;\r\n            }\r\n            //process every unit\r\n            while (true) {\r\n                //check current units for a free unit\r\n                if (!this.enemyList.getItem(this.iterationIndex).IsAlive) {\r\n                    return this.enemyList.getItem(this.iterationIndex);\r\n                }\r\n                //exit after checking the entry index\r\n                if (this.iterationIndex == this.iterationHalt) {\r\n                    return undefined;\r\n                }\r\n                //push next index\r\n                this.iterationIndex++;\r\n                if (this.iterationIndex >= this.enemyList.size()) {\r\n                    this.iterationIndex = 0;\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         *\r\n         * @param index\r\n         * @returns\r\n         */\r\n        EnemyUnitManager.prototype.GetEnemyUnitByIndex = function (index) {\r\n            if (this.enemyDict.containsKey(index.toString())) {\r\n                return this.enemyDict.getItem(index.toString());\r\n            }\r\n            else {\r\n                return undefined;\r\n            }\r\n        };\r\n        /**\r\n         * attempts to redefines add a unit of the given type into the game, placing it in the engine and\r\n         *  starting its movement along the given waypoint path. this function pulls from a limited pooling\r\n         *  of units, so it can fail if all units are in use.\r\n         * @param type index of definition this unit will be typed as\r\n         * @returns reference to this unit or undefined if unit was not found\r\n         */\r\n        EnemyUnitManager.prototype.AssignEnemyUnit = function (type, waypoint) {\r\n            if (game_states_4.GameState.debuggingEnemy) {\r\n                log(\"Enemy Manager: - assigning new enemy of type: \" + type.toString() + \"...\");\r\n            }\r\n            //get object\r\n            var obj = this.GetEnemyUnit();\r\n            if (obj == undefined) {\r\n                if (game_states_4.GameState.debuggingEnemy) {\r\n                    log(\"Enemy Manager: - assignment failed: all units are used.\");\r\n                }\r\n                return undefined;\r\n            }\r\n            //disable enemy\r\n            obj.SetEngineState(false);\r\n            //initialize with new data\r\n            obj.Initialize(type, waypoint, this.enemyModelDict.getItem(type.toString()));\r\n            this.enemySizeCur++;\r\n            //disable enemy\r\n            obj.SetEngineState(true);\r\n            if (game_states_4.GameState.debuggingEnemy) {\r\n                log(\"Enemy Manager: - assigned new enemy!\");\r\n            }\r\n            return obj;\r\n        };\r\n        /**\r\n         * deals the given amount of damage to the enemy of the given index\r\n         * @param index access index of unit to be damaged\r\n         * @param dam amount of health to be removed from unit\r\n         * @param pen amount of armour ignored when dealing damage\r\n         * @param rend amount of armour to be removed from unit\r\n         * @returns boolean: true = unit alive, false = unit dead\r\n         */\r\n        EnemyUnitManager.prototype.callbackDamageUnit = function (index, dam, pen, rend) {\r\n            return EnemyUnitManager.Instance.DamageUnit(index, dam, pen, rend);\r\n        };\r\n        EnemyUnitManager.prototype.DamageUnit = function (index, dam, pen, rend) {\r\n            //access unit and pass call down\r\n            return this.enemyDict.getItem(index.toString()).ApplyDamage(dam, pen, rend);\r\n        };\r\n        /**\r\n         * applies an effect on the enemy of the given index\r\n         * @param index access index of unit\r\n         * @param type type of effect applied\r\n         * @param power strength of applied effect\r\n         * @param length number of ticks effect lasts for\r\n         */\r\n        EnemyUnitManager.prototype.callbackApplyEffect = function (index, type, power, length) {\r\n            EnemyUnitManager.Instance.ApplyEffect(index, type, power, length);\r\n        };\r\n        EnemyUnitManager.prototype.ApplyEffect = function (index, type, power, length) {\r\n            //access unit and pass call down\r\n            this.enemyDict.getItem(index.toString()).unitSystem.AddEffect(type, power, length);\r\n        };\r\n        /**\r\n         * kills the unit of the given index\r\n         * @param index access index of unit to be killed\r\n         * @param rewarded if true player is rewarded/credited for killing enemy\r\n         */\r\n        EnemyUnitManager.prototype.callbackKillUnit = function (index, rewarded) {\r\n            EnemyUnitManager.Instance.KillUnit(index, rewarded);\r\n        };\r\n        EnemyUnitManager.prototype.KillUnit = function (index, rewarded) {\r\n            //access unit and pass call down\r\n            return this.enemyDict.getItem(index.toString()).KillUnit(rewarded);\r\n        };\r\n        /**\r\n         * disables all units on the game field\r\n         */\r\n        EnemyUnitManager.prototype.ClearUnits = function () {\r\n            for (var i = 0; i < this.enemyList.size(); i++) {\r\n                this.ClearUnit(i);\r\n            }\r\n            this.enemySizeCur = 0;\r\n            this.enemySizeRemaining = 0;\r\n        };\r\n        /**\r\n         * clears the unit of the given index, removing them from the field\r\n         * @param index access index of unit to be removed\r\n         */\r\n        EnemyUnitManager.prototype.ClearUnit = function (index) {\r\n            //unit is not being used\r\n            this.enemyDict.getItem(index.toString()).IsAlive = false;\r\n            //remove unit from engine\r\n            this.enemyDict.getItem(index.toString()).SetEngineState(false);\r\n        };\r\n        return EnemyUnitManager;\r\n    }(Entity));\r\n    exports.EnemyUnitManager = EnemyUnitManager;\r\n});\r\ndefine(\"td-core/enemy-wave-manager\", [\"require\", \"exports\", \"td-core/game-states\", \"td-core/data/enemy-data\"], function (require, exports, game_states_5, enemy_data_3) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.EnemyWaveUnit = exports.EnemyWave = exports.EnemyWaveManager = void 0;\r\n    var EnemyWaveManager = /** @class */ (function () {\r\n        //constructor\r\n        function EnemyWaveManager() {\r\n            //values used to determine number of enemies in each wave\r\n            this.spawnCostBase = 8;\r\n            this.spawnCostGrowth = 0.75;\r\n            //number of wavers between boss encounters\r\n            this.bossInterval = 5;\r\n            //enemy waves, generated each game start\r\n            this.enemyWaves = [];\r\n            //enemy data keys by type\r\n            this.enemyTypes = [[], [], [], []];\r\n            //pre-warm wave container\r\n            while (this.enemyWaves.length < game_states_5.GameState.WaveMax) {\r\n                this.enemyWaves.push(new EnemyWave());\r\n            }\r\n            //create type-key dict for enemy defs\r\n            for (var i = 0; i < enemy_data_3.EnemyData.length; i++) {\r\n                this.enemyTypes[enemy_data_3.EnemyData[i].SpawnType].push(i);\r\n            }\r\n        }\r\n        Object.defineProperty(EnemyWaveManager, \"Instance\", {\r\n            get: function () {\r\n                //ensure instance is set\r\n                if (EnemyWaveManager.instance === undefined) {\r\n                    EnemyWaveManager.instance = new EnemyWaveManager();\r\n                }\r\n                return EnemyWaveManager.instance;\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * @returns wave definition at the given access index\r\n         */\r\n        EnemyWaveManager.prototype.GetEnemyWave = function (index) {\r\n            return this.enemyWaves[index];\r\n        };\r\n        /**\r\n         * @returns wave definition of the current wave\r\n         */\r\n        EnemyWaveManager.prototype.GetEnemyWaveCurrent = function () {\r\n            return this.enemyWaves[game_states_5.GameState.WaveCur];\r\n        };\r\n        /**\r\n         *\r\n         */\r\n        EnemyWaveManager.prototype.GetEnemyUnitType = function (wave, index) {\r\n            return this.enemyWaves[wave].enemyUnits[index].enemyIndex;\r\n        };\r\n        EnemyWaveManager.prototype.GetEnemyUnitCount = function (wave, index) {\r\n            return this.enemyWaves[wave].enemyUnits[index].enemyCount;\r\n        };\r\n        /**\r\n         * generates new unit types and counts for all waves\r\n         */\r\n        EnemyWaveManager.prototype.GenerateWaves = function () {\r\n            if (game_states_5.GameState.debuggingWave)\r\n                log(\"generating waves for difficulty\" + game_states_5.GameState.DifficultyCur.toString() + \"...\");\r\n            //generate new waves\r\n            for (var i = 0; i < game_states_5.GameState.WaveMax; i++) {\r\n                if (game_states_5.GameState.debuggingWave)\r\n                    log(\"generating wave \" + i.toString() + \"...\");\r\n                //utility defines number of spawns per size\r\n                var utility = this.spawnCostBase + (this.spawnCostGrowth * i);\r\n                //randomize type (exclude boss)\r\n                var type = Math.floor((this.enemyTypes.length - 1) * Math.random());\r\n                //randomize enemy indexes (can be the same index)\r\n                var index0 = Math.floor(this.enemyTypes[type].length * Math.random());\r\n                var index1 = Math.floor(this.enemyTypes[type].length * Math.random());\r\n                //resize container\r\n                while (this.enemyWaves[i].enemyUnits.length < 2) {\r\n                    this.enemyWaves[i].enemyUnits.push(new EnemyWaveUnit());\r\n                }\r\n                //populate wave data\r\n                this.enemyWaves[i].enemyUnits[0].enemyIndex = index0;\r\n                this.enemyWaves[i].enemyUnits[0].enemyCount = Math.floor(utility / enemy_data_3.EnemyData[type].SpawnCost / 2);\r\n                this.enemyWaves[i].enemyUnits[1].enemyIndex = index1;\r\n                this.enemyWaves[i].enemyUnits[1].enemyCount = Math.floor(utility / enemy_data_3.EnemyData[type].SpawnCost / 2);\r\n                //DEBUG: set enemy index to a certain value\r\n                //this.enemyWaves[i].enemyUnits[0].enemyIndex = 3;\r\n                //this.enemyWaves[i].enemyUnits[1].enemyIndex = 3;\r\n                //check for boss interval\r\n                if (i != 1 && ((i + 1) % this.bossInterval) == 0) {\r\n                    type = 3;\r\n                    this.enemyWaves[i].enemyUnits[0].enemyIndex = Math.floor(this.enemyTypes[type].length * Math.random());\r\n                    this.enemyWaves[i].enemyUnits[0].enemyCount = Math.floor(utility / enemy_data_3.EnemyData[type].SpawnCost / 2);\r\n                }\r\n                //ensure at least 1 enemy exists in the wave\r\n                //  expensive bosses can sometimes slip through with 0 assigned units\r\n                if (this.enemyWaves[i].enemyUnits[0].enemyCount == 0) {\r\n                    this.enemyWaves[i].enemyUnits[0].enemyCount = 1;\r\n                }\r\n                if (this.enemyWaves[i].enemyUnits[1].enemyCount == 0) {\r\n                    this.enemyWaves[i].enemyUnits[1].enemyCount = 1;\r\n                }\r\n                if (game_states_5.GameState.debuggingWave) {\r\n                    var str = \"generated wave \" + i.toString() + \", utility: \" + utility.toString() + \", type: \" + type.toString();\r\n                    for (var j = 0; j < this.enemyWaves[i].enemyUnits.length; j++) {\r\n                        str += \"\\n\\tunit index: \" + this.enemyWaves[i].enemyUnits[j].enemyIndex + \", count \" + this.enemyWaves[i].enemyUnits[j].enemyCount;\r\n                    }\r\n                    log(str);\r\n                }\r\n            }\r\n            if (game_states_5.GameState.debuggingWave)\r\n                log(\"generated waves!\");\r\n        };\r\n        return EnemyWaveManager;\r\n    }());\r\n    exports.EnemyWaveManager = EnemyWaveManager;\r\n    //contains all enemy units to be spawned during a wave\r\n    //  seperated so we can apply wave specific modifiers at a later date\r\n    var EnemyWave = /** @class */ (function () {\r\n        function EnemyWave() {\r\n            this.enemyUnits = [];\r\n        }\r\n        return EnemyWave;\r\n    }());\r\n    exports.EnemyWave = EnemyWave;\r\n    //represents a single unit within a wave\r\n    var EnemyWaveUnit = /** @class */ (function () {\r\n        function EnemyWaveUnit() {\r\n            this.enemyIndex = 0;\r\n            this.enemyCount = 0;\r\n        }\r\n        return EnemyWaveUnit;\r\n    }());\r\n    exports.EnemyWaveUnit = EnemyWaveUnit;\r\n});\r\ndefine(\"td-core/tower-manager\", [\"require\", \"exports\", \"utilities/collections\", \"td-core/config/tower-config\", \"td-core/data/tower-data\", \"td-core/tower-entity\", \"td-core/game-states\"], function (require, exports, collections_5, tower_config_2, tower_data_2, tower_entity_1, game_states_6) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.TowerManager = void 0;\r\n    var TowerManager = /** @class */ (function (_super) {\r\n        __extends(TowerManager, _super);\r\n        /**\r\n         * constructor\r\n         */\r\n        function TowerManager() {\r\n            var _this = \r\n            //object\r\n            _super.call(this) || this;\r\n            //collections\r\n            //  waypoints\r\n            _this.TowerFoundationList = new collections_5.List();\r\n            _this.TowerFoundationDict = new collections_5.Dictionary();\r\n            //shapes for different tower pieces\r\n            _this.TowerShapeFoundation = new GLTFShape(\"models/tower/core/TowerFoundation.glb\");\r\n            _this.TowerShapeStructure = new GLTFShape(\"models/tower/core/TowerStructure.glb\");\r\n            _this.TowerShapeGimbal = new GLTFShape(\"models/tower/core/TowerGimbal.glb\");\r\n            _this.TowerShapeRange = new GLTFShape(\"models/tower/core/TowerRangeIndicator.glb\");\r\n            _this.TowerShapeFrames = [];\r\n            /**\r\n             * generates tower foundations, loading from defs stored in tower-config\r\n            */\r\n            _this.index = 0;\r\n            _this.foundationTemps = [];\r\n            _this.addComponent(new Transform({\r\n                position: new Vector3(0, 0, 0),\r\n                scale: new Vector3(1, 1, 1),\r\n                rotation: new Quaternion().setEuler(0, 0, 0)\r\n            }));\r\n            //tower move marker\r\n            _this.towerMoveMarker = new Entity();\r\n            _this.towerMoveMarker.addComponent(new Transform({\r\n                position: new Vector3(0, 0, 0),\r\n                scale: new Vector3(0.5, 0.5, 0.5),\r\n                rotation: new Quaternion().setEuler(0, 0, 0)\r\n            }));\r\n            _this.towerMoveMarker.setParent(_this);\r\n            _this.towerMoveMarker.addComponent(new GLTFShape(\"models/tower/core/TowerStructureSelect.glb\"));\r\n            _this.towerMoveMarker.getComponent(GLTFShape).isPointerBlocker = false;\r\n            _this.towerMoveMarker.getComponent(GLTFShape).withCollisions = false;\r\n            engine.removeEntity(_this.towerMoveMarker);\r\n            /* procedural materials, not working for custom shapes\r\n            //build core shapes\r\n            this.TowerCoreMaterial.albedoTexture = this.TowerCoreTextureColour;\r\n            this.TowerCoreMaterial.emissiveTexture = this.TowerCoreTextureEmission;\r\n            this.TowerCoreMaterial.bumpTexture = this.TowerCoreTextureNormal;\r\n            */\r\n            //generate tower frame shapes\r\n            for (var i = 0; i < tower_data_2.dataTowers.length; i++) {\r\n                _this.TowerShapeFrames.push(new GLTFShape(\"models/tower/\" + tower_data_2.dataTowers[i].Path + \".glb\"));\r\n            }\r\n            //set filler callbacks\r\n            //  move tower\r\n            _this.GetSelectedTowerMove = _this.getSelectedTowerMove;\r\n            _this.MoveTower = _this.moveTower;\r\n            //  select tower\r\n            _this.GetSelectedTower = _this.getSelectedTower;\r\n            _this.SelectTower = _this.selectTower;\r\n            //  damage enemy\r\n            _this.DamageEnemy = _this.damageEnemy;\r\n            _this.ApplyEffect = _this.applyEffect;\r\n            return _this;\r\n        }\r\n        Object.defineProperty(TowerManager, \"Instance\", {\r\n            get: function () {\r\n                //ensure instance is set\r\n                if (TowerManager.instance === undefined) {\r\n                    TowerManager.instance = new TowerManager();\r\n                }\r\n                return TowerManager.instance;\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        //NOTE: prototype for modular materials which should save a bundle of scene resources in the future if pushed to all tower shape types\r\n        //callback access for tower shapes\r\n        TowerManager.prototype.callbackGetTowerShape = function (type, index) {\r\n            return TowerManager.Instance.GetTowerShape(type, index);\r\n        };\r\n        TowerManager.prototype.GetTowerShape = function (type, index) {\r\n            //return core shape\r\n            if (type == 0) {\r\n                switch (index) {\r\n                    case 0: return this.TowerShapeFoundation;\r\n                    case 1: return this.TowerShapeStructure;\r\n                    case 2: return this.TowerShapeGimbal;\r\n                    case 3: return this.TowerShapeRange;\r\n                }\r\n            }\r\n            //return frame shape\r\n            return this.TowerShapeFrames[index];\r\n        };\r\n        TowerManager.prototype.getSelectedTowerMove = function () { log(\"tower manager callback not set - get selected tower swap\"); return undefined; };\r\n        TowerManager.prototype.moveTower = function (index) { log(\"tower manager callback not set - select tower (\" + index.toString() + \")\"); };\r\n        TowerManager.prototype.getSelectedTower = function () { log(\"tower manager callback not set - get selected tower\"); return undefined; };\r\n        TowerManager.prototype.selectTower = function (index) { log(\"tower manager callback not set - select tower (\" + index.toString() + \")\"); };\r\n        TowerManager.prototype.damageEnemy = function (index, dam, pen, rend) { log(\"tower manager callback not set - damage enemy (\" + index.toString() + \")\"); };\r\n        TowerManager.prototype.applyEffect = function (index, type, power, length) { log(\"tower manager callback not set - apply effect:\" + index.toString()); };\r\n        TowerManager.prototype.getIndex = function () { return this.index++; };\r\n        TowerManager.prototype.GenerateTowerFoundations = function () {\r\n            var _this = this;\r\n            //parse all tower foundation grids\r\n            if (game_states_6.GameState.debuggingTower)\r\n                log(\"generating tower foundation objects...\");\r\n            for (var i = 0; i < tower_config_2.configTower.length; i++) {\r\n                //parse each block in grid\r\n                for (var x = 0; x < tower_config_2.configTower[i].GridSize[0]; x++) {\r\n                    var _loop_1 = function () {\r\n                        var index = i;\r\n                        var posX = x;\r\n                        var posZ = z;\r\n                        //create and position tower foundation object\r\n                        var foundation = new tower_entity_1.TowerFoundation(this_1.getIndex(), this_1.getSelectedTower, this_1.callbackGetTowerShape, this_1.TowerRangeEnemyEnter, this_1.TowerRangeEnemyExit);\r\n                        foundation.setParent(this_1);\r\n                        //  position\r\n                        foundation.getComponent(Transform).position = new Vector3(tower_config_2.settingTower[0].foundationOffset[0] + tower_config_2.configTower[index].GridLocation[0] + (tower_config_2.settingTower[0].foundationSpacing[0] * posX), tower_config_2.settingTower[0].foundationOffset[1] + tower_config_2.configTower[index].GridLocation[1], tower_config_2.settingTower[0].foundationOffset[2] + tower_config_2.configTower[index].GridLocation[2] + (tower_config_2.settingTower[0].foundationSpacing[1] * posZ));\r\n                        //  scale\r\n                        foundation.getComponent(Transform).scale = new Vector3(tower_config_2.settingTower[0].foundationScale[0], tower_config_2.settingTower[0].foundationScale[1], tower_config_2.settingTower[0].foundationScale[2]);\r\n                        //add foundation to collections\r\n                        this_1.TowerFoundationList.addItem(foundation);\r\n                        this_1.TowerFoundationDict.addItem(foundation.Index.toString(), foundation);\r\n                        //create foundation key interactions\r\n                        foundation.addComponent(new OnPointerDown(function (e) {\r\n                            //E - attempt to select tower\r\n                            if (e.buttonId == 1) {\r\n                                _this.SelectTower(foundation.Index);\r\n                            }\r\n                            //F - attempt to move tower\r\n                            else if (e.buttonId == 2) {\r\n                                _this.MoveTower(foundation.Index);\r\n                            }\r\n                        }, {\r\n                            button: ActionButton.ANY,\r\n                            showFeedback: true,\r\n                            hoverText: \"[E] Edit Tower\\n[F] Move Tower\",\r\n                            distance: 16\r\n                        }));\r\n                        //link damage function\r\n                        foundation.TowerFrame.TowerSystem.DamageEnemy = this_1.DamageEnemy;\r\n                        foundation.TowerFrame.TowerSystem.ApplyEffect = this_1.ApplyEffect;\r\n                    };\r\n                    var this_1 = this;\r\n                    for (var z = 0; z < tower_config_2.configTower[i].GridSize[1]; z++) {\r\n                        _loop_1();\r\n                    }\r\n                }\r\n            }\r\n            if (game_states_6.GameState.debuggingTower)\r\n                log(\"generated tower foundation objects, count: \" + this.TowerFoundationList.size());\r\n        };\r\n        TowerManager.prototype.SetTowerMoveMarker = function (index) {\r\n            var towerFoundation = this.TowerFoundationDict.getItem(index.toString());\r\n            //if foundation exists\r\n            if (towerFoundation != undefined) {\r\n                //check engine state\r\n                if (!this.towerMoveMarker.isAddedToEngine())\r\n                    engine.addEntity(this.towerMoveMarker);\r\n                //position marker\r\n                this.towerMoveMarker.getComponent(Transform).position = new Vector3(towerFoundation.getComponent(Transform).position.x, towerFoundation.getComponent(Transform).position.y, towerFoundation.getComponent(Transform).position.z);\r\n            }\r\n            //if foundation does not exist\r\n            else {\r\n                //check engine state\r\n                if (this.towerMoveMarker.isAddedToEngine())\r\n                    engine.removeEntity(this.towerMoveMarker);\r\n            }\r\n        };\r\n        TowerManager.prototype.SetTowerMoveMarkerState = function (state) {\r\n            //check engine state\r\n            if (state) {\r\n                if (!this.towerMoveMarker.isAddedToEngine())\r\n                    engine.addEntity(this.towerMoveMarker);\r\n            }\r\n            else {\r\n                if (this.towerMoveMarker.isAddedToEngine())\r\n                    engine.removeEntity(this.towerMoveMarker);\r\n            }\r\n        };\r\n        TowerManager.prototype.MoveTowerObject = function (target1, target2) {\r\n            //store tower details\r\n            this.foundationTemps = [this.TowerFoundationDict.getItem(target1.toString()), this.TowerFoundationDict.getItem(target2.toString())];\r\n            this.foundationSwap = this.foundationTemps[0].TowerFrame;\r\n            //push second to first\r\n            this.foundationTemps[0].SetTowerFrame(this.foundationTemps[1].TowerFrame);\r\n            //push swap to second\r\n            this.foundationTemps[1].SetTowerFrame(this.foundationSwap);\r\n        };\r\n        /**\r\n         * builds a tower of the given type on the foundation of the given index\r\n         * @param index index of targeted tower foundation\r\n         * @param type index of targeted tower def\r\n         */\r\n        TowerManager.prototype.BuildTower = function (index, type) {\r\n            if (game_states_6.GameState.debuggingTower) {\r\n                log(\"Tower Manager: building tower \" + type.toString() + \" on foundation \" + index.toString());\r\n            }\r\n            //pass command down\r\n            this.TowerFoundationDict.getItem(index.toString()).TowerFrame.SetTower(type, this.TowerShapeFrames[type]);\r\n        };\r\n        /**\r\n         * resets all tower foundations, clearing their constructed tower frames and upgrades\r\n         */\r\n        TowerManager.prototype.ClearTowers = function () {\r\n            for (var i = 0; i < this.TowerFoundationList.size(); i++) {\r\n                this.ClearTower(i);\r\n            }\r\n        };\r\n        /**\r\n         * clears any existing tower from the given foundation, resetting to default\r\n         * @param index index of targeted tower foundation\r\n         */\r\n        TowerManager.prototype.ClearTower = function (index, refund) {\r\n            if (refund === void 0) { refund = false; }\r\n            if (refund) {\r\n                //return tower's cost to player's money\r\n                game_states_6.GameState.PlayerMoney += tower_data_2.dataTowers[this.TowerFoundationList.getItem(index).TowerFrame.TowerDef].ValueCost;\r\n            }\r\n            this.TowerFoundationList.getItem(index).TowerFrame.Initialize();\r\n        };\r\n        /**\r\n         * called when an enemy object enters a tower's range\r\n         * @param towerIndex index of targeted tower foundation\r\n         * @param enemyIndex index of targeted enemy object\r\n         */\r\n        TowerManager.prototype.TowerRangeEnemyEnter = function (towerIndex, enemyIndex) {\r\n            TowerManager.Instance.TowerFoundationDict.getItem(towerIndex.toString()).TowerFrame.EnemyEnter(enemyIndex);\r\n        };\r\n        /**\r\n         * called when an enemy object unit exits a tower's range\r\n         * @param towerIndex index of targeted tower foundation\r\n         * @param enemyIndex index of targeted enemy object\r\n         */\r\n        TowerManager.prototype.TowerRangeEnemyExit = function (towerIndex, enemyIndex) {\r\n            TowerManager.Instance.TowerFoundationDict.getItem(towerIndex.toString()).TowerFrame.EnemyExit(enemyIndex);\r\n        };\r\n        /**\r\n         * processes a check on all active turrets to ensure they are not conducting\r\n         * an attack on the given enemy\r\n         * @param index index of enemy unit that was killed\r\n         */\r\n        TowerManager.prototype.TargetDeathCheck = function (index) {\r\n            for (var i = 0; i < this.TowerFoundationList.size(); i++) {\r\n                this.TowerFoundationList.getItem(i).TowerFrame.TowerSystem.TargetDeathCheck(index);\r\n            }\r\n        };\r\n        return TowerManager;\r\n    }(Entity));\r\n    exports.TowerManager = TowerManager;\r\n});\r\ndefine(\"utilities/menu-group-2D\", [\"require\", \"exports\", \"utilities/collections\"], function (require, exports, collections_6) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.menuTutorialText = exports.MenuObject2D = exports.MenuGroup2D = void 0;\r\n    var MenuGroup2D = /** @class */ (function () {\r\n        //constructor, takes in an entity that will be used when parenting\r\n        function MenuGroup2D() {\r\n            //action object used to toggle main menu canvas\r\n            //private menuToggleCanvas:UICanvas = new UICanvas();\r\n            this.menuToggleState = 0;\r\n            //canvas init\r\n            if (MenuGroup2D_1.canvas == undefined) {\r\n                MenuGroup2D_1.canvas = new UICanvas();\r\n            }\r\n            //object\r\n            this.groupParent = new UIContainerRect(MenuGroup2D_1.canvas);\r\n            //initialize collections\r\n            this.menuList = new collections_6.List();\r\n            this.menuDict = new collections_6.Dictionary();\r\n            /*\r\n                    //set up menu toggle\r\n                    //object\r\n                    this.menuToggle = new UIImage(this.menuToggleCanvas, menuGroup2DReference.getImageSource(0));\r\n                    this.menuToggle.isPointerBlocker = true;\r\n                    //location\r\n                    this.menuToggle.sourceLeft = menuGroup2DReference.sourceLocations[4][0];\r\n                    this.menuToggle.sourceTop = menuGroup2DReference.sourceLocations[4][1];\r\n                    this.menuToggle.sourceWidth = menuGroup2DReference.sourceSizes[5][0];\r\n                    this.menuToggle.sourceHeight = menuGroup2DReference.sourceSizes[5][1];\r\n                    //sizing\r\n                    this.menuToggle.width = menuGroup2DReference.sourceSizes[5][0]/4;\r\n                    this.menuToggle.height = menuGroup2DReference.sourceSizes[5][1]/4;\r\n                    //positioning\r\n                    this.menuToggle.positionX = 0;\r\n                    this.menuToggle.positionY = 0;\r\n                    this.menuToggle.hAlign = \"center\";\r\n                    this.menuToggle.vAlign = \"center\";\r\n                    //actions\r\n                    this.menuToggle.onClick =new OnClick\r\n                    (\r\n                        (e) =>\r\n                        {\r\n                            this.ToggleMenuState();\r\n                        }\r\n                    )\r\n                    */\r\n        }\r\n        MenuGroup2D_1 = MenuGroup2D;\r\n        //toggles the current menu state\r\n        MenuGroup2D.prototype.ToggleMenuState = function () {\r\n            this.SetMenuState(!this.groupParent.visible);\r\n        };\r\n        //sets the state of the primary menu tree\r\n        MenuGroup2D.prototype.SetMenuState = function (state) {\r\n            this.groupParent.visible = state;\r\n        };\r\n        //menu toggle object\r\n        //  type: 0->position, 1->scale, 2->rotation\r\n        /*public AdjustMenuToggle(type:number, vect:Vector3)\r\n        {\r\n            switch(type)\r\n            {\r\n                case 0:\r\n                    this.menuToggle.positionX = vect.x;\r\n                    this.menuToggle.positionY = vect.y;\r\n                break;\r\n                case 1:\r\n                    this.menuToggle.width = vect.x;\r\n                    this.menuToggle.height = vect.y;\r\n                break;\r\n                case 2:\r\n                    switch(Math.floor(vect.x))\r\n                    {\r\n                        case 0: this.menuToggle.hAlign = \"left\"; break;\r\n                        case 1: this.menuToggle.hAlign = \"center\"; break;\r\n                        case 2: this.menuToggle.hAlign = \"right\"; break;\r\n                    }\r\n                    switch(Math.floor(vect.y))\r\n                    {\r\n                        case 0: this.menuToggle.vAlign = \"top\"; break;\r\n                        case 1: this.menuToggle.vAlign = \"center\"; break;\r\n                        case 2: this.menuToggle.vAlign = \"bottom\"; break;\r\n                    }\r\n                break;\r\n            }\r\n        }*/\r\n        //prepares a menu object of the given size/shape, with the given text, \r\n        //  registered under the given name\r\n        MenuGroup2D.prototype.AddMenuObject = function (name, par) {\r\n            if (par === void 0) { par = ''; }\r\n            //create and prepare entities\r\n            var tmp;\r\n            if (par != '')\r\n                tmp = new MenuObject2D(this.groupParent, name, this.menuDict.getItem(par).rect);\r\n            else\r\n                tmp = new MenuObject2D(this.groupParent, name);\r\n            //disable click by default\r\n            tmp.rect.isPointerBlocker = true;\r\n            //register object to collections\r\n            this.menuList.addItem(tmp);\r\n            this.menuDict.addItem(name, tmp);\r\n        };\r\n        //returns the requested menu object\r\n        MenuGroup2D.prototype.GetMenuObject = function (objName) {\r\n            return this.menuDict.getItem(objName);\r\n        };\r\n        //returns the requested menu object\r\n        MenuGroup2D.prototype.GetMenuObjectText = function (objName, textName) {\r\n            return this.menuDict.getItem(objName).GetText(textName);\r\n        };\r\n        //changes a targeted menu object\r\n        //  type: \r\n        //  0->position\r\n        //  1->size(x=width,y=height)\r\n        //  2->alignment(x=hAlign,y=vAligh)\r\n        //      result,x: 0=left,1=center,2=right\r\n        //      result,y: 0=top,1=center,2=bottom\r\n        MenuGroup2D.prototype.AdjustMenuObject = function (name, type, vect) {\r\n            switch (type) {\r\n                case 0:\r\n                    this.menuDict.getItem(name).rect.positionX = vect.x;\r\n                    this.menuDict.getItem(name).rect.positionY = vect.y;\r\n                    break;\r\n                case 1:\r\n                    this.menuDict.getItem(name).rect.width = vect.x;\r\n                    this.menuDict.getItem(name).rect.height = vect.y;\r\n                    break;\r\n                case 2:\r\n                    switch (Math.floor(vect.x)) {\r\n                        case 0:\r\n                            this.menuDict.getItem(name).rect.hAlign = \"left\";\r\n                            break;\r\n                        case 1:\r\n                            this.menuDict.getItem(name).rect.hAlign = \"center\";\r\n                            break;\r\n                        case 2:\r\n                            this.menuDict.getItem(name).rect.hAlign = \"right\";\r\n                            break;\r\n                    }\r\n                    switch (Math.floor(vect.y)) {\r\n                        case 0:\r\n                            this.menuDict.getItem(name).rect.vAlign = \"top\";\r\n                            break;\r\n                        case 1:\r\n                            this.menuDict.getItem(name).rect.vAlign = \"center\";\r\n                            break;\r\n                        case 2:\r\n                            this.menuDict.getItem(name).rect.vAlign = \"bottom\";\r\n                            break;\r\n                    }\r\n                    break;\r\n            }\r\n        };\r\n        //changes a targeted menu object's colour\r\n        MenuGroup2D.prototype.AdjustMenuColour = function (name, colour) {\r\n            this.menuDict.getItem(name).rect.color = colour;\r\n        };\r\n        //prepares a menu object of the given size/shape, with the given text, \r\n        //  registered under the given name\r\n        MenuGroup2D.prototype.AddMenuText = function (nameObj, nameTxt, text) {\r\n            this.menuDict.getItem(nameObj).AddText(nameTxt, text);\r\n        };\r\n        //sets a text object's display text\r\n        MenuGroup2D.prototype.SetMenuText = function (nameObj, nameTxt, text) {\r\n            this.menuDict.getItem(nameObj).ChangeText(nameTxt, text);\r\n        };\r\n        //changes a text object's textshape settings\r\n        MenuGroup2D.prototype.AdjustTextObject = function (nameObj, nameTxt, type, value) {\r\n            this.menuDict.getItem(nameObj).AdjustText(nameTxt, type, value);\r\n        };\r\n        //changes a text object's textshape settings\r\n        MenuGroup2D.prototype.AdjustTextDisplay = function (nameObj, nameTxt, type, value) {\r\n            this.menuDict.getItem(nameObj).AdjustTextDisplay(nameTxt, type, value);\r\n        };\r\n        //adds an uiImage object parented under the tagged menu object\r\n        //  type is pulled from the 2d menu group reference sheet\r\n        MenuGroup2D.prototype.AddImageObject = function (nameObj, nameImg, image, type, isVisible) {\r\n            if (isVisible === void 0) { isVisible = true; }\r\n            this.menuDict.getItem(nameObj).AddImage(nameImg, image, type, isVisible);\r\n        };\r\n        //changes a image object's settings\r\n        MenuGroup2D.prototype.AdjustImageObject = function (nameObj, nameImg, image, type, value, overwrite) {\r\n            if (overwrite === void 0) { overwrite = false; }\r\n            this.menuDict.getItem(nameObj).AdjustImage(nameImg, image, type, value, overwrite);\r\n        };\r\n        //returns the requested menu object\r\n        MenuGroup2D.prototype.GetMenuImageObject = function (objName, nameImg) {\r\n            return this.menuDict.getItem(objName).GetImage(nameImg);\r\n        };\r\n        var MenuGroup2D_1;\r\n        //single cavas is shared between all instances of menu groups \r\n        MenuGroup2D.canvas = undefined;\r\n        MenuGroup2D = MenuGroup2D_1 = __decorate([\r\n            Component(\"MenuGroup2D\")\r\n        ], MenuGroup2D);\r\n        return MenuGroup2D;\r\n    }());\r\n    exports.MenuGroup2D = MenuGroup2D;\r\n    //modified 2d ui rect container\r\n    //can contain multiple ui text objects\r\n    var MenuObject2D = /** @class */ (function () {\r\n        //constructor\r\n        function MenuObject2D(canvas, nam, par) {\r\n            if (par === void 0) { par = undefined; }\r\n            if (par == undefined)\r\n                this.rect = new UIContainerRect(canvas);\r\n            else\r\n                this.rect = new UIContainerRect(par);\r\n            this.rect.color = new Color4(0.5, 0.5, 0.5, 1);\r\n            //set access name\r\n            this.Name = nam;\r\n            //collections\r\n            this.textList = new collections_6.List();\r\n            this.textDict = new collections_6.Dictionary();\r\n            this.imageList = new collections_6.List();\r\n            this.imageDict = new collections_6.Dictionary();\r\n        }\r\n        //prepares a text object with the given text, \r\n        //  registered under the given name\r\n        MenuObject2D.prototype.AddText = function (name, text) {\r\n            //create and prepare text\r\n            var tmp = new UIText(this.rect);\r\n            tmp.isPointerBlocker = false;\r\n            tmp.textWrapping = true;\r\n            tmp.width = this.rect.width;\r\n            tmp.height = this.rect.height;\r\n            tmp.color = Color4.Black();\r\n            tmp.hAlign = \"center\";\r\n            tmp.vAlign = \"center\";\r\n            tmp.hTextAlign = \"center\";\r\n            tmp.vTextAlign = \"center\";\r\n            tmp.fontSize = 24;\r\n            tmp.value = text;\r\n            //register object to collections\r\n            this.textList.addItem(tmp);\r\n            this.textDict.addItem(name, tmp);\r\n        };\r\n        //returns the requested text object\r\n        MenuObject2D.prototype.GetText = function (name) {\r\n            return this.textDict.getItem(name);\r\n        };\r\n        //changes a targeted text object entity\r\n        //  type: \r\n        //  0->position\r\n        //  1->size(x=width,y=height)\r\n        //  2->alignment(x=hAlign,y=vAligh)\r\n        //      result,x: 0=left,1=center,2=right\r\n        //      result,y: 0=top,1=center,2=bottom\r\n        //  2->text alignment(x=hAlign,y=vAligh)\r\n        //      result,x: 0=left,1=center,2=right\r\n        //      result,y: 0=top,1=center,2=bottom\r\n        MenuObject2D.prototype.AdjustText = function (name, type, vect) {\r\n            switch (type) {\r\n                case 0:\r\n                    this.textDict.getItem(name).positionX = vect.x;\r\n                    this.textDict.getItem(name).positionY = vect.y;\r\n                    break;\r\n                case 1:\r\n                    this.textDict.getItem(name).width = vect.x;\r\n                    this.textDict.getItem(name).height = vect.y;\r\n                    break;\r\n                case 2:\r\n                    switch (Math.floor(vect.x)) {\r\n                        case 0:\r\n                            this.textDict.getItem(name).hAlign = \"left\";\r\n                            break;\r\n                        case 1:\r\n                            this.textDict.getItem(name).hAlign = \"center\";\r\n                            break;\r\n                        case 2:\r\n                            this.textDict.getItem(name).hAlign = \"right\";\r\n                            break;\r\n                    }\r\n                    switch (Math.floor(vect.y)) {\r\n                        case 0:\r\n                            this.textDict.getItem(name).vAlign = \"top\";\r\n                            break;\r\n                        case 1:\r\n                            this.textDict.getItem(name).vAlign = \"center\";\r\n                            break;\r\n                        case 2:\r\n                            this.textDict.getItem(name).vAlign = \"bottom\";\r\n                            break;\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    switch (Math.floor(vect.x)) {\r\n                        case 0:\r\n                            this.textDict.getItem(name).hTextAlign = \"left\";\r\n                            break;\r\n                        case 1:\r\n                            this.textDict.getItem(name).hTextAlign = \"center\";\r\n                            break;\r\n                        case 2:\r\n                            this.textDict.getItem(name).hTextAlign = \"right\";\r\n                            break;\r\n                    }\r\n                    switch (Math.floor(vect.y)) {\r\n                        case 0:\r\n                            this.textDict.getItem(name).vTextAlign = \"top\";\r\n                            break;\r\n                        case 1:\r\n                            this.textDict.getItem(name).vTextAlign = \"center\";\r\n                            break;\r\n                        case 2:\r\n                            this.textDict.getItem(name).vTextAlign = \"bottom\";\r\n                            break;\r\n                    }\r\n                    break;\r\n            }\r\n        };\r\n        //changes a targeted menu object entity\r\n        //  type: 0->font size\r\n        MenuObject2D.prototype.AdjustTextDisplay = function (name, type, value) {\r\n            switch (type) {\r\n                case 0:\r\n                    this.textDict.getItem(name).fontSize = value;\r\n                    break;\r\n            }\r\n        };\r\n        //changes the text of a targeted textshape\r\n        MenuObject2D.prototype.ChangeText = function (name, text) {\r\n            this.textDict.getItem(name).value = text;\r\n        };\r\n        //prepares an uiImage object of the given type\r\n        //  isVisible determines if the parental object's visibility \r\n        //  registered under the given name\r\n        MenuObject2D.prototype.AddImage = function (name, image, type, isVisible) {\r\n            //create and prepare text\r\n            var tmp = new UIImage(this.rect, menuGroup2DReference.getImageSource(image));\r\n            tmp.isPointerBlocker = true;\r\n            this.rect.visible = isVisible;\r\n            //  load source positioning\r\n            tmp.sourceLeft = menuGroup2DReference.getImageLocation(image, type, 0);\r\n            tmp.sourceTop = menuGroup2DReference.getImageLocation(image, type, 1);\r\n            //  load source sizing\r\n            tmp.sourceWidth = menuGroup2DReference.getImageSize(image, type, 0);\r\n            tmp.sourceHeight = menuGroup2DReference.getImageSize(image, type, 1);\r\n            //  set image sizing (default 1/4 size)\r\n            tmp.width = menuGroup2DReference.getImageSize(image, type, 0);\r\n            tmp.height = menuGroup2DReference.getImageSize(image, type, 1);\r\n            //  default positioning\r\n            tmp.positionX = 0;\r\n            tmp.positionY = 0;\r\n            tmp.hAlign = \"center\";\r\n            tmp.vAlign = \"center\";\r\n            //register object to collections\r\n            this.imageList.addItem(tmp);\r\n            this.imageDict.addItem(name, tmp);\r\n        };\r\n        //changes a targeted text object entity\r\n        //  type: \r\n        //  0->position\r\n        //  1->size(x=width,y=height)\r\n        //  2->alignment(x=hAlign,y=vAligh)\r\n        //      result,x: 0=left,1=center,2=right\r\n        //      result,y: 0=top,1=center,2=bottom\r\n        //  3->scale (based on source)\r\n        //      result,x: size type\r\n        //      result,y: scale\r\n        MenuObject2D.prototype.AdjustImage = function (name, image, type, vect, overwrite) {\r\n            switch (type) {\r\n                case 0:\r\n                    this.imageDict.getItem(name).positionX = vect.x;\r\n                    this.imageDict.getItem(name).positionY = vect.y;\r\n                    break;\r\n                case 1:\r\n                    this.imageDict.getItem(name).width = vect.x;\r\n                    this.imageDict.getItem(name).height = vect.y;\r\n                    break;\r\n                case 2:\r\n                    switch (Math.floor(vect.x)) {\r\n                        case 0:\r\n                            this.imageDict.getItem(name).hAlign = \"left\";\r\n                            break;\r\n                        case 1:\r\n                            this.imageDict.getItem(name).hAlign = \"center\";\r\n                            break;\r\n                        case 2:\r\n                            this.imageDict.getItem(name).hAlign = \"right\";\r\n                            break;\r\n                    }\r\n                    switch (Math.floor(vect.y)) {\r\n                        case 0:\r\n                            this.imageDict.getItem(name).vAlign = \"top\";\r\n                            break;\r\n                        case 1:\r\n                            this.imageDict.getItem(name).vAlign = \"center\";\r\n                            break;\r\n                        case 2:\r\n                            this.imageDict.getItem(name).vAlign = \"bottom\";\r\n                            break;\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.imageDict.getItem(name).width = menuGroup2DReference.sourceSizes[image][Math.floor(vect.x)][0] * vect.y;\r\n                    this.imageDict.getItem(name).height = menuGroup2DReference.sourceSizes[image][Math.floor(vect.x)][1] * vect.y;\r\n                    if (overwrite) {\r\n                        this.rect.width = (menuGroup2DReference.sourceSizes[image][Math.floor(vect.x)][0] * vect.y);\r\n                        this.rect.height = (menuGroup2DReference.sourceSizes[image][Math.floor(vect.x)][1] * vect.y);\r\n                    }\r\n                    break;\r\n            }\r\n        };\r\n        //returns the requested text object\r\n        MenuObject2D.prototype.GetImage = function (name) {\r\n            return this.imageDict.getItem(name);\r\n        };\r\n        MenuObject2D = __decorate([\r\n            Component(\"MenuObject2D\")\r\n        ], MenuObject2D);\r\n        return MenuObject2D;\r\n    }());\r\n    exports.MenuObject2D = MenuObject2D;\r\n    //reference for splice sheet pieces\r\n    //  TODO: maybe add enum links for passing types to make it more readable \r\n    var menuGroup2DReference = /** @class */ (function () {\r\n        function menuGroup2DReference() {\r\n        }\r\n        menuGroup2DReference.getImageSource = function (image) {\r\n            //log(\"source: \"+image)\r\n            return menuGroup2DReference.imageSources[image];\r\n        };\r\n        menuGroup2DReference.getImageLocation = function (image, index, type) {\r\n            //log(\"location: \"+image)\r\n            return menuGroup2DReference.sourceLocations[image][index][type];\r\n        };\r\n        menuGroup2DReference.getImageSize = function (image, index, type) {\r\n            //log(\"size: \"+image+\", \"+index+\", \"+type)\r\n            //log(\"type: \"+menuGroup2DReference.sourceTypes[image][index])\r\n            return menuGroup2DReference.sourceSizes[image][menuGroup2DReference.sourceTypes[image][index]][type];\r\n        };\r\n        //texture sources\r\n        menuGroup2DReference.imageSources = [\r\n            new Texture(\"images/menuDebugging.png\"),\r\n            new Texture(\"images/menuSpliceSheet.png\"),\r\n            new Texture(\"images/uiGameHeaderCore.png\"),\r\n            new Texture(\"images/uiGameHeaderEnemy.png\")\r\n        ];\r\n        //locations on-source for splice points, from top left of sheet to bottom right\r\n        //  [image_index][slice_index][point type(0=x, 1=y)]\r\n        menuGroup2DReference.sourceLocations = [\r\n            //menu backplate\r\n            [\r\n                [0, 0], //title\r\n            ],\r\n            //menu sheet\r\n            [\r\n                //  empty\r\n                [0, 500],\r\n                [0, 600],\r\n                [750, 600],\r\n                [1050, 600],\r\n                [1050, 0],\r\n                //  text\r\n                [0, 0],\r\n                [0, 200],\r\n                [0, 300],\r\n                [0, 400],\r\n                [750, 200],\r\n                [1050, 200],\r\n                [750, 300],\r\n                [1050, 300],\r\n                [750, 400],\r\n                [1050, 400],\r\n                [1050, 500],\r\n                [1200, 500],\r\n                [1200, 600], //help small\r\n            ],\r\n            [\r\n                [0, 0], //title\r\n            ],\r\n            [\r\n                [0, 0], //title\r\n            ]\r\n        ];\r\n        //size types of on-source splices\r\n        //  [image_index][splice sheet index, size type(0=title, 1=long, 2=medium, 3=short)]\r\n        menuGroup2DReference.sourceTypes = [\r\n            //menu backplate\r\n            [\r\n                0,\r\n            ],\r\n            //menu sheet\r\n            [\r\n                //  empty\r\n                1,\r\n                2,\r\n                3,\r\n                4,\r\n                5,\r\n                //  text\r\n                0,\r\n                2,\r\n                2,\r\n                2,\r\n                3,\r\n                3,\r\n                3,\r\n                3,\r\n                3,\r\n                3,\r\n                4,\r\n                4,\r\n                4, //help small\r\n            ],\r\n            [\r\n                0,\r\n            ],\r\n            [\r\n                0,\r\n            ]\r\n        ];\r\n        //size definitions\r\n        menuGroup2DReference.sourceSizes = [\r\n            //menu backplate\r\n            [\r\n                [680, 480]\r\n            ],\r\n            //menu sheet\r\n            [\r\n                [1050, 200],\r\n                [1050, 100],\r\n                [750, 100],\r\n                [300, 100],\r\n                [150, 100],\r\n                [300, 200], //square(ish)\r\n            ],\r\n            [\r\n                [1170, 305], //title\r\n            ],\r\n            [\r\n                [1170, 305], //title\r\n            ]\r\n        ];\r\n        return menuGroup2DReference;\r\n    }());\r\n    //contains text for the tutorial menu\r\n    var menuTutorialText = /** @class */ (function () {\r\n        function menuTutorialText() {\r\n        }\r\n        menuTutorialText.TextHeader = [\r\n            \"About This Module\",\r\n            \"How To Play\"\r\n        ];\r\n        menuTutorialText.TextDesc = [\r\n            \"text unavailable\",\r\n            \"text unavailable\"\r\n        ];\r\n        return menuTutorialText;\r\n    }());\r\n    exports.menuTutorialText = menuTutorialText;\r\n});\r\ndefine(\"utilities/menu-group-3D\", [\"require\", \"exports\", \"utilities/collections\"], function (require, exports, collections_7) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.MenuObject3D = exports.MenuGroup3D = void 0;\r\n    var MenuGroup3D = /** @class */ (function () {\r\n        //constructor, takes in an entity that will be used when parenting\r\n        function MenuGroup3D() {\r\n            //address to target models\r\n            //  NOTE: this should be static, but static defs seem to break in the SDK deployment\r\n            this.object_locations = [\r\n                //empty\r\n                \"\",\r\n                //panels\r\n                \"models/utilities/Menu3D_Panel_Square.glb\",\r\n                \"models/utilities/Menu3D_Panel_Long.glb\",\r\n                //buttons\r\n                \"models/utilities/Menu3D_Button_Square.glb\",\r\n                \"models/utilities/Menu3D_Button_Long.glb\",\r\n                \"models/utilities/Menu3D_Button_Narrow.glb\",\r\n            ];\r\n            this.textColour = Color3.Black();\r\n            //create group parent\r\n            this.groupParent = new Entity();\r\n            this.groupParent.addComponent(new Transform({\r\n                position: new Vector3(0, 0, 0),\r\n                scale: new Vector3(1, 1, 1),\r\n                rotation: new Quaternion().setEuler(0, 0, 0)\r\n            }));\r\n            //set up menu toggle\r\n            /*this.menuToggle.setParent(this.groupParent);\r\n            this.menuToggle.addComponent(new GLTFShape(\"models/utilities/menuObjSettingsGearBox.glb\"));\r\n            this.menuToggle.addComponent(new Transform\r\n            ({\r\n                position: new Vector3(0,0,0),\r\n                scale: new Vector3(1,1,1),\r\n                rotation: new Quaternion().setEuler(0,0,0)\r\n            }));\r\n            //  primary action: toggle\r\n            this.menuToggle.addComponent\r\n            (\r\n                //add click action listener\r\n                new OnPointerDown\r\n                (\r\n                    (e) =>\r\n                    {\r\n                        if (e.buttonId == 1) { this.ToggleMenuState(); }\r\n                    },\r\n                    {\r\n                        button: ActionButton.ANY,\r\n                        showFeedback: true,\r\n                        hoverText: \"[E] Toggle Menu\",\r\n                        distance: 8\r\n                    }\r\n                )\r\n            );*/\r\n            //initialize collections\r\n            this.menuList = new collections_7.List();\r\n            this.menuDict = new collections_7.Dictionary();\r\n        }\r\n        /*\r\n            //toggles the current menu state\r\n            public ToggleMenuState()\r\n            {\r\n                this.menuToggleState = !this.menuToggleState;\r\n                this.SetMenuState(this.menuToggleState);\r\n            }\r\n        \r\n            //menu toggle object\r\n            //  type: 0->position, 1->scale, 2->rotation\r\n            public AdjustMenuToggle(type:number, vect:Vector3)\r\n            {\r\n                switch(type)\r\n                {\r\n                    case 0:\r\n                        this.menuToggle.getComponent(Transform).position = vect;\r\n                    break;\r\n                    case 1:\r\n                        this.menuToggle.getComponent(Transform).scale = vect;\r\n                    break;\r\n                    case 2:\r\n                        this.menuToggle.getComponent(Transform).rotation = new Quaternion(vect.x, vect.y, vect.z);\r\n                    break;\r\n                }\r\n            }\r\n        */\r\n        //sets the state of the primary menu tree\r\n        MenuGroup3D.prototype.SetMenuState = function (state) {\r\n            //enable menu\r\n            if (state) {\r\n                engine.addEntity(this.groupParent);\r\n            }\r\n            //disable menu\r\n            else {\r\n                engine.removeEntity(this.groupParent);\r\n            }\r\n            //this.menuToggleState = state;\r\n        };\r\n        //modifies the transform details of the menu group parent object\r\n        //  type: 0->position, 1->scale, 2->rotation\r\n        MenuGroup3D.prototype.AdjustMenuParent = function (type, vect) {\r\n            switch (type) {\r\n                case 0:\r\n                    this.groupParent.getComponent(Transform).position = vect;\r\n                    break;\r\n                case 1:\r\n                    this.groupParent.getComponent(Transform).scale = vect;\r\n                    break;\r\n                case 2:\r\n                    this.groupParent.getComponent(Transform).rotation = new Quaternion().setEuler(vect.x, vect.y, vect.z);\r\n                    break;\r\n            }\r\n        };\r\n        //prepares a menu object of the given size/shape, with the given text, \r\n        //  registered under the given name\r\n        MenuGroup3D.prototype.AddMenuObject = function (name, type, par) {\r\n            if (par === void 0) { par = ''; }\r\n            //create and prepare entities\r\n            var tmp = new MenuObject3D(this.object_locations[type], name);\r\n            if (par != '')\r\n                tmp.setParent(this.GetMenuObject(par));\r\n            else\r\n                tmp.setParent(this.groupParent);\r\n            //register object to collections\r\n            this.menuList.addItem(tmp);\r\n            this.menuDict.addItem(name, tmp);\r\n        };\r\n        //returns the requested menu object\r\n        MenuGroup3D.prototype.GetMenuObject = function (objName) {\r\n            return this.menuDict.getItem(objName);\r\n        };\r\n        //returns the requested menu object\r\n        MenuGroup3D.prototype.GetMenuObjectText = function (objName, textName) {\r\n            return this.menuDict.getItem(objName).GetTextObject(textName);\r\n        };\r\n        //changes a targeted menu object entity\r\n        //  type: 0->position, 1->scale, 2->rotation\r\n        MenuGroup3D.prototype.AdjustMenuObject = function (name, type, vect) {\r\n            switch (type) {\r\n                case 0:\r\n                    this.menuDict.getItem(name).getComponent(Transform).position = vect;\r\n                    break;\r\n                case 1:\r\n                    this.menuDict.getItem(name).getComponent(Transform).scale = vect;\r\n                    break;\r\n                case 2:\r\n                    this.menuDict.getItem(name).getComponent(Transform).rotation = new Quaternion().setEuler(vect.x, vect.y, vect.z);\r\n                    break;\r\n            }\r\n        };\r\n        //prepares a menu object of the given size/shape, with the given text, \r\n        //  registered under the given name\r\n        MenuGroup3D.prototype.AddMenuText = function (nameObj, nameTxt, text) {\r\n            this.menuDict.getItem(nameObj).AddTextObject(nameTxt, text);\r\n            this.menuDict.getItem(nameObj).GetTextObject(nameTxt).getComponent(TextShape).width = 0;\r\n            this.menuDict.getItem(nameObj).GetTextObject(nameTxt).getComponent(TextShape).height = 0;\r\n            this.menuDict.getItem(nameObj).GetTextObject(nameTxt).getComponent(TextShape).textWrapping = false;\r\n            this.menuDict.getItem(nameObj).GetTextObject(nameTxt).getComponent(TextShape).color = this.textColour;\r\n        };\r\n        //sets a text object's display text\r\n        MenuGroup3D.prototype.SetMenuText = function (nameObj, nameTxt, text) {\r\n            this.menuDict.getItem(nameObj).ChangeText(nameTxt, text);\r\n        };\r\n        //changes a text object's textshape settings\r\n        MenuGroup3D.prototype.AdjustTextObject = function (nameObj, nameTxt, type, value) {\r\n            this.menuDict.getItem(nameObj).AdjustTextObject(nameTxt, type, value);\r\n        };\r\n        //changes a text object's textshape settings\r\n        MenuGroup3D.prototype.AdjustTextDisplay = function (nameObj, nameTxt, type, value) {\r\n            this.menuDict.getItem(nameObj).AdjustTextDisplay(nameTxt, type, value);\r\n        };\r\n        MenuGroup3D.prototype.SetColour = function (colour) {\r\n            //change default colour\r\n            this.textColour = colour;\r\n            //apply change to all menu text objects\r\n            for (var i = 0; i < this.menuList.size(); i++) {\r\n                for (var j = 0; j < this.menuList.getItem(i).textList.size(); j++) {\r\n                    this.menuList.getItem(i).textList.getItem(j).getComponent(TextShape).color = this.textColour;\r\n                }\r\n            }\r\n        };\r\n        MenuGroup3D = __decorate([\r\n            Component(\"MenuGroup3D\")\r\n        ], MenuGroup3D);\r\n        return MenuGroup3D;\r\n    }());\r\n    exports.MenuGroup3D = MenuGroup3D;\r\n    var MenuObject3D = /** @class */ (function (_super) {\r\n        __extends(MenuObject3D, _super);\r\n        //constructor\r\n        function MenuObject3D(model, nam) {\r\n            var _this = _super.call(this) || this;\r\n            //add transform\r\n            _this.addComponent(new Transform({\r\n                position: new Vector3(0, 0, 0),\r\n                scale: new Vector3(1, 1, 1),\r\n                rotation: new Quaternion().setEuler(0, 0, 0)\r\n            }));\r\n            if (model != '')\r\n                _this.addComponent(new GLTFShape(model));\r\n            //set access name\r\n            _this.Name = nam;\r\n            //collections\r\n            _this.textList = new collections_7.List();\r\n            _this.textDict = new collections_7.Dictionary();\r\n            return _this;\r\n        }\r\n        MenuObject3D.prototype.SetObjectState = function (state) {\r\n            if (state) {\r\n                if (!this.isAddedToEngine())\r\n                    engine.addEntity(this);\r\n            }\r\n            else {\r\n                if (this.isAddedToEngine())\r\n                    engine.removeEntity(this);\r\n            }\r\n        };\r\n        MenuObject3D.prototype.GetTextObject = function (name) {\r\n            return this.textDict.getItem(name);\r\n        };\r\n        //prepares a text object with the given text, \r\n        //  registered under the given name\r\n        MenuObject3D.prototype.AddTextObject = function (name, text) {\r\n            //create and prepare entity\r\n            var tmp = new Entity();\r\n            tmp.addComponent(new Transform({\r\n                position: new Vector3(0, 0, 0),\r\n                scale: new Vector3(1, 1, 1),\r\n                rotation: new Quaternion().setEuler(0, 0, 0)\r\n            }));\r\n            tmp.setParent(this);\r\n            //add text shape with defaulted values\r\n            tmp.addComponent(new TextShape(text));\r\n            tmp.getComponent(TextShape).color = Color3.Black();\r\n            tmp.getComponent(TextShape).fontSize = 9;\r\n            //register object to collections\r\n            this.textList.addItem(tmp);\r\n            this.textDict.addItem(name, tmp);\r\n        };\r\n        //changes a targeted text object entity\r\n        //  type: 0->position, 1->scale, 2->rotation\r\n        MenuObject3D.prototype.AdjustTextObject = function (name, type, vect) {\r\n            //let entity = this.textDict.getItem(name).getComponent(Transform);\r\n            switch (type) {\r\n                case 0:\r\n                    this.textDict.getItem(name).getComponent(Transform).position = vect;\r\n                    break;\r\n                case 1:\r\n                    this.textDict.getItem(name).getComponent(Transform).scale = vect;\r\n                    break;\r\n                case 2:\r\n                    this.textDict.getItem(name).getComponent(Transform).rotation = new Quaternion().setEuler(vect.x, vect.y, vect.z);\r\n                    break;\r\n            }\r\n        };\r\n        //changes a targeted menu object entity\r\n        //  type: 0->font size, h align, v align\r\n        MenuObject3D.prototype.AdjustTextDisplay = function (name, type, value) {\r\n            switch (type) {\r\n                case 0:\r\n                    this.textDict.getItem(name).getComponent(TextShape).fontSize = value;\r\n                    break;\r\n                case 1:\r\n                    switch (value) {\r\n                        case 0:\r\n                            this.textDict.getItem(name).getComponent(TextShape).hTextAlign = \"left\";\r\n                            break;\r\n                        case 1:\r\n                            this.textDict.getItem(name).getComponent(TextShape).hTextAlign = \"center\";\r\n                            break;\r\n                        case 2:\r\n                            this.textDict.getItem(name).getComponent(TextShape).hTextAlign = \"right\";\r\n                            break;\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    switch (value) {\r\n                        case 0:\r\n                            this.textDict.getItem(name).getComponent(TextShape).vTextAlign = \"top\";\r\n                            break;\r\n                        case 1:\r\n                            this.textDict.getItem(name).getComponent(TextShape).vTextAlign = \"center\";\r\n                            break;\r\n                        case 2:\r\n                            this.textDict.getItem(name).getComponent(TextShape).vTextAlign = \"bottom\";\r\n                            break;\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.textDict.getItem(name).getComponent(TextShape).lineSpacing = value.toString();\r\n                    break;\r\n            }\r\n        };\r\n        //changes the text of a targeted textshape\r\n        MenuObject3D.prototype.ChangeText = function (name, text) {\r\n            this.textDict.getItem(name).getComponent(TextShape).value = text;\r\n        };\r\n        MenuObject3D = __decorate([\r\n            Component(\"MenuObject3D\")\r\n        ], MenuObject3D);\r\n        return MenuObject3D;\r\n    }(Entity));\r\n    exports.MenuObject3D = MenuObject3D;\r\n});\r\ndefine(\"td-core/game-menu\", [\"require\", \"exports\", \"utilities/menu-group-2D\", \"utilities/menu-group-3D\", \"td-core/data/difficulty-data\", \"td-core/enemy-wave-manager\", \"td-core/enemy-manager\", \"td-core/enemy-entity\", \"td-core/data/enemy-data\", \"td-core/data/tower-data\", \"td-core/game-states\"], function (require, exports, menu_group_2D_1, menu_group_3D_1, difficulty_data_3, enemy_wave_manager_1, enemy_manager_2, enemy_entity_2, enemy_data_4, tower_data_3, game_states_7) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.GameMenu = void 0;\r\n    var GameMenu = /** @class */ (function () {\r\n        //constructor\r\n        //  generates and places each object\r\n        function GameMenu() {\r\n            //callbacks\r\n            //  set difficulties\r\n            this.SetDifficulty = this.setDifficulty;\r\n            //  start wave\r\n            this.GameReset = this.gameReset;\r\n            //  start game\r\n            this.GameStart = this.gameStart;\r\n            //  start wave\r\n            this.WaveStart = this.waveStart;\r\n            this.towerDefinitionIndex = 0; //selected tower def\r\n            //callbacks\r\n            //  build tower\r\n            this.TowerBuild = this.towerBuild;\r\n            //  deconstruct tower\r\n            this.TowerDeconstruct = this.towerDeconstruct;\r\n            //  sets targeting type for currently selected towers\r\n            this.targetTypeStrings = [\r\n                \"FURTHEST DOWN LANE\",\r\n                \"HIGHEST HEALTH VALUE\",\r\n                \"LOWEST HEALTH VALUE\",\r\n                \"HIGHEST HEALTH %\",\r\n                \"LOWEST HEALTH %\",\r\n                \"HIGHEST ARMOUR VALUE\",\r\n                \"LOWEST ARMOUR VALUE\"\r\n            ];\r\n            this.stringsSceneNames = [\r\n                \"TD Factory\",\r\n                \"TD Shipyard\",\r\n                \"TD Neon City\",\r\n            ];\r\n            this.stringsSceneURLs = [\r\n                \"//\",\r\n                \"//\",\r\n                \"//\",\r\n            ];\r\n            this.stringsCreators = [\r\n                \"Jacko\",\r\n                \"CG-KING\",\r\n                \"TheCryptoTrader69\",\r\n                \"Ottonamas\",\r\n                \"Jetrolee\",\r\n                \"DemiDesign\",\r\n                \"Emilie\",\r\n                \"Finegrapgh\",\r\n            ];\r\n            //2D\r\n            this.menuGroupHUD = new menu_group_2D_1.MenuGroup2D();\r\n            this.menuHUDSetup2D();\r\n            //3D main menu\r\n            this.menuGroupMainMenu = new menu_group_3D_1.MenuGroup3D();\r\n            this.menuGroupMainMenu.SetColour(new Color3(1, 0, 1));\r\n            this.menuGroupMainMenu.AdjustMenuParent(0, new Vector3(44, 0, 32));\r\n            this.menuGroupMainMenu.AdjustMenuParent(2, new Vector3(0, 90, 0));\r\n            this.menuMainSetup();\r\n            //3D tower menu\r\n            this.menuGroupTower = new menu_group_3D_1.MenuGroup3D();\r\n            this.menuGroupTower.SetColour(new Color3(1, 0, 1));\r\n            this.menuGroupTower.AdjustMenuParent(0, new Vector3(8, 0, 8));\r\n            this.menuTowerSetup();\r\n            //3D info menu\r\n            this.menuGroupSceneInfo = new menu_group_3D_1.MenuGroup3D();\r\n            this.menuGroupSceneInfo.SetColour(new Color3(1, 0, 1));\r\n            this.menuGroupSceneInfo.AdjustMenuParent(0, new Vector3(20, 0, 20));\r\n            this.menuGroupSceneInfo.AdjustMenuParent(2, new Vector3(0, 0, 0));\r\n            this.menuTutorialSetup();\r\n        }\r\n        Object.defineProperty(GameMenu, \"Instance\", {\r\n            get: function () {\r\n                //ensure instance is set\r\n                if (GameMenu.instance === undefined) {\r\n                    GameMenu.instance = new GameMenu();\r\n                }\r\n                return GameMenu.instance;\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        //  setup\r\n        GameMenu.prototype.menuHUDSetup2D = function () {\r\n            //parent settings\r\n            this.menuGroupHUD.groupParent.width = 500;\r\n            this.menuGroupHUD.groupParent.height = 0;\r\n            this.menuGroupHUD.groupParent.positionY = 73;\r\n            this.menuGroupHUD.groupParent.vAlign = \"top\";\r\n            this.menuGroupHUD.groupParent.hAlign = \"center\";\r\n            //hud enemy count\r\n            //  parent obj\r\n            this.menuGroupHUD.AddMenuObject(\"hudEnemy\");\r\n            this.menuGroupHUD.AdjustMenuObject(\"hudEnemy\", 0, new Vector2(0, 0)); //position\r\n            this.menuGroupHUD.AdjustMenuObject(\"hudEnemy\", 1, new Vector2(500, 150)); //size\r\n            this.menuGroupHUD.AdjustMenuObject(\"hudEnemy\", 2, new Vector2(1, 0)); //alignment\r\n            this.menuGroupHUD.AdjustMenuColour(\"hudEnemy\", new Color4(0.2, 0.2, 0.2, 0));\r\n            //  frame img\r\n            this.menuGroupHUD.AddImageObject(\"hudEnemy\", \"imgEnemy\", 3, 0, true);\r\n            this.menuGroupHUD.AdjustImageObject(\"hudEnemy\", \"imgEnemy\", 2, 1, new Vector2(0, 0));\r\n            this.menuGroupHUD.AdjustImageObject(\"hudEnemy\", \"imgEnemy\", 2, 2, new Vector2(1, 0));\r\n            this.menuGroupHUD.AdjustImageObject(\"hudEnemy\", \"imgEnemy\", 2, 3, new Vector2(0, 0.35), false);\r\n            //  enemy count\r\n            this.menuGroupHUD.AddMenuText(\"hudEnemy\", \"TextEnemy\", \"####\");\r\n            this.menuGroupHUD.AdjustTextDisplay(\"hudEnemy\", \"TextEnemy\", 0, 18);\r\n            this.menuGroupHUD.AdjustTextObject(\"hudEnemy\", \"TextEnemy\", 0, new Vector2(32, -81));\r\n            this.menuGroupHUD.AdjustTextObject(\"hudEnemy\", \"TextEnemy\", 1, new Vector2(80, 0));\r\n            this.menuGroupHUD.AdjustTextObject(\"hudEnemy\", \"TextEnemy\", 2, new Vector2(1, 0));\r\n            this.menuGroupHUD.AdjustTextObject(\"hudEnemy\", \"TextEnemy\", 3, new Vector2(2, 1));\r\n            //hud main display\r\n            //  parent obj\r\n            this.menuGroupHUD.AddMenuObject(\"hudMain\");\r\n            this.menuGroupHUD.AdjustMenuObject(\"hudMain\", 0, new Vector2(0, 0)); //position\r\n            this.menuGroupHUD.AdjustMenuObject(\"hudMain\", 1, new Vector2(500, 150)); //size\r\n            this.menuGroupHUD.AdjustMenuObject(\"hudMain\", 2, new Vector2(1, 0)); //alignment\r\n            this.menuGroupHUD.AdjustMenuColour(\"hudMain\", new Color4(0.2, 0.2, 0.2, 0));\r\n            //  frame\r\n            this.menuGroupHUD.AddImageObject(\"hudMain\", \"imgMain\", 2, 0, true);\r\n            this.menuGroupHUD.AdjustImageObject(\"hudMain\", \"imgMain\", 2, 1, new Vector2(0, 0));\r\n            this.menuGroupHUD.AdjustImageObject(\"hudMain\", \"imgMain\", 2, 2, new Vector2(1, 0));\r\n            this.menuGroupHUD.AdjustImageObject(\"hudMain\", \"imgMain\", 2, 3, new Vector2(0, 0.35), false);\r\n            //  game waves\r\n            this.menuGroupHUD.AddMenuText(\"hudMain\", \"TextWaves\", \"###\");\r\n            this.menuGroupHUD.AdjustTextDisplay(\"hudMain\", \"TextWaves\", 0, 18);\r\n            this.menuGroupHUD.AdjustTextObject(\"hudMain\", \"TextWaves\", 0, new Vector2(17, -16));\r\n            this.menuGroupHUD.AdjustTextObject(\"hudMain\", \"TextWaves\", 1, new Vector2(80, 0));\r\n            this.menuGroupHUD.AdjustTextObject(\"hudMain\", \"TextWaves\", 2, new Vector2(1, 0));\r\n            this.menuGroupHUD.AdjustTextObject(\"hudMain\", \"TextWaves\", 3, new Vector2(2, 1));\r\n            //  player health\r\n            this.menuGroupHUD.AddMenuText(\"hudMain\", \"TextLife\", \"####\");\r\n            this.menuGroupHUD.AdjustTextDisplay(\"hudMain\", \"TextLife\", 0, 18);\r\n            this.menuGroupHUD.AdjustTextObject(\"hudMain\", \"TextLife\", 0, new Vector2(-37, -44));\r\n            this.menuGroupHUD.AdjustTextObject(\"hudMain\", \"TextLife\", 1, new Vector2(60, 0));\r\n            this.menuGroupHUD.AdjustTextObject(\"hudMain\", \"TextLife\", 2, new Vector2(1, 0));\r\n            this.menuGroupHUD.AdjustTextObject(\"hudMain\", \"TextLife\", 3, new Vector2(2, 1));\r\n            //  player money\r\n            this.menuGroupHUD.AddMenuText(\"hudMain\", \"TextMoney\", \"####\");\r\n            this.menuGroupHUD.AdjustTextDisplay(\"hudMain\", \"TextMoney\", 0, 18);\r\n            this.menuGroupHUD.AdjustTextObject(\"hudMain\", \"TextMoney\", 0, new Vector2(120, -44));\r\n            this.menuGroupHUD.AdjustTextObject(\"hudMain\", \"TextMoney\", 1, new Vector2(60, 0));\r\n            this.menuGroupHUD.AdjustTextObject(\"hudMain\", \"TextMoney\", 2, new Vector2(1, 0));\r\n            this.menuGroupHUD.AdjustTextObject(\"hudMain\", \"TextMoney\", 3, new Vector2(2, 1));\r\n        };\r\n        GameMenu.prototype.setDifficulty = function (num) { log(\"game menu callback not set - set difficulty \" + num.toString()); };\r\n        GameMenu.prototype.gameReset = function () { log(\"game menu callback not set - reset game\"); };\r\n        GameMenu.prototype.gameStart = function () { log(\"game menu callback not set - start game\"); };\r\n        GameMenu.prototype.waveStart = function () { log(\"game menu callback not set - start wave\"); };\r\n        //setup\r\n        GameMenu.prototype.menuMainSetup = function () {\r\n            var _this = this;\r\n            //create overhead object\r\n            this.menuGroupMainMenu.AddMenuObject(\"menuOffset\", 0);\r\n            this.menuGroupMainMenu.AdjustMenuObject(\"menuOffset\", 0, new Vector3(0, 1.5, -1));\r\n            this.menuGroupMainMenu.AdjustMenuObject(\"menuOffset\", 1, new Vector3(1, 1, 1));\r\n            //MAIN GAME DETAILS\r\n            //  offset\r\n            this.menuGroupMainMenu.AddMenuObject(\"menuMainFrame\", 2, \"menuOffset\");\r\n            this.menuGroupMainMenu.AdjustMenuObject(\"menuMainFrame\", 0, new Vector3(0, 0, 0));\r\n            this.menuGroupMainMenu.AdjustMenuObject(\"menuMainFrame\", 1, new Vector3(1, 1, 1));\r\n            //  main menu display object\r\n            this.menuGroupMainMenu.AddMenuObject(\"menuMainInfo\", 0, \"menuOffset\");\r\n            this.menuGroupMainMenu.AdjustMenuObject(\"menuMainInfo\", 0, new Vector3(0, 0, 0.0125));\r\n            this.menuGroupMainMenu.AdjustMenuObject(\"menuMainInfo\", 1, new Vector3(1, 1, 1));\r\n            //  label header text\r\n            this.menuGroupMainMenu.AddMenuText(\"menuMainInfo\", \"menuLabel\", \"DCL TOWER DEFENCE\");\r\n            this.menuGroupMainMenu.AdjustTextObject(\"menuMainInfo\", \"menuLabel\", 0, new Vector3(0, 0.65, 0));\r\n            this.menuGroupMainMenu.AdjustTextObject(\"menuMainInfo\", \"menuLabel\", 1, new Vector3(0.4, 0.4, 1));\r\n            this.menuGroupMainMenu.AdjustTextDisplay(\"menuMainInfo\", \"menuLabel\", 0, 5);\r\n            //SESSION CONTROLS (GAME START)\r\n            //  offset\r\n            this.menuGroupMainMenu.AddMenuObject(\"gameStartContainer\", 0, \"menuOffset\");\r\n            this.menuGroupMainMenu.AdjustMenuObject(\"gameStartContainer\", 0, new Vector3(0, 0, 0));\r\n            this.menuGroupMainMenu.AdjustMenuObject(\"gameStartContainer\", 1, new Vector3(1, 1, 1));\r\n            //  label header text\r\n            this.menuGroupMainMenu.AddMenuText(\"gameStartContainer\", \"menuLabel\", \"SELECT GAME DIFFICULTY\");\r\n            this.menuGroupMainMenu.AdjustTextObject(\"gameStartContainer\", \"menuLabel\", 0, new Vector3(0, 0.3, 0));\r\n            this.menuGroupMainMenu.AdjustTextObject(\"gameStartContainer\", \"menuLabel\", 1, new Vector3(0.4, 0.4, 1));\r\n            this.menuGroupMainMenu.AdjustTextDisplay(\"gameStartContainer\", \"menuLabel\", 0, 4);\r\n            //  difficulty object\r\n            this.menuGroupMainMenu.AddMenuObject(\"interactDifficultyDisplay\", 4, \"gameStartContainer\");\r\n            this.menuGroupMainMenu.AdjustMenuObject(\"interactDifficultyDisplay\", 0, new Vector3(0.0, 0.05, 0));\r\n            this.menuGroupMainMenu.AdjustMenuObject(\"interactDifficultyDisplay\", 1, new Vector3(0.20, 0.15, 0.15));\r\n            //  difficulty label\r\n            this.menuGroupMainMenu.AddMenuText(\"interactDifficultyDisplay\", \"buttonLabel\", \"DIFFICULTY\");\r\n            this.menuGroupMainMenu.AdjustTextObject(\"interactDifficultyDisplay\", \"buttonLabel\", 0, new Vector3(0, 0, -0.04));\r\n            this.menuGroupMainMenu.AdjustTextObject(\"interactDifficultyDisplay\", \"buttonLabel\", 1, new Vector3(0.75, 1, 1));\r\n            this.menuGroupMainMenu.AdjustTextDisplay(\"interactDifficultyDisplay\", \"buttonLabel\", 0, 5);\r\n            //  difficulty next object\r\n            this.menuGroupMainMenu.AddMenuObject(\"interactDifficultyDec\", 3, \"gameStartContainer\");\r\n            this.menuGroupMainMenu.AdjustMenuObject(\"interactDifficultyDec\", 0, new Vector3(-0.45, 0.05, 0));\r\n            this.menuGroupMainMenu.AdjustMenuObject(\"interactDifficultyDec\", 1, new Vector3(0.15, 0.15, 0.15));\r\n            this.menuGroupMainMenu.GetMenuObject(\"interactDifficultyDec\").addComponent(\r\n            //add click action listener\r\n            new OnPointerDown(function (e) {\r\n                _this.SetDifficulty(game_states_7.GameState.DifficultyCur - 1);\r\n            }, { button: ActionButton.ANY, showFeedback: true, hoverText: \"INCREASE DIFFICULTY\", distance: 16 }));\r\n            //  difficulty next label\r\n            this.menuGroupMainMenu.AddMenuText(\"interactDifficultyDec\", \"buttonLabel\", \"PREV\");\r\n            this.menuGroupMainMenu.AdjustTextObject(\"interactDifficultyDec\", \"buttonLabel\", 0, new Vector3(0, 0, -0.04));\r\n            this.menuGroupMainMenu.AdjustTextObject(\"interactDifficultyDec\", \"buttonLabel\", 1, new Vector3(1, 1, 1));\r\n            this.menuGroupMainMenu.AdjustTextDisplay(\"interactDifficultyDec\", \"buttonLabel\", 0, 5);\r\n            //  difficulty next object\r\n            this.menuGroupMainMenu.AddMenuObject(\"interactDifficultyInc\", 3, \"gameStartContainer\");\r\n            this.menuGroupMainMenu.AdjustMenuObject(\"interactDifficultyInc\", 0, new Vector3(0.45, 0.05, 0));\r\n            this.menuGroupMainMenu.AdjustMenuObject(\"interactDifficultyInc\", 1, new Vector3(0.15, 0.15, 0.15));\r\n            this.menuGroupMainMenu.GetMenuObject(\"interactDifficultyInc\").addComponent(\r\n            //add click action listener\r\n            new OnPointerDown(function (e) {\r\n                _this.SetDifficulty(game_states_7.GameState.DifficultyCur + 1);\r\n            }, { button: ActionButton.ANY, showFeedback: true, hoverText: \"INCREASE DIFFICULTY\", distance: 16 }));\r\n            //  difficulty next label\r\n            this.menuGroupMainMenu.AddMenuText(\"interactDifficultyInc\", \"buttonLabel\", \"NEXT\");\r\n            this.menuGroupMainMenu.AdjustTextObject(\"interactDifficultyInc\", \"buttonLabel\", 0, new Vector3(0, 0, -0.04));\r\n            this.menuGroupMainMenu.AdjustTextObject(\"interactDifficultyInc\", \"buttonLabel\", 1, new Vector3(1, 1, 1));\r\n            this.menuGroupMainMenu.AdjustTextDisplay(\"interactDifficultyInc\", \"buttonLabel\", 0, 5);\r\n            //  game start obj\r\n            this.menuGroupMainMenu.AddMenuObject(\"interactGameStart\", 4, \"gameStartContainer\");\r\n            this.menuGroupMainMenu.AdjustMenuObject(\"interactGameStart\", 0, new Vector3(0.0, -0.55, 0));\r\n            this.menuGroupMainMenu.AdjustMenuObject(\"interactGameStart\", 1, new Vector3(0.15, 0.15, 0.15));\r\n            this.menuGroupMainMenu.GetMenuObject(\"interactGameStart\").addComponent(\r\n            //add click action listener\r\n            new OnPointerDown(function (e) {\r\n                _this.SetTowerMenuState(false);\r\n                _this.GameStart();\r\n            }, { button: ActionButton.ANY, showFeedback: true, hoverText: \"START GAME\", distance: 16 }));\r\n            //  game start label\r\n            this.menuGroupMainMenu.AddMenuText(\"interactGameStart\", \"buttonLabel\", \"START\");\r\n            this.menuGroupMainMenu.AdjustTextObject(\"interactGameStart\", \"buttonLabel\", 0, new Vector3(0, 0, -0.04));\r\n            this.menuGroupMainMenu.AdjustTextObject(\"interactGameStart\", \"buttonLabel\", 1, new Vector3(1, 1, 1));\r\n            this.menuGroupMainMenu.AdjustTextDisplay(\"interactGameStart\", \"buttonLabel\", 0, 5);\r\n            //SESSION CONTROLS (BETWEEN WAVES)\r\n            //  offset\r\n            this.menuGroupMainMenu.AddMenuObject(\"waveBreakContainer\", 0, \"menuOffset\");\r\n            this.menuGroupMainMenu.AdjustMenuObject(\"waveBreakContainer\", 0, new Vector3(0, 0, 0));\r\n            this.menuGroupMainMenu.AdjustMenuObject(\"waveBreakContainer\", 1, new Vector3(1, 1, 1));\r\n            //  label header text\r\n            this.menuGroupMainMenu.AddMenuText(\"waveBreakContainer\", \"menuLabel\", \"PREPARE YOUR DEFENCES!\");\r\n            this.menuGroupMainMenu.AdjustTextObject(\"waveBreakContainer\", \"menuLabel\", 0, new Vector3(0, 0.4, 0));\r\n            this.menuGroupMainMenu.AdjustTextObject(\"waveBreakContainer\", \"menuLabel\", 1, new Vector3(0.4, 0.4, 1));\r\n            this.menuGroupMainMenu.AdjustTextDisplay(\"waveBreakContainer\", \"menuLabel\", 0, 4);\r\n            //  wave label\r\n            this.menuGroupMainMenu.AddMenuText(\"waveBreakContainer\", \"waveLabel\", \"WAVE: 000 / 000\");\r\n            this.menuGroupMainMenu.AdjustTextObject(\"waveBreakContainer\", \"waveLabel\", 0, new Vector3(-0.6, 0.2, -0.04));\r\n            this.menuGroupMainMenu.AdjustTextObject(\"waveBreakContainer\", \"waveLabel\", 1, new Vector3(0.75, 0.75, 1));\r\n            this.menuGroupMainMenu.AdjustTextDisplay(\"waveBreakContainer\", \"waveLabel\", 0, 2);\r\n            this.menuGroupMainMenu.AdjustTextDisplay(\"waveBreakContainer\", \"waveLabel\", 1, 0);\r\n            //  enemy name label 0\r\n            this.menuGroupMainMenu.AddMenuText(\"waveBreakContainer\", \"enemyNameLabel0\", \"<ENEMY NAME>\");\r\n            this.menuGroupMainMenu.AdjustTextObject(\"waveBreakContainer\", \"enemyNameLabel0\", 0, new Vector3(-0.7, 0.025, -0.04));\r\n            this.menuGroupMainMenu.AdjustTextObject(\"waveBreakContainer\", \"enemyNameLabel0\", 1, new Vector3(1, 1, 1));\r\n            this.menuGroupMainMenu.AdjustTextDisplay(\"waveBreakContainer\", \"enemyNameLabel0\", 0, 1);\r\n            //  enemy stat label 0\r\n            this.menuGroupMainMenu.AddMenuText(\"waveBreakContainer\", \"enemyStatLabel0\", \"COUNT: 000\\nHEALTH: 000\\nARMOUR: 000\");\r\n            this.menuGroupMainMenu.AdjustTextObject(\"waveBreakContainer\", \"enemyStatLabel0\", 0, new Vector3(-1.0, -0.15, -0.04));\r\n            this.menuGroupMainMenu.AdjustTextObject(\"waveBreakContainer\", \"enemyStatLabel0\", 1, new Vector3(0.65, 0.65, 1));\r\n            this.menuGroupMainMenu.AdjustTextDisplay(\"waveBreakContainer\", \"enemyStatLabel0\", 0, 1);\r\n            this.menuGroupMainMenu.AdjustTextDisplay(\"waveBreakContainer\", \"enemyStatLabel0\", 1, 0);\r\n            //  enemy name label 1\r\n            this.menuGroupMainMenu.AddMenuText(\"waveBreakContainer\", \"enemyNameLabel1\", \"<ENEMY NAME>\");\r\n            this.menuGroupMainMenu.AdjustTextObject(\"waveBreakContainer\", \"enemyNameLabel1\", 0, new Vector3(0.7, 0.025, -0.04));\r\n            this.menuGroupMainMenu.AdjustTextObject(\"waveBreakContainer\", \"enemyNameLabel1\", 1, new Vector3(1, 1, 1));\r\n            this.menuGroupMainMenu.AdjustTextDisplay(\"waveBreakContainer\", \"enemyNameLabel1\", 0, 1);\r\n            //  enemy stat label 1\r\n            this.menuGroupMainMenu.AddMenuText(\"waveBreakContainer\", \"enemyStatLabel1\", \"COUNT: 000\\nHEALTH: 000\\nARMOUR: 000\");\r\n            this.menuGroupMainMenu.AdjustTextObject(\"waveBreakContainer\", \"enemyStatLabel1\", 0, new Vector3(0.4, -0.15, -0.04));\r\n            this.menuGroupMainMenu.AdjustTextObject(\"waveBreakContainer\", \"enemyStatLabel1\", 1, new Vector3(0.65, 0.65, 1));\r\n            this.menuGroupMainMenu.AdjustTextDisplay(\"waveBreakContainer\", \"enemyStatLabel1\", 0, 1);\r\n            this.menuGroupMainMenu.AdjustTextDisplay(\"waveBreakContainer\", \"enemyStatLabel1\", 1, 0);\r\n            //  wave start button\r\n            this.menuGroupMainMenu.AddMenuObject(\"interactWaveStart\", 4, \"waveBreakContainer\");\r\n            this.menuGroupMainMenu.AdjustMenuObject(\"interactWaveStart\", 0, new Vector3(-0.25, -0.55, 0));\r\n            this.menuGroupMainMenu.AdjustMenuObject(\"interactWaveStart\", 1, new Vector3(0.15, 0.15, 0.15));\r\n            this.menuGroupMainMenu.GetMenuObject(\"interactWaveStart\").addComponent(\r\n            //add click action listener\r\n            new OnPointerDown(function (e) {\r\n                _this.SetTowerMenuState(false);\r\n                _this.WaveStart();\r\n            }, { button: ActionButton.ANY, showFeedback: true, hoverText: \"START WAVE\", distance: 16 }));\r\n            //  wave start label\r\n            this.menuGroupMainMenu.AddMenuText(\"interactWaveStart\", \"buttonLabel\", \"START\\nWAVE\");\r\n            this.menuGroupMainMenu.AdjustTextObject(\"interactWaveStart\", \"buttonLabel\", 0, new Vector3(0, 0, -0.04));\r\n            this.menuGroupMainMenu.AdjustTextObject(\"interactWaveStart\", \"buttonLabel\", 1, new Vector3(1, 1, 1));\r\n            this.menuGroupMainMenu.AdjustTextDisplay(\"interactWaveStart\", \"buttonLabel\", 0, 5);\r\n            //  game reset button\r\n            this.menuGroupMainMenu.AddMenuObject(\"interactGameReset\", 4, \"waveBreakContainer\");\r\n            this.menuGroupMainMenu.AdjustMenuObject(\"interactGameReset\", 0, new Vector3(0.25, -0.55, 0));\r\n            this.menuGroupMainMenu.AdjustMenuObject(\"interactGameReset\", 1, new Vector3(0.15, 0.15, 0.15));\r\n            this.menuGroupMainMenu.GetMenuObject(\"interactGameReset\").addComponent(\r\n            //add click action listener\r\n            new OnPointerDown(function (e) {\r\n                _this.SetTowerMenuState(false);\r\n                _this.GameReset();\r\n            }, { button: ActionButton.ANY, showFeedback: true, hoverText: \"RESET GAME\", distance: 16 }));\r\n            //  game reset label\r\n            this.menuGroupMainMenu.AddMenuText(\"interactGameReset\", \"buttonLabel\", \"RESET\\nGAME\");\r\n            this.menuGroupMainMenu.AdjustTextObject(\"interactGameReset\", \"buttonLabel\", 0, new Vector3(0, 0, -0.04));\r\n            this.menuGroupMainMenu.AdjustTextObject(\"interactGameReset\", \"buttonLabel\", 1, new Vector3(1, 1, 1));\r\n            this.menuGroupMainMenu.AdjustTextDisplay(\"interactGameReset\", \"buttonLabel\", 0, 5);\r\n            //SESSION CONTROLS (DURING WAVE)\r\n            //  offset\r\n            this.menuGroupMainMenu.AddMenuObject(\"waveOnGoingContainer\", 0, \"menuOffset\");\r\n            this.menuGroupMainMenu.AdjustMenuObject(\"waveOnGoingContainer\", 0, new Vector3(0, 0, 0));\r\n            this.menuGroupMainMenu.AdjustMenuObject(\"waveOnGoingContainer\", 1, new Vector3(1, 1, 1));\r\n            //  label header text\r\n            this.menuGroupMainMenu.AddMenuText(\"waveOnGoingContainer\", \"menuLabel\", \"DEFEND YOUR BASE!\");\r\n            this.menuGroupMainMenu.AdjustTextObject(\"waveOnGoingContainer\", \"menuLabel\", 0, new Vector3(0, 0.4, 0));\r\n            this.menuGroupMainMenu.AdjustTextObject(\"waveOnGoingContainer\", \"menuLabel\", 1, new Vector3(0.4, 0.4, 1));\r\n            this.menuGroupMainMenu.AdjustTextDisplay(\"waveOnGoingContainer\", \"menuLabel\", 0, 4);\r\n            //  wave label\r\n            this.menuGroupMainMenu.AddMenuText(\"waveOnGoingContainer\", \"waveLabel\", \"WAVE: 000 / 000\");\r\n            this.menuGroupMainMenu.AdjustTextObject(\"waveOnGoingContainer\", \"waveLabel\", 0, new Vector3(-0.6, 0.2, -0.04));\r\n            this.menuGroupMainMenu.AdjustTextObject(\"waveOnGoingContainer\", \"waveLabel\", 1, new Vector3(0.75, 0.75, 1));\r\n            this.menuGroupMainMenu.AdjustTextDisplay(\"waveOnGoingContainer\", \"waveLabel\", 0, 2);\r\n            this.menuGroupMainMenu.AdjustTextDisplay(\"waveOnGoingContainer\", \"waveLabel\", 1, 0);\r\n            //  enemy count label\r\n            this.menuGroupMainMenu.AddMenuText(\"waveOnGoingContainer\", \"enemyCountLabel\", \"ENEMIES: 000\");\r\n            this.menuGroupMainMenu.AdjustTextObject(\"waveOnGoingContainer\", \"enemyCountLabel\", 0, new Vector3(-0.6, 0.025, -0.04));\r\n            this.menuGroupMainMenu.AdjustTextObject(\"waveOnGoingContainer\", \"enemyCountLabel\", 1, new Vector3(0.75, 0.75, 1));\r\n            this.menuGroupMainMenu.AdjustTextDisplay(\"waveOnGoingContainer\", \"enemyCountLabel\", 0, 2);\r\n            this.menuGroupMainMenu.AdjustTextDisplay(\"waveOnGoingContainer\", \"enemyCountLabel\", 1, 0);\r\n            //  game reset button\r\n            this.menuGroupMainMenu.AddMenuObject(\"interactGameReset\", 4, \"waveOnGoingContainer\");\r\n            this.menuGroupMainMenu.AdjustMenuObject(\"interactGameReset\", 0, new Vector3(0.25, -0.55, 0));\r\n            this.menuGroupMainMenu.AdjustMenuObject(\"interactGameReset\", 1, new Vector3(0.15, 0.15, 0.15));\r\n            this.menuGroupMainMenu.GetMenuObject(\"interactGameReset\").addComponent(\r\n            //add click action listener\r\n            new OnPointerDown(function (e) {\r\n                _this.SetTowerMenuState(false);\r\n                _this.GameReset();\r\n            }, { button: ActionButton.ANY, showFeedback: true, hoverText: \"RESET GAME\", distance: 16 }));\r\n            //  game reset label\r\n            this.menuGroupMainMenu.AddMenuText(\"interactGameReset\", \"buttonLabel\", \"RESET\\nGAME\");\r\n            this.menuGroupMainMenu.AdjustTextObject(\"interactGameReset\", \"buttonLabel\", 0, new Vector3(0, 0, -0.04));\r\n            this.menuGroupMainMenu.AdjustTextObject(\"interactGameReset\", \"buttonLabel\", 1, new Vector3(1, 1, 1));\r\n            this.menuGroupMainMenu.AdjustTextDisplay(\"interactGameReset\", \"buttonLabel\", 0, 5);\r\n            //SESSION CONTROLS (GAME END)\r\n            //  offset\r\n            this.menuGroupMainMenu.AddMenuObject(\"gameEndContainer\", 0, \"menuOffset\");\r\n            this.menuGroupMainMenu.AdjustMenuObject(\"gameEndContainer\", 0, new Vector3(0, 0, 0));\r\n            this.menuGroupMainMenu.AdjustMenuObject(\"gameEndContainer\", 1, new Vector3(1, 1, 1));\r\n            //  label header text\r\n            this.menuGroupMainMenu.AddMenuText(\"gameEndContainer\", \"menuLabel\", \"GAME OVER: ######!\");\r\n            this.menuGroupMainMenu.AdjustTextObject(\"gameEndContainer\", \"menuLabel\", 0, new Vector3(0, 0.4, 0));\r\n            this.menuGroupMainMenu.AdjustTextObject(\"gameEndContainer\", \"menuLabel\", 1, new Vector3(0.4, 0.4, 1));\r\n            this.menuGroupMainMenu.AdjustTextDisplay(\"gameEndContainer\", \"menuLabel\", 0, 4);\r\n            //  wave label\r\n            this.menuGroupMainMenu.AddMenuText(\"gameEndContainer\", \"waveLabel\", \"WAVES COMPLETED: 000 / 000\");\r\n            this.menuGroupMainMenu.AdjustTextObject(\"gameEndContainer\", \"waveLabel\", 0, new Vector3(-0.6, 0.2, -0.04));\r\n            this.menuGroupMainMenu.AdjustTextObject(\"gameEndContainer\", \"waveLabel\", 1, new Vector3(0.75, 0.75, 1));\r\n            this.menuGroupMainMenu.AdjustTextDisplay(\"gameEndContainer\", \"waveLabel\", 0, 2);\r\n            this.menuGroupMainMenu.AdjustTextDisplay(\"gameEndContainer\", \"waveLabel\", 1, 0);\r\n            //  enemy count label\r\n            this.menuGroupMainMenu.AddMenuText(\"gameEndContainer\", \"enemyCountLabel\", \"ENEMIES SLAIN: 000\");\r\n            this.menuGroupMainMenu.AdjustTextObject(\"gameEndContainer\", \"enemyCountLabel\", 0, new Vector3(-0.6, 0.025, -0.04));\r\n            this.menuGroupMainMenu.AdjustTextObject(\"gameEndContainer\", \"enemyCountLabel\", 1, new Vector3(0.75, 0.75, 1));\r\n            this.menuGroupMainMenu.AdjustTextDisplay(\"gameEndContainer\", \"enemyCountLabel\", 0, 2);\r\n            this.menuGroupMainMenu.AdjustTextDisplay(\"gameEndContainer\", \"enemyCountLabel\", 1, 0);\r\n            //  game reset button\r\n            this.menuGroupMainMenu.AddMenuObject(\"interactGameReset\", 4, \"gameEndContainer\");\r\n            this.menuGroupMainMenu.AdjustMenuObject(\"interactGameReset\", 0, new Vector3(0.25, -0.55, 0));\r\n            this.menuGroupMainMenu.AdjustMenuObject(\"interactGameReset\", 1, new Vector3(0.15, 0.15, 0.15));\r\n            this.menuGroupMainMenu.GetMenuObject(\"interactGameReset\").addComponent(\r\n            //add click action listener\r\n            new OnPointerDown(function (e) {\r\n                _this.SetTowerMenuState(false);\r\n                _this.GameReset();\r\n            }, { button: ActionButton.ANY, showFeedback: true, hoverText: \"RESET GAME\", distance: 16 }));\r\n            //  game reset label\r\n            this.menuGroupMainMenu.AddMenuText(\"interactGameReset\", \"buttonLabel\", \"RESET\\nGAME\");\r\n            this.menuGroupMainMenu.AdjustTextObject(\"interactGameReset\", \"buttonLabel\", 0, new Vector3(0, 0, -0.04));\r\n            this.menuGroupMainMenu.AdjustTextObject(\"interactGameReset\", \"buttonLabel\", 1, new Vector3(1, 1, 1));\r\n            this.menuGroupMainMenu.AdjustTextDisplay(\"interactGameReset\", \"buttonLabel\", 0, 5);\r\n            //enable main menu\r\n            this.menuGroupMainMenu.SetMenuState(true);\r\n        };\r\n        //updates\r\n        //  update difficulty display\r\n        GameMenu.prototype.updateDifficulty = function () {\r\n            //3d\r\n            this.menuGroupMainMenu.SetMenuText(\"interactDifficultyDisplay\", \"buttonLabel\", difficulty_data_3.DifficultyData[game_states_7.GameState.DifficultyCur].DisplayName);\r\n        };\r\n        //updates life count\r\n        GameMenu.prototype.updateLifeCount = function () {\r\n            //2d\r\n            this.menuGroupHUD.SetMenuText(\"hudMain\", \"TextLife\", game_states_7.GameState.PlayerHealth.toString());\r\n        };\r\n        //updates money count\r\n        GameMenu.prototype.updateMoneyCount = function () {\r\n            //2d\r\n            this.menuGroupHUD.SetMenuText(\"hudMain\", \"TextMoney\", game_states_7.GameState.PlayerMoney.toString());\r\n        };\r\n        //  update wave count\r\n        GameMenu.prototype.UpdateWaveCount = function () {\r\n            //2d\r\n            this.menuGroupHUD.SetMenuText(\"hudMain\", \"TextWaves\", game_states_7.GameState.WaveCur.toString());\r\n            //3d\r\n            this.menuGroupMainMenu.SetMenuText(\"waveOnGoingContainer\", \"waveLabel\", \"WAVE: \" + game_states_7.GameState.WaveCur.toString() + \" / \"\r\n                + game_states_7.GameState.WaveMax.toString());\r\n        };\r\n        //  update enemy count\r\n        GameMenu.prototype.UpdateEnemyCount = function () {\r\n            //2d\r\n            this.menuGroupHUD.SetMenuText(\"hudEnemy\", \"TextEnemy\", enemy_manager_2.EnemyUnitManager.Instance.enemySizeCur.toString());\r\n            //3d\r\n            this.menuGroupMainMenu.SetMenuText(\"waveOnGoingContainer\", \"enemyCountLabel\", \"ENEMIES: \" + enemy_manager_2.EnemyUnitManager.Instance.enemySizeCur);\r\n        };\r\n        //  update enemy type\r\n        GameMenu.prototype.UpdateEnemyTypes = function () {\r\n            //same enemy types\r\n            if (enemy_wave_manager_1.EnemyWaveManager.Instance.GetEnemyUnitType(game_states_7.GameState.WaveCur, 0) == enemy_wave_manager_1.EnemyWaveManager.Instance.GetEnemyUnitType(game_states_7.GameState.WaveCur, 1)) {\r\n                //enemy 0\r\n                this.menuGroupMainMenu.SetMenuText(\"waveBreakContainer\", \"enemyNameLabel0\", enemy_data_4.EnemyData[enemy_wave_manager_1.EnemyWaveManager.Instance.GetEnemyUnitType(game_states_7.GameState.WaveCur, 0)].DisplayName);\r\n                this.menuGroupMainMenu.SetMenuText(\"waveBreakContainer\", \"enemyStatLabel0\", \"COUNT: \" + (enemy_wave_manager_1.EnemyWaveManager.Instance.GetEnemyUnitCount(game_states_7.GameState.WaveCur, 0)\r\n                    + enemy_wave_manager_1.EnemyWaveManager.Instance.GetEnemyUnitCount(game_states_7.GameState.WaveCur, 1))\r\n                    + \"\\nHEALTH: \" + enemy_entity_2.EnemyUnitObject.CalcHealth(enemy_wave_manager_1.EnemyWaveManager.Instance.GetEnemyUnitType(game_states_7.GameState.WaveCur, 0), game_states_7.GameState.WaveCur)\r\n                    + \"\\nARMOUR: \" + enemy_entity_2.EnemyUnitObject.CalcArmour(enemy_wave_manager_1.EnemyWaveManager.Instance.GetEnemyUnitType(game_states_7.GameState.WaveCur, 0), game_states_7.GameState.WaveCur));\r\n                //enemy 1\r\n                this.menuGroupMainMenu.SetMenuText(\"waveBreakContainer\", \"enemyNameLabel1\", \"\");\r\n                this.menuGroupMainMenu.SetMenuText(\"waveBreakContainer\", \"enemyStatLabel1\", \"\");\r\n            }\r\n            //different enemy types\r\n            else {\r\n                //enemy 0\r\n                this.menuGroupMainMenu.SetMenuText(\"waveBreakContainer\", \"enemyNameLabel0\", enemy_data_4.EnemyData[enemy_wave_manager_1.EnemyWaveManager.Instance.GetEnemyUnitType(game_states_7.GameState.WaveCur, 0)].DisplayName);\r\n                this.menuGroupMainMenu.SetMenuText(\"waveBreakContainer\", \"enemyStatLabel0\", \"COUNT: \" + enemy_wave_manager_1.EnemyWaveManager.Instance.GetEnemyUnitCount(game_states_7.GameState.WaveCur, 0)\r\n                    + \"\\nHEALTH: \" + enemy_entity_2.EnemyUnitObject.CalcHealth(enemy_wave_manager_1.EnemyWaveManager.Instance.GetEnemyUnitType(game_states_7.GameState.WaveCur, 0), game_states_7.GameState.WaveCur)\r\n                    + \"\\nARMOUR: \" + enemy_entity_2.EnemyUnitObject.CalcArmour(enemy_wave_manager_1.EnemyWaveManager.Instance.GetEnemyUnitType(game_states_7.GameState.WaveCur, 0), game_states_7.GameState.WaveCur));\r\n                //enemy 1\r\n                this.menuGroupMainMenu.SetMenuText(\"waveBreakContainer\", \"enemyNameLabel1\", enemy_data_4.EnemyData[enemy_wave_manager_1.EnemyWaveManager.Instance.GetEnemyUnitType(game_states_7.GameState.WaveCur, 1)].DisplayName);\r\n                this.menuGroupMainMenu.SetMenuText(\"waveBreakContainer\", \"enemyStatLabel1\", \"COUNT: \" + enemy_wave_manager_1.EnemyWaveManager.Instance.GetEnemyUnitCount(game_states_7.GameState.WaveCur, 1)\r\n                    + \"\\nHEALTH: \" + enemy_entity_2.EnemyUnitObject.CalcHealth(enemy_wave_manager_1.EnemyWaveManager.Instance.GetEnemyUnitType(game_states_7.GameState.WaveCur, 1), game_states_7.GameState.WaveCur)\r\n                    + \"\\nARMOUR: \" + enemy_entity_2.EnemyUnitObject.CalcArmour(enemy_wave_manager_1.EnemyWaveManager.Instance.GetEnemyUnitType(game_states_7.GameState.WaveCur, 1), game_states_7.GameState.WaveCur));\r\n            }\r\n        };\r\n        //  change menu state\r\n        GameMenu.prototype.UpdateMainMenuState = function (state, result) {\r\n            if (result === void 0) { result = true; }\r\n            //disable all menus by default\r\n            //  2d\r\n            this.menuGroupHUD.GetMenuObject(\"hudEnemy\").rect.visible = false;\r\n            //  3d\r\n            this.menuGroupMainMenu.GetMenuObject(\"gameStartContainer\").SetObjectState(false);\r\n            this.menuGroupMainMenu.GetMenuObject(\"waveBreakContainer\").SetObjectState(false);\r\n            this.menuGroupMainMenu.GetMenuObject(\"waveOnGoingContainer\").SetObjectState(false);\r\n            this.menuGroupMainMenu.GetMenuObject(\"gameEndContainer\").SetObjectState(false);\r\n            //set new menu state\r\n            switch (state) {\r\n                //game start\r\n                case 0:\r\n                    this.menuGroupMainMenu.GetMenuObject(\"gameStartContainer\").SetObjectState(true);\r\n                    break;\r\n                //between wave\r\n                case 1:\r\n                    //update wave count\r\n                    this.menuGroupMainMenu.SetMenuText(\"waveBreakContainer\", \"waveLabel\", \"WAVE: \" + (game_states_7.GameState.WaveCur + 1) + \" / \"\r\n                        + game_states_7.GameState.WaveMax.toString());\r\n                    //display enemy types in wave\r\n                    this.UpdateEnemyTypes();\r\n                    //enable menu\r\n                    this.menuGroupMainMenu.GetMenuObject(\"waveBreakContainer\").SetObjectState(true);\r\n                    break;\r\n                //on-going wave\r\n                case 2:\r\n                    //update wave count\r\n                    this.menuGroupMainMenu.SetMenuText(\"waveOnGoingContainer\", \"waveLabel\", \"WAVE: \" + (game_states_7.GameState.WaveCur + 1) + \" / \"\r\n                        + game_states_7.GameState.WaveMax.toString());\r\n                    //redraw enemy count\r\n                    GameMenu.Instance.UpdateEnemyCount();\r\n                    this.menuGroupHUD.GetMenuObject(\"hudEnemy\").rect.visible = true;\r\n                    //enable menu\r\n                    this.menuGroupMainMenu.GetMenuObject(\"waveOnGoingContainer\").SetObjectState(true);\r\n                    break;\r\n                //game over summary\r\n                case 3:\r\n                    this.menuGroupMainMenu.GetMenuObject(\"gameEndContainer\").SetObjectState(true);\r\n                    //process based on win/loss\r\n                    if (result) {\r\n                        this.menuGroupMainMenu.SetMenuText(\"gameEndContainer\", \"menuLabel\", \"GAME OVER: VICTORY!\");\r\n                    }\r\n                    else {\r\n                        this.menuGroupMainMenu.SetMenuText(\"gameEndContainer\", \"menuLabel\", \"GAME OVER: DEFEAT!\");\r\n                    }\r\n                    break;\r\n            }\r\n        };\r\n        GameMenu.prototype.towerBuild = function () { log(\"game menu callback not set - build tower\"); };\r\n        GameMenu.prototype.towerDeconstruct = function () { log(\"game menu callback not set - deconstruct tower\"); };\r\n        //setup\r\n        GameMenu.prototype.menuTowerSetup = function () {\r\n            var _this = this;\r\n            //create overhead object\r\n            this.menuGroupTower.AddMenuObject(\"menuOffset\", 0);\r\n            this.menuGroupTower.AdjustMenuObject(\"menuOffset\", 0, new Vector3(0, 1.5, -1));\r\n            this.menuGroupTower.AdjustMenuObject(\"menuOffset\", 1, new Vector3(1, 1, 1));\r\n            //TOWER DETAILS\r\n            //  selected tower display object\r\n            this.menuGroupTower.AddMenuObject(\"selectionInfoFrame\", 2, \"menuOffset\");\r\n            this.menuGroupTower.AdjustMenuObject(\"selectionInfoFrame\", 0, new Vector3(0, 0, 0));\r\n            this.menuGroupTower.AdjustMenuObject(\"selectionInfoFrame\", 1, new Vector3(1, 1, 1));\r\n            //  selected tower display object\r\n            this.menuGroupTower.AddMenuObject(\"selectionInfo\", 0, \"menuOffset\");\r\n            this.menuGroupTower.AdjustMenuObject(\"selectionInfo\", 0, new Vector3(0, 0, 0.0125));\r\n            this.menuGroupTower.AdjustMenuObject(\"selectionInfo\", 1, new Vector3(1, 1, 1));\r\n            //  label header text\r\n            this.menuGroupTower.AddMenuText(\"selectionInfo\", \"menuLabel\", \"MENU LABEL\");\r\n            this.menuGroupTower.AdjustTextObject(\"selectionInfo\", \"menuLabel\", 0, new Vector3(0, 0.65, 0));\r\n            this.menuGroupTower.AdjustTextObject(\"selectionInfo\", \"menuLabel\", 1, new Vector3(0.4, 0.4, 1));\r\n            this.menuGroupTower.AdjustTextDisplay(\"selectionInfo\", \"menuLabel\", 0, 4);\r\n            //  deconstruct tower object\r\n            this.menuGroupTower.AddMenuObject(\"interactDeconstruct\", 5, \"selectionInfo\");\r\n            this.menuGroupTower.AdjustMenuObject(\"interactDeconstruct\", 0, new Vector3(-1.0, 0.65, 0));\r\n            this.menuGroupTower.AdjustMenuObject(\"interactDeconstruct\", 1, new Vector3(0.15, 0.15, 0.15));\r\n            this.menuGroupTower.GetMenuObject(\"interactDeconstruct\").addComponent(\r\n            //add click action listener\r\n            new OnPointerDown(function (e) {\r\n                _this.TowerDeconstruct();\r\n            }, { button: ActionButton.ANY, showFeedback: true, hoverText: \"Deconstruct Tower\", distance: 16 }));\r\n            //  deconstruction label\r\n            this.menuGroupTower.AddMenuText(\"interactDeconstruct\", \"buttonLabel\", \"REFUND\");\r\n            this.menuGroupTower.AdjustTextObject(\"interactDeconstruct\", \"buttonLabel\", 0, new Vector3(0, 0, -0.04));\r\n            this.menuGroupTower.AdjustTextObject(\"interactDeconstruct\", \"buttonLabel\", 1, new Vector3(1, 1, 1));\r\n            this.menuGroupTower.AdjustTextDisplay(\"interactDeconstruct\", \"buttonLabel\", 0, 5);\r\n            //  toggle tower range object\r\n            this.menuGroupTower.AddMenuObject(\"interactToggleRange\", 5, \"selectionInfo\");\r\n            this.menuGroupTower.AdjustMenuObject(\"interactToggleRange\", 0, new Vector3(1.0, 0.50, 0));\r\n            this.menuGroupTower.AdjustMenuObject(\"interactToggleRange\", 1, new Vector3(0.15, 0.15, 0.15));\r\n            this.menuGroupTower.GetMenuObject(\"interactToggleRange\").addComponent(\r\n            //add click action listener\r\n            new OnPointerDown(function (e) {\r\n                //if tower is built\r\n                if (_this.selectedTowerFoundation != undefined && _this.selectedTowerFoundation.TowerFrame.TowerDef != -1) {\r\n                    _this.selectedTowerFoundation.TowerFrame.ToggleRangeIndicator();\r\n                }\r\n            }, { button: ActionButton.ANY, showFeedback: true, hoverText: \"Toggle Range Visibility\", distance: 16 }));\r\n            //  range label\r\n            this.menuGroupTower.AddMenuText(\"interactToggleRange\", \"buttonLabel\", \"RANGE\");\r\n            this.menuGroupTower.AdjustTextObject(\"interactToggleRange\", \"buttonLabel\", 0, new Vector3(0, 0, -0.04));\r\n            this.menuGroupTower.AdjustTextObject(\"interactToggleRange\", \"buttonLabel\", 1, new Vector3(1, 1, 1));\r\n            this.menuGroupTower.AdjustTextDisplay(\"interactToggleRange\", \"buttonLabel\", 0, 5);\r\n            //  close tower menu\r\n            this.menuGroupTower.AddMenuObject(\"interactClose\", 5, \"selectionInfo\");\r\n            this.menuGroupTower.AdjustMenuObject(\"interactClose\", 0, new Vector3(1, 0.65, 0));\r\n            this.menuGroupTower.AdjustMenuObject(\"interactClose\", 1, new Vector3(0.15, 0.15, 0.15));\r\n            this.menuGroupTower.GetMenuObject(\"interactClose\").addComponent(\r\n            //add click action listener\r\n            new OnPointerDown(function (e) {\r\n                _this.SetTowerMenuState(false);\r\n            }, { button: ActionButton.ANY, showFeedback: true, hoverText: \"Close Menu\", distance: 16 }));\r\n            //  close label\r\n            this.menuGroupTower.AddMenuText(\"interactClose\", \"buttonLabel\", \"CLOSE\");\r\n            this.menuGroupTower.AdjustTextObject(\"interactClose\", \"buttonLabel\", 0, new Vector3(0, 0, -0.04));\r\n            this.menuGroupTower.AdjustTextObject(\"interactClose\", \"buttonLabel\", 1, new Vector3(1, 1, 1));\r\n            this.menuGroupTower.AdjustTextDisplay(\"interactClose\", \"buttonLabel\", 0, 5);\r\n            //  tower name\r\n            this.menuGroupTower.AddMenuText(\"selectionInfo\", \"towerNameText\", \"TOWER_NAME\");\r\n            this.menuGroupTower.AdjustTextObject(\"selectionInfo\", \"towerNameText\", 0, new Vector3(0, 0.4, 0));\r\n            this.menuGroupTower.AdjustTextObject(\"selectionInfo\", \"towerNameText\", 1, new Vector3(0.25, 0.25, 0.25));\r\n            this.menuGroupTower.AdjustTextDisplay(\"selectionInfo\", \"towerNameText\", 0, 6);\r\n            //  tower desc\r\n            this.menuGroupTower.AddMenuText(\"selectionInfo\", \"descText\", \"TOWER_DESC\");\r\n            this.menuGroupTower.AdjustTextObject(\"selectionInfo\", \"descText\", 0, new Vector3(0, 0.3, 0));\r\n            this.menuGroupTower.AdjustTextObject(\"selectionInfo\", \"descText\", 1, new Vector3(0.25, 0.25, 0.25));\r\n            this.menuGroupTower.AdjustTextDisplay(\"selectionInfo\", \"descText\", 0, 4);\r\n            this.menuGroupTower.AdjustTextDisplay(\"selectionInfo\", \"descText\", 2, 0);\r\n            this.menuGroupTower.GetMenuObjectText(\"selectionInfo\", \"descText\").getComponent(TextShape).width = 10;\r\n            this.menuGroupTower.GetMenuObjectText(\"selectionInfo\", \"descText\").getComponent(TextShape).textWrapping = true;\r\n            //  tower damage\r\n            //      text\r\n            this.menuGroupTower.AddMenuText(\"selectionInfo\", \"dmgLabel\", \"DAMAGE:\");\r\n            this.menuGroupTower.AdjustTextObject(\"selectionInfo\", \"dmgLabel\", 0, new Vector3(-0.85, -0.25, 0));\r\n            this.menuGroupTower.AdjustTextObject(\"selectionInfo\", \"dmgLabel\", 1, new Vector3(0.25, 0.25, 0.25));\r\n            this.menuGroupTower.AdjustTextDisplay(\"selectionInfo\", \"dmgLabel\", 0, 3);\r\n            this.menuGroupTower.AdjustTextDisplay(\"selectionInfo\", \"dmgLabel\", 1, 0);\r\n            //      value\r\n            this.menuGroupTower.AddMenuText(\"selectionInfo\", \"dmgValue\", \"###\");\r\n            this.menuGroupTower.AdjustTextObject(\"selectionInfo\", \"dmgValue\", 0, new Vector3(-0.5, -0.25, 0));\r\n            this.menuGroupTower.AdjustTextObject(\"selectionInfo\", \"dmgValue\", 1, new Vector3(0.25, 0.25, 0.25));\r\n            this.menuGroupTower.AdjustTextDisplay(\"selectionInfo\", \"dmgValue\", 0, 3);\r\n            this.menuGroupTower.AdjustTextDisplay(\"selectionInfo\", \"dmgValue\", 1, 0);\r\n            //  tower speed\r\n            //      text\r\n            this.menuGroupTower.AddMenuText(\"selectionInfo\", \"rofLabel\", \"RoF:\");\r\n            this.menuGroupTower.AdjustTextObject(\"selectionInfo\", \"rofLabel\", 0, new Vector3(-0.85, -0.35, 0));\r\n            this.menuGroupTower.AdjustTextObject(\"selectionInfo\", \"rofLabel\", 1, new Vector3(0.25, 0.25, 0.25));\r\n            this.menuGroupTower.AdjustTextDisplay(\"selectionInfo\", \"rofLabel\", 0, 3);\r\n            this.menuGroupTower.AdjustTextDisplay(\"selectionInfo\", \"rofLabel\", 1, 0);\r\n            //      value\r\n            this.menuGroupTower.AddMenuText(\"selectionInfo\", \"rofValue\", \"###\");\r\n            this.menuGroupTower.AdjustTextObject(\"selectionInfo\", \"rofValue\", 0, new Vector3(-0.68, -0.35, 0));\r\n            this.menuGroupTower.AdjustTextObject(\"selectionInfo\", \"rofValue\", 1, new Vector3(0.25, 0.25, 0.25));\r\n            this.menuGroupTower.AdjustTextDisplay(\"selectionInfo\", \"rofValue\", 0, 3);\r\n            this.menuGroupTower.AdjustTextDisplay(\"selectionInfo\", \"rofValue\", 1, 0);\r\n            //  tower rend\r\n            //      text\r\n            this.menuGroupTower.AddMenuText(\"selectionInfo\", \"rendLabel\", \"REND:\");\r\n            this.menuGroupTower.AdjustTextObject(\"selectionInfo\", \"rendLabel\", 0, new Vector3(-0.15, -0.25, 0));\r\n            this.menuGroupTower.AdjustTextObject(\"selectionInfo\", \"rendLabel\", 1, new Vector3(0.25, 0.25, 0.25));\r\n            this.menuGroupTower.AdjustTextDisplay(\"selectionInfo\", \"rendLabel\", 0, 3);\r\n            this.menuGroupTower.AdjustTextDisplay(\"selectionInfo\", \"rendLabel\", 1, 0);\r\n            //      value\r\n            this.menuGroupTower.AddMenuText(\"selectionInfo\", \"rendValue\", \"###\");\r\n            this.menuGroupTower.AdjustTextObject(\"selectionInfo\", \"rendValue\", 0, new Vector3(0.1, -0.25, 0));\r\n            this.menuGroupTower.AdjustTextObject(\"selectionInfo\", \"rendValue\", 1, new Vector3(0.25, 0.25, 0.25));\r\n            this.menuGroupTower.AdjustTextDisplay(\"selectionInfo\", \"rendValue\", 0, 3);\r\n            this.menuGroupTower.AdjustTextDisplay(\"selectionInfo\", \"rendValue\", 1, 0);\r\n            //  tower pen\r\n            //      text\r\n            this.menuGroupTower.AddMenuText(\"selectionInfo\", \"penLabel\", \"PEN:\");\r\n            this.menuGroupTower.AdjustTextObject(\"selectionInfo\", \"penLabel\", 0, new Vector3(-0.15, -0.35, 0));\r\n            this.menuGroupTower.AdjustTextObject(\"selectionInfo\", \"penLabel\", 1, new Vector3(0.25, 0.25, 0.25));\r\n            this.menuGroupTower.AdjustTextDisplay(\"selectionInfo\", \"penLabel\", 0, 3);\r\n            this.menuGroupTower.AdjustTextDisplay(\"selectionInfo\", \"penLabel\", 1, 0);\r\n            //      value\r\n            this.menuGroupTower.AddMenuText(\"selectionInfo\", \"penValue\", \"###\");\r\n            this.menuGroupTower.AdjustTextObject(\"selectionInfo\", \"penValue\", 0, new Vector3(0.05, -0.35, 0));\r\n            this.menuGroupTower.AdjustTextObject(\"selectionInfo\", \"penValue\", 1, new Vector3(0.25, 0.25, 0.25));\r\n            this.menuGroupTower.AdjustTextDisplay(\"selectionInfo\", \"penValue\", 0, 3);\r\n            this.menuGroupTower.AdjustTextDisplay(\"selectionInfo\", \"penValue\", 1, 0);\r\n            //  tower range\r\n            //      text\r\n            this.menuGroupTower.AddMenuText(\"selectionInfo\", \"rangeLabel\", \"RANGE:\");\r\n            this.menuGroupTower.AdjustTextObject(\"selectionInfo\", \"rangeLabel\", 0, new Vector3(0.45, -0.25, 0));\r\n            this.menuGroupTower.AdjustTextObject(\"selectionInfo\", \"rangeLabel\", 1, new Vector3(0.25, 0.25, 0.25));\r\n            this.menuGroupTower.AdjustTextDisplay(\"selectionInfo\", \"rangeLabel\", 0, 3);\r\n            this.menuGroupTower.AdjustTextDisplay(\"selectionInfo\", \"rangeLabel\", 1, 0);\r\n            //      value\r\n            this.menuGroupTower.AddMenuText(\"selectionInfo\", \"rangeValue\", \"###\");\r\n            this.menuGroupTower.AdjustTextObject(\"selectionInfo\", \"rangeValue\", 0, new Vector3(0.75, -0.25, 0));\r\n            this.menuGroupTower.AdjustTextObject(\"selectionInfo\", \"rangeValue\", 1, new Vector3(0.25, 0.25, 0.25));\r\n            this.menuGroupTower.AdjustTextDisplay(\"selectionInfo\", \"rangeValue\", 0, 3);\r\n            this.menuGroupTower.AdjustTextDisplay(\"selectionInfo\", \"rangeValue\", 1, 0);\r\n            //  tower effects\r\n            //      text\r\n            this.menuGroupTower.AddMenuText(\"selectionInfo\", \"effectLabel\", \"Effects:\");\r\n            this.menuGroupTower.AdjustTextObject(\"selectionInfo\", \"effectLabel\", 0, new Vector3(0.45, -0.35, 0));\r\n            this.menuGroupTower.AdjustTextObject(\"selectionInfo\", \"effectLabel\", 1, new Vector3(0.25, 0.25, 0.25));\r\n            this.menuGroupTower.AdjustTextDisplay(\"selectionInfo\", \"effectLabel\", 0, 3);\r\n            this.menuGroupTower.AdjustTextDisplay(\"selectionInfo\", \"effectLabel\", 1, 0);\r\n            //      value\r\n            this.menuGroupTower.AddMenuText(\"selectionInfo\", \"effectValue\", \"[NULL]\");\r\n            this.menuGroupTower.AdjustTextObject(\"selectionInfo\", \"effectValue\", 0, new Vector3(0.73, -0.35, 0));\r\n            this.menuGroupTower.AdjustTextObject(\"selectionInfo\", \"effectValue\", 1, new Vector3(0.25, 0.25, 0.25));\r\n            this.menuGroupTower.AdjustTextDisplay(\"selectionInfo\", \"effectValue\", 0, 3);\r\n            this.menuGroupTower.AdjustTextDisplay(\"selectionInfo\", \"effectValue\", 1, 0);\r\n            //  tower targeting type\r\n            //      text\r\n            this.menuGroupTower.AddMenuText(\"selectionInfo\", \"targetLabel\", \"TARGETING:\");\r\n            this.menuGroupTower.AdjustTextObject(\"selectionInfo\", \"targetLabel\", 0, new Vector3(-0.21, -0.55, 0));\r\n            this.menuGroupTower.AdjustTextObject(\"selectionInfo\", \"targetLabel\", 1, new Vector3(0.25, 0.25, 0.25));\r\n            this.menuGroupTower.AdjustTextDisplay(\"selectionInfo\", \"targetLabel\", 0, 3);\r\n            this.menuGroupTower.AdjustTextDisplay(\"selectionInfo\", \"targetLabel\", 1, 2);\r\n            //      value\r\n            this.menuGroupTower.AddMenuText(\"selectionInfo\", \"targetValue\", \"[TARGETING TYPE]\");\r\n            this.menuGroupTower.AdjustTextObject(\"selectionInfo\", \"targetValue\", 0, new Vector3(-0.19, -0.55, 0));\r\n            this.menuGroupTower.AdjustTextObject(\"selectionInfo\", \"targetValue\", 1, new Vector3(0.25, 0.25, 0.25));\r\n            this.menuGroupTower.AdjustTextDisplay(\"selectionInfo\", \"targetValue\", 0, 3);\r\n            this.menuGroupTower.AdjustTextDisplay(\"selectionInfo\", \"targetValue\", 1, 0);\r\n            //TOWER DEF SELECTION MENU\r\n            //  def selection display object\r\n            this.menuGroupTower.AddMenuObject(\"interactionPanelBuild\", 0, \"menuOffset\");\r\n            this.menuGroupTower.AdjustMenuObject(\"interactionPanelBuild\", 0, new Vector3(0, -0.65));\r\n            this.menuGroupTower.AdjustMenuObject(\"interactionPanelBuild\", 1, new Vector3(0.5, 0.5, 0.5));\r\n            //  build selected tower\r\n            this.menuGroupTower.AddMenuObject(\"interactionBuild\", 4, \"interactionPanelBuild\");\r\n            this.menuGroupTower.AdjustMenuObject(\"interactionBuild\", 0, new Vector3(0, 0, 0));\r\n            this.menuGroupTower.AdjustMenuObject(\"interactionBuild\", 1, new Vector3(0.3, 0.3, 0.3));\r\n            this.menuGroupTower.GetMenuObject(\"interactionBuild\").addComponent(\r\n            //add click action listener\r\n            new OnPointerDown(function (e) {\r\n                //ensure foundation is selected\r\n                if (_this.selectedTowerFoundation == null) {\r\n                    log(\"Game Menu - ERROR: attempting to build tower on undefined tower foundation\");\r\n                    return;\r\n                }\r\n                //\r\n                if (_this.selectedTowerFoundation.TowerFrame.TowerDef != -1) {\r\n                    log(\"Game Menu - ERROR: attempting to build tower on tower foundation that already has a constructed tower\");\r\n                    return;\r\n                }\r\n                _this.TowerBuild();\r\n            }, { button: ActionButton.ANY, showFeedback: true, hoverText: \"Build Tower\", distance: 16 }));\r\n            //  label\r\n            this.menuGroupTower.AddMenuText(\"interactionBuild\", \"buttonLabel\", \"BUILD\");\r\n            this.menuGroupTower.AdjustTextObject(\"interactionBuild\", \"buttonLabel\", 0, new Vector3(0, 0, -0.04));\r\n            this.menuGroupTower.AdjustTextObject(\"interactionBuild\", \"buttonLabel\", 1, new Vector3(1, 1, 1));\r\n            this.menuGroupTower.AdjustTextDisplay(\"interactionBuild\", \"buttonLabel\", 0, 6);\r\n            //  build selected tower\r\n            this.menuGroupTower.AddMenuObject(\"interactionDisplayNext\", 4, \"interactionPanelBuild\");\r\n            this.menuGroupTower.AdjustMenuObject(\"interactionDisplayNext\", 0, new Vector3(0.85, 0, 0));\r\n            this.menuGroupTower.AdjustMenuObject(\"interactionDisplayNext\", 1, new Vector3(0.3, 0.3, 0.3));\r\n            this.menuGroupTower.GetMenuObject(\"interactionDisplayNext\").addComponent(\r\n            //add click action listener\r\n            new OnPointerDown(function (e) { _this.UpdateTowerBuilderDisplay(_this.towerDefinitionIndex + 1); }, { button: ActionButton.ANY, showFeedback: true, hoverText: \"Next Tower Type\", distance: 16 }));\r\n            //  label\r\n            this.menuGroupTower.AddMenuText(\"interactionDisplayNext\", \"buttonLabel\", \"NEXT\");\r\n            this.menuGroupTower.AdjustTextObject(\"interactionDisplayNext\", \"buttonLabel\", 0, new Vector3(0, 0, -0.04));\r\n            this.menuGroupTower.AdjustTextObject(\"interactionDisplayNext\", \"buttonLabel\", 1, new Vector3(1, 1, 1));\r\n            this.menuGroupTower.AdjustTextDisplay(\"interactionDisplayNext\", \"buttonLabel\", 0, 6);\r\n            //  build selected tower\r\n            this.menuGroupTower.AddMenuObject(\"interactionDisplayPrev\", 4, \"interactionPanelBuild\");\r\n            this.menuGroupTower.AdjustMenuObject(\"interactionDisplayPrev\", 0, new Vector3(-0.85, 0, 0));\r\n            this.menuGroupTower.AdjustMenuObject(\"interactionDisplayPrev\", 1, new Vector3(0.3, 0.3, 0.3));\r\n            this.menuGroupTower.GetMenuObject(\"interactionDisplayPrev\").addComponent(\r\n            //add click action listener\r\n            new OnPointerDown(function (e) { _this.UpdateTowerBuilderDisplay(_this.towerDefinitionIndex - 1); }, { button: ActionButton.ANY, showFeedback: true, hoverText: \"Previous Tower Type\", distance: 16 }));\r\n            //  label\r\n            this.menuGroupTower.AddMenuText(\"interactionDisplayPrev\", \"buttonLabel\", \"PREV\");\r\n            this.menuGroupTower.AdjustTextObject(\"interactionDisplayPrev\", \"buttonLabel\", 0, new Vector3(0, 0, -0.04));\r\n            this.menuGroupTower.AdjustTextObject(\"interactionDisplayPrev\", \"buttonLabel\", 1, new Vector3(1, 1, 1));\r\n            this.menuGroupTower.AdjustTextDisplay(\"interactionDisplayPrev\", \"buttonLabel\", 0, 6);\r\n            //TOWER UPGRADE MENU\r\n            //  tower upgrade display object\r\n            this.menuGroupTower.AddMenuObject(\"interactionPanelUpgrade\", 0, \"menuOffset\");\r\n            this.menuGroupTower.AdjustMenuObject(\"interactionPanelUpgrade\", 0, new Vector3(-1.67, 0, -0.37));\r\n            this.menuGroupTower.AdjustMenuObject(\"interactionPanelUpgrade\", 1, new Vector3(0.5, 0.5, 0.5));\r\n            this.menuGroupTower.AdjustMenuObject(\"interactionPanelUpgrade\", 2, new Vector3(0, -45, 0));\r\n            //  tower upgrade display object\r\n            this.menuGroupTower.AddMenuObject(\"menuBackground\", 2, \"interactionPanelUpgrade\");\r\n            this.menuGroupTower.AdjustMenuObject(\"menuBackground\", 0, new Vector3(0, 0, 0));\r\n            this.menuGroupTower.AdjustMenuObject(\"menuBackground\", 1, new Vector3(1, 1, 1));\r\n            this.menuGroupTower.AdjustMenuObject(\"menuBackground\", 2, new Vector3(0, 0, 90));\r\n            //  label header text\r\n            this.menuGroupTower.AddMenuText(\"interactionPanelUpgrade\", \"menuLabel\", \"UPGRADES\");\r\n            this.menuGroupTower.AdjustTextObject(\"interactionPanelUpgrade\", \"menuLabel\", 0, new Vector3(0, 1.05, 0));\r\n            this.menuGroupTower.AdjustTextObject(\"interactionPanelUpgrade\", \"menuLabel\", 1, new Vector3(0.4, 0.4, 1));\r\n            this.menuGroupTower.AdjustTextDisplay(\"interactionPanelUpgrade\", \"menuLabel\", 0, 6);\r\n            //  upgrade 0\r\n            //      button\r\n            this.menuGroupTower.AddMenuObject(\"upgradeButton0\", 5, \"interactionPanelUpgrade\");\r\n            this.menuGroupTower.AdjustMenuObject(\"upgradeButton0\", 0, new Vector3(0, 0.65, 0));\r\n            this.menuGroupTower.AdjustMenuObject(\"upgradeButton0\", 1, new Vector3(0.55, 0.45, 0.45));\r\n            this.menuGroupTower.GetMenuObject(\"upgradeButton0\").addComponent(\r\n            //add click action listener\r\n            new OnPointerDown(function (e) { _this.PurchaseTowerUpgrade(0); }, { button: ActionButton.ANY, showFeedback: true, hoverText: \"Buy Upgrade\", distance: 16 }));\r\n            //      label\r\n            this.menuGroupTower.AddMenuText(\"upgradeButton0\", \"upgradeLabel\", \"PURCHASED:           COST:\");\r\n            this.menuGroupTower.AdjustTextObject(\"upgradeButton0\", \"upgradeLabel\", 0, new Vector3(0, 0, -0.04));\r\n            this.menuGroupTower.AdjustTextObject(\"upgradeButton0\", \"upgradeLabel\", 1, new Vector3(0.818, 1, 1));\r\n            this.menuGroupTower.AdjustTextDisplay(\"upgradeButton0\", \"upgradeLabel\", 0, 2);\r\n            //  upgrade 1\r\n            //      button\r\n            this.menuGroupTower.AddMenuObject(\"upgradeButton1\", 5, \"interactionPanelUpgrade\");\r\n            this.menuGroupTower.AdjustMenuObject(\"upgradeButton1\", 0, new Vector3(0, 0.1, 0));\r\n            this.menuGroupTower.AdjustMenuObject(\"upgradeButton1\", 1, new Vector3(0.55, 0.45, 0.45));\r\n            this.menuGroupTower.GetMenuObject(\"upgradeButton1\").addComponent(\r\n            //add click action listener\r\n            new OnPointerDown(function (e) { _this.PurchaseTowerUpgrade(1); }, { button: ActionButton.ANY, showFeedback: true, hoverText: \"Buy Upgrade\", distance: 16 }));\r\n            //      label\r\n            this.menuGroupTower.AddMenuText(\"upgradeButton1\", \"upgradeLabel\", \"PURCHASED:           COST:\");\r\n            this.menuGroupTower.AdjustTextObject(\"upgradeButton1\", \"upgradeLabel\", 0, new Vector3(0, 0, -0.04));\r\n            this.menuGroupTower.AdjustTextObject(\"upgradeButton1\", \"upgradeLabel\", 1, new Vector3(0.818, 1, 1));\r\n            this.menuGroupTower.AdjustTextDisplay(\"upgradeButton1\", \"upgradeLabel\", 0, 2);\r\n            //  upgrade 2\r\n            //      button\r\n            this.menuGroupTower.AddMenuObject(\"upgradeButton2\", 5, \"interactionPanelUpgrade\");\r\n            this.menuGroupTower.AdjustMenuObject(\"upgradeButton2\", 0, new Vector3(0, -0.45, 0));\r\n            this.menuGroupTower.AdjustMenuObject(\"upgradeButton2\", 1, new Vector3(0.55, 0.45, 0.45));\r\n            this.menuGroupTower.GetMenuObject(\"upgradeButton2\").addComponent(\r\n            //add click action listener\r\n            new OnPointerDown(function (e) { _this.PurchaseTowerUpgrade(2); }, { button: ActionButton.ANY, showFeedback: true, hoverText: \"Buy Upgrade\", distance: 16 }));\r\n            //      label\r\n            this.menuGroupTower.AddMenuText(\"upgradeButton2\", \"upgradeLabel\", \"PURCHASED:           COST:\");\r\n            this.menuGroupTower.AdjustTextObject(\"upgradeButton2\", \"upgradeLabel\", 0, new Vector3(0, 0, -0.04));\r\n            this.menuGroupTower.AdjustTextObject(\"upgradeButton2\", \"upgradeLabel\", 1, new Vector3(0.818, 1, 1));\r\n            this.menuGroupTower.AdjustTextDisplay(\"upgradeButton2\", \"upgradeLabel\", 0, 2);\r\n            //  upgrade 3\r\n            //      button\r\n            this.menuGroupTower.AddMenuObject(\"upgradeButton3\", 5, \"interactionPanelUpgrade\");\r\n            this.menuGroupTower.AdjustMenuObject(\"upgradeButton3\", 0, new Vector3(0, -1.0, 0));\r\n            this.menuGroupTower.AdjustMenuObject(\"upgradeButton3\", 1, new Vector3(0.55, 0.45, 0.45));\r\n            this.menuGroupTower.GetMenuObject(\"upgradeButton3\").addComponent(\r\n            //add click action listener\r\n            new OnPointerDown(function (e) { _this.PurchaseTowerUpgrade(3); }, { button: ActionButton.ANY, showFeedback: true, hoverText: \"Buy Upgrade\", distance: 16 }));\r\n            //      label\r\n            this.menuGroupTower.AddMenuText(\"upgradeButton3\", \"upgradeLabel\", \"PURCHASED:           COST:\");\r\n            this.menuGroupTower.AdjustTextObject(\"upgradeButton3\", \"upgradeLabel\", 0, new Vector3(0, 0, -0.04));\r\n            this.menuGroupTower.AdjustTextObject(\"upgradeButton3\", \"upgradeLabel\", 1, new Vector3(0.818, 1, 1));\r\n            this.menuGroupTower.AdjustTextDisplay(\"upgradeButton3\", \"upgradeLabel\", 0, 2);\r\n            //TOWER TARGETING MENU\r\n            //  tower target display object\r\n            this.menuGroupTower.AddMenuObject(\"interactionPanelTarget\", 0, \"menuOffset\");\r\n            this.menuGroupTower.AdjustMenuObject(\"interactionPanelTarget\", 0, new Vector3(1.67, 0, -0.37));\r\n            this.menuGroupTower.AdjustMenuObject(\"interactionPanelTarget\", 1, new Vector3(0.5, 0.5, 0.5));\r\n            this.menuGroupTower.AdjustMenuObject(\"interactionPanelTarget\", 2, new Vector3(0, 45, 0));\r\n            //  tower upgrade display object\r\n            this.menuGroupTower.AddMenuObject(\"menuBackground\", 2, \"interactionPanelTarget\");\r\n            this.menuGroupTower.AdjustMenuObject(\"menuBackground\", 0, new Vector3(0, 0, 0));\r\n            this.menuGroupTower.AdjustMenuObject(\"menuBackground\", 1, new Vector3(1, 1, 1));\r\n            this.menuGroupTower.AdjustMenuObject(\"menuBackground\", 2, new Vector3(0, 0, 90));\r\n            //  label header text\r\n            this.menuGroupTower.AddMenuText(\"interactionPanelTarget\", \"menuLabel\", \"TARGETING\");\r\n            this.menuGroupTower.AdjustTextObject(\"interactionPanelTarget\", \"menuLabel\", 0, new Vector3(0, 1.05, 0));\r\n            this.menuGroupTower.AdjustTextObject(\"interactionPanelTarget\", \"menuLabel\", 1, new Vector3(0.4, 0.4, 1));\r\n            this.menuGroupTower.AdjustTextDisplay(\"interactionPanelTarget\", \"menuLabel\", 0, 6);\r\n            //  targeting type - pathing furthest\r\n            //      button\r\n            this.menuGroupTower.AddMenuObject(\"tarButtonLaneFurthest\", 5, \"interactionPanelTarget\");\r\n            this.menuGroupTower.AdjustMenuObject(\"tarButtonLaneFurthest\", 0, new Vector3(0, 0.7, 0));\r\n            this.menuGroupTower.AdjustMenuObject(\"tarButtonLaneFurthest\", 1, new Vector3(0.55, 0.25, 0.45));\r\n            this.menuGroupTower.GetMenuObject(\"tarButtonLaneFurthest\").addComponent(\r\n            //add click action listener\r\n            new OnPointerDown(function (e) { _this.SetTargetingType(0); }, { button: ActionButton.ANY, showFeedback: true, hoverText: \"Target Furthest Down Lane\", distance: 16 }));\r\n            //      label\r\n            this.menuGroupTower.AddMenuText(\"tarButtonLaneFurthest\", \"targetLabel\", \"FURTHEST DOWN LANE\");\r\n            this.menuGroupTower.AdjustTextObject(\"tarButtonLaneFurthest\", \"targetLabel\", 0, new Vector3(0, 0, -0.04));\r\n            this.menuGroupTower.AdjustTextObject(\"tarButtonLaneFurthest\", \"targetLabel\", 1, new Vector3(0.818, 2, 1));\r\n            this.menuGroupTower.AdjustTextDisplay(\"tarButtonLaneFurthest\", \"targetLabel\", 0, 2);\r\n            //  targeting type - health value high\r\n            //      button\r\n            this.menuGroupTower.AddMenuObject(\"tarButtonHealthValueHigh\", 5, \"interactionPanelTarget\");\r\n            this.menuGroupTower.AdjustMenuObject(\"tarButtonHealthValueHigh\", 0, new Vector3(0, 0.4, 0));\r\n            this.menuGroupTower.AdjustMenuObject(\"tarButtonHealthValueHigh\", 1, new Vector3(0.55, 0.25, 0.45));\r\n            this.menuGroupTower.GetMenuObject(\"tarButtonHealthValueHigh\").addComponent(\r\n            //add click action listener\r\n            new OnPointerDown(function (e) { _this.SetTargetingType(1); }, { button: ActionButton.ANY, showFeedback: true, hoverText: \"Target Highest Health Value\", distance: 16 }));\r\n            //      label\r\n            this.menuGroupTower.AddMenuText(\"tarButtonHealthValueHigh\", \"targetLabel\", \"HIGHEST HEALTH VALUE\");\r\n            this.menuGroupTower.AdjustTextObject(\"tarButtonHealthValueHigh\", \"targetLabel\", 0, new Vector3(0, 0, -0.04));\r\n            this.menuGroupTower.AdjustTextObject(\"tarButtonHealthValueHigh\", \"targetLabel\", 1, new Vector3(0.818, 2, 1));\r\n            this.menuGroupTower.AdjustTextDisplay(\"tarButtonHealthValueHigh\", \"targetLabel\", 0, 2);\r\n            //  targeting type - health value low\r\n            //      button\r\n            this.menuGroupTower.AddMenuObject(\"tarButtonHealthValueLowest\", 5, \"interactionPanelTarget\");\r\n            this.menuGroupTower.AdjustMenuObject(\"tarButtonHealthValueLowest\", 0, new Vector3(0, 0.1, 0));\r\n            this.menuGroupTower.AdjustMenuObject(\"tarButtonHealthValueLowest\", 1, new Vector3(0.55, 0.25, 0.45));\r\n            this.menuGroupTower.GetMenuObject(\"tarButtonHealthValueLowest\").addComponent(\r\n            //add click action listener\r\n            new OnPointerDown(function (e) { _this.SetTargetingType(2); }, { button: ActionButton.ANY, showFeedback: true, hoverText: \"Target Lowest Health Value\", distance: 16 }));\r\n            //      label\r\n            this.menuGroupTower.AddMenuText(\"tarButtonHealthValueLowest\", \"targetLabel\", \"LOWEST HEALTH VALUE\");\r\n            this.menuGroupTower.AdjustTextObject(\"tarButtonHealthValueLowest\", \"targetLabel\", 0, new Vector3(0, 0, -0.04));\r\n            this.menuGroupTower.AdjustTextObject(\"tarButtonHealthValueLowest\", \"targetLabel\", 1, new Vector3(0.818, 2, 1));\r\n            this.menuGroupTower.AdjustTextDisplay(\"tarButtonHealthValueLowest\", \"targetLabel\", 0, 2);\r\n            //  targeting type - health % high\r\n            //      button\r\n            this.menuGroupTower.AddMenuObject(\"tarButtonHealthPercentHigh\", 5, \"interactionPanelTarget\");\r\n            this.menuGroupTower.AdjustMenuObject(\"tarButtonHealthPercentHigh\", 0, new Vector3(0, -0.2, 0));\r\n            this.menuGroupTower.AdjustMenuObject(\"tarButtonHealthPercentHigh\", 1, new Vector3(0.55, 0.25, 0.45));\r\n            this.menuGroupTower.GetMenuObject(\"tarButtonHealthPercentHigh\").addComponent(\r\n            //add click action listener\r\n            new OnPointerDown(function (e) { _this.SetTargetingType(3); }, { button: ActionButton.ANY, showFeedback: true, hoverText: \"Target Highest Health %\", distance: 16 }));\r\n            //      label\r\n            this.menuGroupTower.AddMenuText(\"tarButtonHealthPercentHigh\", \"targetLabel\", \"HIGHEST HEALTH %\");\r\n            this.menuGroupTower.AdjustTextObject(\"tarButtonHealthPercentHigh\", \"targetLabel\", 0, new Vector3(0, 0, -0.04));\r\n            this.menuGroupTower.AdjustTextObject(\"tarButtonHealthPercentHigh\", \"targetLabel\", 1, new Vector3(0.818, 2, 1));\r\n            this.menuGroupTower.AdjustTextDisplay(\"tarButtonHealthPercentHigh\", \"targetLabel\", 0, 2);\r\n            //  targeting type - health % low\r\n            //      button\r\n            this.menuGroupTower.AddMenuObject(\"tarButtonHealthPercentLow\", 5, \"interactionPanelTarget\");\r\n            this.menuGroupTower.AdjustMenuObject(\"tarButtonHealthPercentLow\", 0, new Vector3(0, -0.5, 0));\r\n            this.menuGroupTower.AdjustMenuObject(\"tarButtonHealthPercentLow\", 1, new Vector3(0.55, 0.25, 0.45));\r\n            this.menuGroupTower.GetMenuObject(\"tarButtonHealthPercentLow\").addComponent(\r\n            //add click action listener\r\n            new OnPointerDown(function (e) { _this.SetTargetingType(4); }, { button: ActionButton.ANY, showFeedback: true, hoverText: \"Target Lowest Health %\", distance: 16 }));\r\n            //      label\r\n            this.menuGroupTower.AddMenuText(\"tarButtonHealthPercentLow\", \"targetLabel\", \"LOWEST HEALTH %\");\r\n            this.menuGroupTower.AdjustTextObject(\"tarButtonHealthPercentLow\", \"targetLabel\", 0, new Vector3(0, 0, -0.04));\r\n            this.menuGroupTower.AdjustTextObject(\"tarButtonHealthPercentLow\", \"targetLabel\", 1, new Vector3(0.818, 2, 1));\r\n            this.menuGroupTower.AdjustTextDisplay(\"tarButtonHealthPercentLow\", \"targetLabel\", 0, 2);\r\n            //  targeting type - armour high\r\n            //      button\r\n            this.menuGroupTower.AddMenuObject(\"tarButtonArmourHigh\", 5, \"interactionPanelTarget\");\r\n            this.menuGroupTower.AdjustMenuObject(\"tarButtonArmourHigh\", 0, new Vector3(0, -0.8, 0));\r\n            this.menuGroupTower.AdjustMenuObject(\"tarButtonArmourHigh\", 1, new Vector3(0.55, 0.25, 0.45));\r\n            this.menuGroupTower.GetMenuObject(\"tarButtonArmourHigh\").addComponent(\r\n            //add click action listener\r\n            new OnPointerDown(function (e) { _this.SetTargetingType(5); }, { button: ActionButton.ANY, showFeedback: true, hoverText: \"Target Highest Armour\", distance: 16 }));\r\n            //      label\r\n            this.menuGroupTower.AddMenuText(\"tarButtonArmourHigh\", \"targetLabel\", \"HIGHEST ARMOUR VALUE\");\r\n            this.menuGroupTower.AdjustTextObject(\"tarButtonArmourHigh\", \"targetLabel\", 0, new Vector3(0, 0, -0.04));\r\n            this.menuGroupTower.AdjustTextObject(\"tarButtonArmourHigh\", \"targetLabel\", 1, new Vector3(0.818, 2, 1));\r\n            this.menuGroupTower.AdjustTextDisplay(\"tarButtonArmourHigh\", \"targetLabel\", 0, 2);\r\n            //  targeting type - health % low\r\n            //      button\r\n            this.menuGroupTower.AddMenuObject(\"tarButtonArmourLow\", 5, \"interactionPanelTarget\");\r\n            this.menuGroupTower.AdjustMenuObject(\"tarButtonArmourLow\", 0, new Vector3(0, -1.1, 0));\r\n            this.menuGroupTower.AdjustMenuObject(\"tarButtonArmourLow\", 1, new Vector3(0.55, 0.25, 0.45));\r\n            this.menuGroupTower.GetMenuObject(\"tarButtonArmourLow\").addComponent(\r\n            //add click action listener\r\n            new OnPointerDown(function (e) { _this.SetTargetingType(6); }, { button: ActionButton.ANY, showFeedback: true, hoverText: \"Target Lowest Armour\", distance: 16 }));\r\n            //      label\r\n            this.menuGroupTower.AddMenuText(\"tarButtonArmourLow\", \"targetLabel\", \"LOWEST ARMOUR VALUE\");\r\n            this.menuGroupTower.AdjustTextObject(\"tarButtonArmourLow\", \"targetLabel\", 0, new Vector3(0, 0, -0.04));\r\n            this.menuGroupTower.AdjustTextObject(\"tarButtonArmourLow\", \"targetLabel\", 1, new Vector3(0.818, 2, 1));\r\n            this.menuGroupTower.AdjustTextDisplay(\"tarButtonArmourLow\", \"targetLabel\", 0, 2);\r\n            //menu off at start\r\n            this.SetTowerMenuState(false);\r\n        };\r\n        //updates\r\n        //  sets visibility of tower builder\r\n        GameMenu.prototype.SetTowerMenuState = function (state) {\r\n            this.menuGroupTower.SetMenuState(state);\r\n        };\r\n        //  sets menu display type\r\n        //      0=build, 1=upgrade\r\n        GameMenu.prototype.SetTowerMenuDisplayType = function (type) {\r\n            //set button states\r\n            switch (type) {\r\n                //building new tower\r\n                case 0:\r\n                    this.menuGroupTower.SetMenuText(\"selectionInfo\", \"menuLabel\", \"BUILD TOWER\");\r\n                    //hide deconstruct and range buttons \r\n                    this.menuGroupTower.GetMenuObject(\"interactDeconstruct\").SetObjectState(false);\r\n                    this.menuGroupTower.GetMenuObject(\"interactToggleRange\").SetObjectState(false);\r\n                    //show build buttons\r\n                    this.menuGroupTower.GetMenuObject(\"interactionPanelBuild\").SetObjectState(true);\r\n                    //hide upgrade and targeting\r\n                    this.menuGroupTower.GetMenuObject(\"interactionPanelUpgrade\").SetObjectState(false);\r\n                    this.menuGroupTower.GetMenuObject(\"interactionPanelTarget\").SetObjectState(false);\r\n                    break;\r\n                //managing existing tower\r\n                case 1:\r\n                    this.menuGroupTower.SetMenuText(\"selectionInfo\", \"menuLabel\", \"UPGRADE TOWER\");\r\n                    //show deconstruct and range buttons \r\n                    this.menuGroupTower.GetMenuObject(\"interactDeconstruct\").SetObjectState(true);\r\n                    this.menuGroupTower.GetMenuObject(\"interactToggleRange\").SetObjectState(true);\r\n                    //hide build buttons\r\n                    this.menuGroupTower.GetMenuObject(\"interactionPanelBuild\").SetObjectState(false);\r\n                    //show upgrade buttons\r\n                    this.menuGroupTower.GetMenuObject(\"interactionPanelUpgrade\").SetObjectState(true);\r\n                    this.menuGroupTower.GetMenuObject(\"interactionPanelTarget\").SetObjectState(true);\r\n                    break;\r\n            }\r\n        };\r\n        //displays the given tower foundation\r\n        GameMenu.prototype.DisplayTowerFoundation = function (TowerFoundation) {\r\n            //record foundation\r\n            this.selectedTowerFoundation = TowerFoundation;\r\n            //activate menu\r\n            this.SetTowerMenuState(true);\r\n            //if foundation has no built tower\r\n            if (this.selectedTowerFoundation.TowerFrame.TowerDef == -1) {\r\n                log(\"Game Menu: displaying tower=\" + this.selectedTowerFoundation.Index + \" details, constructed tower=none\");\r\n                //update button display\r\n                this.SetTowerMenuDisplayType(0);\r\n                //draw tower display details\r\n                this.UpdateTowerBuilderDisplay(0);\r\n            }\r\n            //if foundation has a built tower\r\n            else {\r\n                log(\"Game Menu: displaying tower=\" + this.selectedTowerFoundation.Index + \" details, constructed tower=\"\r\n                    + this.selectedTowerFoundation.TowerFrame.TowerDef.toString());\r\n                //update button display\r\n                this.SetTowerMenuDisplayType(1);\r\n                //redraw tower display details\r\n                this.UpdateTowerUpgraderState();\r\n            }\r\n        };\r\n        //  redraws tower builder, displaying the tower def of given index\r\n        GameMenu.prototype.UpdateTowerBuilderDisplay = function (index) {\r\n            //leash value to valid targets, with wrap around\r\n            if (index < 0) {\r\n                this.towerDefinitionIndex = tower_data_3.dataTowers.length - 1;\r\n            }\r\n            else if (index >= tower_data_3.dataTowers.length) {\r\n                this.towerDefinitionIndex = 0;\r\n            }\r\n            else {\r\n                this.towerDefinitionIndex = index;\r\n            }\r\n            if (game_states_7.GameState.debuggingTower) {\r\n                log(\"displaying def \" + this.towerDefinitionIndex.toString() + \" in build menu\");\r\n            }\r\n            //update showcase details\r\n            this.menuGroupTower.SetMenuText(\"selectionInfo\", \"towerNameText\", tower_data_3.dataTowers[this.towerDefinitionIndex].DisplayName);\r\n            this.menuGroupTower.SetMenuText(\"selectionInfo\", \"descText\", \"COST: \" + tower_data_3.dataTowers[this.towerDefinitionIndex].ValueCost.toString() + \"\\n\\n\" + tower_data_3.dataTowers[this.towerDefinitionIndex].DisplayDesc);\r\n            this.menuGroupTower.SetMenuText(\"selectionInfo\", \"dmgValue\", tower_data_3.dataTowers[this.towerDefinitionIndex].ValueAttackDamage.toString());\r\n            this.menuGroupTower.SetMenuText(\"selectionInfo\", \"penValue\", tower_data_3.dataTowers[this.towerDefinitionIndex].ValueAttackPenetration.toString());\r\n            this.menuGroupTower.SetMenuText(\"selectionInfo\", \"rendValue\", tower_data_3.dataTowers[this.towerDefinitionIndex].ValueAttackRend.toString());\r\n            this.menuGroupTower.SetMenuText(\"selectionInfo\", \"rangeValue\", tower_data_3.dataTowers[this.towerDefinitionIndex].ValueAttackRange.toString());\r\n            this.menuGroupTower.SetMenuText(\"selectionInfo\", \"rofValue\", tower_data_3.dataTowers[this.towerDefinitionIndex].ValueAttackSpeed.toString());\r\n            this.menuGroupTower.SetMenuText(\"selectionInfo\", \"targetLabel\", \"\");\r\n            this.menuGroupTower.SetMenuText(\"selectionInfo\", \"targetValue\", \"\");\r\n            log(\"Game Menu: tower builder menu has been redrawn\");\r\n        };\r\n        //  redraws tower upgrader, displaying the tower foundation of the given location\r\n        GameMenu.prototype.UpdateTowerUpgraderState = function () {\r\n            if (this.selectedTowerFoundation != undefined) {\r\n                if (game_states_7.GameState.debuggingTower) {\r\n                    log(\"displaying def \" + this.selectedTowerFoundation.TowerFrame.TowerDef.toString() + \" in upgrade menu\");\r\n                }\r\n                //update showcase details\r\n                this.menuGroupTower.SetMenuText(\"selectionInfo\", \"towerNameText\", tower_data_3.dataTowers[this.selectedTowerFoundation.TowerFrame.TowerDef].DisplayName);\r\n                this.menuGroupTower.SetMenuText(\"selectionInfo\", \"descText\", \"\\n\\n\" + tower_data_3.dataTowers[this.selectedTowerFoundation.TowerFrame.TowerDef].DisplayDesc);\r\n                this.menuGroupTower.SetMenuText(\"selectionInfo\", \"dmgValue\", this.selectedTowerFoundation.TowerFrame.TowerSystem.attackDamage.toString());\r\n                this.menuGroupTower.SetMenuText(\"selectionInfo\", \"penValue\", this.selectedTowerFoundation.TowerFrame.TowerSystem.attackPen.toString());\r\n                this.menuGroupTower.SetMenuText(\"selectionInfo\", \"rendValue\", this.selectedTowerFoundation.TowerFrame.TowerSystem.attackRend.toString());\r\n                this.menuGroupTower.SetMenuText(\"selectionInfo\", \"rangeValue\", this.selectedTowerFoundation.TowerFrame.TowerSystem.attackRange.toString());\r\n                this.menuGroupTower.SetMenuText(\"selectionInfo\", \"rofValue\", this.selectedTowerFoundation.TowerFrame.TowerSystem.attackPerSecond.toString());\r\n                this.menuGroupTower.SetMenuText(\"selectionInfo\", \"targetLabel\", \"TARGETING:\");\r\n                this.menuGroupTower.SetMenuText(\"selectionInfo\", \"targetValue\", this.targetTypeStrings[this.selectedTowerFoundation.TowerFrame.TowerSystem.TargetingType]);\r\n                //update buttons\r\n                for (var i = 0; i < 4; i++) {\r\n                    this.menuGroupTower.GetMenuObject(\"upgradeButton\" + i.toString()).SetObjectState(false);\r\n                }\r\n                for (var i = 0; i < tower_data_3.dataTowers[this.selectedTowerFoundation.TowerFrame.TowerDef].Upgrades.length; i++) {\r\n                    this.menuGroupTower.GetMenuObject(\"upgradeButton\" + i.toString()).SetObjectState(true);\r\n                    this.menuGroupTower.GetMenuObjectText(\"upgradeButton\" + i.toString(), \"upgradeLabel\").getComponent(TextShape).value =\r\n                        \"COUNT: \" + this.selectedTowerFoundation.TowerFrame.TowerUpgrades[i] + \" / \" + tower_data_3.dataTowers[this.selectedTowerFoundation.TowerFrame.TowerDef].Upgrades[i][2]\r\n                            + \"\\tCOST: \" + tower_data_3.dataTowers[this.selectedTowerFoundation.TowerFrame.TowerDef].Upgrades[i][1] + \"\\n\"\r\n                            + tower_data_3.dataTowers[this.selectedTowerFoundation.TowerFrame.TowerDef].Upgrades[i][3] + \" \" + tower_data_3.dataTowers[this.selectedTowerFoundation.TowerFrame.TowerDef].Upgrades[i][0];\r\n                }\r\n            }\r\n            log(\"Game Menu: redrew tower upgrader menu\");\r\n        };\r\n        //  purchases upgrade for a given tower\r\n        GameMenu.prototype.PurchaseTowerUpgrade = function (index) {\r\n            if (this.selectedTowerFoundation != null) {\r\n                //ensure upgrade is available and player has money\r\n                if (this.selectedTowerFoundation.TowerFrame.TowerUpgrades[index] >= +tower_data_3.dataTowers[this.selectedTowerFoundation.TowerFrame.TowerDef].Upgrades[index][2]\r\n                    || +tower_data_3.dataTowers[this.selectedTowerFoundation.TowerFrame.TowerDef].Upgrades[index][1] > game_states_7.GameState.PlayerMoney) {\r\n                    log(\"Game Menu: tower upgrade purchase failed, not enough money\");\r\n                    return;\r\n                }\r\n                log(\"Game Menu: tower foundation=\" + this.selectedTowerFoundation.Index.toString() + \" purchased tower upgrade=\" + index.toString());\r\n                //remove money\r\n                game_states_7.GameState.PlayerMoney -= +tower_data_3.dataTowers[this.selectedTowerFoundation.TowerFrame.TowerDef].Upgrades[index][1];\r\n                this.updateMoneyCount();\r\n                //apply upgrade\r\n                this.selectedTowerFoundation.TowerFrame.ApplyUpgrade(index);\r\n                //update tower display\r\n                this.UpdateTowerUpgraderState();\r\n            }\r\n        };\r\n        GameMenu.prototype.SetTargetingType = function (index) {\r\n            if (this.selectedTowerFoundation == undefined)\r\n                return;\r\n            //set targeting type\r\n            this.selectedTowerFoundation.TowerFrame.TowerSystem.TargetingType = index;\r\n            //update targeting UI\r\n            this.menuGroupTower.SetMenuText(\"selectionInfo\", \"targetValue\", this.targetTypeStrings[this.selectedTowerFoundation.TowerFrame.TowerSystem.TargetingType]);\r\n        };\r\n        //  setup\r\n        GameMenu.prototype.menuTutorialSetup = function () {\r\n            //SCENE HOW TO\r\n            //  frame\r\n            this.menuGroupSceneInfo.AddMenuObject(\"h2pFrame\", 2);\r\n            this.menuGroupSceneInfo.AdjustMenuObject(\"h2pFrame\", 0, new Vector3(2.4, 1.9, -2.9));\r\n            this.menuGroupSceneInfo.AdjustMenuObject(\"h2pFrame\", 1, new Vector3(1.4, 1.4, 1.4));\r\n            this.menuGroupSceneInfo.AdjustMenuObject(\"h2pFrame\", 2, new Vector3(0, 180, 0));\r\n            //  text parent\r\n            this.menuGroupSceneInfo.AddMenuObject(\"h2pContent\", 0, \"h2pFrame\");\r\n            this.menuGroupSceneInfo.AdjustMenuObject(\"h2pContent\", 0, new Vector3(0, 0, 0.0125));\r\n            this.menuGroupSceneInfo.AdjustMenuObject(\"h2pContent\", 1, new Vector3(1, 1, 1));\r\n            //  label header text\r\n            this.menuGroupSceneInfo.AddMenuText(\"h2pContent\", \"infoHeader\", \"HOW TO PLAY\");\r\n            this.menuGroupSceneInfo.AdjustTextObject(\"h2pContent\", \"infoHeader\", 0, new Vector3(0, 0.6, 0));\r\n            this.menuGroupSceneInfo.AdjustTextObject(\"h2pContent\", \"infoHeader\", 1, new Vector3(0.35, 0.35, 0.035));\r\n            this.menuGroupSceneInfo.AdjustTextDisplay(\"h2pContent\", \"infoHeader\", 0, 6);\r\n            //  info text\r\n            this.menuGroupSceneInfo.AddMenuText(\"h2pContent\", \"infoText\", \"1 - Defeat enemies and clear waves to earn money\\n\" +\r\n                \"2 - Spend money on constructing new towers or upgrading existing towers (you can move towers between waves or sell them to get some of their value back)\\n\" +\r\n                \"3 - Enemies grow stronger with every wave you defeat, every 5th wave is a special boss wave\\n\" +\r\n                \"4 - Each enemy that reaches your base will damage your health (1HP per standard unit, 10HP per boss unit) and then self destruct. If you reach 0 HP you lose the game!\\n\");\r\n            this.menuGroupSceneInfo.AdjustTextObject(\"h2pContent\", \"infoText\", 0, new Vector3(0, 0.45, 0));\r\n            this.menuGroupSceneInfo.AdjustTextObject(\"h2pContent\", \"infoText\", 1, new Vector3(0.35, 0.35, 0.035));\r\n            this.menuGroupSceneInfo.GetMenuObjectText(\"h2pContent\", \"infoText\").getComponent(TextShape).width = 6;\r\n            this.menuGroupSceneInfo.GetMenuObjectText(\"h2pContent\", \"infoText\").getComponent(TextShape).textWrapping = true;\r\n            this.menuGroupSceneInfo.AdjustTextDisplay(\"h2pContent\", \"infoText\", 0, 2);\r\n            this.menuGroupSceneInfo.AdjustTextDisplay(\"h2pContent\", \"infoText\", 1, 0);\r\n            this.menuGroupSceneInfo.AdjustTextDisplay(\"h2pContent\", \"infoText\", 2, 0);\r\n            //  label header text\r\n            this.menuGroupSceneInfo.AddMenuText(\"h2pContent\", \"infoText2\", \"Can you clear all 30 waves?\");\r\n            this.menuGroupSceneInfo.AdjustTextObject(\"h2pContent\", \"infoText2\", 0, new Vector3(0, -0.65, 0));\r\n            this.menuGroupSceneInfo.AdjustTextObject(\"h2pContent\", \"infoText2\", 1, new Vector3(0.35, 0.35, 0.035));\r\n            this.menuGroupSceneInfo.GetMenuObjectText(\"h2pContent\", \"infoText2\").getComponent(TextShape).width = 6;\r\n            this.menuGroupSceneInfo.GetMenuObjectText(\"h2pContent\", \"infoText2\").getComponent(TextShape).textWrapping = true;\r\n            this.menuGroupSceneInfo.AdjustTextDisplay(\"h2pContent\", \"infoText2\", 0, 4);\r\n            this.menuGroupSceneInfo.AdjustTextDisplay(\"h2pContent\", \"infoText2\", 1, 1);\r\n            this.menuGroupSceneInfo.AdjustTextDisplay(\"h2pContent\", \"infoText2\", 2, 1);\r\n            //SCENE INFO\r\n            //  frame\r\n            this.menuGroupSceneInfo.AddMenuObject(\"infoFrame\", 2);\r\n            this.menuGroupSceneInfo.AdjustMenuObject(\"infoFrame\", 0, new Vector3(-1.35, 1.9, -1.35));\r\n            this.menuGroupSceneInfo.AdjustMenuObject(\"infoFrame\", 1, new Vector3(1.4, 1.4, 1.4));\r\n            this.menuGroupSceneInfo.AdjustMenuObject(\"infoFrame\", 2, new Vector3(0, 225, 0));\r\n            //  text parent\r\n            this.menuGroupSceneInfo.AddMenuObject(\"infoContent\", 0, \"infoFrame\");\r\n            this.menuGroupSceneInfo.AdjustMenuObject(\"infoContent\", 0, new Vector3(0, 0, 0.0125));\r\n            this.menuGroupSceneInfo.AdjustMenuObject(\"infoContent\", 1, new Vector3(1, 1, 1));\r\n            //  label header text\r\n            this.menuGroupSceneInfo.AddMenuText(\"infoContent\", \"infoHeader\", \"SCENE INFO\");\r\n            this.menuGroupSceneInfo.AdjustTextObject(\"infoContent\", \"infoHeader\", 0, new Vector3(0, 0.6, 0));\r\n            this.menuGroupSceneInfo.AdjustTextObject(\"infoContent\", \"infoHeader\", 1, new Vector3(0.35, 0.35, 0.035));\r\n            this.menuGroupSceneInfo.AdjustTextDisplay(\"infoContent\", \"infoHeader\", 0, 6);\r\n            //  label header text\r\n            this.menuGroupSceneInfo.AddMenuText(\"infoContent\", \"infoHeader\", \"This scene is an example implementation of how the Decentraland Tower Defence Module can be deployed on Decentraland Worlds.\" +\r\n                \"\\n\\nSeveral other scenes have also been developed using this kit! You can check them out here:\" +\r\n                \"\\n\\n\\n\\nThis module's development was funded through the Community Grants Program and the entire Tower Defence Creation Kit is completely open-source and free to use. You can check out the repository for the source and a quick guide on how to get started!\");\r\n            this.menuGroupSceneInfo.AdjustTextObject(\"infoContent\", \"infoHeader\", 0, new Vector3(0, 0.45, 0));\r\n            this.menuGroupSceneInfo.AdjustTextObject(\"infoContent\", \"infoHeader\", 1, new Vector3(0.35, 0.35, 0.035));\r\n            this.menuGroupSceneInfo.GetMenuObjectText(\"infoContent\", \"infoHeader\").getComponent(TextShape).width = 6;\r\n            this.menuGroupSceneInfo.GetMenuObjectText(\"infoContent\", \"infoHeader\").getComponent(TextShape).textWrapping = true;\r\n            this.menuGroupSceneInfo.AdjustTextDisplay(\"infoContent\", \"infoHeader\", 0, 2);\r\n            this.menuGroupSceneInfo.AdjustTextDisplay(\"infoContent\", \"infoHeader\", 1, 0);\r\n            this.menuGroupSceneInfo.AdjustTextDisplay(\"infoContent\", \"infoHeader\", 2, 0);\r\n            //  button other scenes\r\n            for (var i = 0; i < this.stringsSceneNames.length; i++) {\r\n                var pos = new Vector3(((i % 3) - 1) * 0.66, -0.075, 0);\r\n                //  button creator object\r\n                this.menuGroupSceneInfo.AddMenuObject(\"buttonScene\" + i, 5, \"infoFrame\");\r\n                this.menuGroupSceneInfo.AdjustMenuObject(\"buttonScene\" + i, 0, pos);\r\n                this.menuGroupSceneInfo.AdjustMenuObject(\"buttonScene\" + i, 1, new Vector3(0.22, 0.18, 0.2));\r\n                /*this.menuGroupSceneInfo.GetMenuObject(\"buttonScene\"+i).addComponent\r\n                (\r\n                    new OnPointerDown\r\n                    (\r\n                        (e) =>\r\n                        {\r\n                        //open link\r\n                        openExternalURL(\"\");\r\n                        },\r\n                        {\r\n                        button: ActionButton.ANY,\r\n                        showFeedback: true,\r\n                        hoverText: \"[E] CREATOR_NAME_\"+i,\r\n                        distance: 8\r\n                        }\r\n                    )\r\n                );*/\r\n                //  button creator text\r\n                this.menuGroupSceneInfo.AddMenuText(\"buttonScene\" + i, \"buttonText\", this.stringsSceneNames[i]);\r\n                this.menuGroupSceneInfo.AdjustTextObject(\"buttonScene\" + i, \"buttonText\", 0, new Vector3(0, 0, -0.031));\r\n                this.menuGroupSceneInfo.AdjustTextObject(\"buttonScene\" + i, \"buttonText\", 1, new Vector3(0.34, 0.42, 0.03));\r\n            }\r\n            //  button repo object\r\n            this.menuGroupSceneInfo.AddMenuObject(\"buttonRepo\", 5, \"infoFrame\");\r\n            this.menuGroupSceneInfo.AdjustMenuObject(\"buttonRepo\", 0, new Vector3(-0.4, -0.65, 0));\r\n            this.menuGroupSceneInfo.AdjustMenuObject(\"buttonRepo\", 1, new Vector3(0.2, 0.2, 0.2));\r\n            this.menuGroupSceneInfo.GetMenuObject(\"buttonRepo\").addComponent(new OnPointerDown(function (e) {\r\n                //open link\r\n                openExternalURL(\"https://github.com/TheCryptoTrader69/Decentraland-Tower-Defence-Creation-Kit\");\r\n            }, {\r\n                button: ActionButton.ANY,\r\n                showFeedback: true,\r\n                hoverText: \"[E] Public Repository\",\r\n                distance: 8\r\n            }));\r\n            //  button repo text\r\n            this.menuGroupSceneInfo.AddMenuText(\"buttonRepo\", \"buttonText\", \"REPOSITORY\");\r\n            this.menuGroupSceneInfo.AdjustTextObject(\"buttonRepo\", \"buttonText\", 0, new Vector3(0, 0, -0.031));\r\n            this.menuGroupSceneInfo.AdjustTextObject(\"buttonRepo\", \"buttonText\", 1, new Vector3(0.4, 0.4, 0.03));\r\n            //  button proposal object\r\n            this.menuGroupSceneInfo.AddMenuObject(\"buttonRepo\", 5, \"infoFrame\");\r\n            this.menuGroupSceneInfo.AdjustMenuObject(\"buttonRepo\", 0, new Vector3(0.4, -0.65, 0));\r\n            this.menuGroupSceneInfo.AdjustMenuObject(\"buttonRepo\", 1, new Vector3(0.2, 0.2, 0.2));\r\n            this.menuGroupSceneInfo.GetMenuObject(\"buttonRepo\").addComponent(new OnPointerDown(function (e) {\r\n                //open link\r\n                openExternalURL(\"https://governance.decentraland.org/proposal/?id=f92e37a0-5ee9-11ed-9128-d95e3b6d7912\");\r\n            }, {\r\n                button: ActionButton.ANY,\r\n                showFeedback: true,\r\n                hoverText: \"[E] DAO Proposal\",\r\n                distance: 8\r\n            }));\r\n            //  button repo proposal\r\n            this.menuGroupSceneInfo.AddMenuText(\"buttonRepo\", \"buttonText\", \"PROPOSAL\");\r\n            this.menuGroupSceneInfo.AdjustTextObject(\"buttonRepo\", \"buttonText\", 0, new Vector3(0, 0, -0.031));\r\n            this.menuGroupSceneInfo.AdjustTextObject(\"buttonRepo\", \"buttonText\", 1, new Vector3(0.4, 0.4, 0.03));\r\n            //SCENE CREDITS\r\n            //  frame\r\n            this.menuGroupSceneInfo.AddMenuObject(\"creditFrame\", 2);\r\n            this.menuGroupSceneInfo.AdjustMenuObject(\"creditFrame\", 0, new Vector3(-2.9, 1.9, 2.4));\r\n            this.menuGroupSceneInfo.AdjustMenuObject(\"creditFrame\", 1, new Vector3(1.4, 1.4, 1.4));\r\n            this.menuGroupSceneInfo.AdjustMenuObject(\"creditFrame\", 2, new Vector3(0, 270, 0));\r\n            //  text parent\r\n            this.menuGroupSceneInfo.AddMenuObject(\"creditContent\", 0, \"creditFrame\");\r\n            this.menuGroupSceneInfo.AdjustMenuObject(\"creditContent\", 0, new Vector3(0, 0, 0.0125));\r\n            this.menuGroupSceneInfo.AdjustMenuObject(\"creditContent\", 1, new Vector3(1, 1, 1));\r\n            //  label header text\r\n            this.menuGroupSceneInfo.AddMenuText(\"creditContent\", \"infoHeader\", \"SCENE CREDITS\");\r\n            this.menuGroupSceneInfo.AdjustTextObject(\"creditContent\", \"infoHeader\", 0, new Vector3(0, 0.6, 0));\r\n            this.menuGroupSceneInfo.AdjustTextObject(\"creditContent\", \"infoHeader\", 1, new Vector3(0.35, 0.35, 0.035));\r\n            this.menuGroupSceneInfo.AdjustTextDisplay(\"creditContent\", \"infoHeader\", 0, 6);\r\n            //  label header text\r\n            this.menuGroupSceneInfo.AddMenuText(\"creditContent\", \"infoHeader\", \"This project included a large number of creators from the Decentraland community! Though this specific scene may not include assets from every creator,\" +\r\n                \" I feel it is important to still include every person who helped make this project a reality!\"\r\n                + \"\\n\\n\\n\\n\\t\\t   Music: Karl Casey @ White Bat Audio\");\r\n            this.menuGroupSceneInfo.AdjustTextObject(\"creditContent\", \"infoHeader\", 0, new Vector3(0, 0.45, 0));\r\n            this.menuGroupSceneInfo.AdjustTextObject(\"creditContent\", \"infoHeader\", 1, new Vector3(0.35, 0.35, 0.035));\r\n            this.menuGroupSceneInfo.GetMenuObjectText(\"creditContent\", \"infoHeader\").getComponent(TextShape).width = 6;\r\n            this.menuGroupSceneInfo.GetMenuObjectText(\"creditContent\", \"infoHeader\").getComponent(TextShape).textWrapping = true;\r\n            this.menuGroupSceneInfo.AdjustTextDisplay(\"creditContent\", \"infoHeader\", 0, 2);\r\n            this.menuGroupSceneInfo.AdjustTextDisplay(\"creditContent\", \"infoHeader\", 1, 0);\r\n            this.menuGroupSceneInfo.AdjustTextDisplay(\"creditContent\", \"infoHeader\", 2, 0);\r\n            //generate creator linkages\r\n            for (var i = 0; i < this.stringsCreators.length; i++) {\r\n                var pos = new Vector3(((i % 4) - 1.5) * 0.61, -0.38 - (Math.round(i / 8) * 0.235), 0);\r\n                //  button creator object\r\n                this.menuGroupSceneInfo.AddMenuObject(\"buttonCreator\" + i, 5, \"creditFrame\");\r\n                this.menuGroupSceneInfo.AdjustMenuObject(\"buttonCreator\" + i, 0, pos);\r\n                this.menuGroupSceneInfo.AdjustMenuObject(\"buttonCreator\" + i, 1, new Vector3(0.22, 0.2, 0.2));\r\n                /*this.menuGroupSceneInfo.GetMenuObject(\"buttonCreator\"+i).addComponent\r\n                (\r\n                    new OnPointerDown\r\n                    (\r\n                        (e) =>\r\n                        {\r\n                        //open link\r\n                        openExternalURL(\"\");\r\n                        },\r\n                        {\r\n                        button: ActionButton.ANY,\r\n                        showFeedback: true,\r\n                        hoverText: \"[E] CREATOR_NAME_\"+i,\r\n                        distance: 8\r\n                        }\r\n                    )\r\n                );*/\r\n                //  button creator text\r\n                this.menuGroupSceneInfo.AddMenuText(\"buttonCreator\" + i, \"buttonText\", this.stringsCreators[i]);\r\n                this.menuGroupSceneInfo.AdjustTextObject(\"buttonCreator\" + i, \"buttonText\", 0, new Vector3(0, 0, -0.031));\r\n                this.menuGroupSceneInfo.AdjustTextObject(\"buttonCreator\" + i, \"buttonText\", 1, new Vector3(0.30, 0.30, 0.03));\r\n            }\r\n            //activate menu by default\r\n            this.menuGroupSceneInfo.SetMenuState(true);\r\n        };\r\n        return GameMenu;\r\n    }());\r\n    exports.GameMenu = GameMenu;\r\n});\r\ndefine(\"utilities/audio-manager\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.AudioManager = void 0;\r\n    /*      AUDIO MANAGER\r\n        controls audio components in-scene, mainly lobby (game idle) and\r\n        battle (during wave) music.\r\n    */\r\n    var AudioManager = /** @class */ (function (_super) {\r\n        __extends(AudioManager, _super);\r\n        //constructor\r\n        function AudioManager() {\r\n            var _this = _super.call(this) || this;\r\n            _this.addComponent(new Transform({\r\n                position: new Vector3(32, 20, 32),\r\n                scale: new Vector3(1, 1, 1),\r\n                rotation: new Quaternion().setEuler(0, 0, 0)\r\n            }));\r\n            //initialize music components\r\n            //  lobby\r\n            _this.musicLobbyObj = new Entity();\r\n            _this.musicLobbyObj.setParent(_this);\r\n            _this.musicLobbySource = new AudioSource(new AudioClip(\"audio/WhiteBatAudio_VHS_Memory.mp3\"));\r\n            _this.musicLobbySource.playing = false;\r\n            _this.musicLobbySource.loop = true;\r\n            _this.musicLobbyObj.addComponent(_this.musicLobbySource);\r\n            //  battle\r\n            _this.musicBattleObj = new Entity();\r\n            _this.musicBattleObj.setParent(_this);\r\n            _this.musicBattleSource = new AudioSource(new AudioClip(\"audio/WhiteBatAudio_Soma.mp3\"));\r\n            _this.musicBattleSource.playing = false;\r\n            _this.musicBattleSource.loop = true;\r\n            _this.musicBattleObj.addComponent(_this.musicBattleSource);\r\n            //add object to scene\r\n            engine.addEntity(_this);\r\n            return _this;\r\n        }\r\n        Object.defineProperty(AudioManager, \"Instance\", {\r\n            get: function () {\r\n                //ensure instance is set\r\n                if (AudioManager.instance === undefined) {\r\n                    AudioManager.instance = new AudioManager();\r\n                }\r\n                return AudioManager.instance;\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        /**\r\n         *\r\n         * @param state targeted music state (0=off, 1=lobby)\r\n         */\r\n        AudioManager.prototype.SetMusicState = function (state) {\r\n            //disable all tracks\r\n            this.musicLobbySource.playing = false;\r\n            this.musicBattleSource.playing = false;\r\n            //activate targeted music\r\n            switch (state) {\r\n                case 1:\r\n                    this.musicLobbySource.playing = true;\r\n                    break;\r\n                case 2:\r\n                    this.musicBattleSource.playing = true;\r\n                    break;\r\n            }\r\n        };\r\n        return AudioManager;\r\n    }(Entity));\r\n    exports.AudioManager = AudioManager;\r\n});\r\ndefine(\"td-core/game-manager\", [\"require\", \"exports\", \"td-core/data/difficulty-data\", \"td-core/data/tower-data\", \"td-core/enemy-manager\", \"td-core/enemy-wave-manager\", \"td-core/map-pathing\", \"td-core/tower-manager\", \"td-core/game-states\", \"td-core/game-menu\", \"td-core/data/enemy-data\", \"utilities/audio-manager\"], function (require, exports, difficulty_data_4, tower_data_4, enemy_manager_3, enemy_wave_manager_2, map_pathing_2, tower_manager_1, game_states_8, game_menu_1, enemy_data_5, audio_manager_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.GameManager = void 0;\r\n    //management class for tower defence scene\r\n    var GameManager = /** @class */ (function (_super) {\r\n        __extends(GameManager, _super);\r\n        /**\r\n         * constructor\r\n         */\r\n        function GameManager() {\r\n            var _this = \r\n            //object\r\n            _super.call(this) || this;\r\n            /**\r\n             * creates an enemy unit based on the current wave, pulling from any tied\r\n             * enemy definitions\r\n             */\r\n            _this.unitLength = 0;\r\n            _this.unitIndex = 0;\r\n            _this.unitIndexTest = 0;\r\n            _this.addComponent(new Transform({\r\n                position: new Vector3(0, 0, 0),\r\n                scale: new Vector3(1, 1, 1),\r\n                rotation: new Quaternion().setEuler(0, 0, 0)\r\n            }));\r\n            //menu callbacks\r\n            game_menu_1.GameMenu.Instance.SetDifficulty = _this.callbackSetDifficulty;\r\n            game_menu_1.GameMenu.Instance.GameStart = _this.callbackGameStart;\r\n            game_menu_1.GameMenu.Instance.GameReset = _this.callbackGameReset;\r\n            game_menu_1.GameMenu.Instance.WaveStart = _this.callbackWaveStart;\r\n            game_menu_1.GameMenu.Instance.TowerBuild = _this.callbackTowerBuild;\r\n            game_menu_1.GameMenu.Instance.TowerDeconstruct = _this.callbackTowerDeconstruct;\r\n            //enable and place tower menu (work around to enforce positional update based on player location)\r\n            //  initial position\r\n            game_menu_1.GameMenu.Instance.menuGroupTower.AdjustMenuParent(0, new Vector3(4, 24, 4));\r\n            //  rotation\r\n            game_menu_1.GameMenu.Instance.menuGroupTower.groupParent.getComponent(Transform).lookAt(Camera.instance.position);\r\n            game_menu_1.GameMenu.Instance.menuGroupTower.groupParent.getComponent(Transform).rotation = Quaternion.Euler(0, game_menu_1.GameMenu.Instance.menuGroupTower.groupParent.getComponent(Transform).eulerAngles.y + 180, 0);\r\n            //timer system setup\r\n            _this.gameTimerSystem = new GameTimerSystem();\r\n            _this.gameTimerSystem.SpawnEnemy = _this.callbackEnemyUnitSpawn;\r\n            _this.gameTimerSystem.StartWave = _this.callbackWaveStart;\r\n            engine.addSystem(_this.gameTimerSystem);\r\n            //manager component setup\r\n            //  waypoint manager\r\n            map_pathing_2.WaypointManager.Instance.GenerateWaypoints();\r\n            map_pathing_2.WaypointManager.Instance.setParent(_this);\r\n            //  tower manager\r\n            tower_manager_1.TowerManager.Instance.GetSelectedTowerMove = _this.getSelectedTowerMove;\r\n            tower_manager_1.TowerManager.Instance.MoveTower = _this.callbackTowerMove;\r\n            tower_manager_1.TowerManager.Instance.GetSelectedTower = _this.getSelectedTower;\r\n            tower_manager_1.TowerManager.Instance.SelectTower = _this.callbackTowerSelect;\r\n            tower_manager_1.TowerManager.Instance.DamageEnemy = _this.callbackEnemyUnitDamage;\r\n            tower_manager_1.TowerManager.Instance.ApplyEffect = enemy_manager_3.EnemyUnitManager.Instance.callbackApplyEffect;\r\n            tower_manager_1.TowerManager.Instance.GenerateTowerFoundations();\r\n            tower_manager_1.TowerManager.Instance.setParent(_this);\r\n            //  enemy unit manager\r\n            enemy_manager_3.EnemyUnitManager.Instance.UnitAttack = _this.callbackPlayerBaseDamage;\r\n            enemy_manager_3.EnemyUnitManager.Instance.UnitDeath = _this.callbackEnemyUnitDeath;\r\n            enemy_manager_3.EnemyUnitManager.Instance.setParent(_this);\r\n            enemy_manager_3.EnemyUnitManager.Instance.Initialize();\r\n            //add to engine\r\n            engine.addEntity(_this);\r\n            //set default difficulty\r\n            _this.SetDifficulty(2);\r\n            return _this;\r\n        }\r\n        Object.defineProperty(GameManager, \"Instance\", {\r\n            get: function () {\r\n                //ensure instance is set\r\n                if (GameManager.instance === undefined) {\r\n                    GameManager.instance = new GameManager();\r\n                }\r\n                return GameManager.instance;\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        //callback to set difficulty\r\n        GameManager.prototype.callbackSetDifficulty = function (dif) {\r\n            GameManager.Instance.SetDifficulty(dif);\r\n        };\r\n        //sets the game's difficulty\r\n        GameManager.prototype.SetDifficulty = function (dif) {\r\n            //redefine difficulty\r\n            if (dif >= difficulty_data_4.DifficultyData.length) {\r\n                game_states_8.GameState.DifficultyCur = 0;\r\n            }\r\n            else if (dif < 0) {\r\n                game_states_8.GameState.DifficultyCur = difficulty_data_4.DifficultyData.length - 1;\r\n            }\r\n            else {\r\n                game_states_8.GameState.DifficultyCur = dif;\r\n            }\r\n            //update text\r\n            game_menu_1.GameMenu.Instance.updateDifficulty();\r\n        };\r\n        /**\r\n         * returns the game to its initialization point, displaying the difficulty menu\r\n         */\r\n        GameManager.prototype.callbackGameReset = function () {\r\n            GameManager.Instance.GameReset();\r\n        };\r\n        GameManager.prototype.GameReset = function () {\r\n            if (game_states_8.GameState.debuggingManager)\r\n                log(\"TD MANAGER: game resetting...\");\r\n            //update gamestate\r\n            game_states_8.GameState.stateCur = 0;\r\n            //halt wave/spawning\r\n            this.gameTimerSystem.halted = true;\r\n            //clean map\r\n            enemy_manager_3.EnemyUnitManager.Instance.ClearUnits();\r\n            tower_manager_1.TowerManager.Instance.ClearTowers();\r\n            //remove selected move foundation\r\n            this.selectedFoundationMove = undefined;\r\n            tower_manager_1.TowerManager.Instance.SetTowerMoveMarkerState(false);\r\n            //redraw display\r\n            game_menu_1.GameMenu.Instance.UpdateMainMenuState(0);\r\n            game_menu_1.GameMenu.Instance.UpdateWaveCount();\r\n            game_menu_1.GameMenu.Instance.updateLifeCount();\r\n            game_menu_1.GameMenu.Instance.updateMoneyCount();\r\n            //play music: lobby\r\n            audio_manager_1.AudioManager.Instance.SetMusicState(1);\r\n            if (game_states_8.GameState.debuggingManager)\r\n                log(\"TD MANAGER: game reset!\");\r\n        };\r\n        /**\r\n         * starts the game, initializing all systems and setting the game stage to a neutral state.\r\n         */\r\n        GameManager.prototype.callbackGameStart = function () {\r\n            GameManager.Instance.GameStart();\r\n        };\r\n        GameManager.prototype.GameStart = function () {\r\n            if (game_states_8.GameState.debuggingManager)\r\n                log(\"TD MANAGER: game starting...\");\r\n            //update gamestate\r\n            game_states_8.GameState.stateCur = 1;\r\n            //clean map\r\n            //set default game state\r\n            game_states_8.GameState.WaveCur = 0;\r\n            game_states_8.GameState.PlayerHealth = difficulty_data_4.DifficultyData[game_states_8.GameState.DifficultyCur].PlayerHealth;\r\n            game_states_8.GameState.PlayerMoney = game_states_8.GameState.moneyStart;\r\n            //reset managers\r\n            //  spawners\r\n            map_pathing_2.WaypointManager.Instance.ResetSpawner();\r\n            map_pathing_2.WaypointManager.Instance.ParseSpawnerConfig();\r\n            //  units\r\n            enemy_manager_3.EnemyUnitManager.Instance.ClearUnits();\r\n            //  waves\r\n            enemy_wave_manager_2.EnemyWaveManager.Instance.GenerateWaves();\r\n            //  towers\r\n            tower_manager_1.TowerManager.Instance.ClearTowers();\r\n            //redraw display\r\n            game_menu_1.GameMenu.Instance.UpdateMainMenuState(1);\r\n            game_menu_1.GameMenu.Instance.UpdateWaveCount();\r\n            game_menu_1.GameMenu.Instance.updateLifeCount();\r\n            game_menu_1.GameMenu.Instance.updateMoneyCount();\r\n            //reset timer system\r\n            this.gameTimerSystem.Initialize();\r\n            //play music: lobby\r\n            audio_manager_1.AudioManager.Instance.SetMusicState(1);\r\n            if (game_states_8.GameState.debuggingManager)\r\n                log(\"TD MANAGER: game started!\");\r\n        };\r\n        /**\r\n         * ends the game, display game stats and removing enemies (keeps towers to view stats)\r\n         * @param isVictory whether the game ends in a win or a loss\r\n         */\r\n        GameManager.prototype.callbackGameEnd = function (isVictory) {\r\n            GameManager.Instance.GameEnd(isVictory);\r\n        };\r\n        GameManager.prototype.GameEnd = function (isVictory) {\r\n            if (game_states_8.GameState.debuggingManager)\r\n                log(\"TD MANAGER: game ending (\" + isVictory + \")...\");\r\n            //update gamestate\r\n            game_states_8.GameState.stateCur = 3;\r\n            //remove selected move foundation\r\n            this.selectedFoundationMove = undefined;\r\n            tower_manager_1.TowerManager.Instance.SetTowerMoveMarkerState(false);\r\n            //clear units\r\n            enemy_manager_3.EnemyUnitManager.Instance.ClearUnits();\r\n            //play music: lobby\r\n            audio_manager_1.AudioManager.Instance.SetMusicState(1);\r\n            if (game_states_8.GameState.debuggingManager)\r\n                log(\"TD MANAGER: game ended (\" + isVictory + \")!\");\r\n        };\r\n        /**\r\n         * begins the next wave, spawning all enemies in current wave per interval\r\n         */\r\n        GameManager.prototype.callbackWaveStart = function () {\r\n            GameManager.Instance.WaveStart();\r\n        };\r\n        GameManager.prototype.WaveStart = function () {\r\n            if (game_states_8.GameState.debuggingWave)\r\n                log(\"TD MANAGER: starting wave \" + game_states_8.GameState.WaveCur + \"...\");\r\n            //ensure game is between waves\r\n            if (game_states_8.GameState.stateCur != 1) {\r\n                if (game_states_8.GameState.debuggingWave)\r\n                    log(\"TD MANAGER: failed, incorrect state (\" + game_states_8.GameState.stateCur.toString() + \")\");\r\n                return;\r\n            }\r\n            //update gamestate\r\n            game_states_8.GameState.stateCur = 2;\r\n            //remove selected move foundation\r\n            this.selectedFoundationMove = undefined;\r\n            tower_manager_1.TowerManager.Instance.SetTowerMoveMarkerState(false);\r\n            //get rooster length\r\n            this.unitLength = enemy_wave_manager_2.EnemyWaveManager.Instance.GetEnemyWaveCurrent().enemyUnits.length;\r\n            //define number of units in wave\r\n            enemy_manager_3.EnemyUnitManager.Instance.enemySizeRemaining = 0;\r\n            for (var i = 0; i < this.unitLength; i++) {\r\n                enemy_manager_3.EnemyUnitManager.Instance.enemySizeRemaining += enemy_wave_manager_2.EnemyWaveManager.Instance.GetEnemyWaveCurrent().enemyUnits[i].enemyCount;\r\n            }\r\n            //prime timer system\r\n            this.gameTimerSystem.Initialize();\r\n            this.gameTimerSystem.halted = false;\r\n            //redraw display\r\n            game_menu_1.GameMenu.Instance.UpdateMainMenuState(2);\r\n            //play music: battle\r\n            audio_manager_1.AudioManager.Instance.SetMusicState(2);\r\n            if (game_states_8.GameState.debuggingWave)\r\n                log(\"TD MANAGER: started wave \" + game_states_8.GameState.WaveCur + \" with \" + enemy_manager_3.EnemyUnitManager.Instance.enemySizeRemaining + \" enemies!\");\r\n        };\r\n        /**\r\n         * called when all units in a wave have been defeated\r\n         */\r\n        GameManager.prototype.WaveEnd = function () {\r\n            if (game_states_8.GameState.debuggingWave)\r\n                log(\"TD MANAGER: wave \" + game_states_8.GameState.WaveCur + \" ending...\");\r\n            //check if there are waves remaining\r\n            if (game_states_8.GameState.WaveCur >= game_states_8.GameState.WaveMax - 1) {\r\n                if (game_states_8.GameState.debuggingWave)\r\n                    log(\"TD MANAGER: game ended on wave \" + game_states_8.GameState.WaveCur + \"!\");\r\n                this.GameEnd(true);\r\n                return;\r\n            }\r\n            //update gamestate\r\n            game_states_8.GameState.stateCur = 1;\r\n            //award bounty to player\r\n            game_states_8.GameState.PlayerMoney += game_states_8.GameState.MoneyRewardWave;\r\n            game_menu_1.GameMenu.Instance.updateMoneyCount();\r\n            //push next wave\r\n            game_states_8.GameState.WaveCur++;\r\n            //check waypoint actions\r\n            map_pathing_2.WaypointManager.Instance.ParseSpawnerConfig();\r\n            //redraw display\r\n            game_menu_1.GameMenu.Instance.UpdateMainMenuState(1);\r\n            //play music: lobby\r\n            audio_manager_1.AudioManager.Instance.SetMusicState(1);\r\n            if (game_states_8.GameState.debuggingWave)\r\n                log(\"TD MANAGER: wave \" + game_states_8.GameState.WaveCur + \" ended!\");\r\n        };\r\n        GameManager.prototype.getSelectedTowerMove = function () {\r\n            return GameManager.Instance.selectedFoundationMove;\r\n        };\r\n        /**\r\n         * called when player interacts with a tower foundation object to move tower,\r\n         *  first selection -> sets foundation for swap\r\n         *  second selection -> swap towers between foundations\r\n         */\r\n        GameManager.prototype.callbackTowerMove = function (index) {\r\n            GameManager.Instance.TowerMove(index);\r\n        };\r\n        GameManager.prototype.TowerMove = function (index) {\r\n            if (game_states_8.GameState.debuggingTower)\r\n                log(\"TD MANAGER: foundation \" + index.toString() + \" selected for move\");\r\n            //hide edit menu\r\n            game_menu_1.GameMenu.Instance.SetTowerMenuState(false);\r\n            //only allow tower moves between waves\r\n            if (game_states_8.GameState.stateCur != 1) {\r\n                if (game_states_8.GameState.debuggingTower)\r\n                    log(\"TD MANAGER (ERROR): tower move failed, wrong game state\");\r\n                return;\r\n            }\r\n            //if no foundation is selected for swap\r\n            if (this.selectedFoundationMove == undefined) {\r\n                if (game_states_8.GameState.debuggingTower)\r\n                    log(\"TD MANAGER: move foundation was undefined, set to: \" + index.toString());\r\n                //select foundation\r\n                this.selectedFoundationMove = tower_manager_1.TowerManager.Instance.TowerFoundationDict.getItem(index.toString());\r\n                //set tower move marker\r\n                if (this.selectedFoundationMove != undefined)\r\n                    tower_manager_1.TowerManager.Instance.SetTowerMoveMarker(index);\r\n            }\r\n            //if foundation is selected for swap\r\n            else {\r\n                //if targeted foundation is different foundation\r\n                if (this.selectedFoundationMove.Index != index) {\r\n                    if (game_states_8.GameState.debuggingTower)\r\n                        log(\"TD MANAGER: move foundation was defined as \" + this.selectedFoundationMove.Index.toString() + \", swapping with \" + index.toString());\r\n                    tower_manager_1.TowerManager.Instance.MoveTowerObject(this.selectedFoundationMove.Index, index);\r\n                }\r\n                else {\r\n                    if (game_states_8.GameState.debuggingTower)\r\n                        log(\"TD MANAGER: move foundation was defined as \" + this.selectedFoundationMove.Index.toString() + \", selected same foundation (cleared)\");\r\n                }\r\n                //remove selected move foundation\r\n                this.selectedFoundationMove = undefined;\r\n                //set tower move marker\r\n                tower_manager_1.TowerManager.Instance.SetTowerMoveMarkerState(false);\r\n            }\r\n        };\r\n        GameManager.prototype.getSelectedTower = function () {\r\n            return GameManager.Instance.selectedFoundation;\r\n        };\r\n        /**\r\n         * called when player interacts with a tower foundation object to edit tower,\r\n         * opens interaction menu based on foundation's state:\r\n         *  if tower does not exist -> tower construction menu\r\n         *  if tower exists -> tower editing menu\r\n         * @param index tower targeted for interaction\r\n         */\r\n        GameManager.prototype.callbackTowerSelect = function (index) {\r\n            GameManager.Instance.TowerSelect(index);\r\n        };\r\n        GameManager.prototype.TowerSelect = function (index) {\r\n            if (game_states_8.GameState.debuggingTower)\r\n                log(\"TD MANAGER: selecting tower foundation \" + index.toString() + \"...\");\r\n            //only allow tower interactions when game is running\r\n            if (game_states_8.GameState.stateCur == 0) {\r\n                if (game_states_8.GameState.debuggingTower)\r\n                    log(\"TD MANAGER (ERROR): tower move failed, wrong game state\");\r\n                return;\r\n            }\r\n            //hide swap selection object\r\n            this.selectedFoundationMove = undefined;\r\n            tower_manager_1.TowerManager.Instance.SetTowerMoveMarkerState(false);\r\n            //attempt to get targeted foundation\r\n            this.selectedFoundation = tower_manager_1.TowerManager.Instance.TowerFoundationDict.getItem(index.toString());\r\n            if (this.selectedFoundation == undefined) {\r\n                if (game_states_8.GameState.debuggingTower) {\r\n                    log(\"TD MANAGER (ERROR): attempting to select non-existant tower foundation (index = \" + index.toString() + \")\");\r\n                }\r\n                return;\r\n            }\r\n            //position menu to selected foundation\r\n            //  initial position\r\n            game_menu_1.GameMenu.Instance.menuGroupTower.AdjustMenuParent(0, this.selectedFoundation.getComponent(Transform).position);\r\n            //  rotation\r\n            game_menu_1.GameMenu.Instance.menuGroupTower.groupParent.getComponent(Transform).lookAt(Camera.instance.position);\r\n            game_menu_1.GameMenu.Instance.menuGroupTower.groupParent.getComponent(Transform).rotation = Quaternion.Euler(0, game_menu_1.GameMenu.Instance.menuGroupTower.groupParent.getComponent(Transform).eulerAngles.y + 180, 0);\r\n            //update menu display for tower foundation\r\n            game_menu_1.GameMenu.Instance.DisplayTowerFoundation(this.selectedFoundation);\r\n            if (game_states_8.GameState.debuggingTower)\r\n                log(\"TD MANAGER: selected tower foundation \" + index.toString() + \"!\");\r\n        };\r\n        /**\r\n         * builds the currently selected tower def on the currently selected foundation.\r\n         */\r\n        GameManager.prototype.callbackTowerBuild = function () {\r\n            GameManager.Instance.TowerBuild();\r\n        };\r\n        GameManager.prototype.TowerBuild = function () {\r\n            //only allow tower interactions when game is running\r\n            if (game_states_8.GameState.stateCur == 0 || game_states_8.GameState.stateCur == 3) {\r\n                if (game_states_8.GameState.debuggingTower)\r\n                    log(\"TD MANAGER (ERROR): tower build failed, wrong game state\");\r\n                return;\r\n            }\r\n            //ensure foundation is selected\r\n            if (this.selectedFoundation == undefined) {\r\n                if (game_states_8.GameState.debuggingTower) {\r\n                    log(\"TD MANAGER (ERROR): tower build failed, no tower foundation selected\");\r\n                }\r\n                return;\r\n            }\r\n            //check player's money balance\r\n            if (game_states_8.GameState.PlayerMoney < tower_data_4.dataTowers[game_menu_1.GameMenu.Instance.towerDefinitionIndex].ValueCost && !game_states_8.GameState.debuggingTower) {\r\n                if (game_states_8.GameState.debuggingTower) {\r\n                    log(\"TD MANAGER (ERROR): tower build failed, not enough player funding\");\r\n                }\r\n                return;\r\n            }\r\n            if (game_states_8.GameState.debuggingTower) {\r\n                log(\"TD MANAGER: constructing tower (type=\" + game_menu_1.GameMenu.Instance.towerDefinitionIndex.toString() + \") on foundation (index=\"\r\n                    + this.selectedFoundation.Index.toString() + \")...\");\r\n            }\r\n            //remove funding\r\n            game_states_8.GameState.PlayerMoney -= tower_data_4.dataTowers[game_menu_1.GameMenu.Instance.towerDefinitionIndex].ValueCost;\r\n            game_menu_1.GameMenu.Instance.updateMoneyCount();\r\n            //construct tower\r\n            tower_manager_1.TowerManager.Instance.BuildTower(this.selectedFoundation.Index, game_menu_1.GameMenu.Instance.towerDefinitionIndex);\r\n            //update menu display for tower foundation\r\n            game_menu_1.GameMenu.Instance.DisplayTowerFoundation(this.selectedFoundation);\r\n            if (game_states_8.GameState.debuggingTower) {\r\n                log(\"TD MANAGER: constructed tower frame (type=\" + this.selectedFoundation.TowerFrame.TowerDef.toString()\r\n                    + \") foundation (index=\" + this.selectedFoundation.Index.toString() + \")!\");\r\n            }\r\n        };\r\n        /**\r\n         * removes the tower from the currently selected foundation\r\n         */\r\n        GameManager.prototype.callbackTowerDeconstruct = function () {\r\n            GameManager.Instance.TowerDeconstruct();\r\n        };\r\n        GameManager.prototype.TowerDeconstruct = function () {\r\n            //only allow tower interactions when game is running\r\n            if (game_states_8.GameState.stateCur == 0 || game_states_8.GameState.stateCur == 3) {\r\n                if (game_states_8.GameState.debuggingTower)\r\n                    log(\"TD MANAGER (ERROR): tower deconstruct failed, wrong game state\");\r\n                return;\r\n            }\r\n            //ensure foundation is selected\r\n            if (this.selectedFoundation == undefined) {\r\n                if (game_states_8.GameState.debuggingTower) {\r\n                    log(\"TD MANAGER (ERROR): tower deconstruct failed, no tower foundation selected\");\r\n                }\r\n                return;\r\n            }\r\n            //ensure frame is selected\r\n            if (this.selectedFoundation.TowerFrame.TowerDef == -1) {\r\n                if (game_states_8.GameState.debuggingTower) {\r\n                    log(\"TD MANAGER (ERROR): tower deconstruct failed, no tower frame selected\");\r\n                }\r\n                return;\r\n            }\r\n            if (game_states_8.GameState.debuggingTower) {\r\n                log(\"TD MANAGER: deconstructing tower on foundation (index=\" + this.selectedFoundation.Index.toString() + \")...\");\r\n            }\r\n            //refund tower\r\n            tower_manager_1.TowerManager.Instance.ClearTower(this.selectedFoundation.Index, true);\r\n            //redraw display\r\n            game_menu_1.GameMenu.Instance.DisplayTowerFoundation(this.selectedFoundation);\r\n            if (game_states_8.GameState.debuggingTower) {\r\n                log(\"TD MANAGER: deconstructed tower on foundation (index=\" + this.selectedFoundation.Index.toString() + \")!\");\r\n            }\r\n        };\r\n        GameManager.prototype.callbackEnemyUnitSpawn = function () {\r\n            GameManager.Instance.EnemyUnitSpawn();\r\n        };\r\n        GameManager.prototype.EnemyUnitSpawn = function () {\r\n            if (game_states_8.GameState.debuggingEnemy)\r\n                log(\"TD MANAGER: spawning enemy unit...\");\r\n            //attempt to spawn an enemy for each spawn point\r\n            for (var k = 0; k < map_pathing_2.WaypointManager.Instance.SpawnPoints.size(); k++) {\r\n                //check waypoint\r\n                if (map_pathing_2.WaypointManager.Instance.SpawnPoints.getItem(k).State != 1)\r\n                    continue;\r\n                //get type of next unit, ensuring randomly selected unit has a count available\r\n                this.unitLength = enemy_wave_manager_2.EnemyWaveManager.Instance.GetEnemyWaveCurrent().enemyUnits.length;\r\n                this.unitIndexTest = Math.floor(Math.random() * this.unitLength);\r\n                for (var i = 0; i < this.unitLength; i++) {\r\n                    //check unit\r\n                    if (enemy_wave_manager_2.EnemyWaveManager.Instance.GetEnemyWaveCurrent().enemyUnits[this.unitIndexTest].enemyCount != 0) {\r\n                        this.unitIndex = this.unitIndexTest;\r\n                        break;\r\n                    }\r\n                    //push next check\r\n                    this.unitIndexTest++;\r\n                    if (this.unitIndexTest >= this.unitLength) {\r\n                        this.unitIndexTest = 0;\r\n                    }\r\n                }\r\n                //error check for 0 unit count\r\n                if (enemy_wave_manager_2.EnemyWaveManager.Instance.GetEnemyWaveCurrent().enemyUnits[this.unitIndex].enemyCount == 0) {\r\n                    //halt spawning\r\n                    this.gameTimerSystem.spawningFinished = true;\r\n                    //check for break period (player gets 1 stall every boss wave)\r\n                    if (i != 1 && ((i + 1) % enemy_wave_manager_2.EnemyWaveManager.Instance.bossInterval) == 0) {\r\n                        this.gameTimerSystem.halted = true;\r\n                    }\r\n                    //begin counting down to next wave\r\n                    else {\r\n                        this.gameTimerSystem.waveWaiting = true;\r\n                    }\r\n                    log(\"TD MANAGER (ERROR): attempted to create enemy unit for an empty wave\");\r\n                    return;\r\n                }\r\n                //attempt to assign unit\r\n                var unitObj = enemy_manager_3.EnemyUnitManager.Instance.AssignEnemyUnit(enemy_wave_manager_2.EnemyWaveManager.Instance.GetEnemyWaveCurrent().enemyUnits[this.unitIndex].enemyIndex, k);\r\n                //check if unit was available for assignment\r\n                if (unitObj != undefined) {\r\n                    //remove unit from wave\r\n                    enemy_wave_manager_2.EnemyWaveManager.Instance.GetEnemyWaveCurrent().enemyUnits[this.unitIndex].enemyCount--;\r\n                    //check if all units have been spawned\r\n                    var spawnCheck = true;\r\n                    for (var i = 0; i < enemy_wave_manager_2.EnemyWaveManager.Instance.GetEnemyWaveCurrent().enemyUnits.length; i++) {\r\n                        if (enemy_wave_manager_2.EnemyWaveManager.Instance.GetEnemyWaveCurrent().enemyUnits[i].enemyCount > 0) {\r\n                            spawnCheck = false;\r\n                        }\r\n                    }\r\n                    //if all units have been expended, halt spawning\r\n                    if (spawnCheck) {\r\n                        this.gameTimerSystem.spawningFinished = false;\r\n                    }\r\n                    //update hud\r\n                    game_menu_1.GameMenu.Instance.UpdateEnemyCount();\r\n                    if (game_states_8.GameState.debuggingEnemy)\r\n                        log(\"TD MANAGER: spawned enemy unit, ID:\" + unitObj.Index.toString());\r\n                }\r\n                else {\r\n                    if (game_states_8.GameState.debuggingEnemy)\r\n                        log(\"TD MANAGER: failed to spawn enemy unit, all units are reserved\");\r\n                    return;\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * called when an enemy unit has been damaged by a tower\r\n         * @param enemyIndex index of enemy def to be used\r\n         * @param dam amount of damage enemy will take\r\n         * @param pen amount of armour penetrated\r\n         * @param rend amount of armour to rend from enemy\r\n         */\r\n        GameManager.prototype.callbackEnemyUnitDamage = function (enemyIndex, dam, pen, rend) {\r\n            GameManager.Instance.EnemyUnitDamage(enemyIndex, dam, pen, rend);\r\n        };\r\n        GameManager.prototype.EnemyUnitDamage = function (enemyIndex, dam, pen, rend) {\r\n            //remove unit object\r\n            enemy_manager_3.EnemyUnitManager.Instance.DamageUnit(enemyIndex, dam, pen, rend);\r\n        };\r\n        GameManager.prototype.callbackEnemyUnitDeath = function (index, rewarded) {\r\n            GameManager.Instance.EnemyUnitDeath(index, rewarded);\r\n        };\r\n        GameManager.prototype.EnemyUnitDeath = function (index, rewarded) {\r\n            this.enemyUnit = enemy_manager_3.EnemyUnitManager.Instance.GetEnemyUnitByIndex(index);\r\n            //ensure unit exists\r\n            if (this.enemyUnit == undefined) {\r\n                log(\"TD MANAGER (ERROR): attempting to kill nonexistant enemy=\" + index.toString());\r\n                return;\r\n            }\r\n            //ensure unit is alive\r\n            if (!this.enemyUnit.IsAlive) {\r\n                log(\"TD MANAGER (ERROR): attempting to kill dead enemy=\" + index.toString());\r\n                return;\r\n            }\r\n            if (game_states_8.GameState.debuggingEnemy)\r\n                log(\"TD MANAGER: enemy unit \" + index.toString() + \" has been killed, processing EnemyUnitDeath\");\r\n            if (rewarded) {\r\n                //award bounty to player\r\n                game_states_8.GameState.PlayerMoney += enemy_data_5.EnemyData[this.enemyUnit.Type].ValueRewards;\r\n                game_menu_1.GameMenu.Instance.updateMoneyCount();\r\n            }\r\n            //send death update to all towers\r\n            tower_manager_1.TowerManager.Instance.TargetDeathCheck(index);\r\n            //update number of enemies\r\n            enemy_manager_3.EnemyUnitManager.Instance.enemySizeCur--;\r\n            enemy_manager_3.EnemyUnitManager.Instance.enemySizeRemaining--;\r\n            //update hud\r\n            game_menu_1.GameMenu.Instance.UpdateEnemyCount();\r\n            //check for wave end\r\n            if (enemy_manager_3.EnemyUnitManager.Instance.enemySizeRemaining <= 0) {\r\n                this.WaveEnd();\r\n            }\r\n        };\r\n        /**\r\n         * called when the player's base takes damage\r\n         */\r\n        GameManager.prototype.callbackPlayerBaseDamage = function (value) {\r\n            GameManager.Instance.PlayerBaseDamage(value);\r\n        };\r\n        GameManager.prototype.PlayerBaseDamage = function (value) {\r\n            if (game_states_8.GameState.debuggingManager)\r\n                log(\"TD MANAGER: player base dealt \" + value.toString() + \" damage\");\r\n            //deal damage\r\n            game_states_8.GameState.PlayerHealth -= value;\r\n            //check if player's base is destroyed\r\n            if (game_states_8.GameState.PlayerHealth <= 0) {\r\n                if (game_states_8.GameState.debuggingManager)\r\n                    log(\"TD MANAGER: player base has been destroyed, ending game...\");\r\n                this.GameEnd(false);\r\n            }\r\n            game_menu_1.GameMenu.Instance.updateLifeCount();\r\n        };\r\n        return GameManager;\r\n    }(Entity));\r\n    exports.GameManager = GameManager;\r\n    //game timers used for delaying waves and spawns\r\n    var GameTimerSystem = /** @class */ (function () {\r\n        /**\r\n         * constructor\r\n         */\r\n        function GameTimerSystem() {\r\n            //if true automatically begins the next wave after countdown\r\n            this.autoStart = false;\r\n            //paused\r\n            this.halted = true;\r\n            //wave timing\r\n            this.waveWaiting = false;\r\n            this.delayWaveLength = 20;\r\n            this.delayWaveTimeStamp = 0;\r\n            //spawn timing\r\n            this.spawningFinished = false;\r\n            this.delaySpawnLength = 1.25;\r\n            this.delaySpawnTimeStamp = 0;\r\n            //delegation defaults\r\n            this.StartWave = this.startWave;\r\n            this.SpawnEnemy = this.spawnEnemy;\r\n        }\r\n        GameTimerSystem.prototype.startWave = function () { log(\"timer system callback not set - start wave\"); };\r\n        GameTimerSystem.prototype.spawnEnemy = function () { log(\"timer system callback not set - spawn enemy\"); };\r\n        /**\r\n         * sets game session timers to default state called at the start of every wave\r\n         */\r\n        GameTimerSystem.prototype.Initialize = function () {\r\n            //wave timing\r\n            this.waveWaiting = false;\r\n            this.delayWaveTimeStamp = 0;\r\n            //spawn timing\r\n            this.spawningFinished = false;\r\n            this.delaySpawnTimeStamp = 0;\r\n            //activate time processing\r\n            this.halted = true;\r\n        };\r\n        /**\r\n         * processing over time\r\n         * @param dt delta time\r\n         */\r\n        GameTimerSystem.prototype.update = function (dt) {\r\n            //if time is still being processed\r\n            if (!this.halted) {\r\n                //if still spawning enemies\r\n                if (!this.spawningFinished) {\r\n                    //increment timer\r\n                    this.delaySpawnTimeStamp -= dt;\r\n                    //check spawn timer\r\n                    if (this.delaySpawnTimeStamp <= 0) {\r\n                        //attempt to spawn enemy\r\n                        this.SpawnEnemy();\r\n                        //reset timer\r\n                        this.delaySpawnTimeStamp = this.delaySpawnLength;\r\n                    }\r\n                }\r\n                //if wave is waiting to start\r\n                if (this.waveWaiting && this.autoStart) {\r\n                    //check wave timer\r\n                    this.delayWaveTimeStamp -= dt;\r\n                    if (this.delayWaveTimeStamp <= 0) {\r\n                        //reset timer\r\n                        this.delayWaveTimeStamp = this.delayWaveLength;\r\n                        //start next wave\r\n                        this.StartWave();\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        return GameTimerSystem;\r\n    }());\r\n});\r\n/*    DCL TOWER DEFENCE CREATION KIT\r\n    this is an example of setting up the creation kit for use.\r\n    if you are using a custom environment you will also need to\r\n    create a node path and tower foundations (found within td-core/settings).\r\n\r\n    This module leans heavily into singleton design. Unlike previous modules,\r\n    only a single instance of most managers can exist at a time. This means there\r\n    will only ever be a single environment possible per parcel, which should be\r\n    fine.\r\n*/\r\ndefine(\"game\", [\"require\", \"exports\", \"td-core/game-manager\"], function (require, exports, game_manager_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    //prepare tower defence game manager\r\n    game_manager_1.GameManager.Instance.GameReset();\r\n    //prepare game environment\r\n    //  framing\r\n    var environ = new Entity();\r\n    environ.addComponent(new GLTFShape(\"models/environment/envLowPoly.glb\"));\r\n    environ.addComponent(new Transform({\r\n        position: new Vector3(0, 0, 0),\r\n        scale: new Vector3(1, 1, 1),\r\n        rotation: new Quaternion().setEuler(0, 0, 0)\r\n    }));\r\n    engine.addEntity(environ);\r\n});\r\ndefine(\"td-core/enemy-wave-display\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.EnemyWaveDisplay = void 0;\r\n    /*      ENEMY WAVE DISPLAY\r\n        allows the player to preview enemy waves\r\n    */\r\n    var EnemyWaveDisplay = /** @class */ (function (_super) {\r\n        __extends(EnemyWaveDisplay, _super);\r\n        //3D text screens\r\n        //menuGroup:MenuGroup3D;\r\n        //constructor\r\n        function EnemyWaveDisplay() {\r\n            var _this = _super.call(this) || this;\r\n            _this.addComponent(new Transform({\r\n                position: new Vector3(0, 0, 0),\r\n                scale: new Vector3(1, 1, 1),\r\n                rotation: new Quaternion().setEuler(0, 0, 0)\r\n            }));\r\n            //prepare 3D enemy object display\r\n            //  stands\r\n            _this.displayStands = [new Entity(), new Entity()];\r\n            for (var i = 0; i < _this.displayStands.length; i++) {\r\n                _this.displayStands[i].setParent(_this);\r\n                _this.displayStands[i].addComponent(new BoxShape());\r\n            }\r\n            _this.displayStands[0].addComponent(new Transform({\r\n                position: new Vector3(-2, 0, 0),\r\n                scale: new Vector3(1, 1, 1),\r\n                rotation: new Quaternion().setEuler(0, 0, 0)\r\n            }));\r\n            _this.displayStands[1].addComponent(new Transform({\r\n                position: new Vector3(2, 0, 0),\r\n                scale: new Vector3(1, 1, 1),\r\n                rotation: new Quaternion().setEuler(0, 0, 0)\r\n            }));\r\n            //  objects\r\n            _this.displayObject = [new Entity(), new Entity()];\r\n            for (var i = 0; i < _this.displayObject.length; i++) {\r\n                _this.displayObject[i].setParent(_this);\r\n                _this.displayObject[i].addComponent(new BoxShape());\r\n            }\r\n            _this.displayObject[0].addComponent(new Transform({\r\n                position: new Vector3(-2, 2, 0),\r\n                scale: new Vector3(1, 1, 1),\r\n                rotation: new Quaternion().setEuler(0, 0, 0)\r\n            }));\r\n            _this.displayObject[1].addComponent(new Transform({\r\n                position: new Vector3(2, 2, 0),\r\n                scale: new Vector3(1, 1, 1),\r\n                rotation: new Quaternion().setEuler(0, 0, 0)\r\n            }));\r\n            return _this;\r\n            //prepare 3D text/stats display\r\n            //this.menuGroup = new MenuGroup3D(this);\r\n        }\r\n        return EnemyWaveDisplay;\r\n    }(Entity));\r\n    exports.EnemyWaveDisplay = EnemyWaveDisplay;\r\n});\r\ndefine(\"td-core/config/difficulty-config\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.dataMap = void 0;\r\n    //map data\r\n    exports.dataMap = [\r\n        //0: debugging map\r\n        {\r\n            DisplayName: \"Debugger\",\r\n            DisplayDesc: \"Realm for debugging the game\",\r\n            MonsterTypes: \"0_1_2\",\r\n            WaveCount: 10,\r\n            DifficultyWaveAdd: 2\r\n        }\r\n        //1:\r\n    ];\r\n});\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FtZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy90ZC1jb3JlL2RhdGEvZGlmZmljdWx0eS1kYXRhLnRzIiwiLi4vc3JjL3RkLWNvcmUvZGF0YS90b3dlci1kYXRhLnRzIiwiLi4vc3JjL3V0aWxpdGllcy9jb2xsZWN0aW9ucy50cyIsIi4uL3NyYy90ZC1jb3JlL2RhdGEvZW5lbXktZGF0YS50cyIsIi4uL3NyYy90ZC1jb3JlL2dhbWUtc3RhdGVzLnRzIiwiLi4vc3JjL3RkLWNvcmUvY29uZmlnL3BhdGhpbmctY29uZmlnLnRzIiwiLi4vc3JjL3RkLWNvcmUvbWFwLXBhdGhpbmcudHMiLCIuLi9zcmMvdGQtY29yZS9jb25maWcvdG93ZXItY29uZmlnLnRzIiwiLi4vc3JjL3RkLWNvcmUvdG93ZXItZW50aXR5LnRzIiwiLi4vc3JjL3RkLWNvcmUvZW5lbXktZW50aXR5LnRzIiwiLi4vc3JjL3RkLWNvcmUvZW5lbXktbWFuYWdlci50cyIsIi4uL3NyYy90ZC1jb3JlL2VuZW15LXdhdmUtbWFuYWdlci50cyIsIi4uL3NyYy90ZC1jb3JlL3Rvd2VyLW1hbmFnZXIudHMiLCIuLi9zcmMvdXRpbGl0aWVzL21lbnUtZ3JvdXAtMkQudHMiLCIuLi9zcmMvdXRpbGl0aWVzL21lbnUtZ3JvdXAtM0QudHMiLCIuLi9zcmMvdGQtY29yZS9nYW1lLW1lbnUudHMiLCIuLi9zcmMvdXRpbGl0aWVzL2F1ZGlvLW1hbmFnZXIudHMiLCIuLi9zcmMvdGQtY29yZS9nYW1lLW1hbmFnZXIudHMiLCIuLi9zcmMvZ2FtZS50cyIsIi4uL3NyYy90ZC1jb3JlL2VuZW15LXdhdmUtZGlzcGxheS50cyIsIi4uL3NyYy90ZC1jb3JlL2NvbmZpZy9kaWZmaWN1bHR5LWNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBQUE7Ozs7TUFJRTtJQUNXLFFBQUEsY0FBYyxHQUMzQjtRQUNJLGNBQWM7UUFDZDtZQUNJLFdB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SyxFQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDakIsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDckIsUUFBUSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDdEI7UUFDRCxVQUFVO1FBQ1Y7WUFDSSxLQUFLLEVBQUcsQ0FBQztZQUNULElBQUksRUFBRSxDQUFDO1lBQ1AsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ1gsS0FBSyxFQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDakIsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDckIsUUFBUSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDdEI7UUFDRCxXQUFXO1FBQ1g7WUFDSSxLQUFLLEVBQUcsQ0FBQztZQUNULElBQUksRUFBRSxDQUFDO1lBQ1AsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ1gsS0FBSyxFQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDakIsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDckIsUUFBUSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDdEI7UUFDRCxtQkFBbUI7UUFDbkI7WUFDSSxLQUFLLEVBQUcsQ0FBQztZQUNULElBQUksRUFBRSxDQUFDO1lBQ1AsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ1gsS0FBSyxFQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDakIsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDckIsUUFBUSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDdEI7UUFDRCxjQUFjO1FBQ2Q7WUFD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QUFDLEVBQUUsQ0FBQyxHQUFDLDhCQUFhLENBQUMsS0FBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQ2xFO2dCQUNJLEtBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLDhCQUFhLENBQUMsS0FBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO2FBQ3BFO1lBRUQsVUFBVTtZQUNWLEtBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxTQUFTLENBQzlCO2dCQUNHLFFBQVEsRUFBRSxJQUFJLE9BQU8sQ0FBQyw4QkFBYSxDQUFDLEtBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsOEJBQWEsQ0FBQyxLQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLDhCQUFhLENBQUMsS0FBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDMUksS0FBSyxFQUFFLElBQUksT0FBTyxDQUFDLDhCQUFhLENBQUMsS0FBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSw4QkFBYSxDQUFDLEtBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsOEJBQWEsQ0FBQyxLQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM5SCxRQUFRLEVBQUUsSUFBSSxVQUFVLEVBQUUsQ0FBQyxRQUFRLENBQUMsOEJBQWEsQ0FBQyxLQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLDhCQUFhLENBQUMsS0FBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSw4QkFBYSxDQUFDLEtBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxR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QUFDLENBQUMsRUFBQyxDQUFDLENBQUM7YUFDN0MsQ0FBQyxDQUFDLENBQUM7WUFDSixLQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLFNBQVMsQ0FDL0M7Z0JBQ0csUUFBUSxFQUFFLElBQUksT0FBTyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO2dCQUM1QixLQUFLLEVBQUUsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7Z0JBQ3pCLFFBQVEsRUFBRSxJQUFJLFVBQVUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQzthQUM3QyxDQUFDLENBQUMsQ0FBQzs7WUFFSiwrQkFBK0I7WUFDL0IseUNBQXlDO1FBQzdDLENBQUM7UUFDTCx1QkFBQztJQUFELENBQUMsQUFqRUQsQ0FBc0MsTUFBTSxHQWlFM0M7SUFqRVksNENBQWdCOzs7Ozs7SUNMN0IsVUFBVTtJQUNHLFFBQUEsT0FBTyxHQUNwQjtRQUNJLGtCQUFrQjtRQUNsQjtZQUNJLFdBQVcsRUFBQyxVQUFVO1lBQ3RCLFdBQVcsRUFBQyw4QkFBOEI7WUFDMUMsWUFBWSxFQUFDLE9BQU87WUFDcEIsU0FBUyxFQUFDLEVBQUU7WUFDWixpQkFBaUIsRUFBQyxDQUFDO1NBQ3RCO1FBQ0QsSUFBSTtLQUNQLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKiAgICAgIERJRkZJQ1VMVFkgREFUQVxyXG4gICAgY29udGFpbnMgYWxsIGRhdGEgdXNlZCB0byBkZWZpbmUgY2VydGFpbiBkaWZmdWNsdGllcy4gdGhlXHJcbiAgICBzZWxlY3RlZCBkaWZmaWN1bHR5IGRpcmVjdGx5IGltcGFjdHMgZ2FtZSBlbGVtZW50cywgc3VjaCBhc1xyXG4gICAgZW5lbXkgaGVhbHRoLCBjdXJyZW5jeSBnYWluIHJhdGUsIGV0Yy5cclxuKi9cclxuZXhwb3J0IGNvbnN0IERpZmZpY3VsdHlEYXRhID1cclxuW1xyXG4gICAgLy9kaWZmaWN1bHRpZXNcclxuICAgIHtcclxuICAgICAgICBEaXNwbGF5TmFtZTpcIlZlcnkgRWFzeVwiLFxyXG4gICAgICAgIC8vc3RhZ2UgZGV0YWlsc1xyXG4gICAgICAgIFBsYXllckhlYWx0aDogNTAsXHJcbiAgICAgICAgLy9lbmVteSBkZXRhaWxzXHJcbiAgICAgICAgRW5lbXlIZWFsdGhQZXJjZW50OjcwLFxyXG4gICAgICAgIEVuZW15QXJtb3JQZXJjZW50OjcwLFxyXG4gICAgICAgIEVuZW15U3BlZWRQZXJjZW50OjcwLFxyXG4gICAgICAgIC8vZWNvbm9teSBkZXRhaWxzXHJcbiAgICAgICAgUG9pbnRHYWluUGVyY2VudDoxMjAsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIERpc3BsYXlOYW1lOlwiRWFzeVwiLFxyXG4gICAgICAgIC8vc3RhZ2UgZGV0YWlsc1xyXG4gICAgICAgIFBsYXllckhlYWx0aDogNDAsXHJcbiAgICAgICAgLy9lbmVteSBkZXRhaWxzXHJcbiAgICAgICAgRW5lbXlIZWFsdGhQZXJjZW50Ojg1LFxyXG4gICAgICAgIEVuZW15QXJtb3JQZXJjZW50Ojg1LFxyXG4gICAgICAgIEVuZW15U3BlZWRQZXJjZW50Ojg1LFxyXG4gICAgICAgIC8vZWNvbm9teSBkZXRhaWxzXHJcbiAgICAgICAgUG9pbnRHYWluUGVyY2VudDoxMTAsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIERpc3BsYXlOYW1lOlwiU3RhbmRhcmRcIixcclxuICAgICAgICAvL3N0YWdlIGRldGFpbHNcclxuICAgICAgICBQbGF5ZXJIZWFsdGg6IDMwLFxyXG4gICAgICAgIC8vZW5lbXkgZGV0YWlsc1xyXG4gICAgICAgIEVuZW15SGVhbHRoUGVyY2VudDoxMDAsXHJcbiAgICAgICAgRW5lbXlBcm1vclBlcmNlbnQ6MTAwLFxyXG4gICAgICAgIEVuZW15U3BlZWRQZXJjZW50OjEwMCxcclxuICAgICAgICAvL2Vjb25vbXkgZGV0YWlsc1xyXG4gICAgICAgIFBvaW50R2FpblBlcmNlbnQ6MTAwLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBEaXNwbGF5TmFtZTpcIkhhcmRcIixcclxuICAgICAgICAvL3N0YWdlIGRldGFpbHNcclxuICAgICAgICBQbGF5ZXJIZWFsdGg6IDI1LFxyXG4gICAgICAgIC8vZW5lbXkgZGV0YWlsc1xyXG4gICAgICAgIEVuZW15SGVhbHRoUGVyY2VudDoxMjAsXHJcbiAgICAgICAgRW5lbXlBcm1vclBlcmNlbnQ6MTIwLFxyXG4gICAgICAgIEVuZW15U3BlZWRQZXJjZW50OjEwNSxcclxuICAgICAgICAvL2Vjb25vbXkgZGV0YWlsc1xyXG4gICAgICAgIFBvaW50R2FpblBlcmNlbnQ6OTAsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIERpc3BsYXlOYW1lOlwiVmVyeSBIYXJkXCIsXHJcbiAgICAgICAgLy9zdGFnZSBkZXRhaWxzXHJcbiAgICAgICAgUGxheWVySGVhbHRoOiAyMCxcclxuICAgICAgICAvL2VuZW15IGRldGFpbHNcclxuICAgICAgICBFbmVteUhlYWx0aFBlcmNlbnQ6MTQwLFxyXG4gICAgICAgIEVuZW15QXJtb3JQZXJjZW50OjE0MCxcclxuICAgICAgICBFbmVteVNwZWVkUGVyY2VudDoxMTAsXHJcbiAgICAgICAgLy9lY29ub215IGRldGFpbHNcclxuICAgICAgICBQb2ludEdhaW5QZXJjZW50OjgwLFxyXG4gICAgfSxcclxuXSIsIi8qICAgICAgVE9XRVIgREFUQVxyXG4gICAgY29udGFpbnMgYWxsIGRhdGEgZGVmaW5pdGlvbnMgZm9yIGRlZmVuY2UgdG93ZXJzLiB0b3dlcnMgY29tZVxyXG4gICAgaW4gYSB2YXJpZXR5IG9mIHR5cGVzLCB3aXRoIGRpZmZlcmVudCBhdHRyaWJ1dGVzLCBhbmQgdXBncmFkZVxyXG4gICAgZmVhdHVyZXMuXHJcblxyXG4gICAgZGVmZW5jZSB0b3dlciBtb2RlbHMgbmVlZCB0byBiZSBwbGFjZWQgdW5kZXIgJ21vZGVscy90ZC1jb3JlL3Rvd2VyJy4gdGhlXHJcbiAgICBmb2xsb3dpbmcgYW5pbWF0aW9ucyBzaG91bGQgZXhpc3Qgb24gdGhlIG1vZGVsIGFuZCBmb2xsb3cgdGhlc2UgcGFyYW1ldGVyczpcclxuICAgICAgICAtYW5pbV9hdHRhY2s6IHVzZWQgd2hlbiB0aGUgdG93ZXIgaXMgYXR0YWNraW5nIGFuIGVuZW15XHJcbiAgICAgICAgLWFuaW1faWRsZTogdXNlZCB3aGVuIHRoZSB0b3dlciBpcyBub3QgYXR0YWNraW5nXHJcbiAgICBhbmltYXRpb25zIHNob3VsZCBzdGFydCBvbiBmcmFtZSAwXHJcblxyXG4gICAgYW5pbWF0aW9uIGxlbmd0aHMgYXJlIGF1dG9tYXRpY2FsbHkgc2NhbGVkIHRvIHRoZSB0b3dlcidzIHJhdGUgb2YgZmlyZS4gXHJcblxyXG4gICAgZGVmZW5jZSB0b3dlcnMgZGVhbCBkYW1hZ2UsIGFwcGx5IGRlYnVmZnMgdG8gZW5lbWllcywgYW5kIGJ1ZmYgYWxseSB0b3dlcnMuXHJcbiAgICB0aGVzZSBmYWN0b3JzIGNhbiBiZSBmdXJ0aGVyIG1vZGlmaWVkIGJ5IHByb3ZpZGluZyB1cGdyYWRlcyBmb3IgdGhlIHRvd2VyLlxyXG4gICAgdXBncmFkZXMgYXJlIG51bWJlciBzZXRzIHRoYXQgZGVmaW5lIHRoZSBjb3N0LCB0YXJnZXQsIGFuZCBlZmZlY3Qgb2YgdGhlIFxyXG4gICAgdXBncmFkZSB3aGVuIHB1cmNoYXNlZC4gXHJcbiAgICBOT1RFOiBTWVNURU0gRVhQRUNUUyBBIE1BWCBPRiAzIFVQR1JBREVTIEFUIFRISVMgVElNRSwgdG8gYWRkIG1vcmUgbW9kaWZ5IHRoZSBtZW51ZXNcclxuICAgICAgICBbYXR0cl90YXJnZXQsIHB1cmNoYXNlX2Nvc3QsIHB1Y2hhc2VfY291bnQsIGF0dHJfZWZmZWN0XVxyXG4gICAgZXhhbXBsZTpcclxuICAgICAgICBVcGdyYWRlcyBbIFtcIlZhbHVlQXR0YWNrU3BlZWRcIiwgMjAwLCA1LCAtMTBdIF1cclxuICAgICAgICBjcmVhdGVzIGFuIHVwZ3JhZGUgdGhhdCBjb3N0cyAyMDAgcG9pbnRzLCBjYW4gYmUgcHVyY2hhc2VkIDUgdGltZXMsXHJcbiAgICAgICAgZGVjcmVhc2VzIHRoZSBhdHRhY2sgaW50ZXJ2YWwgb2YgdGhlIHRvd2VyIGJ5IDEwJSAoaW5jcmVhc2luZyBhdHRhY2sgcmF0ZSlcclxuICAgIFxyXG4gICAgJ2F0dHJpYnV0ZXMnIGRlZmluZSB3aGF0IGVmZmVjdHMgdGhlIHRvd2VyIGFwcGxpZXMgb24gYW4gZW5lbXkgd2hlbiBpdCBkZWFscyBkYW1hZ2UuIHRoZXNlXHJcbiAgICBlZmZlY3RzIGFyZSBwcm9jZXNzZWQgZXZlcnkgMC4yNXMgKHRpY2tzIHRvIHJlZHVjZSBwcm9jZXNzaW5nKSwgc28gZXZlcnkgNCBpbnRlcnZhbHMgaXMgZXF1YWxcclxuICAgIHRvIDEgc2Vjb25kLlxyXG4gICAgYXR0cmlidXRlIGVudHJ5OiBbdHlwZSwgcG93ZXIsIGxlbmd0aF1cclxuICAgICAgICB0eXBlczogMD1zbG93ICUsIDE9ZGFtYWdlIGhwLCAyPWRhbWFuZ2UgYXJtb3VyXHJcbiAgICAgICAgcG93ZXI6IHZhbHVlXHJcbiAgICAgICAgbGVuZ3RoOiBudW1iZXIgb2YgdGlja3NcclxuICAgIGV4YW1wbGU6IFsxLCAxMCwgNF0gd2lsbCBjYXVzZSAxMCBwb2ludHMgb2YgZGFtYWdlIGV2ZXJ5IHRpY2sgZm9yIDQgdGlja3MgKDQwIERQUylcclxuKi9cclxuZXhwb3J0IGNvbnN0IGRhdGFUb3dlcnMgPVxyXG5bXHJcbiAgICAvL1BST0pFQ1RJTEUgVE9XRVJTXHJcbiAgICAvLyAgZ3VuIHRvd2VyXHJcbiAgICB7XHJcbiAgICAgICAgLy9hc3NldFxyXG4gICAgICAgIFBhdGg6XCJQcm9qZWN0aWxlU3RhbmRhcmRcIixcclxuICAgICAgICBPZmZzZXQ6WzAsMC4zLDBdLFxyXG4gICAgICAgIFNjYWxlOlsyLDIsMl0sXHJcbiAgICAgICAgLy9hbmltYXRpb25zXHJcbiAgICAgICAgVmFsdWVBdHRhY2tJbnRlcnZhbEZ1bGw6MS4wLCAgLy9mdWxsIHRpbWUgaW50ZXJ2YWwgKGluIHNlY29uZHMpIGZvciBhdHRhY2sgYW5pbWF0aW9uXHJcbiAgICAgICAgVmFsdWVBdHRhY2tJbnRlcnZhbERhbWFnZTowLjMsLy90aW1lIHBvaW50IChpbiBzZWNvbmRzKSB3aGVuIGRhbWFnZSBzaG91bGQgYmUgZGVhbHRcclxuICAgICAgICAvL2Rpc3BsYXlcclxuICAgICAgICBEaXNwbGF5TmFtZTpcIkJ1bGxldCBUb3dlclwiLFxyXG4gICAgICAgIERpc3BsYXlEZXNjOlwiQmFsYW5jZWQgY2FwYWJpbGl0aWVzIGJldHdlZW4gcG93ZXIsIHNwZWVkLCBhbmQgcmFuZ2VcIixcclxuICAgICAgICAvL3N0YXRzXHJcbiAgICAgICAgVmFsdWVDb3N0OjgwLCAgLy9jb3N0IHRvIGJ1aWxkIHRvd2VyXHJcbiAgICAgICAgVmFsdWVBdHRhY2tEYW1hZ2U6NDAsICAgICAgIC8vZGFtYWdlIHBlciBhdHRhY2tcclxuICAgICAgICBWYWx1ZUF0dGFja1BlbmV0cmF0aW9uOjIsICAgLy9hcm1vciB0aGF0IGlzIGlnbm9yZWQgb24gZWFjaCBhdHRhY2tcclxuICAgICAgICBWYWx1ZUF0dGFja1JlbmQ6MCwgICAgICAgIC8vYXJtb3IgdGhhdCBpcyByZW1vdmVkIGZyb20gZW5lbXkgdXBvbiBhdHRhY2tcclxuICAgICAgICBWYWx1ZUF0dGFja1JhbmdlOjIuMiwgICAgICAgICAvL3JhZGl1cyBvZiBhdHRhY2sgcmFuZ2VcclxuICAgICAgICBWYWx1ZUF0dGFja1NwZWVkOjAuOCwgICAgICAgICAvL2F0dGFja3MgcGVyIHNlY29uZFxyXG4gICAgICAgIC8vdXBncmFkZXNcclxuICAgICAgICBVcGdyYWRlczpcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgIFtcIlZhbHVlQXR0YWNrRGFtYWdlXCIsIDEwLCA1LCA0XSwgLy9kYW1hZ2VcclxuICAgICAgICAgICAgW1wiVmFsdWVBdHRhY2tTcGVlZFwiLCAyMCwgNiwgMC4wNV0sIC8vc3BlZWRcclxuICAgICAgICAgICAgW1wiVmFsdWVBdHRhY2tQZW5ldHJhdGlvblwiLCAxNSwgNSwgMV0sIC8vcGVuXHJcbiAgICAgICAgXSxcclxuICAgICAgICAvL21lY2hhbmljc1xyXG4gICAgICAgIEF0dHJpYnV0ZXM6IFsgXVxyXG4gICAgfSxcclxuICAgIC8vICBnYXRsaW5nIHRvd2VyXHJcbiAgICB7XHJcbiAgICAgICAgLy9hc3NldFxyXG4gICAgICAgIFBhdGg6XCJQcm9qZWN0aWxlR2F0bGluZ1wiLFxyXG4gICAgICAgIE9mZnNldDpbMCwwLjMsMF0sXHJcbiAgICAgICAgU2NhbGU6WzIsMiwyXSxcclxuICAgICAgICAvL2FuaW1hdGlvbiBkZXRhaWxzXHJcbiAgICAgICAgVmFsdWVBdHRhY2tJbnRlcnZhbEZ1bGw6MS4wLCAgLy9mdWxsIHRpbWUgaW50ZXJ2YWwgKGluIHNlY29uZHMpIGZvciBhdHRhY2sgYW5pbWF0aW9uXHJcbiAgICAgICAgVmFsdWVBdHRhY2tJbnRlcnZhbERhbWFnZTowLjMsLy90aW1lIHBvaW50IChpbiBzZWNvbmRzKSB3aGVuIGRhbWFnZSBzaG91bGQgYmUgZGVhbHRcclxuICAgICAgICAvL2Rpc3BsYXlcclxuICAgICAgICBEaXNwbGF5TmFtZTpcIkdhdGxpbmcgVG93ZXJcIixcclxuICAgICAgICBEaXNwbGF5RGVzYzpcIkV4dHJlbWVseSBmYXN0IHJhdGUgb2YgZmlyZSBhbmQgZGVjZW50IGFybW9yIHJlbmQsIGJ1dCBsb3dlciBkYW1hZ2VcIixcclxuICAgICAgICAvL2NvbWJhdFxyXG4gICAgICAgIFZhbHVlQ29zdDo5NSwgIC8vY29zdCB0byBidWlsZCB0b3dlclxyXG4gICAgICAgIFZhbHVlQXR0YWNrRGFtYWdlOjE4LCAgICAgICAvL2RhbWFnZSBwZXIgYXR0YWNrXHJcbiAgICAgICAgVmFsdWVBdHRhY2tQZW5ldHJhdGlvbjowLCAgIC8vYXJtb3IgdGhhdCBpcyBpZ25vcmVkIG9uIGVhY2ggYXR0YWNrXHJcbiAgICAgICAgVmFsdWVBdHRhY2tSZW5kOjEsICAgICAgICAvL2FybW9yIHRoYXQgaXMgcmVtb3ZlZCBmcm9tIGVuZW15IHVwb24gYXR0YWNrXHJcbiAgICAgICAgVmFsdWVBdHRhY2tSYW5nZToxLjUsICAgICAgICAgLy9yYWRpdXMgb2YgYXR0YWNrIHJhbmdlXHJcbiAgICAgICAgVmFsdWVBdHRhY2tTcGVlZDoxLjUsICAgICAgICAgLy9hdHRhY2tzIHBlciBzZWNvbmRcclxuICAgICAgICAvL3VwZ3JhZGVzXHJcbiAgICAgICAgVXBncmFkZXM6XHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICBbXCJWYWx1ZUF0dGFja1NwZWVkXCIsIDIwLCA1LCAwLjE1XSwgLy9wZW5cclxuICAgICAgICAgICAgW1wiVmFsdWVBdHRhY2tQZW5ldHJhdGlvblwiLCAxNSwgNSwgMV0sIC8vcGVuXHJcbiAgICAgICAgICAgIFtcIlZhbHVlQXR0YWNrUmVuZFwiLCAzMCwgNSwgMV0sIC8vcmVuZFxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgLy9tZWNoYW5pY3NcclxuICAgICAgICBBdHRyaWJ1dGVzOiBbIF1cclxuICAgIH0sXHJcbiAgICAvLyAgc25pcGVyIHRvd2VyXHJcbiAgICB7XHJcbiAgICAgICAgLy9hc3NldFxyXG4gICAgICAgIFBhdGg6XCJQcm9qZWN0aWxlU25pcGVyXCIsXHJcbiAgICAgICAgT2Zmc2V0OlswLDAuMywwXSxcclxuICAgICAgICBTY2FsZTpbMiwyLDJdLFxyXG4gICAgICAgIC8vYW5pbWF0aW9uIGRldGFpbHNcclxuICAgICAgICBWYWx1ZUF0dGFja0ludGVydmFsRnVsbDoxLjAsICAvL2Z1bGwgdGltZSBpbnRlcnZhbCAoaW4gc2Vjb25kcykgZm9yIGF0dGFjayBhbmltYXRpb25cclxuICAgICAgICBWYWx1ZUF0dGFja0ludGVydmFsRGFtYWdlOjAuMywvL3RpbWUgcG9pbnQgKGluIHNlY29uZHMpIHdoZW4gZGFtYWdlIHNob3VsZCBiZSBkZWFsdFxyXG4gICAgICAgIC8vZGlzcGxheVxyXG4gICAgICAgIERpc3BsYXlOYW1lOlwiU25pcGVyIFRvd2VyXCIsXHJcbiAgICAgICAgRGlzcGxheURlc2M6XCJIaWdoIGRhbWFnZSwgcmFuZ2UsIGFuZCBhcm1vciBwZW5ldHJhdGlvbiwgYnV0IGEgc2xvdyByYXRlIG9mIGZpcmVcIixcclxuICAgICAgICAvL2NvbWJhdFxyXG4gICAgICAgIFZhbHVlQ29zdDoxNDAsICAvL2Nvc3QgdG8gYnVpbGQgdG93ZXJcclxuICAgICAgICBWYWx1ZUF0dGFja0RhbWFnZToxMjAsICAgICAgIC8vZGFtYWdlIHBlciBhdHRhY2tcclxuICAgICAgICBWYWx1ZUF0dGFja1BlbmV0cmF0aW9uOjEwLCAgIC8vYXJtb3IgdGhhdCBpcyBpZ25vcmVkIG9uIGVhY2ggYXR0YWNrXHJcbiAgICAgICAgVmFsdWVBdHRhY2tSZW5kOjQsICAgICAgICAvL2FybW9yIHRoYXQgaXMgcmVtb3ZlZCBmcm9tIGVuZW15IHVwb24gYXR0YWNrXHJcbiAgICAgICAgVmFsdWVBdHRhY2tSYW5nZTozLCAgICAgICAgIC8vcmFkaXVzIG9mIGF0dGFjayByYW5nZVxyXG4gICAgICAgIFZhbHVlQXR0YWNrU3BlZWQ6MC4yMjUsICAgICAgICAgLy9hdHRhY2tzIHBlciBzZWNvbmRcclxuICAgICAgICAvL3VwZ3JhZGVzXHJcbiAgICAgICAgVXBncmFkZXM6XHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICBbXCJWYWx1ZUF0dGFja0RhbWFnZVwiLCAxMCwgNSwgMTVdLCAvL2RhbWFnZVxyXG4gICAgICAgICAgICBbXCJWYWx1ZUF0dGFja1BlbmV0cmF0aW9uXCIsIDE1LCA1LCA0XSwgLy9wZW5cclxuICAgICAgICAgICAgW1wiVmFsdWVBdHRhY2tSYW5nZVwiLCAzMCwgNSwgMC4yXSwgLy9yYW5nZVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgLy9tZWNoYW5pY3NcclxuICAgICAgICBBdHRyaWJ1dGVzOiBbIF1cclxuICAgIH0sXHJcblxyXG4gICAgLy9FTEVNRU5UQUwgVE9XRVJTIFxyXG4gICAgLy8gIGZpcmVcclxuICAgIHtcclxuICAgICAgICAvL2Fzc2V0XHJcbiAgICAgICAgUGF0aDpcIkVsZW1lbnRhbEZpcmVcIixcclxuICAgICAgICBPZmZzZXQ6WzAsMC4zLDBdLFxyXG4gICAgICAgIFNjYWxlOlsyLDIsMl0sXHJcbiAgICAgICAgLy9hbmltYXRpb24gZGV0YWlsc1xyXG4gICAgICAgIFZhbHVlQXR0YWNrSW50ZXJ2YWxGdWxsOjEuMCwgIC8vZnVsbCB0aW1lIGludGVydmFsIChpbiBzZWNvbmRzKSBmb3IgYXR0YWNrIGFuaW1hdGlvblxyXG4gICAgICAgIFZhbHVlQXR0YWNrSW50ZXJ2YWxEYW1hZ2U6MC4zLC8vdGltZSBwb2ludCAoaW4gc2Vjb25kcykgd2hlbiBkYW1hZ2Ugc2hvdWxkIGJlIGRlYWx0XHJcbiAgICAgICAgLy9kaXNwbGF5XHJcbiAgICAgICAgRGlzcGxheU5hbWU6XCJGbGFtZXRocm93ZXIgVG93ZXJcIixcclxuICAgICAgICBEaXNwbGF5RGVzYzpcIkFwcGxpZXMgYSBidXJuaW5nIGVmZmVjdCB0aGF0IGRlYWxzIGRhbWFnZSBvdmVyIHRpbWVcIixcclxuICAgICAgICAvL2NvbWJhdFxyXG4gICAgICAgIFZhbHVlQ29zdDoxMjAsICAvL2Nvc3QgdG8gYnVpbGQgdG93ZXJcclxuICAgICAgICBWYWx1ZUF0dGFja0RhbWFnZToxMiwgICAgICAgLy9kYW1hZ2UgcGVyIGF0dGFja1xyXG4gICAgICAgIFZhbHVlQXR0YWNrUGVuZXRyYXRpb246MCwgICAvL2FybW9yIHRoYXQgaXMgaWdub3JlZCBvbiBlYWNoIGF0dGFja1xyXG4gICAgICAgIFZhbHVlQXR0YWNrUmVuZDowLCAgICAgICAgLy9hcm1vciB0aGF0IGlzIHJlbW92ZWQgZnJvbSBlbmVteSB1cG9uIGF0dGFja1xyXG4gICAgICAgIFZhbHVlQXR0YWNrUmFuZ2U6MS40LCAgICAgICAgIC8vcmFkaXVzIG9mIGF0dGFjayByYW5nZVxyXG4gICAgICAgIFZhbHVlQXR0YWNrU3BlZWQ6MS4yLCAgICAgICAgIC8vYXR0YWNrcyBwZXIgc2Vjb25kXHJcbiAgICAgICAgLy91cGdyYWRlc1xyXG4gICAgICAgIFVwZ3JhZGVzOlxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgW1wiVmFsdWVBdHRhY2tEYW1hZ2VcIiwgMTAsIDUsIDJdLCAvL2RhbWFnZVxyXG4gICAgICAgICAgICBbXCJWYWx1ZUF0dGFja1NwZWVkXCIsIDMwLCA2LCAwLjFdLCAvL3NwZWVkXHJcbiAgICAgICAgICAgIC8vW1wiVmFsdWVBdHRhY2tSZW5kXCIsIDMwLCA1LCAyXSwgLy9idXJuIGluY3JlYXNlXHJcbiAgICAgICAgXSxcclxuICAgICAgICAvL21lY2hhbmljc1xyXG4gICAgICAgIEF0dHJpYnV0ZXM6IFsgWzEsMiwxMl0gXSAvL2FwcGxpZXMgYnVyblxyXG4gICAgfSxcclxuICAgIC8vICBjb3Jyb3Npb25cclxuICAgIHtcclxuICAgICAgICAvL2Fzc2V0XHJcbiAgICAgICAgUGF0aDpcIkVsZW1lbnRhbEFjaWRcIixcclxuICAgICAgICBPZmZzZXQ6WzAsMC4zLDBdLFxyXG4gICAgICAgIFNjYWxlOlsyLDIsMl0sXHJcbiAgICAgICAgLy9hbmltYXRpb24gZGV0YWlsc1xyXG4gICAgICAgIFZhbHVlQXR0YWNrSW50ZXJ2YWxGdWxsOjEuMCwgIC8vZnVsbCB0aW1lIGludGVydmFsIChpbiBzZWNvbmRzKSBmb3IgYXR0YWNrIGFuaW1hdGlvblxyXG4gICAgICAgIFZhbHVlQXR0YWNrSW50ZXJ2YWxEYW1hZ2U6MC4zLC8vdGltZSBwb2ludCAoaW4gc2Vjb25kcykgd2hlbiBkYW1hZ2Ugc2hvdWxkIGJlIGRlYWx0XHJcbiAgICAgICAgLy9kaXNwbGF5XHJcbiAgICAgICAgRGlzcGxheU5hbWU6XCJDb3Jyb3Npb24gVG93ZXJcIixcclxuICAgICAgICBEaXNwbGF5RGVzYzpcIk1vc3QgZWZmZWN0aXZlIGF0IHJlbW92aW5nIGVuZW15IGFybW91clwiLFxyXG4gICAgICAgIC8vY29tYmF0XHJcbiAgICAgICAgVmFsdWVDb3N0OjkwLCAgLy9jb3N0IHRvIGJ1aWxkIHRvd2VyXHJcbiAgICAgICAgVmFsdWVBdHRhY2tEYW1hZ2U6MTMsICAgICAgIC8vZGFtYWdlIHBlciBhdHRhY2tcclxuICAgICAgICBWYWx1ZUF0dGFja1BlbmV0cmF0aW9uOjQsICAgLy9hcm1vciB0aGF0IGlzIGlnbm9yZWQgb24gZWFjaCBhdHRhY2tcclxuICAgICAgICBWYWx1ZUF0dGFja1JlbmQ6NiwgICAgICAgIC8vYXJtb3IgdGhhdCBpcyByZW1vdmVkIGZyb20gZW5lbXkgdXBvbiBhdHRhY2tcclxuICAgICAgICBWYWx1ZUF0dGFja1JhbmdlOjEuNCwgICAgICAgICAvL3JhZGl1cyBvZiBhdHRhY2sgcmFuZ2VcclxuICAgICAgICBWYWx1ZUF0dGFja1NwZWVkOjAuOCwgICAgICAgICAvL2F0dGFja3MgcGVyIHNlY29uZFxyXG4gICAgICAgIC8vdXBncmFkZXNcclxuICAgICAgICBVcGdyYWRlczpcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgIFtcIlZhbHVlQXR0YWNrU3BlZWRcIiwgMzAsIDUsIDAuMDJdLCAvL2RhbWFnZVxyXG4gICAgICAgICAgICBbXCJWYWx1ZUF0dGFja1JlbmRcIiwgMzAsIDUsIDNdLCAvL3JlbmRcclxuICAgICAgICAgICAgLy9bXCJWYWx1ZUF0dGFja1BlbmV0cmF0aW9uXCIsIDMwLCA1LCAyXSwgLy9hY2lkIGludGVuc2lmeVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgLy9tZWNoYW5pY3NcclxuICAgICAgICBBdHRyaWJ1dGVzOiBbIFsyLDEsOF0gXSAvL2FwcGxpZXMgYXJtb3VyIG1lbHRcclxuICAgIH0sXHJcbiAgICAvLyAgZWxlY3RyaWNcclxuICAgIHtcclxuICAgICAgICAvL2Fzc2V0XHJcbiAgICAgICAgUGF0aDpcIkVsZW1lbnRhbExpZ2h0bmluZ1wiLFxyXG4gICAgICAgIE9mZnNldDpbMCwwLjMsMF0sXHJcbiAgICAgICAgU2NhbGU6WzIsMiwyXSxcclxuICAgICAgICAvL2FuaW1hdGlvbiBkZXRhaWxzXHJcbiAgICAgICAgVmFsdWVBdHRhY2tJbnRlcnZhbEZ1bGw6MS4wLCAgLy9mdWxsIHRpbWUgaW50ZXJ2YWwgKGluIHNlY29uZHMpIGZvciBhdHRhY2sgYW5pbWF0aW9uXHJcbiAgICAgICAgVmFsdWVBdHRhY2tJbnRlcnZhbERhbWFnZTowLjMsLy90aW1lIHBvaW50IChpbiBzZWNvbmRzKSB3aGVuIGRhbWFnZSBzaG91bGQgYmUgZGVhbHRcclxuICAgICAgICAvL2Rpc3BsYXlcclxuICAgICAgICBEaXNwbGF5TmFtZTpcIkxpZ2h0bmluZyBUb3dlclwiLFxyXG4gICAgICAgIERpc3BsYXlEZXNjOlwiQXBwbGllcyBhIGRpc3J1cHRpdmUgc2hvY2sgdGhhdCBzbG93cyBlbmVtaWVzXCIsXHJcbiAgICAgICAgLy9jb21iYXRcclxuICAgICAgICBWYWx1ZUNvc3Q6MTAwLCAgLy9jb3N0IHRvIGJ1aWxkIHRvd2VyXHJcbiAgICAgICAgVmFsdWVBdHRhY2tEYW1hZ2U6MTQsICAgICAgIC8vZGFtYWdlIHBlciBhdHRhY2tcclxuICAgICAgICBWYWx1ZUF0dGFja1BlbmV0cmF0aW9uOjAsICAgLy9hcm1vciB0aGF0IGlzIGlnbm9yZWQgb24gZWFjaCBhdHRhY2tcclxuICAgICAgICBWYWx1ZUF0dGFja1JlbmQ6MCwgICAgICAgIC8vYXJtb3IgdGhhdCBpcyByZW1vdmVkIGZyb20gZW5lbXkgdXBvbiBhdHRhY2tcclxuICAgICAgICBWYWx1ZUF0dGFja1JhbmdlOjEuNiwgICAgICAgICAvL3JhZGl1cyBvZiBhdHRhY2sgcmFuZ2VcclxuICAgICAgICBWYWx1ZUF0dGFja1NwZWVkOjAuNiwgICAgICAgICAvL2F0dGFja3MgcGVyIHNlY29uZFxyXG4gICAgICAgIC8vdXBncmFkZXNcclxuICAgICAgICBVcGdyYWRlczpcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgIFtcIlZhbHVlQXR0YWNrRGFtYWdlXCIsIDE1LCA1LCAyXSwgLy9kYW1hZ2VcclxuICAgICAgICAgICAgW1wiVmFsdWVBdHRhY2tQZW5ldHJhdGlvblwiLCAyMCwgNSwgMV0sIC8vcGVuXHJcbiAgICAgICAgICAgIC8vW1wiVmFsdWVBdHRhY2tSZW5kXCIsIDMwLCA1LCAyXSwgLy9zbG93IGludGVuc2lmeVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgLy9tZWNoYW5pY3NcclxuICAgICAgICBBdHRyaWJ1dGVzOiBbIFswLDMwLDQwXSBdIC8vYXBwbGllcyBtb3ZlIHNsb3dcclxuICAgIH1cclxuXVxyXG4iLCIgLy9hZGRpdGlvbnMgdG8gYWxsb3cgY29sbGVjdGlvbnMgZm9yIHNldCBtYW5hZ2VtZW50LFxyXG4gLy8gbGlzdHMgYW5kIGRpY3Rpb25hcmllc1xyXG4gLy9yYXcgc291cmNlOiBEb21pbmlrIE1hcmNpbmlzenluLCBjb2RldGFpbi5jb21cclxuIGV4cG9ydCBpbnRlcmZhY2UgSUtleUNvbGxlY3Rpb248VD5cclxuIHtcclxuICAgICBzaXplKCk6IG51bWJlcjtcclxuICAgICBnZXRLZXlzKCk6IHN0cmluZ1tdO1xyXG4gICAgIGNvbnRhaW5zS2V5KGtleTogc3RyaW5nKTogYm9vbGVhbjtcclxuICAgICBhZGRJdGVtKGtleTogc3RyaW5nLCB2YWx1ZTogVCk6IHVuZGVmaW5lZDtcclxuICAgICBnZXRJdGVtKGtleTogc3RyaW5nKTogVDtcclxuICAgICByZW1vdmVJdGVtKGtleTogc3RyaW5nKTogVDtcclxuICAgICB2YWx1ZXMoKTogVFtdO1xyXG4gfVxyXG4gZXhwb3J0IGNsYXNzIExpc3Q8VD4ge1xyXG4gICAgIHByaXZhdGUgaXRlbXM6IEFycmF5PFQ+O1xyXG4gXHJcbiAgICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgIHRoaXMuaXRlbXMgPSBbXTtcclxuICAgICB9XHJcbiBcclxuICAgICBzaXplKCk6IG51bWJlciB7XHJcbiAgICAgICAgIHJldHVybiB0aGlzLml0ZW1zLmxlbmd0aDtcclxuICAgICB9XHJcbiBcclxuICAgICBhZGRJdGVtKHZhbHVlOiBUKTogdm9pZCB7XHJcbiAgICAgICAgIHRoaXMuaXRlbXMucHVzaCh2YWx1ZSk7XHJcbiAgICAgfVxyXG4gXHJcbiAgICAgZ2V0SXRlbShpbmRleDogbnVtYmVyKTogVCB7XHJcbiAgICAgICAgIHJldHVybiB0aGlzLml0ZW1zW2luZGV4XTtcclxuICAgICB9XHJcbiBcclxuICAgICAvL2Fzc2lnbnMgdGhlIGdpdmVuIDxlPiBpbnN0YW5jZSB0byB0YXJnZXRlZCBwb3NpdGlvbiBpbiBhcnJheVxyXG4gICAgIGFzc2lnbkl0ZW0ocG9zOm51bWJlciwgaW5zdGFuY2U6VClcclxuICAgICB7XHJcbiAgICAgICAgdGhpcy5pdGVtc1twb3NdID0gaW5zdGFuY2U7XHJcbiAgICAgfVxyXG5cclxuICAgICAvL3JlbW92ZXMgdGhlIHNlbGVjdGVkIGVsZW1lbnQgZnJvbSB0aGUgbGlzdCwgbWFpbnRhaW5pbmcgdGhlIG9yZGVyIG9mIGVsZW1lbnRzXHJcbiAgICAgcmVtb3ZlSXRlbSh2YWx1ZTogVCk6IHZvaWQge1xyXG4gICAgICAgIC8vc2hpZnQgc2VsZWN0ZWQgZWxlbWVudCB0byBsYXN0IHNwb3QgaW4gYXJyYXlcclxuICAgICAgICB2YXIgaTpudW1iZXIgPSAwO1xyXG4gICAgICAgIHZhciB0bXA6VDtcclxuICAgICAgICB3aGlsZShpIDwgdGhpcy5pdGVtcy5sZW5ndGgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvL2lmIGVuZCBvZiBsaXN0XHJcbiAgICAgICAgICAgIGlmKGkgPT0gdGhpcy5pdGVtcy5sZW5ndGgtMSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy9pZiBpdGVtIGlzIGZvdW5kXHJcbiAgICAgICAgICAgIGlmKHRoaXMuaXRlbXNbaV0gPT0gdmFsdWUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vc3dhcCB0YXJnZXRlZCBlbGVtZW50IHdpdGggbmV4dCBlbGVtZW50IGluIGxpc3RcclxuICAgICAgICAgICAgICAgIHRtcCA9IHRoaXMuaXRlbXNbaV07XHJcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1zW2ldID0gdGhpcy5pdGVtc1tpKzFdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtc1tpKzFdID0gdG1wO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vZm9yY2UgbmV4dCBjYXNlXHJcbiAgICAgICAgICAgIGkrKztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiB9XHJcbiBleHBvcnQgeyBEaWN0aW9uYXJ5IH07XHJcbiBleHBvcnQgZGVmYXVsdCBjbGFzcyBEaWN0aW9uYXJ5PFQ+IGltcGxlbWVudHMgSUtleUNvbGxlY3Rpb248VD4gXHJcbiB7XHJcbiAgICAgcHJpdmF0ZSBpdGVtczogeyBbaW5kZXg6IHN0cmluZ106IFQgfSA9IHt9O1xyXG4gICAgIHByaXZhdGUgY291bnQ6IG51bWJlciA9IDA7XHJcbiBcclxuICAgICBzaXplKCk6IG51bWJlciB7XHJcbiAgICAgICAgIHJldHVybiB0aGlzLmNvdW50O1xyXG4gICAgIH1cclxuIFxyXG4gICAgIGdldEtleXMoKTogc3RyaW5nW10ge1xyXG4gICAgICAgICBsZXQga2V5U2V0OiBzdHJpbmdbXSA9IFtdO1xyXG4gXHJcbiAgICAgICAgIGZvciAobGV0IHByb3BlcnR5IGluIHRoaXMuaXRlbXMpIHtcclxuICAgICAgICAgICAgIGlmICh0aGlzLml0ZW1zLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkge1xyXG4gICAgICAgICAgICAgICAgIGtleVNldC5wdXNoKHByb3BlcnR5KTtcclxuICAgICAgICAgICAgIH1cclxuICAgICAgICAgfVxyXG4gXHJcbiAgICAgICAgIHJldHVybiBrZXlTZXQ7XHJcbiAgICAgfVxyXG4gXHJcbiAgICAgY29udGFpbnNLZXkoa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXMuaGFzT3duUHJvcGVydHkoa2V5KTtcclxuICAgICB9XHJcbiBcclxuICAgICBhZGRJdGVtKGtleTogc3RyaW5nLCB2YWx1ZTogVCk6IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgIGlmICghdGhpcy5pdGVtcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgICB0aGlzLmNvdW50Kys7XHJcbiAgICAgICAgIH1cclxuIFxyXG4gICAgICAgICB0aGlzLml0ZW1zW2tleV0gPSB2YWx1ZTtcclxuICAgICAgICAgcmV0dXJuO1xyXG4gICAgIH1cclxuIFxyXG4gICAgIGdldEl0ZW0oa2V5OiBzdHJpbmcpOiBUIHtcclxuICAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXNba2V5XTtcclxuICAgICB9XHJcbiBcclxuICAgICByZW1vdmVJdGVtKGtleTogc3RyaW5nKTogVCB7XHJcbiAgICAgICAgIGxldCB2YWx1ZSA9IHRoaXMuaXRlbXNba2V5XTtcclxuIFxyXG4gICAgICAgICBkZWxldGUgdGhpcy5pdGVtc1trZXldO1xyXG4gICAgICAgICB0aGlzLmNvdW50LS07XHJcbiBcclxuICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgIH1cclxuIFxyXG4gICAgIHZhbHVlcygpOiBUW10ge1xyXG4gICAgICAgICBsZXQgdmFsdWVzOiBUW10gPSBbXTtcclxuIFxyXG4gICAgICAgICBmb3IgKGxldCBwcm9wZXJ0eSBpbiB0aGlzLml0ZW1zKSB7XHJcbiAgICAgICAgICAgICBpZiAodGhpcy5pdGVtcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcclxuICAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaCh0aGlzLml0ZW1zW3Byb3BlcnR5XSk7XHJcbiAgICAgICAgICAgICB9XHJcbiAgICAgICAgIH1cclxuIFxyXG4gICAgICAgICByZXR1cm4gdmFsdWVzO1xyXG4gICAgIH1cclxuIH0iLCIvKiAgICAgIEVORU1ZIERBVEFcclxuICAgIGNvbnRhaW5zIGFsbCBkYXRhIGRlZmluaXRpb25zIGZvciBlbmVteSB1bml0cy4gdW5pdHMgY29tZVxyXG4gICAgaW4gYSB2YXJpZXR5IG9mIHR5cGVzLCB3aXRoIGRpZmZlcmVudCBhdHRyaWJ1dGVzLCBhbmQgYmVsb25nXHJcbiAgICB0byBzZXBlcmF0ZSB3YXZlIHNwYXduIHR5cGVzLlxyXG5cclxuICAgIGVuZW15IHVuaXQgbW9kZWxzIG5lZWQgdG8gYmUgcGxhY2VkIHVuZGVyICdtb2RlbHMvdGQtY29yZS9lbmVteScuIHRoZVxyXG4gICAgZm9sbG93aW5nIGFuaW1hdGlvbnMgc2hvdWxkIGV4aXN0IG9uIHRoZSBtb2RlbCBhbmQgZm9sbG93IHRoZXNlIHBhcmFtZXRlcnM6XHJcbiAgICAgICAgLWFuaW1fYXR0YWNrOiB1c2VkIHdoZW4gYW4gZW5lbXkgYXR0YWNrcyB0aGUgcGxheWVyJ3MgYmFzZVxyXG4gICAgICAgIC1hbmltX2RlYXRoOiB1c2VkIHdoZW4gZW5lbXkgXHJcbiAgICAgICAgLVxyXG5cclxuICAgIHRoZSBtYWluIHNlZ21lbnQgZm9yIHR5cGVzIGlzIHNwbGl0IGFsb25nIGEgc2l6ZS9jb21wbGV4aXR5IGJhc2lzOiBzbWFsbGVyXHJcbiAgICB1bml0cyB0YWtlIGxlc3MgaW4tc2NlbmUgcmVzb3VyY2VzLCBzbyBtb3JlIGFyZSBzcGF3bmVkIHBlciB3YXZlOyB0aGUgb3Bwb3NpdGUgXHJcbiAgICBpcyB0cnVlIGZvciBsYXJnZXIgdW5pdHMuIHNwYXduaW5nIG1hbmFnZWQgYnkgJ2VuZW15LXdhdmUudHMnLCB3aGlsZSBlYWNoIFxyXG4gICAgaW5kaXZpZHVhbCB1bml0IGlzIGNvbnRyb2xsZWQgYnkgdGhlICdlbmVteS11bml0LnRzJy5cclxuICAgICAgICB3YXZlIHR5cGU6IHVzZWQgdG8gZGV0ZXJtaW5lIHdoYXQgd2F2ZSBncm91cCB0byBzcGF3biBpblxyXG4gICAgICAgICAgICAwIC0gc21hbGxcclxuICAgICAgICAgICAgMSAtIG1lZGl1bVxyXG4gICAgICAgICAgICAyIC0gbGFyZ2VcclxuICAgICAgICAgICAgMyAtIGJvc3NcclxuICAgICAgICBzcGF3biBjb3N0OiB1c2VkIHRvIGRlcnRlcm1pbmUgaG93IG1hbnkgb2YgdGhlc2UgdW5pdHMgd2lsbCBzcGF3biBkdXJpbmcgYSBcclxuICAgICAgICB3YXZlLiB3aGVuIGEgbmV3IHdhdmUgaXMgYmVpbmcgc3Bhd25lZCwgdGhlIHdhdmUgbWFuYWdlciBpcyBnaXZlbiBhIHVuaXQgdHlwZVxyXG4gICAgICAgIGFuZCBidWRnZXQgdG8gc3BlbmQgb24gc3Bhd25hYmxlIHVuaXRzIHdoZW4gY29uc3RydWN0aW5nIHRoZSB3YXZlLiB0aGlzIGVuYWJsZXNcclxuICAgICAgICBjb21wb3NpdGUgd2F2ZXMgKHdhdmVzIGNvbnRhaW5pbmcgbXVsdGlwbGUgdHlwZXMgb2YgZW5lbXkgdW5pdHMpLCB3aGljaCBhZGRzIG1vcmVcclxuICAgICAgICB2YXJpZXR5IGludG8gdGhlIGdhbWUuXHJcblxyXG4gICAgZWFjaCBlbmVteSBoYXMgc3Vydml2YWwgZWxlbWVudHM6IHRoZXNlIGRldGVyaW1pbmUgdGhlaXIgaW4tZ2FtZSBzcGVlZCBhbmQgZHVyYWJpbGl0eS5cclxuICAgIHNvbWUgb2YgdGhlc2UgZWxlbWVudHMgZ3JvdyBvdmVyIHRoZSBjb3Vyc2Ugb2YgdGhlIGdhbWUsIG1ha2luZyB1bml0cyBtb3JlIGRpZmZpY3VsdCB0b1xyXG4gICAgZGVmZWF0LiBleGFtcGxlOiBhdCB3YXZlIDMgYW4gZW5lbXkncyBoZWFsdGggPSBoZWFsdGhCYXNlICsgKGhlYWx0aEdyb3d0aCp3YXZlQ3VycmVudCkuXHJcblxyXG4gICAgY2VydGFpbiBhdHRyaWJ1dGUgdGFncyBhcmUgYWxzbyBhdmFpbGFibGUgd2hpY2ggd2lsbCBhcHBseSBjZXJ0YWluIGVmZmVjdHMgb24gYW4gZW5lbXlcclxuICAgIHVuaXQgd2hlbiBpdCBpcyBzcGF3bmVkOlxyXG4gICAgICAgIC1TaGllbGRlZDogYXBwbGllc2UgYSBkYW1hZ2UgcmVkdWN0aW9uIHNoaWVsZCB0byBuZWFyYnkgZW5lbWllc1xyXG4gICAgICAgIC1TcGF3bmVyOiBzcGF3bnMgc21hbGwgY3JlYXR1cmVzIG92ZXIgdGltZSAgXHJcblxyXG4qL1xyXG5leHBvcnQgY29uc3QgRW5lbXlEYXRhID1cclxuW1xyXG4gICAgLy8jIyMgU01BTEwgRU5FTUlFUyAjIyNcclxuICAgIC8vICBzd2FybWVyXHJcbiAgICB7XHJcbiAgICAgICAgLy9vYmplY3RcclxuICAgICAgICBPYmplY3RQYXRoOlwiZW5lbXlDcmF3bGVyXCIsXHJcbiAgICAgICAgT2JqZWN0T2Zmc2V0OlswLDAuMSwwXSxcclxuICAgICAgICBPYmplY3RTY2FsZTpbMC4wNSwwLjA1LDAuMDVdLFxyXG4gICAgICAgIEhlYWx0aFBvczpbMCwwLjUsMF0sXHJcbiAgICAgICAgSGVhbHRoU2NhbGU6WzAuMjUsMC4yNSwwLjI1XSxcclxuICAgICAgICAvL3RpbWluZ1xyXG4gICAgICAgIFZhbHVlQXR0YWNrSW50ZXJ2YWxGdWxsOjIsICAvL2Z1bGwgdGltZSBpbnRlcnZhbCAoaW4gc2Vjb25kcykgZm9yIGF0dGFjayBhbmltYXRpb25cclxuICAgICAgICBWYWx1ZUF0dGFja0ludGVydmFsRGFtYWdlOjEsLy90aW1lIHBvaW50IChpbiBzZWNvbmRzKSB3aGVuIGRhbWFnZSBzaG91bGQgYmUgZGVhbHRcclxuICAgICAgICBWYWx1ZURlYXRoTGVuZ3RoOjEuNCwgICAvL2xlbmd0aCBvZiBkZWF0aCBhbmltYXRpb24gKGluIHNlY29uZHMpXHJcbiAgICAgICAgVmFsdWVEZWF0aExlbmd0aFNjYWxlOjIsLy9zcGVlZCBvZiBkZWF0aCBhbmltYXRpb25cclxuICAgICAgICAvL2Rpc3BsYXlcclxuICAgICAgICBEaXNwbGF5TmFtZTpcIkNyYXdsZXJcIixcclxuICAgICAgICBEaXNwbGF5RGVzYzpcIlNtYWxsLCBmYXN0IG1vdmluZyB1bml0IHRoYXQgdHJhdmVscyBpbiBsYXJnZSBncm91cHNcIixcclxuICAgICAgICAvL3NwYXduaW5nXHJcbiAgICAgICAgU3Bhd25UeXBlOjAsXHJcbiAgICAgICAgU3Bhd25Db3N0OjAuNDUsXHJcbiAgICAgICAgLy9zdXJ2aXZhbFxyXG4gICAgICAgIFZhbHVlU3BlZWQ6MC44MCxcclxuICAgICAgICBWYWx1ZUhlYWx0aEJhc2U6MTAsXHJcbiAgICAgICAgVmFsdWVIZWFsdGhHcm93dGg6MC4yNSxcclxuICAgICAgICBWYWx1ZUFybW91ckJhc2U6MTAsXHJcbiAgICAgICAgVmFsdWVBcm1vdXJHcm93dGg6MC4yNSxcclxuICAgICAgICAvL3Jld2FyZHNcclxuICAgICAgICBWYWx1ZVJld2FyZHM6MSxcclxuICAgICAgICAvL21lY2hhbmljc1xyXG4gICAgICAgIEF0dHJpYnV0ZXM6XHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICBcIlwiXHJcbiAgICAgICAgXVxyXG4gICAgfSxcclxuICAgIC8vICBkcm9uZVxyXG4gICAge1xyXG4gICAgICAgIC8vbW9kZWwgcGF0aFxyXG4gICAgICAgIE9iamVjdFBhdGg6XCJlbmVteURyb25lXCIsXHJcbiAgICAgICAgT2JqZWN0T2Zmc2V0OlswLDAuNSwwXSxcclxuICAgICAgICBPYmplY3RTY2FsZTpbMC4yNSwwLjI1LDAuMjVdLFxyXG4gICAgICAgIEhlYWx0aFBvczpbMCwxLDBdLFxyXG4gICAgICAgIEhlYWx0aFNjYWxlOlswLjI1LDAuMjUsMC4yNV0sXHJcbiAgICAgICAgLy90aW1pbmdcclxuICAgICAgICBWYWx1ZUF0dGFja0ludGVydmFsRnVsbDoyLCAgLy9mdWxsIHRpbWUgaW50ZXJ2YWwgKGluIHNlY29uZHMpIGZvciBhdHRhY2sgYW5pbWF0aW9uXHJcbiAgICAgICAgVmFsdWVBdHRhY2tJbnRlcnZhbERhbWFnZToxLC8vdGltZSBwb2ludCAoaW4gc2Vjb25kcykgd2hlbiBkYW1hZ2Ugc2hvdWxkIGJlIGRlYWx0XHJcbiAgICAgICAgVmFsdWVEZWF0aExlbmd0aDoxLjQsICAgLy9sZW5ndGggb2YgZGVhdGggYW5pbWF0aW9uIChpbiBzZWNvbmRzKVxyXG4gICAgICAgIFZhbHVlRGVhdGhMZW5ndGhTY2FsZToyLC8vc3BlZWQgb2YgZGVhdGggYW5pbWF0aW9uXHJcbiAgICAgICAgLy9kaXNwbGF5XHJcbiAgICAgICAgRGlzcGxheU5hbWU6XCJEcm9uZVwiLFxyXG4gICAgICAgIERpc3BsYXlEZXNjOlwiQWdpbGUgZmx5aW5nIHVuaXRcIixcclxuICAgICAgICAvL3NwYXduaW5nXHJcbiAgICAgICAgU3Bhd25UeXBlOjAsXHJcbiAgICAgICAgU3Bhd25Db3N0OjAuNDUsXHJcbiAgICAgICAgLy9zdXJ2aXZhbFxyXG4gICAgICAgIFZhbHVlU3BlZWQ6MC44NSxcclxuICAgICAgICBWYWx1ZUhlYWx0aEJhc2U6MzAsXHJcbiAgICAgICAgVmFsdWVIZWFsdGhHcm93dGg6MSxcclxuICAgICAgICBWYWx1ZUFybW91ckJhc2U6MCxcclxuICAgICAgICBWYWx1ZUFybW91ckdyb3d0aDowLFxyXG4gICAgICAgIC8vcmV3YXJkc1xyXG4gICAgICAgIFZhbHVlUmV3YXJkczoxLFxyXG4gICAgICAgIC8vbWVjaGFuaWNzXHJcbiAgICAgICAgQXR0cmlidXRlczpcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgIFwiXCJcclxuICAgICAgICBdXHJcbiAgICB9LFxyXG4gICAgLy8jIyMgTUVESVVNIEVORU1JRVMgIyMjXHJcbiAgICAvLyAgd2Fsa2VyXHJcbiAgICB7XHJcbiAgICAgICAgLy9tb2RlbCBwYXRoXHJcbiAgICAgICAgT2JqZWN0UGF0aDpcImVuZW15U3RhbmRhcmRcIixcclxuICAgICAgICBPYmplY3RPZmZzZXQ6WzAsMC41MjUsMF0sXHJcbiAgICAgICAgT2JqZWN0U2NhbGU6WzAuMiwwLjIsMC4yXSxcclxuICAgICAgICBIZWFsdGhQb3M6WzAsMSwwXSxcclxuICAgICAgICBIZWFsdGhTY2FsZTpbMC4yNSwwLjI1LDAuMjVdLFxyXG4gICAgICAgIC8vdGltaW5nXHJcbiAgICAgICAgVmFsdWVBdHRhY2tJbnRlcnZhbEZ1bGw6MiwgIC8vZnVsbCB0aW1lIGludGVydmFsIChpbiBzZWNvbmRzKSBmb3IgYXR0YWNrIGFuaW1hdGlvblxyXG4gICAgICAgIFZhbHVlQXR0YWNrSW50ZXJ2YWxEYW1hZ2U6MSwvL3RpbWUgcG9pbnQgKGluIHNlY29uZHMpIHdoZW4gZGFtYWdlIHNob3VsZCBiZSBkZWFsdFxyXG4gICAgICAgIFZhbHVlRGVhdGhMZW5ndGg6MS40LCAgIC8vbGVuZ3RoIG9mIGRlYXRoIGFuaW1hdGlvbiAoaW4gc2Vjb25kcylcclxuICAgICAgICBWYWx1ZURlYXRoTGVuZ3RoU2NhbGU6MiwvL3NwZWVkIG9mIGRlYXRoIGFuaW1hdGlvblxyXG4gICAgICAgIC8vZGlzcGxheVxyXG4gICAgICAgIERpc3BsYXlOYW1lOlwiRGVmZW5kZXJcIixcclxuICAgICAgICBEaXNwbGF5RGVzYzpcIlN0YW5kYXJkIHVuaXRcIixcclxuICAgICAgICAvL3NwYXduaW5nXHJcbiAgICAgICAgU3Bhd25UeXBlOjEsXHJcbiAgICAgICAgU3Bhd25Db3N0OjEsXHJcbiAgICAgICAgLy9zdXJ2aXZhbFxyXG4gICAgICAgIFZhbHVlU3BlZWQ6MC42NSxcclxuICAgICAgICBWYWx1ZUhlYWx0aEJhc2U6NTAsXHJcbiAgICAgICAgVmFsdWVIZWFsdGhHcm93dGg6Mi4yNSxcclxuICAgICAgICBWYWx1ZUFybW91ckJhc2U6NSxcclxuICAgICAgICBWYWx1ZUFybW91ckdyb3d0aDowLFxyXG4gICAgICAgIC8vcmV3YXJkc1xyXG4gICAgICAgIFZhbHVlUmV3YXJkczoyLFxyXG4gICAgICAgIC8vbWVjaGFuaWNzXHJcbiAgICAgICAgQXR0cmlidXRlczpcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgIFwiXCJcclxuICAgICAgICBdXHJcbiAgICB9LFxyXG4gICAgLy8jIyMgTEFSR0UgRU5FTUlFUyAjIyNcclxuICAgIC8vICBicnVpc2VyXHJcbiAgICB7XHJcbiAgICAgICAgLy9tb2RlbCBwYXRoXHJcbiAgICAgICAgT2JqZWN0UGF0aDpcImVuZW15QnJ1aXNlclwiLFxyXG4gICAgICAgIE9iamVjdE9mZnNldDpbMCwwLjE1LDBdLFxyXG4gICAgICAgIE9iamVjdFNjYWxlOlswLjI1LDAuMjUsMC4yNV0sXHJcbiAgICAgICAgSGVhbHRoUG9zOlswLDAuNzUsMF0sXHJcbiAgICAgICAgSGVhbHRoU2NhbGU6WzAuMjUsMC4yNSwwLjI1XSxcclxuICAgICAgICAvL3RpbWluZ1xyXG4gICAgICAgIFZhbHVlQXR0YWNrSW50ZXJ2YWxGdWxsOjIsICAvL2Z1bGwgdGltZSBpbnRlcnZhbCAoaW4gc2Vjb25kcykgZm9yIGF0dGFjayBhbmltYXRpb25cclxuICAgICAgICBWYWx1ZUF0dGFja0ludGVydmFsRGFtYWdlOjEsLy90aW1lIHBvaW50IChpbiBzZWNvbmRzKSB3aGVuIGRhbWFnZSBzaG91bGQgYmUgZGVhbHRcclxuICAgICAgICBWYWx1ZURlYXRoTGVuZ3RoOjEuNCwgICAvL2xlbmd0aCBvZiBkZWF0aCBhbmltYXRpb24gKGluIHNlY29uZHMpXHJcbiAgICAgICAgVmFsdWVEZWF0aExlbmd0aFNjYWxlOjIsLy9zcGVlZCBvZiBkZWF0aCBhbmltYXRpb25cclxuICAgICAgICAvL2Rpc3BsYXlcclxuICAgICAgICBEaXNwbGF5TmFtZTpcIkJydWlzZXJcIixcclxuICAgICAgICBEaXNwbGF5RGVzYzpcIlRhbmt5IHVuaXRcIixcclxuICAgICAgICAvL3NwYXduaW5nXHJcbiAgICAgICAgU3Bhd25UeXBlOjIsXHJcbiAgICAgICAgU3Bhd25Db3N0OjMsXHJcbiAgICAgICAgLy9zdXJ2aXZhbFxyXG4gICAgICAgIFZhbHVlU3BlZWQ6MC40NSxcclxuICAgICAgICBWYWx1ZUhlYWx0aEJhc2U6MTIwLFxyXG4gICAgICAgIFZhbHVlSGVhbHRoR3Jvd3RoOjQsXHJcbiAgICAgICAgVmFsdWVBcm1vdXJCYXNlOjE0LFxyXG4gICAgICAgIFZhbHVlQXJtb3VyR3Jvd3RoOjEsXHJcbiAgICAgICAgLy9yZXdhcmRzXHJcbiAgICAgICAgVmFsdWVSZXdhcmRzOjQsXHJcbiAgICAgICAgLy9tZWNoYW5pY3NcclxuICAgICAgICBBdHRyaWJ1dGVzOlxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgXCJcIlxyXG4gICAgICAgIF1cclxuICAgIH0sXHJcbiAgICAvLyMjIyBCT1NTIEVORU1JRVMgIyMjXHJcbiAgICAvLyAgY2hhbXBpb25cclxuICAgIHtcclxuICAgICAgICAvL21vZGVsIHBhdGhcclxuICAgICAgICBPYmplY3RQYXRoOlwiZW5lbXlCcnVpc2VyXCIsXHJcbiAgICAgICAgT2JqZWN0T2Zmc2V0OlswLDAuNSwwXSxcclxuICAgICAgICBPYmplY3RTY2FsZTpbMC4yNSwwLjI1LDAuMjVdLFxyXG4gICAgICAgIEhlYWx0aFBvczpbMCwxLDBdLFxyXG4gICAgICAgIEhlYWx0aFNjYWxlOlswLjI1LDAuMjUsMC4yNV0sXHJcbiAgICAgICAgLy90aW1pbmdcclxuICAgICAgICBWYWx1ZUF0dGFja0ludGVydmFsRnVsbDoyLCAgLy9mdWxsIHRpbWUgaW50ZXJ2YWwgKGluIHNlY29uZHMpIGZvciBhdHRhY2sgYW5pbWF0aW9uXHJcbiAgICAgICAgVmFsdWVBdHRhY2tJbnRlcnZhbERhbWFnZToxLC8vdGltZSBwb2ludCAoaW4gc2Vjb25kcykgd2hlbiBkYW1hZ2Ugc2hvdWxkIGJlIGRlYWx0XHJcbiAgICAgICAgVmFsdWVEZWF0aExlbmd0aDoxLjQsICAgLy9sZW5ndGggb2YgZGVhdGggYW5pbWF0aW9uIChpbiBzZWNvbmRzKVxyXG4gICAgICAgIFZhbHVlRGVhdGhMZW5ndGhTY2FsZToyLC8vc3BlZWQgb2YgZGVhdGggYW5pbWF0aW9uXHJcbiAgICAgICAgLy9kaXNwbGF5XHJcbiAgICAgICAgRGlzcGxheU5hbWU6XCJDaGFtcGlvblwiLFxyXG4gICAgICAgIERpc3BsYXlEZXNjOlwiTWFzc2l2ZSB0YW5rIHVuaXRcIixcclxuICAgICAgICAvL3NwYXduaW5nXHJcbiAgICAgICAgU3Bhd25UeXBlOjMsXHJcbiAgICAgICAgU3Bhd25Db3N0OjMwLFxyXG4gICAgICAgIC8vc3Vydml2YWxcclxuICAgICAgICBWYWx1ZVNwZWVkOjAuMjUsXHJcbiAgICAgICAgVmFsdWVIZWFsdGhCYXNlOjMwMCxcclxuICAgICAgICBWYWx1ZUhlYWx0aEdyb3d0aDo4LFxyXG4gICAgICAgIFZhbHVlQXJtb3VyQmFzZTozMCxcclxuICAgICAgICBWYWx1ZUFybW91ckdyb3d0aDoyLjUsXHJcbiAgICAgICAgLy9yZXdhcmRzXHJcbiAgICAgICAgVmFsdWVSZXdhcmRzOjI1LFxyXG4gICAgICAgIC8vbWVjaGFuaWNzXHJcbiAgICAgICAgQXR0cmlidXRlczpcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgIFwiXCJcclxuICAgICAgICBdXHJcbiAgICB9LFxyXG4gICAgLy8gIFNwYXduZXJcclxuICAgIHtcclxuICAgICAgICAvL21vZGVsIHBhdGhcclxuICAgICAgICBPYmplY3RQYXRoOlwiZW5lbXlCcnVpc2VyXCIsXHJcbiAgICAgICAgT2JqZWN0T2Zmc2V0OlswLDAuNSwwXSxcclxuICAgICAgICBPYmplY3RTY2FsZTpbMC4yNSwwLjI1LDAuMjVdLFxyXG4gICAgICAgIEhlYWx0aFBvczpbMCwxLDBdLFxyXG4gICAgICAgIEhlYWx0aFNjYWxlOlswLjI1LDAuMjUsMC4yNV0sXHJcbiAgICAgICAgLy90aW1pbmdcclxuICAgICAgICBWYWx1ZUF0dGFja0ludGVydmFsRnVsbDoyLCAgLy9mdWxsIHRpbWUgaW50ZXJ2YWwgKGluIHNlY29uZHMpIGZvciBhdHRhY2sgYW5pbWF0aW9uXHJcbiAgICAgICAgVmFsdWVBdHRhY2tJbnRlcnZhbERhbWFnZToxLC8vdGltZSBwb2ludCAoaW4gc2Vjb25kcykgd2hlbiBkYW1hZ2Ugc2hvdWxkIGJlIGRlYWx0XHJcbiAgICAgICAgVmFsdWVEZWF0aExlbmd0aDoxLjQsICAgLy9sZW5ndGggb2YgZGVhdGggYW5pbWF0aW9uIChpbiBzZWNvbmRzKVxyXG4gICAgICAgIFZhbHVlRGVhdGhMZW5ndGhTY2FsZToyLC8vc3BlZWQgb2YgZGVhdGggYW5pbWF0aW9uXHJcbiAgICAgICAgLy9kaXNwbGF5XHJcbiAgICAgICAgRGlzcGxheU5hbWU6XCJNb2JpbGUgU3Bhd25lclwiLFxyXG4gICAgICAgIERpc3BsYXlEZXNjOlwiUGVyaW9kaWNhbGx5IHNwYXducyBlbmVtaWVzIGFyb3VuZCB0aGUgdW5pdFwiLFxyXG4gICAgICAgIC8vc3Bhd25pbmdcclxuICAgICAgICBTcGF3blR5cGU6MyxcclxuICAgICAgICBTcGF3bkNvc3Q6NTAsXHJcbiAgICAgICAgLy9zdXJ2aXZhbFxyXG4gICAgICAgIFZhbHVlU3BlZWQ6MC4yNSxcclxuICAgICAgICBWYWx1ZUhlYWx0aEJhc2U6MjUwLFxyXG4gICAgICAgIFZhbHVlSGVhbHRoR3Jvd3RoOjEyLFxyXG4gICAgICAgIFZhbHVlQXJtb3VyQmFzZTo1MCxcclxuICAgICAgICBWYWx1ZUFybW91ckdyb3d0aDoxLFxyXG4gICAgICAgIC8vcmV3YXJkc1xyXG4gICAgICAgIFZhbHVlUmV3YXJkczozNSxcclxuICAgICAgICAvL21lY2hhbmljc1xyXG4gICAgICAgIEF0dHJpYnV0ZXM6XHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICBcIlwiXHJcbiAgICAgICAgXVxyXG4gICAgfSxcclxuXSIsImltcG9ydCB7IERpZmZpY3VsdHlEYXRhIH0gZnJvbSBcIi4vZGF0YS9kaWZmaWN1bHR5LWRhdGFcIjtcclxuXHJcbi8qICAgICAgR0FNRSBTVEFURVxyXG4gICAgY29udGFpbnMgYWxsIGRldGFpbHMgZm9yIHRoZSBjdXJyZW50IGdhbWUgc2V0dGluZ3MgYW5kIHN0YXRlLlxyXG4gICAgYWxzbyBjb250YWlucyBnbG9iYWwgc3dpdGNoZXMgZm9yIGRlYnVnZ2luZyBzeXN0ZW1zLlxyXG4qL1xyXG5leHBvcnQgY2xhc3MgR2FtZVN0YXRlXHJcbntcclxuICAgIC8vZGVidWdnaW5nIHRvZ2dsZXNcclxuICAgIC8vICBvdmVyaGVhZFxyXG4gICAgcHVibGljIHN0YXRpYyBkZWJ1Z2dpbmdNYW5hZ2VyID0gZmFsc2U7XHJcbiAgICBwdWJsaWMgc3RhdGljIGRlYnVnZ2luZ1BhdGggPSBmYWxzZTtcclxuICAgIC8vICB0b3dlclxyXG4gICAgcHVibGljIHN0YXRpYyBkZWJ1Z2dpbmdUb3dlciA9IGZhbHNlO1xyXG4gICAgLy8gIGVuZW15XHJcbiAgICBwdWJsaWMgc3RhdGljIGRlYnVnZ2luZ0VuZW15ID0gZmFsc2U7XHJcbiAgICBwdWJsaWMgc3RhdGljIGRlYnVnZ2luZ1dhdmUgPSBmYWxzZTtcclxuXHJcbiAgICAvL2N1cnJlbnQgZ2FtZSBzdGF0ZVxyXG4gICAgLy8gIDAgLSBpZGxlXHJcbiAgICAvLyAgMSAtIGFjdGl2ZSwgaW4gYmV0d2VlbiB3YXZlc1xyXG4gICAgLy8gIDIgLSBhY3RpdmUsIHdhdmUgb24tZ29pbmcsIHNwYXduaW5nIG9uLWdvaW5nXHJcbiAgICAvLyAgMyAtIGFjdGl2ZSwgd2F2ZSBvbi1nb2luZywgc3Bhd25pbmcgY29tcGxldGVkXHJcbiAgICAvLyAgNCAtIGdhbWUgb3Zlciwgd2luXHJcbiAgICAvLyAgNSAtIGdhbWUgb3ZlciwgbG9zc1xyXG4gICAgc3RhdGljIHN0YXRlQ3VyOm51bWJlciA9IDA7XHJcbiAgICBzdGF0aWMgc3RhdGVTdHJpbmdzOnN0cmluZ1tdID1cclxuICAgIFtcclxuICAgICAgICBcIklkbGVcIixcclxuICAgICAgICBcIkdhbWUgQWN0aXZlOlxcblN0YXJ0IFdhdmVcIixcclxuICAgICAgICBcIkdhbWUgQWN0aXZlOlxcV2F2ZSBBY3RpdmVcIixcclxuICAgICAgICBcIkdhbWUgQWN0aXZlOlxcbldhdmUgT3ZlclwiLFxyXG4gICAgICAgIFwiR2FtZSBPdmVyOlxcblZpY3RvcnlcIixcclxuICAgICAgICBcIkdhbWUgT3ZlcjpcXG5EZWZlYXRcIlxyXG4gICAgXVxyXG5cclxuICAgIC8vZGlmZmljdWx0eVxyXG4gICAgc3RhdGljIERpZmZpY3VsdHlDdXI6bnVtYmVyID0gMjtcclxuXHJcbiAgICAvL3dhdmVzXHJcbiAgICBzdGF0aWMgV2F2ZUN1cjpudW1iZXIgPSAwO1xyXG4gICAgc3RhdGljIFdhdmVNYXg6bnVtYmVyID0gMzA7XHJcblxyXG4gICAgLy9wbGF5ZXJcclxuICAgIHN0YXRpYyBQbGF5ZXJIZWFsdGg6bnVtYmVyID0gMDtcclxuICAgIHN0YXRpYyBQbGF5ZXJNb25leTpudW1iZXIgPSAwO1xyXG5cclxuICAgIC8vZWNvbm9teVxyXG4gICAgc3RhdGljIG1vbmV5U3RhcnQ6bnVtYmVyID0gMTUwO1xyXG4gICAgc3RhdGljIGdldCBNb25leVN0YXJ0KCk6bnVtYmVyIHsgcmV0dXJuIEdhbWVTdGF0ZS5tb25leVN0YXJ0ICogRGlmZmljdWx0eURhdGFbR2FtZVN0YXRlLkRpZmZpY3VsdHlDdXJdLlBvaW50R2FpblBlcmNlbnQgLyAxMDA7IH1cclxuICAgIHN0YXRpYyBNb25leVJld2FyZFdhdmU6bnVtYmVyID0gNTA7XHJcbn0iLCIvKiAgICAgIFNQQVdORVIgQ09ORklHXHJcbiAgICBkZWZpbmVzIHNwYXduZXIgc3RhdGVzIGZvciBjZXJ0YWluIHdhdmVzLCBib2lscyBkb3duIHRvIHN3aXRjaFxyXG4gICAgbG9naWMgZm9yIGRlL2FjdGl2YXRpb24gb2Ygc3Bhd24gbG9jYXRpb25zLiBnaXZlbiBpbmRleCBNVVNUIGJlXHJcbiAgICB0aGUgaW5kZXggYXMgZGVmaW5lZCBpbiB0aGUgcGF0aGluZyBjb25maWcuXHJcbiovXHJcbmV4cG9ydCBjb25zdCBjb25maWdTcGF3bmVycyA9IFxyXG5bXHJcbiAgICAvL2FjdGl2YXRpb24gZXZlbnRcclxuICAgIHtcclxuICAgICAgICAvL2luZGV4IG9mIHRhcmdldCB3YXZlXHJcbiAgICAgICAgd2F2ZTogMCxcclxuICAgICAgICAvL2FsbCBhY3Rpb25zIHRvIGNvbmR1Y3QgZHVyaW5nIHdhdmVcclxuICAgICAgICBhY3Rpb25zOlxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgLy9pbmRleCBvZiB0YXJnZXRlZCBzcGF3biAmIHN0YXRlIHRvIHNldCAoMD1vZmYsIDE9b24pXHJcbiAgICAgICAgICAgIHtpbmRleDogNywgc3RhdGU6IDF9LFxyXG4gICAgICAgICAgICB7aW5kZXg6IDksIHN0YXRlOiAxfSxcclxuICAgICAgICBdXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHdhdmU6IDEsXHJcbiAgICAgICAgYWN0aW9uczpcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgIHtpbmRleDogNywgc3RhdGU6IDF9LFxyXG4gICAgICAgICAgICB7aW5kZXg6IDksIHN0YXRlOiAwfSxcclxuICAgICAgICBdXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHdhdmU6IDIsXHJcbiAgICAgICAgYWN0aW9uczpcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgIHtpbmRleDogNywgc3RhdGU6IDF9LFxyXG4gICAgICAgICAgICB7aW5kZXg6IDksIHN0YXRlOiAxfSxcclxuICAgICAgICBdXHJcbiAgICB9LFxyXG5dXHJcbi8qICAgICAgUEFUSElORyBDT05GSUdcclxuICAgIGRlZmluZXMgd2F5cG9pbnRzIHVzZWQgdG8gY3JlYXRlIHBhdGhpbmcgbm9kZXMgZm9yIGVuZW15IHVuaXRzLlxyXG4gICAgYW4gZW5lbXkgdW5pdCBwcm9ncmVzc2VzIGZyb20gb25lIHdheXBvaW50IHRvIGFub3RoZXIsIHdoZW4gdGhlXHJcbiAgICB1bml0IGNvbGxpZGVzIHdpdGggdGhlIHdheXBvaW50IG9iamVjdCB0aGUgbmV4dCB3YXlwb2ludCBpcyBhc3NpZ25lZC5cclxuXHJcbiAgICB0eXBlczpcclxuICAgICAgICAwIC0gbm8gZnVuY3Rpb25cclxuICAgICAgICAxIC0gc3Bhd25cclxuICAgICAgICAyIC0gZW5kIHBvaW50XHJcbiovXHJcbmV4cG9ydCBjb25zdCBjb25maWdQYXRoaW5nID1cclxuWyBcclxuICAgIC8vICBlbmQtcG9pbnRcclxuICAgIHtcclxuICAgICAgICBJbmRleDogIDAsXHJcbiAgICAgICAgVHlwZTogMixcclxuICAgICAgICBUYXJnZXQ6IFtdLFxyXG4gICAgICAgIFNjYWxlOiAgWzEsIDEsIDFdLFxyXG4gICAgICAgIFBvc2l0aW9uOiBbMjksIDAsIDIzXSxcclxuICAgICAgICBSb3RhdGlvbjogWzAsIDAsIDBdLFxyXG4gICAgfSxcclxuICAgIC8vICBjb3JuZXJcclxuICAgIHtcclxuICAgICAgICBJbmRleDogIDEsXHJcbiAgICAgICAgVHlwZTogMCxcclxuICAgICAgICBUYXJnZXQ6IFswXSxcclxuICAgICAgICBTY2FsZTogIFsxLCAxLCAxXSxcclxuICAgICAgICBQb3NpdGlvbjogWzQxLCAwLCAyM10sXHJcbiAgICAgICAgUm90YXRpb246IFswLCAwLCAwXSxcclxuICAgIH0sXHJcbiAgICAvLyAgY29ybmVyXHJcbiAgICB7XHJcbiAgICAgICAgSW5kZXg6ICAyLFxyXG4gICAgICAgIFR5cGU6IDAsXHJcbiAgICAgICAgVGFyZ2V0OiBbMV0sXHJcbiAgICAgICAgU2NhbGU6ICBbMSwgMSwgMV0sXHJcbiAgICAgICAgUG9zaXRpb246IFs0MSwgMCwgMjldLFxyXG4gICAgICAgIFJvdGF0aW9uOiBbMCwgMCwgMF0sXHJcbiAgICB9LFxyXG4gICAgLy8gIGNvcm5lclxyXG4gICAge1xyXG4gICAgICAgIEluZGV4OiAgMywgICAgICBcclxuICAgICAgICBUeXBlOiAwLFxyXG4gICAgICAgIFRhcmdldDogWzJdLFxyXG4gICAgICAgIFNjYWxlOiAgWzEsIDEsIDFdLFxyXG4gICAgICAgIFBvc2l0aW9uOiBbMjksIDAsIDI5XSxcclxuICAgICAgICBSb3RhdGlvbjogWzAsIDAsIDBdLFxyXG4gICAgfSxcclxuICAgIC8vICBjb3JuZXJcclxuICAgIHtcclxuICAgICAgICBJbmRleDogIDQsICAgICAgXHJcbiAgICAgICAgVHlwZTogMCxcclxuICAgICAgICBUYXJnZXQ6IFszXSxcclxuICAgICAgICBTY2FsZTogIFsxLCAxLCAxXSxcclxuICAgICAgICBQb3NpdGlvbjogWzI5LCAwLCAzNV0sXHJcbiAgICAgICAgUm90YXRpb246IFswLCAwLCAwXSxcclxuICAgIH0sXHJcbiAgICAvLyAgc3BsaXQgMVxyXG4gICAge1xyXG4gICAgICAgIEluZGV4OiAgNSxcclxuICAgICAgICBUeXBlOiAwLFxyXG4gICAgICAgIFRhcmdldDogWzRdLFxyXG4gICAgICAgIFNjYWxlOiAgWzEsIDEsIDFdLFxyXG4gICAgICAgIFBvc2l0aW9uOiBbMzUsIDAsIDM1XSxcclxuICAgICAgICBSb3RhdGlvbjogWzAsIDAsIDBdLFxyXG4gICAgfSxcclxuICAgIC8vICBzcGxpdCAxLCBmb3JrIDFcclxuICAgIHtcclxuICAgICAgICBJbmRleDogIDYsXHJcbiAgICAgICAgVHlwZTogMCxcclxuICAgICAgICBUYXJnZXQ6IFs1XSxcclxuICAgICAgICBTY2FsZTogIFsxLCAxLCAxXSxcclxuICAgICAgICBQb3NpdGlvbjogWzQxLCAwLCAzNV0sXHJcbiAgICAgICAgUm90YXRpb246IFswLCAwLCAwXSxcclxuICAgIH0sXHJcbiAgICAvLyAgc3Bhd25wb2ludFxyXG4gICAge1xyXG4gICAgICAgIEluZGV4OiAgNyxcclxuICAgICAgICBUeXBlOiAxLFxyXG4gICAgICAgIFRhcmdldDogWzZdLFxyXG4gICAgICAgIFNjYWxlOiAgWzEsIDEsIDFdLFxyXG4gICAgICAgIFBvc2l0aW9uOiBbNDEsIDAsIDQxXSxcclxuICAgICAgICBSb3RhdGlvbjogWzAsIDAsIDBdLFxyXG4gICAgfSxcclxuICAgIC8vICBzcGxpdCAxLCBmb3JrIDJcclxuICAgIHtcclxuICAgICAgICBJbmRleDogIDgsXHJcbiAgICAgICAgVHlwZTogMCxcclxuICAgICAgICBUYXJnZXQ6IFs1XSxcclxuICAgICAgICBTY2FsZTogIFsxLCAxLCAxXSxcclxuICAgICAgICBQb3NpdGlvbjogWzM1LCAwLCA0MV0sXHJcbiAgICAgICAgUm90YXRpb246IFswLCAwLCAwXSxcclxuICAgIH0sXHJcbiAgICAvLyAgc3Bhd25wb2ludFxyXG4gICAge1xyXG4gICAgICAgIEluZGV4OiAgOSxcclxuICAgICAgICBUeXBlOiAxLFxyXG4gICAgICAgIFRhcmdldDogWzhdLFxyXG4gICAgICAgIFNjYWxlOiAgWzEsIDEsIDFdLFxyXG4gICAgICAgIFBvc2l0aW9uOiBbMjksIDAsIDQxXSxcclxuICAgICAgICBSb3RhdGlvbjogWzAsIDAsIDBdLFxyXG4gICAgfSxcclxuXSIsIi8qICAgICAgTUFQIFBBVEhJTkdcclxuICAgIGhhbmRsZXMgdGhlIGNyZWF0aW9uIG9mIHRoZSBtYXAncyBwYXRoaW5nIHJvdXRlcyB1c2VkIGJ5IFxyXG4gICAgZW5lbXkgdW5pdHMgYXMgdGhleSBhcHByb2FjaCB0aGUgcGxheWVyJ3MgYmFzZS4gbm9kZXMgYnJhbmNoXHJcbiAgICBvdXQgZnJvbSB0aGUgcGxheWVyJ3Mgc3Bhd24sIGNoYWluaW5nIHRvd2FyZCBlbmVteSBzcGF3biBwb2ludHMuXHJcbiovXHJcbmltcG9ydCB7IExpc3QsIERpY3Rpb25hcnkgfSBmcm9tIFwic3JjL3V0aWxpdGllcy9jb2xsZWN0aW9uc1wiO1xyXG5pbXBvcnQgeyBjb25maWdQYXRoaW5nLCBjb25maWdTcGF3bmVycyB9IGZyb20gXCIuL2NvbmZpZy9wYXRoaW5nLWNvbmZpZ1wiO1xyXG5pbXBvcnQgeyBHYW1lU3RhdGUgfSBmcm9tIFwiLi9nYW1lLXN0YXRlc1wiO1xyXG5leHBvcnQgY2xhc3MgV2F5cG9pbnRNYW5hZ2VyIGV4dGVuZHMgRW50aXR5IFxyXG57XHJcbiAgICAvL2FuaW1hdGlvbiBuYW1lc1xyXG4gICAgYW5pbUtleXM6c3RyaW5nW10gPSBbXTtcclxuXHJcbiAgICAvL2FjY2VzcyBwb2NrZXRpbmdcclxuICAgIHByaXZhdGUgc3RhdGljIGluc3RhbmNlOnVuZGVmaW5lZHxXYXlwb2ludE1hbmFnZXI7XHJcbiAgICBwdWJsaWMgc3RhdGljIGdldCBJbnN0YW5jZSgpOldheXBvaW50TWFuYWdlclxyXG4gICAge1xyXG4gICAgICAgIC8vZW5zdXJlIGluc3RhbmNlIGlzIHNldFxyXG4gICAgICAgIGlmKFdheXBvaW50TWFuYWdlci5pbnN0YW5jZSA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgV2F5cG9pbnRNYW5hZ2VyLmluc3RhbmNlID0gbmV3IFdheXBvaW50TWFuYWdlcigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIFdheXBvaW50TWFuYWdlci5pbnN0YW5jZTtcclxuICAgIH1cclxuXHJcbiAgICAvL2NvbGxlY3Rpb25zXHJcbiAgICAvLyAgd2F5cG9pbnRzXHJcbiAgICBXYXlwb2ludExpc3Q6TGlzdDxXYXlwb2ludD4gPSBuZXcgTGlzdDxXYXlwb2ludD4oKTtcclxuICAgIFdheXBvaW50RGljdDpEaWN0aW9uYXJ5PFdheXBvaW50PiA9IG5ldyBEaWN0aW9uYXJ5PFdheXBvaW50PigpO1xyXG4gICAgLy8gIHNwYXducG9pbnRzXHJcbiAgICBTcGF3blBvaW50czpMaXN0PFdheXBvaW50PiA9IG5ldyBMaXN0PFdheXBvaW50PigpO1xyXG5cclxuICAgIC8vY29uc3RydWN0b3JcclxuICAgIHByaXZhdGUgY29uc3RydWN0b3IoKVxyXG4gICAge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcblxyXG4gICAgICAgIC8vb2JqZWN0XHJcbiAgICAgICAgdGhpcy5hZGRDb21wb25lbnQobmV3IFRyYW5zZm9ybVxyXG4gICAgICAgICh7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiBuZXcgVmVjdG9yMygwLDAsMCksXHJcbiAgICAgICAgICAgIHNjYWxlOiBuZXcgVmVjdG9yMygxLDEsMSksXHJcbiAgICAgICAgICAgIHJvdGF0aW9uOiBuZXcgUXVhdGVybmlvbigpLnNldEV1bGVyKDAsMCwwKVxyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxuXHJcbiAgICAvL2dlbmVyYXRlcyB3YXlwb2ludHMsIGxvYWRpbmcgZnJvbSBkZWZzIHN0b3JlZCBpbiBwYXRoaW5nLWNvbmZpZ1xyXG4gICAgcHVibGljIEdlbmVyYXRlV2F5cG9pbnRzKClcclxuICAgIHtcclxuICAgICAgICAvL2NyZWF0ZSBhbGwgd2F5cG9pbnQgb2JqZWN0c1xyXG4gICAgICAgIGlmKEdhbWVTdGF0ZS5kZWJ1Z2dpbmdQYXRoKSBsb2coXCJNQVAgUEFUSElORzogZ2VuZXJhdGluZyB3YXlwb2ludCBvYmplY3RzLi4uXCIpO1xyXG4gICAgICAgIGZvcih2YXIgaTpudW1iZXIgPSAwOyBpPGNvbmZpZ1BhdGhpbmcubGVuZ3RoOyBpKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvL29iamVjdFxyXG4gICAgICAgICAgICBjb25zdCB3YXlwb2ludDpXYXlwb2ludCA9IG5ldyBXYXlwb2ludChjb25maWdQYXRoaW5nW2ldLkluZGV4KTtcclxuICAgICAgICAgICAgd2F5cG9pbnQuc2V0UGFyZW50KHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgLy9hZGQgdG8gY29sbGVjdGlvbnNcclxuICAgICAgICAgICAgdGhpcy5XYXlwb2ludExpc3QuYWRkSXRlbSh3YXlwb2ludCk7XHJcbiAgICAgICAgICAgIHRoaXMuV2F5cG9pbnREaWN0LmFkZEl0ZW0od2F5cG9pbnQuSW5kZXgudG9TdHJpbmcoKSwgd2F5cG9pbnQpO1xyXG5cclxuICAgICAgICAgICAgaWYoY29uZmlnUGF0aGluZ1tpXS5UeXBlID09IDEpIHsgdGhpcy5TcGF3blBvaW50cy5hZGRJdGVtKHdheXBvaW50KTsgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZihHYW1lU3RhdGUuZGVidWdnaW5nUGF0aCkgbG9nKFwiTUFQIFBBVEhJTkc6IGdlbmVyYXRlZCB3YXlwb2ludCBvYmplY3RzLCBjb3VudDogXCIrdGhpcy5XYXlwb2ludExpc3Quc2l6ZSgpKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy9yZXR1cm5zIHRoZSBhIHNwYXduIHBvaW50LCBwb2ludGVyIGlzIHBlcnNpc3RlbnQgYW5kIGl0ZXJhdGVzIHRocm91Z2ggYWxsIHNwYXduIHBvaW50c1xyXG4gICAgcHJpdmF0ZSBzcGF3blBvaW50SW5kZXg6bnVtYmVyID0gMDtcclxuICAgIHByaXZhdGUgc3Bhd25Qb2ludEluZGV4Q2hlY2s6bnVtYmVyID0gMDtcclxuICAgIHB1YmxpYyBHZXRTcGF3blBvaW50KClcclxuICAgIHtcclxuICAgICAgICAvL3B1c2ggdG8gbmV4dCBpbmRleFxyXG4gICAgICAgIHRoaXMuc3Bhd25Qb2ludEluZGV4Q2hlY2sgPSB0aGlzLnNwYXduUG9pbnRJbmRleDtcclxuICAgICAgICB0aGlzLnNwYXduUG9pbnRJbmRleCsrO1xyXG4gICAgICAgIGlmKHRoaXMuc3Bhd25Qb2ludEluZGV4ID49IHRoaXMuU3Bhd25Qb2ludHMuc2l6ZSgpKSB7IHRoaXMuc3Bhd25Qb2ludEluZGV4ID0gMDsgfVxyXG5cclxuICAgICAgICAvL2NoZWNrIHN0YXRlXHJcbiAgICAgICAgd2hpbGUodGhpcy5zcGF3blBvaW50SW5kZXggIT0gdGhpcy5zcGF3blBvaW50SW5kZXhDaGVjaylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vY29uZHVjdCBjaGVja1xyXG4gICAgICAgICAgICBpZih0aGlzLlNwYXduUG9pbnRzLmdldEl0ZW0odGhpcy5zcGF3blBvaW50SW5kZXgpLlN0YXRlID09IDEpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL3B1c2ggbmV4dCBpbmRleFxyXG4gICAgICAgICAgICB0aGlzLnNwYXduUG9pbnRJbmRleCsrO1xyXG4gICAgICAgICAgICBpZih0aGlzLnNwYXduUG9pbnRJbmRleCA+PSB0aGlzLlNwYXduUG9pbnRzLnNpemUoKSkgeyB0aGlzLnNwYXduUG9pbnRJbmRleCA9IDA7IH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuU3Bhd25Qb2ludHMuZ2V0SXRlbSh0aGlzLnNwYXduUG9pbnRJbmRleCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9yZXR1cm5zIHRoZSBuZXh0IHdheXBvaW50IGluIHRoZSBjaGFpbiBiYXNlZCBvbiB0aGUgZ2l2ZW4gaW5kZXggYW5kIHNlZWRcclxuICAgIHB1YmxpYyBHZXROZXh0V2F5cG9pbnQoaW5kZXg6bnVtYmVyLCBzZWVkOm51bWJlcik6dW5kZWZpbmVkfFdheXBvaW50XHJcbiAgICB7XHJcbiAgICAgICAgLy9pZiB0YXJnZXQgbGVuZ3RoIGlzIHplcm8sIHdheXBvaW50IGlzIGVuZCBvZiBwYXRoXHJcbiAgICAgICAgaWYodGhpcy5XYXlwb2ludERpY3QuZ2V0SXRlbShpbmRleC50b1N0cmluZygpKS5UYXJnZXQubGVuZ3RoID09IDApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9yYW5kb21pemUgYW5kIHJldHVybiBwYXRoIHNlbGVjdGlvblxyXG4gICAgICAgIHZhciBwYXRoUmFuZDpudW1iZXIgPSAoc2VlZCtpbmRleCkldGhpcy5XYXlwb2ludERpY3QuZ2V0SXRlbShpbmRleC50b1N0cmluZygpKS5UYXJnZXQubGVuZ3RoO1xyXG4gICAgICAgIHJldHVybiB0aGlzLldheXBvaW50RGljdC5nZXRJdGVtKHRoaXMuV2F5cG9pbnREaWN0LmdldEl0ZW0oaW5kZXgudG9TdHJpbmcoKSkuVGFyZ2V0W3BhdGhSYW5kXSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9yZXNldHMgdGhlIHN0YXRlIG9mIGFsbCBzcGF3bmVycywgYWN0aXZhdGluZyB0aGVtIGFsbFxyXG4gICAgcHVibGljIFJlc2V0U3Bhd25lcigpXHJcbiAgICB7XHJcbiAgICAgICAgLy9wcm9jZXNzIGV2ZXJ5IHNwYXducG9pbnRcclxuICAgICAgICBmb3IodmFyIGk6bnVtYmVyPTA7IGk8dGhpcy5TcGF3blBvaW50cy5zaXplKCk7IGkrKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vZW5hYmxlIHNwYXduIHBvaW50XHJcbiAgICAgICAgICAgIHRoaXMuU3Bhd25Qb2ludHMuZ2V0SXRlbShpKS5TZXRTcGF3bmVyU3RhdGUoMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vY2FsbGVkIGJlZm9yZSBhIHdhdmUgYmVnaW5zLCBkaXNwbGF5cyBcclxuICAgIGNvbmZpZ0luZGV4Om51bWJlciA9IC0xO1xyXG4gICAgcHVibGljIFBhcnNlU3Bhd25lckNvbmZpZygpXHJcbiAgICB7XHJcbiAgICAgICAgLy9jaGVjayBmb3IgY3VycmVudCB3YXZlIGluIGNvbmZpZyBmaWxlc1xyXG4gICAgICAgIHRoaXMuY29uZmlnSW5kZXggPSAtMTtcclxuICAgICAgICBmb3IodmFyIGk6bnVtYmVyPTA7IGk8Y29uZmlnU3Bhd25lcnMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihHYW1lU3RhdGUuV2F2ZUN1ciA9PSBjb25maWdTcGF3bmVyc1tpXS53YXZlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZ0luZGV4ID0gaTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKHRoaXMuY29uZmlnSW5kZXggPT0gLTEpIHJldHVybjtcclxuXHJcbiAgICAgICAgLy9jb25kdWN0IHJlcXVpcmVkIGFjdGlvbnMgKGRpcy9lbmFibGluZyBzcGF3bmVycylcclxuICAgICAgICBmb3IodmFyIGk6bnVtYmVyPTA7IGk8Y29uZmlnU3Bhd25lcnNbdGhpcy5jb25maWdJbmRleF0uYWN0aW9ucy5sZW5ndGg7IGkrKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuV2F5cG9pbnREaWN0LmdldEl0ZW0oY29uZmlnU3Bhd25lcnNbdGhpcy5jb25maWdJbmRleF0uYWN0aW9uc1tpXS5pbmRleC50b1N0cmluZygpKS5TZXRTcGF3bmVyU3RhdGUoY29uZmlnU3Bhd25lcnNbdGhpcy5jb25maWdJbmRleF0uYWN0aW9uc1tpXS5zdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vcmV0dXJucyB0aGUgdG90YWwgZGlzdGFuY2Ugb2YgdGhlIHdheXBvaW50IHBhdGggdGhhdCB3aWxsIGJlIHRyYXZlbGxlZCBieSBhIHVuaXQgYmFzZWQgb24gdGhlIGdpdmVuIHNwYXduIGFuZCBzZWVkXHJcbiAgICBwcml2YXRlIGRpc3RhbmNlOm51bWJlciA9IDA7XHJcbiAgICBwcml2YXRlIHdheXBvaW50UHJldjp1bmRlZmluZWR8V2F5cG9pbnQ7XHJcbiAgICBwcml2YXRlIHdheXBvaW50Q3VyOnVuZGVmaW5lZHxXYXlwb2ludDtcclxuICAgIHB1YmxpYyBHZXRSb3V0ZURpc3RhbmNlKHNwYXduOm51bWJlciwgc2VlZDpudW1iZXIpOm51bWJlclxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuZGlzdGFuY2UgPSAwO1xyXG4gICAgICAgIHRoaXMud2F5cG9pbnRQcmV2ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMud2F5cG9pbnRDdXIgPSB0aGlzLldheXBvaW50RGljdC5nZXRJdGVtKHNwYXduLnRvU3RyaW5nKCkpO1xyXG5cclxuICAgICAgICAvL3Byb2Nlc3MgcGF0aFxyXG4gICAgICAgIHdoaWxlKHRydWUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvL2Vuc3VyZSBlbnRyeSB3YXlwb2ludCBpcyB2YWx1ZVxyXG4gICAgICAgICAgICBpZih0aGlzLndheXBvaW50Q3VyID09IHVuZGVmaW5lZCkgeyByZXR1cm4gLTE7IH1cclxuXHJcbiAgICAgICAgICAgIC8vZ2V0IG5leHQgd2F5cG9pbnQgcGFpclxyXG4gICAgICAgICAgICB0aGlzLndheXBvaW50UHJldiA9IHRoaXMud2F5cG9pbnRDdXI7XHJcbiAgICAgICAgICAgIHRoaXMud2F5cG9pbnRDdXIgPSB0aGlzLkdldE5leHRXYXlwb2ludCh0aGlzLndheXBvaW50UHJldi5JbmRleCwgc2VlZCk7XHJcblxyXG4gICAgICAgICAgICAvL3JlYWNoZWQgZW5kIG9mIHBhdGhcclxuICAgICAgICAgICAgaWYodGhpcy53YXlwb2ludEN1ciA9PSB1bmRlZmluZWQpIHsgcmV0dXJuIHRoaXMuZGlzdGFuY2U7IH1cclxuXHJcbiAgICAgICAgICAgIC8vYWRkIHBhdGggZGlzdGFuY2VcclxuICAgICAgICAgICAgdGhpcy5kaXN0YW5jZSArPSBNYXRoLmFicyhWZWN0b3IzLkRpc3RhbmNlKHRoaXMud2F5cG9pbnRQcmV2LmdldENvbXBvbmVudChUcmFuc2Zvcm0pLnBvc2l0aW9uLCB0aGlzLndheXBvaW50Q3VyLmdldENvbXBvbmVudChUcmFuc2Zvcm0pLnBvc2l0aW9uKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vL2FjdHMgYXMgYSBzaW5nbGUgbm9kZSBhbG9uZyB0aGUgcGF0aFxyXG5leHBvcnQgY2xhc3MgV2F5cG9pbnQgZXh0ZW5kcyBFbnRpdHlcclxue1xyXG4gICAgSW5kZXg6bnVtYmVyO1xyXG4gICAgU3RhdGU6bnVtYmVyO1xyXG4gICAgVGFyZ2V0OnN0cmluZ1tdO1xyXG5cclxuICAgIC8vdXNlZCB0byBkaXNwbGF5IHR5cGUgc3BlY2lmaWMgb2JqZWN0cyAoc3Bhd25lciwgcGxheWVyIGJhc2UsIGVjdClcclxuICAgIERpc3BsYXlPYmplY3Q6dW5kZWZpbmVkfEVudGl0eTtcclxuXHJcbiAgICAvL2FuaW1hdG9uc1xyXG4gICAgYW5pbWF0b3I6dW5kZWZpbmVkfEFuaW1hdG9yO1xyXG4gICAgYW5pbWF0aW9uczp1bmRlZmluZWR8QW5pbWF0aW9uU3RhdGVbXTtcclxuXHJcbiAgICBwdWJsaWMgU2V0QW5pbWF0aW9uU3RhdGUoc3RhdGU6bnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIGlmKHRoaXMuYW5pbWF0b3IgPT0gdW5kZWZpbmVkKSByZXR1cm47XHJcbiAgICAgICAgaWYodGhpcy5hbmltYXRpb25zID09IHVuZGVmaW5lZCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAvL2Rpc2FibGUgYWxsIG90aGVyIGFuaW1hdGlvbnNcclxuICAgICAgICB0aGlzLmFuaW1hdGlvbnNbMF0uc3RvcCgpO1xyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uc1sxXS5zdG9wKCk7XHJcbiAgICAgICAgdGhpcy5hbmltYXRpb25zWzJdLnN0b3AoKTtcclxuXHJcbiAgICAgICAgLy9hY3RpdmF0ZSB0YXJnZXRlZCBhbmltYXRpb25cclxuICAgICAgICB0aGlzLmFuaW1hdGlvbnNbc3RhdGVdLnBsYXkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvL2NvbnN0cnVjdG9yXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoaW5kOm51bWJlcilcclxuICAgIHtcclxuICAgICAgICBzdXBlcigpO1xyXG5cclxuICAgICAgICAvL2RhdGFcclxuICAgICAgICB0aGlzLkluZGV4ID0gaW5kO1xyXG4gICAgICAgIHRoaXMuU3RhdGUgPSAxO1xyXG4gICAgICAgIHRoaXMuVGFyZ2V0ID0gW107XHJcbiAgICAgICAgZm9yKHZhciBpOm51bWJlcj0wOyBpPGNvbmZpZ1BhdGhpbmdbdGhpcy5JbmRleF0uVGFyZ2V0Lmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5UYXJnZXQucHVzaChjb25maWdQYXRoaW5nW3RoaXMuSW5kZXhdLlRhcmdldFtpXS50b1N0cmluZygpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vcG9zaXRpb25cclxuICAgICAgICB0aGlzLmFkZENvbXBvbmVudChuZXcgVHJhbnNmb3JtXHJcbiAgICAgICAgKHtcclxuICAgICAgICAgICAgcG9zaXRpb246IG5ldyBWZWN0b3IzKGNvbmZpZ1BhdGhpbmdbdGhpcy5JbmRleF0uUG9zaXRpb25bMF0sIGNvbmZpZ1BhdGhpbmdbdGhpcy5JbmRleF0uUG9zaXRpb25bMV0sIGNvbmZpZ1BhdGhpbmdbdGhpcy5JbmRleF0uUG9zaXRpb25bMl0pLFxyXG4gICAgICAgICAgICBzY2FsZTogbmV3IFZlY3RvcjMoY29uZmlnUGF0aGluZ1t0aGlzLkluZGV4XS5TY2FsZVswXSwgY29uZmlnUGF0aGluZ1t0aGlzLkluZGV4XS5TY2FsZVsxXSwgY29uZmlnUGF0aGluZ1t0aGlzLkluZGV4XS5TY2FsZVsyXSksXHJcbiAgICAgICAgICAgIHJvdGF0aW9uOiBuZXcgUXVhdGVybmlvbigpLnNldEV1bGVyKGNvbmZpZ1BhdGhpbmdbdGhpcy5JbmRleF0uUm90YXRpb25bMF0sIGNvbmZpZ1BhdGhpbmdbdGhpcy5JbmRleF0uUm90YXRpb25bMV0sIGNvbmZpZ1BhdGhpbmdbdGhpcy5JbmRleF0uUm90YXRpb25bMl0pXHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICBpZihHYW1lU3RhdGUuZGVidWdnaW5nUGF0aClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vY3JlYXRlIHByZXZpZXcgb2JqZWN0XHJcbiAgICAgICAgICAgIHRoaXMuYWRkQ29tcG9uZW50KG5ldyBCb3hTaGFwZSgpKTtcclxuICAgICAgICAgICAgdGhpcy5nZXRDb21wb25lbnQoQm94U2hhcGUpLndpdGhDb2xsaXNpb25zID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL2lmIHNwYXduZXJcclxuICAgICAgICBpZihjb25maWdQYXRoaW5nW3RoaXMuSW5kZXhdLlR5cGUgPT0gMSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vY3JlYXRlIGRpc3BsYXkgb2JqZWN0XHJcbiAgICAgICAgICAgIHRoaXMuRGlzcGxheU9iamVjdCA9IG5ldyBFbnRpdHkoKTtcclxuICAgICAgICAgICAgdGhpcy5EaXNwbGF5T2JqZWN0LnNldFBhcmVudCh0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5EaXNwbGF5T2JqZWN0LmFkZENvbXBvbmVudChuZXcgR0xURlNoYXBlKFwibW9kZWxzL3BhdGhpbmdTcGF3bmVyLmdsYlwiKSk7XHJcblxyXG4gICAgICAgICAgICAvL2FuaW1hdGlvbnNcclxuICAgICAgICAgICAgLy8gIGNvbnRyb2xsZXJcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRvciA9IHRoaXMuRGlzcGxheU9iamVjdC5hZGRDb21wb25lbnQobmV3IEFuaW1hdG9yKCkpO1xyXG4gICAgICAgICAgICAvLyAgc3RhdGVzXHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9ucyA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbnMucHVzaChuZXcgQW5pbWF0aW9uU3RhdGUoJ2FuaW1fU3Bhd25EaXNhYmxlZCcsIHsgbG9vcGluZzogdHJ1ZSwgc3BlZWQ6IDEgfSkpO1xyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbnMucHVzaChuZXcgQW5pbWF0aW9uU3RhdGUoJ2FuaW1fU3Bhd25FbmFibGVkJywgeyBsb29waW5nOiB0cnVlLCBzcGVlZDogMSB9KSk7XHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9ucy5wdXNoKG5ldyBBbmltYXRpb25TdGF0ZSgnYW5pbV9TcGF3bkVuZHBvaW50JywgeyBsb29waW5nOiB0cnVlLCBzcGVlZDogMSB9KSk7XHJcbiAgICAgICAgICAgIC8vICBjbGlwc1xyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdG9yLmFkZENsaXAodGhpcy5hbmltYXRpb25zWzBdKTtcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRvci5hZGRDbGlwKHRoaXMuYW5pbWF0aW9uc1sxXSk7XHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0b3IuYWRkQ2xpcCh0aGlzLmFuaW1hdGlvbnNbMl0pO1xyXG4gICAgICAgICAgICAvL3NldCBkZWZhdWx0IGNsaXBcclxuICAgICAgICAgICAgdGhpcy5TZXRBbmltYXRpb25TdGF0ZSgxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9pZiBwbGF5ZXIgYmFzZSAoY3VycmVudGx5IGp1c3QgdmFyaWVudCBwYWNrZWQgaW50byBzcGF3bmVyKVxyXG4gICAgICAgIGlmKGNvbmZpZ1BhdGhpbmdbdGhpcy5JbmRleF0uVHlwZSA9PSAyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy9jcmVhdGUgZGlzcGxheSBvYmplY3RcclxuICAgICAgICAgICAgdGhpcy5EaXNwbGF5T2JqZWN0ID0gbmV3IEVudGl0eSgpO1xyXG4gICAgICAgICAgICB0aGlzLkRpc3BsYXlPYmplY3Quc2V0UGFyZW50KHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLkRpc3BsYXlPYmplY3QuYWRkQ29tcG9uZW50KG5ldyBHTFRGU2hhcGUoXCJtb2RlbHMvcGF0aGluZ1NwYXduZXIuZ2xiXCIpKTtcclxuXHJcbiAgICAgICAgICAgIC8vYW5pbWF0aW9uc1xyXG4gICAgICAgICAgICAvLyAgY29udHJvbGxlclxyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdG9yID0gdGhpcy5EaXNwbGF5T2JqZWN0LmFkZENvbXBvbmVudChuZXcgQW5pbWF0b3IoKSk7XHJcbiAgICAgICAgICAgIC8vICBzdGF0ZXNcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25zID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9ucy5wdXNoKG5ldyBBbmltYXRpb25TdGF0ZSgnYW5pbV9TcGF3bkRpc2FibGVkJywgeyBsb29waW5nOiB0cnVlLCBzcGVlZDogMSB9KSk7XHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9ucy5wdXNoKG5ldyBBbmltYXRpb25TdGF0ZSgnYW5pbV9TcGF3bkVuYWJsZWQnLCB7IGxvb3Bpbmc6IHRydWUsIHNwZWVkOiAxIH0pKTtcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25zLnB1c2gobmV3IEFuaW1hdGlvblN0YXRlKCdhbmltX1NwYXduRW5kcG9pbnQnLCB7IGxvb3Bpbmc6IHRydWUsIHNwZWVkOiAxIH0pKTtcclxuICAgICAgICAgICAgLy8gIGNsaXBzXHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0b3IuYWRkQ2xpcCh0aGlzLmFuaW1hdGlvbnNbMF0pO1xyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdG9yLmFkZENsaXAodGhpcy5hbmltYXRpb25zWzFdKTtcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRvci5hZGRDbGlwKHRoaXMuYW5pbWF0aW9uc1syXSk7XHJcbiAgICAgICAgICAgIC8vc2V0IGRlZmF1bHQgY2xpcFxyXG4gICAgICAgICAgICB0aGlzLlNldEFuaW1hdGlvblN0YXRlKDIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvL3NldHMgdGhlIHN0YXRlIG9mIHNwYXduZXJcclxuICAgIHB1YmxpYyBTZXRTcGF3bmVyU3RhdGUoc3RhdGU6bnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuU3RhdGUgPSBzdGF0ZTtcclxuICAgICAgICB0aGlzLlNldEFuaW1hdGlvblN0YXRlKHN0YXRlKTtcclxuICAgIH1cclxufSIsIi8qICAgICAgVE9XRVIgQ09ORklHXHJcbiAgICBkZWZpbmVzIGxvY2F0aW9ucyBmb3IgdG93ZXIgZm91bmRhdGlvbnMuIHRoZXNlIGFyZVxyXG4gICAgbG9jYXRpb25zIHdoZXJlIHRvd2VycyBjYW4gYmUgYnVpbHRcclxuKi9cclxuZXhwb3J0IGNvbnN0IHNldHRpbmdUb3dlciA9IFxyXG5bXHJcbiAgICB7XHJcbiAgICAgICAgLy9mb3VuZGF0aW9uXHJcbiAgICAgICAgZm91bmRhdGlvblNwYWNpbmc6IFsxLCAxXSxcclxuICAgICAgICBmb3VuZGF0aW9uT2Zmc2V0OiBbMCwgMCwgMF0sXHJcbiAgICAgICAgZm91bmRhdGlvblNjYWxlOlswLjUsIDAuNSwgMC41XSxcclxuICAgICAgICAvL3N0cnVjdHVyZVxyXG4gICAgICAgIHN0cnVjdHVyZU9mZnNldDogWzAsIDAsIDBdLFxyXG4gICAgICAgIHN0cnVjdHVyZVNjYWxlOiBbMSwgMSwgMV0sXHJcbiAgICAgICAgLy9naW1iYWxcclxuICAgICAgICBnaW1iYWxPZmZzZXQ6IFswLCAwLCAwXSxcclxuICAgICAgICBnaW1iYWxTY2FsZTogWzEsIDEsIDFdXHJcbiAgICB9XHJcbl1cclxuZXhwb3J0IGNvbnN0IGNvbmZpZ1Rvd2VyID1cclxuW1xyXG4gICAgLy90b3AgbGVmdFxyXG4gICAge1xyXG4gICAgICAgIEdyaWRMb2NhdGlvbjogWzI5LjUsIDAsIDM2LjVdLFxyXG4gICAgICAgIEdyaWRTaXplOiBbNSwgNF1cclxuICAgIH0sXHJcbiAgICAvL3RvcCByaWdodFxyXG4gICAge1xyXG4gICAgICAgIEdyaWRMb2NhdGlvbjogWzM2LjUsIDAsIDM2LjVdLFxyXG4gICAgICAgIEdyaWRTaXplOiBbNCwgNF1cclxuICAgIH0sXHJcbiAgICAvL2NlbnRlciBtaWRkbGVcclxuICAgIHtcclxuICAgICAgICBHcmlkTG9jYXRpb246IFszMC41LCAwLCAzMC41XSxcclxuICAgICAgICBHcmlkU2l6ZTogWzEwLCA0XVxyXG4gICAgfSxcclxuICAgIC8vYm90dG9tIG1pZGRsZVxyXG4gICAge1xyXG4gICAgICAgIEdyaWRMb2NhdGlvbjogWzMwLjUsIDAsIDI0LjVdLFxyXG4gICAgICAgIEdyaWRTaXplOiBbMTAsIDRdXHJcbiAgICB9XHJcbl0iLCIvKiAgICAgIFRPV0VSIEVOVElUWVxyXG4gICAgaG9sZHMgZnVuY3Rpb25hbCBjb21wb25lbnRzIGZvciBhbGwgdG93ZXIgcGllY2VzLiB0b3dlcnMgYXJlXHJcbiAgICBjb21wb3NlZCBvZiA0IG9iamVjdHMgYW5kIDEgc3lzdGVtOlxyXG4gICAgICAgIC10b3dlciBmb3VuZGF0aW9uIG9iamVjdDogaW50ZXJhY3Rpb24gcG9pbnQgZm9yIGJ1aWxkaW5nIGFuZCBtb3ZpbmcgdG93ZXJzXHJcbiAgICAgICAgLXRvd2VyIHN0cnVjdHVyZSBvYmplY3Q6IGNvbWJhdCBzdHJ1Y3R1cmUgdGhhdCBhdHRhY2tzIGVuZW15IHVuaXRzXHJcbiAgICAgICAgLXRvd2VyIGdpbWJhbCBvYmplY3Q6IHBvc2l0aW9uaW5nIG9iamVjdCB1c2VkIGZvciBsb29rLWF0IHJvdGF0aW9uc1xyXG4gICAgICAgIC10b3dlciB0aW1lciBzeXN0ZW06IGNvbnRhaW5zIGxvZ2ljIGZvciB0YXJnZXRpbmcgYW5kIGF0dGFja2luZ1xyXG4gICAgICAgIGVuZW15IHVuaXRzIHRoYXQgY29tZSB3aXRoaW4gcmFuZ2Ugb2YgdGhlIHRvd2VyXHJcbiovXHJcblxyXG5pbXBvcnQgeyBMaXN0IH0gZnJvbSBcInNyYy91dGlsaXRpZXMvY29sbGVjdGlvbnNcIjtcclxuaW1wb3J0IHsgc2V0dGluZ1Rvd2VyIH0gZnJvbSBcIi4vY29uZmlnL3Rvd2VyLWNvbmZpZ1wiO1xyXG5pbXBvcnQgeyBkYXRhVG93ZXJzIH0gZnJvbSBcIi4vZGF0YS90b3dlci1kYXRhXCI7XHJcbmltcG9ydCB7IEVuZW15VW5pdE9iamVjdCB9IGZyb20gXCIuL2VuZW15LWVudGl0eVwiO1xyXG5pbXBvcnQgeyBUcmlnZ2VyQ29tcG9uZW50LCBUcmlnZ2VyU3BoZXJlU2hhcGUgfSBmcm9tIFwiQGRjbC9lY3Mtc2NlbmUtdXRpbHNcIjtcclxuaW1wb3J0IHsgRW5lbXlVbml0TWFuYWdlciB9IGZyb20gXCIuL2VuZW15LW1hbmFnZXJcIjtcclxuaW1wb3J0IHsgR2FtZVN0YXRlIH0gZnJvbSBcIi4vZ2FtZS1zdGF0ZXNcIjtcclxuXHJcbi8qKlxyXG4gKiBwcm92aWRlcyB0aGUgcGxheWVyIHdpdGggYW4gaW50ZXJhY3RhYmxlIG9iamVjdCB1c2VkIHRvIGJ1aWxkIHRvd2VyIGZyYW1lcy5cclxuICogaW50ZXJhY3Rpbmcgd2l0aCBhIGZvdW5kYXRpb24gdGhhdCBoYXMgYSB0b3dlciBmcmFtZSBhbHJlYWR5IGNvbnN0cnVjdGVkIG9uIGl0IHdpbGxcclxuICogYWxsb3cgdGhlIHBsYXllciB0byBtYW5hZ2UgdGhhdCB0b3dlciBmcmFtZSBhbmQgbW92ZSB0aGUgZnJhbWUgdG8gYSBkaWZmZXJlbnQgdW5vY2N1cGllZCBmb3VuZGF0aW9uIFxyXG4gKi8gXHJcbmV4cG9ydCBjbGFzcyBUb3dlckZvdW5kYXRpb24gZXh0ZW5kcyBFbnRpdHlcclxue1xyXG4gICAgLy9hY2Nlc3MgaW5kZXhcclxuICAgIHByaXZhdGUgaW5kZXg6bnVtYmVyO1xyXG4gICAgZ2V0IEluZGV4KCk6bnVtYmVyIHsgcmV0dXJuIHRoaXMuaW5kZXg7IH07XHJcblxyXG4gICAgLy90b3dlciBmcmFtZSAoZnVuY3Rpb25hbCBkYXRhIG9iamVjdCkgXHJcbiAgICBwdWJsaWMgVG93ZXJGcmFtZTpUb3dlckZyYW1lO1xyXG5cclxuICAgIC8vY2FsbGJhY2tzXHJcbiAgICBwdWJsaWMgZ2V0U2VsZWN0ZWRUb3dlcjooKSA9PiB1bmRlZmluZWR8VG93ZXJGb3VuZGF0aW9uO1xyXG4gICAgcHVibGljIGdldFRvd2VyU2hhcGU6KHR5cGU6bnVtYmVyLCBpbmRleDpudW1iZXIpID0+IEdMVEZTaGFwZTtcclxuICAgIC8vcHVibGljIGdldFRvd2VyTWF0ZXJpYWw6KHR5cGU6bnVtYmVyLCBpbmRleDpudW1iZXIpID0+IE1hdGVyaWFsO1xyXG5cclxuICAgIC8vdGFyZ2V0aW5nXHJcbiAgICAvLyAgY29sbGlkZXIgKHRoaXMgY291bGQgYmUgb3B0aW1pemVkIGJ5IGRlbm90aW5nIGEgc2luZ2xlIHRyaWdnZXIgZm9yIGVhY2ggdG93ZXIgZGVmKVxyXG4gICAgcHJpdmF0ZSB0cmlnZ2VyU2hhcGU6VHJpZ2dlclNwaGVyZVNoYXBlO1xyXG4gICAgLy8gIG9uLWNvbGxpc2lvbiBjb21wb25lbnQsIGluaXRpYWxpemVkIGluIG1hbmFnZXIgZHVlIHRvIGluc3RhbmNpbmcgcmVsaWFuY2VzXHJcbiAgICBwcml2YXRlIHRyaWdnZXJDb21wb25lbnQ6VHJpZ2dlckNvbXBvbmVudDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIGNvbnN0cnVjdG9yXHJcbiAgICAgKiBAcGFyYW0gaW5kIHVuaXF1ZSBpbmRleCBvZiB0aGlzIHRvd2VyIGZvdW5kYXRpb25cclxuICAgICAqIEBwYXJhbSBzaGFwZUZvdW5kYXRpb24gb2JqZWN0IHNoYXBlIHVzZWQgdG8gZGlzcGxheSBmb3VuZGF0aW9uIGJhc2VcclxuICAgICAqIEBwYXJhbSBzaGFwZUdpbWJhbCBvYmplY3Qgc2hhcGUgdXNlZCB0byBkaXNwbGF5IGZvdW5kYXRpb24gZ2ltYmFsL3JvdGF0aW9uYWwgcG9pbnQgZm9yIHRvd2VyXHJcbiAgICAgKiBAcGFyYW0gc2hhcGVSYW5nZSBvYmplY3Qgc2hhcGUgdXNlZCB0byBkaXNwbGF5IHRvd2VyJ3MgcmFuZ2UgKHNob3VsZCBiZSB0cmFuc3BhcmVudClcclxuICAgICAqIEBwYXJhbSBlbmVteUVudGVyIGNhbGxiYWNrIGZ1bmN0aW9uIGNhbGxlZCB3aGVuIGFuIGVuZW15IHVuaXQgZW50ZXJzIHRoZSB0b3dlcidzIHJhZGl1c1xyXG4gICAgICogQHBhcmFtIGVuZW15RXhpdCBjYWxsYmFjayBmdW5jdGlvbiBjYWxsZWQgd2hlbiBhbiBlbmVteSB1bml0IGV4aXRzIHRoZSB0b3dlcidzIHJhZGl1c1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihpbmRleDpudW1iZXIsIGdldFNlbGVjdGVkVG93ZXI6KCkgPT4gdW5kZWZpbmVkfFRvd2VyRm91bmRhdGlvbiwgZ2V0VG93ZXJTaGFwZToodHlwZTpudW1iZXIsIGluZGV4Om51bWJlcik9PkdMVEZTaGFwZSxcclxuICAgICAgICBlbmVteUVudGVyOih0b3dlckluZGV4Om51bWJlciwgZW5lbXlJbmRleDpudW1iZXIpPT52b2lkLFxyXG4gICAgICAgIGVuZW15RXhpdDoodG93ZXJJbmRleDpudW1iZXIsIGVuZW15SW5kZXg6bnVtYmVyKT0+dm9pZFxyXG4gICAgKVxyXG4gICAge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcblxyXG4gICAgICAgIC8vZGF0YVxyXG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcclxuXHJcbiAgICAgICAgLy9zZXQgY2FsbGJhY2tcclxuICAgICAgICB0aGlzLmdldFNlbGVjdGVkVG93ZXIgPSBnZXRTZWxlY3RlZFRvd2VyO1xyXG4gICAgICAgIHRoaXMuZ2V0VG93ZXJTaGFwZSA9IGdldFRvd2VyU2hhcGU7XHJcbiAgICAgICAgLy90aGlzLmdldFRvd2VyTWF0ZXJpYWwgPSBnZXRUb3dlck1hdGVyaWFsO1xyXG5cclxuICAgICAgICAvL2NyZWF0ZSBmb3VuZGF0aW9uIG9iamVjdFxyXG4gICAgICAgIHRoaXMuYWRkQ29tcG9uZW50KHRoaXMuZ2V0VG93ZXJTaGFwZSgwLCAwKSk7XHJcbiAgICAgICAgLy90aGlzLmFkZENvbXBvbmVudCh0aGlzLmdldFRvd2VyTWF0ZXJpYWwoMCwgMCkpO1xyXG4gICAgICAgIHRoaXMuYWRkQ29tcG9uZW50KG5ldyBUcmFuc2Zvcm1cclxuICAgICAgICAoe1xyXG4gICAgICAgICAgICBwb3NpdGlvbjogbmV3IFZlY3RvcjMgKDAsIDAsIDApLFxyXG4gICAgICAgICAgICBzY2FsZTogbmV3IFZlY3RvcjMgKDAsIDAsIDApLFxyXG4gICAgICAgICAgICByb3RhdGlvbjogbmV3IFF1YXRlcm5pb24oKS5zZXRFdWxlcigwLCAwLCAwKVxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgLy90cmlnZ2VyIHNoYXBlXHJcbiAgICAgICAgdGhpcy50cmlnZ2VyU2hhcGUgPSBuZXcgVHJpZ2dlclNwaGVyZVNoYXBlKCk7XHJcbiAgICAgICAgdGhpcy50cmlnZ2VyQ29tcG9uZW50ID0gdGhpcy5hZGRDb21wb25lbnQoXHJcbiAgICAgICAgICAgIG5ldyBUcmlnZ2VyQ29tcG9uZW50KFxyXG4gICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyU2hhcGUsXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy90YXJnZXRlZCBsYXllcjogZW5lbXlcclxuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyZWRCeUxheWVyOiAyLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vY2FsbHNcclxuICAgICAgICAgICAgICAgICAgICBvblRyaWdnZXJFbnRlcihlbnRpdHkpIFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoR2FtZVN0YXRlLmRlYnVnZ2luZ1Rvd2VyKSBsb2coXCJUT1dFUiBGT1VOREFUSU9OOiBlbmVteSBlbnRpdHk6XCIrKGVudGl0eSBhcyBFbmVteVVuaXRPYmplY3QpLkluZGV4K1wiIGVudGVyZWQgZm91bmRhdGlvbiB0cmlnZ2VyLCBJRDpcIitpbmRleC50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5lbXlFbnRlcihpbmRleCwgKGVudGl0eSBhcyBFbmVteVVuaXRPYmplY3QpLkluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIG9uVHJpZ2dlckV4aXQoZW50aXR5KSBcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKEdhbWVTdGF0ZS5kZWJ1Z2dpbmdUb3dlcikgbG9nKFwiVE9XRVIgRk9VTkRBVElPTjogZW5lbXkgZW50aXR5OlwiKyhlbnRpdHkgYXMgRW5lbXlVbml0T2JqZWN0KS5JbmRleCtcIiBleGl0ZWQgZm91bmRhdGlvbiB0cmlnZ2VyLCBJRDpcIitpbmRleC50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5lbXlFeGl0KGluZGV4LCAoZW50aXR5IGFzIEVuZW15VW5pdE9iamVjdCkuSW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvL3ByZXBhcmUgdG93ZXIgZnJhbWUgZW50aXR5XHJcbiAgICAgICAgdGhpcy5Ub3dlckZyYW1lID0gbmV3IFRvd2VyRnJhbWUodGhpcy50cmlnZ2VyU2hhcGUsIGdldFNlbGVjdGVkVG93ZXIsIGdldFRvd2VyU2hhcGUpO1xyXG4gICAgICAgIHRoaXMuU2V0VG93ZXJGcmFtZSh0aGlzLlRvd2VyRnJhbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBTZXRUb3dlckZyYW1lKHRvd2VyRnJhbWU6VG93ZXJGcmFtZSlcclxuICAgIHtcclxuICAgICAgICB0aGlzLlRvd2VyRnJhbWUgPSB0b3dlckZyYW1lO1xyXG4gICAgICAgIHRoaXMuVG93ZXJGcmFtZS5zZXRQYXJlbnQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5Ub3dlckZyYW1lLlNldFRyaWdnZXJTaGFwZSh0aGlzLnRyaWdnZXJTaGFwZSk7XHJcbiAgICAgICAgdGhpcy5Ub3dlckZyYW1lLlRvd2VyU3lzdGVtLlRvd2VyQW5jaG9yVHJhbnNmb3JtID0gdGhpcy5nZXRDb21wb25lbnQoVHJhbnNmb3JtKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqIFxyXG4gKiByZXByZXNlbnRzIHRoZSBmdW5jdGlvbmFsIGNvbXBvbmVudHMgb2YgYSBjb25zdHJ1Y3RlZCB0b3dlciAobGlua2FnZSB0byBkZWZpbml0aW9uLCBjb2xsaWRlcnMgZm9yXHJcbiAqIGNhdGNoaW5nIGVuZW15J3MgZW50ZXJpbmcgcmFkaXVkLCBldGMpLiB0aGlzIGhhcyBiZWVuIHNwbGl0IGFwYXJ0IHRvIGFsbG93IHRvd2VycyB0byBiZSBtb3ZlZCBiZXR3ZWVuXHJcbiAqIGZvdW5kYXRpb25zIGR1cmluZyBnYW1lIHJ1bi10aW1lXHJcbiovXHJcbmV4cG9ydCBjbGFzcyBUb3dlckZyYW1lIGV4dGVuZHMgRW50aXR5XHJcbntcclxuICAgIC8vY3VycmVudCB0b3dlciBkZWZcclxuICAgIFRvd2VyRGVmOm51bWJlciA9IC0xO1xyXG5cclxuICAgIC8vY3VycmVudCB1cGdyYWRlc1xyXG4gICAgVG93ZXJVcGdyYWRlczpudW1iZXJbXSA9IFtdO1xyXG5cclxuICAgIC8vZGlzcGxheSBvYmplY3RzXHJcbiAgICBwcml2YXRlIHRvd2VyT2JqU3RydWN0dXJlOkVudGl0eTtcclxuICAgIHByaXZhdGUgdG93ZXJPYmpHaW1iYWw6RW50aXR5O1xyXG4gICAgcHJpdmF0ZSB0b3dlck9iakZyYW1lOkVudGl0eTtcclxuXHJcbiAgICAvL3JhbmdlIGluZGljYXRvclxyXG4gICAgcHJpdmF0ZSByYW5nZUluZGljYXRvcjpFbnRpdHk7XHJcbiAgICAvKipcclxuICAgICAqIHRvZ2dsZXMgcmFuZ2UgaW5kaWNhdG9yIHZpc2liaWxpdHlcclxuICAgICAqL1xyXG4gICAgcHVibGljIFRvZ2dsZVJhbmdlSW5kaWNhdG9yKClcclxuICAgIHtcclxuICAgICAgICBpZih0aGlzLnJhbmdlSW5kaWNhdG9yLmlzQWRkZWRUb0VuZ2luZSgpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5TZXRSYW5nZUluZGljYXRvcihmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuU2V0UmFuZ2VJbmRpY2F0b3IodHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBzZXRzIHJhbmdlIGluZGljYXRvciB2aXNpYmlsaXR5IHRvIHByb3ZpZGVkIHN0YXRlXHJcbiAgICAgKiBAcGFyYW0gc3RhdGUgdGFyZ2V0IHN0YXRlIG9mIHJhbmdlIGluZGljYXRvciBcclxuICAgICAqL1xyXG4gICAgcHVibGljIFNldFJhbmdlSW5kaWNhdG9yKHN0YXRlOmJvb2xlYW4pXHJcbiAgICB7XHJcbiAgICAgICAgaWYoc3RhdGUpIHsgaWYoIXRoaXMucmFuZ2VJbmRpY2F0b3IuaXNBZGRlZFRvRW5naW5lKCkpIGVuZ2luZS5hZGRFbnRpdHkodGhpcy5yYW5nZUluZGljYXRvcik7IH1cclxuICAgICAgICBlbHNlIHsgaWYodGhpcy5yYW5nZUluZGljYXRvci5pc0FkZGVkVG9FbmdpbmUoKSkgZW5naW5lLnJlbW92ZUVudGl0eSh0aGlzLnJhbmdlSW5kaWNhdG9yKTsgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vcmVhbC10aW1lIHN5c3RlbVxyXG4gICAgVG93ZXJTeXN0ZW06VG93ZXJTdHJ1Y3R1cmVTeXN0ZW07XHJcbiAgICAvL3RyaWdnZXIgb2JqZWN0IGZvciBlbmVteSBjb2xsaXNpb25zXHJcbiAgICBwcml2YXRlIHRyaWdnZXJTaGFwZTpUcmlnZ2VyU3BoZXJlU2hhcGU7XHJcbiAgICBwdWJsaWMgU2V0VHJpZ2dlclNoYXBlKHRyaWdnZXJTaGFwZTpUcmlnZ2VyU3BoZXJlU2hhcGUpXHJcbiAgICB7XHJcbiAgICAgICAgLy96ZXJvIG91dCBwcmV2aW91cyB0cmlnZ2VyIHNpemVcclxuICAgICAgICB0aGlzLnRyaWdnZXJTaGFwZS5yYWRpdXMgPSAwO1xyXG4gICAgICAgIC8vc2V0IHVwIG5ldyB0cmlnZ2VyIHNoYXBlXHJcbiAgICAgICAgaWYodGhpcy5Ub3dlckRlZiAhPSAtMSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlclNoYXBlID0gdHJpZ2dlclNoYXBlO1xyXG4gICAgICAgICAgICB0aGlzLnRyaWdnZXJTaGFwZS5yYWRpdXMgPSBkYXRhVG93ZXJzW3RoaXMuVG93ZXJEZWZdLlZhbHVlQXR0YWNrUmFuZ2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvL2NhbGxiYWNrc1xyXG4gICAgcHVibGljIGdldFNlbGVjdGVkVG93ZXI6KCkgPT4gdW5kZWZpbmVkfFRvd2VyRm91bmRhdGlvbjtcclxuICAgIHB1YmxpYyBnZXRUb3dlclNoYXBlOih0eXBlOm51bWJlciwgaW5kZXg6bnVtYmVyKSA9PiBHTFRGU2hhcGU7XHJcbiAgICAvL3B1YmxpYyBnZXRUb3dlck1hdGVyaWFsOih0eXBlOm51bWJlciwgaW5kZXg6bnVtYmVyKSA9PiBNYXRlcmlhbDtcclxuXHJcbiAgICAvL2NvbnN0cnVjdG9yXHJcbiAgICBjb25zdHJ1Y3Rvcih0cmlnZ2VyU2hhcGU6VHJpZ2dlclNwaGVyZVNoYXBlLCBnZXRTZWxlY3RlZFRvd2VyOigpID0+IHVuZGVmaW5lZHxUb3dlckZvdW5kYXRpb24sIGdldFRvd2VyU2hhcGU6KHR5cGU6bnVtYmVyLCBpbmRleDpudW1iZXIpPT5HTFRGU2hhcGUpXHJcbiAgICB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuXHJcbiAgICAgICAgLy9zZXQgY2FsbGJhY2tcclxuICAgICAgICB0aGlzLmdldFNlbGVjdGVkVG93ZXIgPSBnZXRTZWxlY3RlZFRvd2VyO1xyXG4gICAgICAgIHRoaXMuZ2V0VG93ZXJTaGFwZSA9IGdldFRvd2VyU2hhcGU7XHJcbiAgICAgICAgLy90aGlzLmdldFRvd2VyTWF0ZXJpYWwgPSBnZXRUb3dlck1hdGVyaWFsO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMudHJpZ2dlclNoYXBlID0gdHJpZ2dlclNoYXBlO1xyXG5cclxuICAgICAgICAvL3NldCBwb3NpdGlvblxyXG4gICAgICAgIHRoaXMuYWRkQ29tcG9uZW50KG5ldyBUcmFuc2Zvcm1cclxuICAgICAgICAoe1xyXG4gICAgICAgICAgICBwb3NpdGlvbjogbmV3IFZlY3RvcjMgKDAsIDAsIDApLFxyXG4gICAgICAgICAgICBzY2FsZTogbmV3IFZlY3RvcjMgKDEsIDEsIDEpLFxyXG4gICAgICAgICAgICByb3RhdGlvbjogbmV3IFF1YXRlcm5pb24oKS5zZXRFdWxlcigwLCAwLCAwKVxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgLy9nZW5lcmF0ZSB0b3dlciBvYmplY3RzXHJcbiAgICAgICAgLy8gIHN0cnVjdHVyZSBvYmplY3RcclxuICAgICAgICB0aGlzLnRvd2VyT2JqU3RydWN0dXJlID0gbmV3IEVudGl0eSgpO1xyXG4gICAgICAgIHRoaXMudG93ZXJPYmpTdHJ1Y3R1cmUuYWRkQ29tcG9uZW50KHRoaXMuZ2V0VG93ZXJTaGFwZSgwLCAxKSk7XHJcbiAgICAgICAgLy90b3dlck9ialN0cnVjdHVyZS5hZGRDb21wb25lbnQodGhpcy5nZXRUb3dlck1hdGVyaWFsKDAsIDApKTtcclxuICAgICAgICB0aGlzLnRvd2VyT2JqU3RydWN0dXJlLmFkZENvbXBvbmVudChuZXcgVHJhbnNmb3JtXHJcbiAgICAgICAgKHtcclxuICAgICAgICAgICAgcG9zaXRpb246IG5ldyBWZWN0b3IzXHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgIHNldHRpbmdUb3dlclswXS5zdHJ1Y3R1cmVPZmZzZXRbMF0sXHJcbiAgICAgICAgICAgICAgICBzZXR0aW5nVG93ZXJbMF0uc3RydWN0dXJlT2Zmc2V0WzFdLFxyXG4gICAgICAgICAgICAgICAgc2V0dGluZ1Rvd2VyWzBdLnN0cnVjdHVyZU9mZnNldFsyXVxyXG4gICAgICAgICAgICApLFxyXG4gICAgICAgICAgICBzY2FsZTogbmV3IFZlY3RvcjNcclxuICAgICAgICAgICAgKFxyXG4gICAgICAgICAgICAgICAgc2V0dGluZ1Rvd2VyWzBdLnN0cnVjdHVyZVNjYWxlWzBdLFxyXG4gICAgICAgICAgICAgICAgc2V0dGluZ1Rvd2VyWzBdLnN0cnVjdHVyZVNjYWxlWzFdLFxyXG4gICAgICAgICAgICAgICAgc2V0dGluZ1Rvd2VyWzBdLnN0cnVjdHVyZVNjYWxlWzJdXHJcbiAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgIHJvdGF0aW9uOiBuZXcgUXVhdGVybmlvbigpLnNldEV1bGVyKDAsMCwwKVxyXG4gICAgICAgIH0pKTtcclxuICAgICAgICB0aGlzLnRvd2VyT2JqU3RydWN0dXJlLnNldFBhcmVudCh0aGlzKTtcclxuICAgICAgICBlbmdpbmUucmVtb3ZlRW50aXR5KHRoaXMudG93ZXJPYmpTdHJ1Y3R1cmUpO1xyXG5cclxuICAgICAgICAvLyAgZ2ltYmFsIG9iamVjdFxyXG4gICAgICAgIHRoaXMudG93ZXJPYmpHaW1iYWwgPSBuZXcgRW50aXR5KCk7XHJcbiAgICAgICAgdGhpcy50b3dlck9iakdpbWJhbC5hZGRDb21wb25lbnQodGhpcy5nZXRUb3dlclNoYXBlKDAsIDIpKTtcclxuICAgICAgICAvL3RoaXMudG93ZXJPYmpHaW1iYWwuYWRkQ29tcG9uZW50KHRoaXMuZ2V0VG93ZXJNYXRlcmlhbCgwLCAwKSk7XHJcbiAgICAgICAgdGhpcy50b3dlck9iakdpbWJhbC5hZGRDb21wb25lbnQobmV3IFRyYW5zZm9ybVxyXG4gICAgICAgICh7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiBuZXcgVmVjdG9yM1xyXG4gICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICBzZXR0aW5nVG93ZXJbMF0uZ2ltYmFsT2Zmc2V0WzBdLFxyXG4gICAgICAgICAgICAgICAgc2V0dGluZ1Rvd2VyWzBdLmdpbWJhbE9mZnNldFsxXSxcclxuICAgICAgICAgICAgICAgIHNldHRpbmdUb3dlclswXS5naW1iYWxPZmZzZXRbMl1cclxuICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgc2NhbGU6IG5ldyBWZWN0b3IzXHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgIHNldHRpbmdUb3dlclswXS5naW1iYWxTY2FsZVswXSxcclxuICAgICAgICAgICAgICAgIHNldHRpbmdUb3dlclswXS5naW1iYWxTY2FsZVsxXSxcclxuICAgICAgICAgICAgICAgIHNldHRpbmdUb3dlclswXS5naW1iYWxTY2FsZVsyXVxyXG4gICAgICAgICAgICApLFxyXG4gICAgICAgICAgICByb3RhdGlvbjogbmV3IFF1YXRlcm5pb24oKS5zZXRFdWxlcigwLDAsMClcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgdGhpcy50b3dlck9iakdpbWJhbC5zZXRQYXJlbnQodGhpcyk7XHJcbiAgICAgICAgZW5naW5lLnJlbW92ZUVudGl0eSh0aGlzLnRvd2VyT2JqR2ltYmFsKTtcclxuXHJcbiAgICAgICAgLy8gIGZyYW1lXHJcbiAgICAgICAgdGhpcy50b3dlck9iakZyYW1lID0gbmV3IEVudGl0eSgpO1xyXG4gICAgICAgIHRoaXMudG93ZXJPYmpGcmFtZS5hZGRDb21wb25lbnQobmV3IFRyYW5zZm9ybVxyXG4gICAgICAgICh7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiBuZXcgVmVjdG9yMygwLDAsMCksXHJcbiAgICAgICAgICAgIHNjYWxlOiBuZXcgVmVjdG9yMygxLDEsMSksXHJcbiAgICAgICAgICAgIHJvdGF0aW9uOiBuZXcgUXVhdGVybmlvbigpLnNldEV1bGVyKDAsMCwwKVxyXG4gICAgICAgIH0pKTtcclxuICAgICAgICB0aGlzLnRvd2VyT2JqRnJhbWUuc2V0UGFyZW50KHRoaXMudG93ZXJPYmpHaW1iYWwpO1xyXG4gICAgICAgIGVuZ2luZS5yZW1vdmVFbnRpdHkodGhpcy50b3dlck9iakZyYW1lKTtcclxuXHJcbiAgICAgICAgLy8gIHJhbmdlIGluZGljYXRvclxyXG4gICAgICAgIHRoaXMucmFuZ2VJbmRpY2F0b3IgPSBuZXcgRW50aXR5KCk7XHJcbiAgICAgICAgdGhpcy5yYW5nZUluZGljYXRvci5hZGRDb21wb25lbnQodGhpcy5nZXRUb3dlclNoYXBlKDAsIDMpKTtcclxuICAgICAgICAvL3RoaXMucmFuZ2VJbmRpY2F0b3IuYWRkQ29tcG9uZW50KHRoaXMuZ2V0VG93ZXJNYXRlcmlhbCgwLCAwKSk7XHJcbiAgICAgICAgdGhpcy5yYW5nZUluZGljYXRvci5hZGRDb21wb25lbnQobmV3IFRyYW5zZm9ybVxyXG4gICAgICAgICh7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiBuZXcgVmVjdG9yMygwLDAuMjEsMCksXHJcbiAgICAgICAgICAgIHNjYWxlOiBuZXcgVmVjdG9yMygwLDAsMCksXHJcbiAgICAgICAgICAgIHJvdGF0aW9uOiBuZXcgUXVhdGVybmlvbigpLnNldEV1bGVyKDAsMCwwKVxyXG4gICAgICAgIH0pKTtcclxuICAgICAgICB0aGlzLnJhbmdlSW5kaWNhdG9yLnNldFBhcmVudCh0aGlzKTtcclxuXHJcbiAgICAgICAgLy9zeXN0ZW1cclxuICAgICAgICB0aGlzLlRvd2VyU3lzdGVtID0gbmV3IFRvd2VyU3RydWN0dXJlU3lzdGVtKHRoaXMuZ2V0Q29tcG9uZW50KFRyYW5zZm9ybSksIHRoaXMudG93ZXJPYmpHaW1iYWwuZ2V0Q29tcG9uZW50KFRyYW5zZm9ybSksIHRoaXMudG93ZXJPYmpGcmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiB1c2VkIHRvIHNldCBkZWZhdWx0L2VudHJ5IHN0YXRlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBJbml0aWFsaXplKClcclxuICAgIHtcclxuICAgICAgICAvL2hpZGUgdG93ZXIgb2JqZWN0c1xyXG4gICAgICAgIHRoaXMuU2V0RGlzcGxheVN0YXRlKGZhbHNlKTtcclxuXHJcbiAgICAgICAgLy9yZXNldCB0b3dlciBkZWYgaW5kZXhcclxuICAgICAgICB0aGlzLlRvd2VyRGVmID0gLTE7XHJcblxyXG4gICAgICAgIC8vZW5zdXJlIHN5c3RlbSBpcyBvZmZcclxuICAgICAgICBlbmdpbmUucmVtb3ZlU3lzdGVtKHRoaXMuVG93ZXJTeXN0ZW0pO1xyXG5cclxuICAgICAgICAvLyAgdHJpZ2dlciBzaGFwZSBzY2FsZSAoaGFsdCB1bm5lZWRlZCBjb2xsaWRlciBjYXB0dXJlKVxyXG4gICAgICAgIHRoaXMudHJpZ2dlclNoYXBlLnJhZGl1cyA9IDA7XHJcbiAgICAgICAgLy8gIGluZGljYXRvclxyXG4gICAgICAgIHRoaXMucmFuZ2VJbmRpY2F0b3IuZ2V0Q29tcG9uZW50KFRyYW5zZm9ybSkuc2NhbGUgPSBuZXcgVmVjdG9yMygwLDAsMCk7XHJcbiAgICAgICAgLy8gIHRhcmdldCBhbmQgbGlzdFxyXG4gICAgICAgIHRoaXMuVG93ZXJTeXN0ZW0uVG93ZXJUYXJnZXQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgd2hpbGUodGhpcy5Ub3dlclN5c3RlbS5Ub3dlclRhcmdldHMuc2l6ZSgpID4gMClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuVG93ZXJTeXN0ZW0uVG93ZXJUYXJnZXRzLnJlbW92ZUl0ZW0odGhpcy5Ub3dlclN5c3RlbS5Ub3dlclRhcmdldHMuZ2V0SXRlbSgwKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogY2hhbmdlcyBkaXNwbGF5IHN0YXRlIG9mIGZyYW1lIG9iamVjdHNcclxuICAgICAqIEBwYXJhbSBzdGF0ZSB0YXJnZXQgc3RhdGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIFNldERpc3BsYXlTdGF0ZShzdGF0ZTpib29sZWFuKVxyXG4gICAge1xyXG4gICAgICAgIGlmKHN0YXRlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoIXRoaXMudG93ZXJPYmpTdHJ1Y3R1cmUuaXNBZGRlZFRvRW5naW5lKCkpIGVuZ2luZS5hZGRFbnRpdHkodGhpcy50b3dlck9ialN0cnVjdHVyZSk7XHJcbiAgICAgICAgICAgIGlmKCF0aGlzLnRvd2VyT2JqR2ltYmFsLmlzQWRkZWRUb0VuZ2luZSgpKSBlbmdpbmUuYWRkRW50aXR5KHRoaXMudG93ZXJPYmpHaW1iYWwpO1xyXG4gICAgICAgICAgICBpZighdGhpcy50b3dlck9iakZyYW1lLmlzQWRkZWRUb0VuZ2luZSgpKSBlbmdpbmUuYWRkRW50aXR5KHRoaXMudG93ZXJPYmpGcmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKHRoaXMudG93ZXJPYmpTdHJ1Y3R1cmUuaXNBZGRlZFRvRW5naW5lKCkpIGVuZ2luZS5yZW1vdmVFbnRpdHkodGhpcy50b3dlck9ialN0cnVjdHVyZSk7XHJcbiAgICAgICAgICAgIGlmKHRoaXMudG93ZXJPYmpHaW1iYWwuaXNBZGRlZFRvRW5naW5lKCkpIGVuZ2luZS5yZW1vdmVFbnRpdHkodGhpcy50b3dlck9iakdpbWJhbCk7XHJcbiAgICAgICAgICAgIGlmKHRoaXMudG93ZXJPYmpGcmFtZS5pc0FkZGVkVG9FbmdpbmUoKSkgZW5naW5lLnJlbW92ZUVudGl0eSh0aGlzLnRvd2VyT2JqRnJhbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHNldHMgdGhlIGZvdW5kYXRpb24ncyBjdXJyZW50IHRvd2VyIFxyXG4gICAgICogQHBhcmFtIGluZGV4IHRhcmdldGVkIGRlZmluaXRpb24gaW5kZXhcclxuICAgICAqIEBwYXJhbSBzaGFwZSBzaGFwZSBvYmplY3QgdXNlZCB0byBkaXNwbGF5IHRoZSB0b3dlcidzIGN1cnJlbnQgdHlwZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgU2V0VG93ZXIoaW5kZXg6bnVtYmVyLCBzaGFwZTpHTFRGU2hhcGUpXHJcbiAgICB7XHJcbiAgICAgICAgLy9zZXQgaW5kZXhcclxuICAgICAgICB0aGlzLlRvd2VyRGVmID0gaW5kZXg7XHJcbiAgICAgICAgdGhpcy5Ub3dlclN5c3RlbS5Ub3dlckRlZiA9IGluZGV4O1xyXG5cclxuICAgICAgICAvL2Rpc3BsYXkgZnJhbWVcclxuICAgICAgICB0aGlzLlNldERpc3BsYXlTdGF0ZSh0cnVlKTtcclxuXHJcbiAgICAgICAgLy9yZXNldCB1cGdyYWRlc1xyXG4gICAgICAgIHRoaXMuVG93ZXJVcGdyYWRlcyA9IFtdO1xyXG4gICAgICAgIHdoaWxlKHRoaXMuVG93ZXJVcGdyYWRlcy5sZW5ndGggPCBkYXRhVG93ZXJzW3RoaXMuVG93ZXJEZWZdLlVwZ3JhZGVzLmxlbmd0aClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuVG93ZXJVcGdyYWRlcy5wdXNoKDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9jbGVhciBwcmV2aW91cyBcclxuICAgICAgICBpZih0aGlzLnRvd2VyT2JqRnJhbWUuaGFzQ29tcG9uZW50KEdMVEZTaGFwZSkgIT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICB0aGlzLnRvd2VyT2JqRnJhbWUucmVtb3ZlQ29tcG9uZW50KEdMVEZTaGFwZSk7XHJcblxyXG4gICAgICAgIC8vc2V0IGZyYW1lIHNoYXBlIGFuZCBwb3NpdGlvbmluZ1xyXG4gICAgICAgIHRoaXMudG93ZXJPYmpGcmFtZS5hZGRDb21wb25lbnQoc2hhcGUpO1xyXG4gICAgICAgIHRoaXMudG93ZXJPYmpGcmFtZS5nZXRDb21wb25lbnQoVHJhbnNmb3JtKS5wb3NpdGlvbiA9IG5ldyBWZWN0b3IzXHJcbiAgICAgICAgKFxyXG4gICAgICAgICAgICBkYXRhVG93ZXJzW3RoaXMuVG93ZXJEZWZdLk9mZnNldFswXSxcclxuICAgICAgICAgICAgZGF0YVRvd2Vyc1t0aGlzLlRvd2VyRGVmXS5PZmZzZXRbMV0sXHJcbiAgICAgICAgICAgIGRhdGFUb3dlcnNbdGhpcy5Ub3dlckRlZl0uT2Zmc2V0WzJdXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnRvd2VyT2JqRnJhbWUuZ2V0Q29tcG9uZW50KFRyYW5zZm9ybSkuc2NhbGUgPSBuZXcgVmVjdG9yM1xyXG4gICAgICAgIChcclxuICAgICAgICAgICAgZGF0YVRvd2Vyc1t0aGlzLlRvd2VyRGVmXS5TY2FsZVswXSxcclxuICAgICAgICAgICAgZGF0YVRvd2Vyc1t0aGlzLlRvd2VyRGVmXS5TY2FsZVsxXSxcclxuICAgICAgICAgICAgZGF0YVRvd2Vyc1t0aGlzLlRvd2VyRGVmXS5TY2FsZVsyXVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy91cGRhdGUgdHJpZ2dlciByYWRpdXNcclxuICAgICAgICB0aGlzLnRyaWdnZXJTaGFwZS5yYWRpdXMgPSBkYXRhVG93ZXJzW3RoaXMuVG93ZXJEZWZdLlZhbHVlQXR0YWNrUmFuZ2U7XHJcbiAgICAgICAgLy8gIGluZGljYXRvclxyXG4gICAgICAgIHRoaXMucmFuZ2VJbmRpY2F0b3IuZ2V0Q29tcG9uZW50KFRyYW5zZm9ybSkuc2NhbGUgPSBuZXcgVmVjdG9yM1xyXG4gICAgICAgIChcclxuICAgICAgICAgICAgZGF0YVRvd2Vyc1t0aGlzLlRvd2VyRGVmXS5WYWx1ZUF0dGFja1JhbmdlICogMi4yMixcclxuICAgICAgICAgICAgMSxcclxuICAgICAgICAgICAgZGF0YVRvd2Vyc1t0aGlzLlRvd2VyRGVmXS5WYWx1ZUF0dGFja1JhbmdlICogMi4yMlxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5TZXRSYW5nZUluZGljYXRvcihmYWxzZSk7XHJcblxyXG4gICAgICAgIC8vcHVsbCBpbiBmdW5jdGlvbmFsIGRldGFpbHNcclxuICAgICAgICAvLyAgYXR0YWNrIGFuaW1hdG9yIHJhdyBkZXRhaWxzXHJcbiAgICAgICAgdGhpcy5Ub3dlclN5c3RlbS5hdHRhY2tBbmltRGFtYWdlUG9pbnQgPSBkYXRhVG93ZXJzW3RoaXMuVG93ZXJEZWZdLlZhbHVlQXR0YWNrSW50ZXJ2YWxEYW1hZ2U7XHJcbiAgICAgICAgdGhpcy5Ub3dlclN5c3RlbS5hdHRhY2tBbmltTGVuZ3RoID0gZGF0YVRvd2Vyc1t0aGlzLlRvd2VyRGVmXS5WYWx1ZUF0dGFja0ludGVydmFsRnVsbDtcclxuICAgICAgICAvLyAgYXR0YWNrIGRldGFpbHNcclxuICAgICAgICB0aGlzLlRvd2VyU3lzdGVtLmF0dGFja0RhbWFnZSA9IGRhdGFUb3dlcnNbdGhpcy5Ub3dlckRlZl0uVmFsdWVBdHRhY2tEYW1hZ2U7XHJcbiAgICAgICAgdGhpcy5Ub3dlclN5c3RlbS5hdHRhY2tSZW5kID0gZGF0YVRvd2Vyc1t0aGlzLlRvd2VyRGVmXS5WYWx1ZUF0dGFja1JlbmQ7XHJcbiAgICAgICAgdGhpcy5Ub3dlclN5c3RlbS5hdHRhY2tQZW4gPSBkYXRhVG93ZXJzW3RoaXMuVG93ZXJEZWZdLlZhbHVlQXR0YWNrUGVuZXRyYXRpb247XHJcbiAgICAgICAgdGhpcy5Ub3dlclN5c3RlbS5hdHRhY2tSYW5nZSA9IGRhdGFUb3dlcnNbdGhpcy5Ub3dlckRlZl0uVmFsdWVBdHRhY2tSYW5nZTtcclxuICAgICAgICAvL2NhbGN1bGF0ZSBhdHRhY2sgY29vbGRvd25cclxuICAgICAgICB0aGlzLlRvd2VyU3lzdGVtLmF0dGFja1BlclNlY29uZCA9IGRhdGFUb3dlcnNbdGhpcy5Ub3dlckRlZl0uVmFsdWVBdHRhY2tTcGVlZDtcclxuICAgICAgICB0aGlzLlRvd2VyU3lzdGVtLmF0dGFja0Nvb2xkb3duID0gKDEvdGhpcy5Ub3dlclN5c3RlbS5hdHRhY2tQZXJTZWNvbmQpO1xyXG5cclxuICAgICAgICAvL3Jlc2V0IHN5c3RlbVxyXG4gICAgICAgIHRoaXMuVG93ZXJTeXN0ZW0uUmVzZXQoKTtcclxuICAgIH0gICBcclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBpbmNyZWFzZXMgdGhlIGxldmVsIG9mIHRoZSB0YXJnZXRlZCB1cGdyYWRlIGFuZCBhcHBsaWVzIGl0cyBlZmZlY3RzXHJcbiAgICAgKiBAcGFyYW0gaW5kZXggaW5kZXggb2YgdGFyZ2V0ZWQgdXBncmFkZSB0aGF0IHdpbGwgYmUgaW5jcmVhc2VkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBBcHBseVVwZ3JhZGUoaW5kZXg6bnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIC8vaW5jcmVhc2UgY291bnRcclxuICAgICAgICB0aGlzLlRvd2VyVXBncmFkZXNbaW5kZXhdKys7XHJcblxyXG4gICAgICAgIC8vcmVjYWxjdWxhdGUgdG93ZXIncyBkYXRhIGJhc2VkIG9uIHVwZ3JhZGUgdHlwZVxyXG4gICAgICAgIHN3aXRjaChkYXRhVG93ZXJzW3RoaXMuVG93ZXJEZWZdLlVwZ3JhZGVzW2luZGV4XVswXSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJWYWx1ZUF0dGFja0RhbWFnZVwiOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5Ub3dlclN5c3RlbS5hdHRhY2tEYW1hZ2UgPSBkYXRhVG93ZXJzW3RoaXMuVG93ZXJEZWZdLlZhbHVlQXR0YWNrRGFtYWdlIFxyXG4gICAgICAgICAgICAgICAgICAgICsgKHRoaXMuVG93ZXJVcGdyYWRlc1tpbmRleF0gKiAoK2RhdGFUb3dlcnNbdGhpcy5Ub3dlckRlZl0uVXBncmFkZXNbaW5kZXhdWzNdKSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiVmFsdWVBdHRhY2tQZW5ldHJhdGlvblwiOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5Ub3dlclN5c3RlbS5hdHRhY2tQZW4gPSBkYXRhVG93ZXJzW3RoaXMuVG93ZXJEZWZdLlZhbHVlQXR0YWNrUGVuZXRyYXRpb24gXHJcbiAgICAgICAgICAgICAgICAgICAgKyAodGhpcy5Ub3dlclVwZ3JhZGVzW2luZGV4XSAqICgrZGF0YVRvd2Vyc1t0aGlzLlRvd2VyRGVmXS5VcGdyYWRlc1tpbmRleF1bM10pKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJWYWx1ZUF0dGFja1JlbmRcIjpcclxuICAgICAgICAgICAgICAgIHRoaXMuVG93ZXJTeXN0ZW0uYXR0YWNrUmVuZCA9IGRhdGFUb3dlcnNbdGhpcy5Ub3dlckRlZl0uVmFsdWVBdHRhY2tSZW5kIFxyXG4gICAgICAgICAgICAgICAgICAgICsgKHRoaXMuVG93ZXJVcGdyYWRlc1tpbmRleF0gKiAoK2RhdGFUb3dlcnNbdGhpcy5Ub3dlckRlZl0uVXBncmFkZXNbaW5kZXhdWzNdKSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiVmFsdWVBdHRhY2tSYW5nZVwiOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5Ub3dlclN5c3RlbS5hdHRhY2tSYW5nZSA9IGRhdGFUb3dlcnNbdGhpcy5Ub3dlckRlZl0uVmFsdWVBdHRhY2tSYW5nZSBcclxuICAgICAgICAgICAgICAgICAgICArICh0aGlzLlRvd2VyVXBncmFkZXNbaW5kZXhdICogKCtkYXRhVG93ZXJzW3RoaXMuVG93ZXJEZWZdLlVwZ3JhZGVzW2luZGV4XVszXSkpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcIlZhbHVlQXR0YWNrU3BlZWRcIjpcclxuICAgICAgICAgICAgICAgIC8vc2V0IGF0dGFja3MgcGVyIHNlY29uZFxyXG4gICAgICAgICAgICAgICAgdGhpcy5Ub3dlclN5c3RlbS5hdHRhY2tQZXJTZWNvbmQgPSBkYXRhVG93ZXJzW3RoaXMuVG93ZXJEZWZdLlZhbHVlQXR0YWNrU3BlZWQgXHJcbiAgICAgICAgICAgICAgICAgICAgKyAodGhpcy5Ub3dlclVwZ3JhZGVzW2luZGV4XSAqICgrZGF0YVRvd2Vyc1t0aGlzLlRvd2VyRGVmXS5VcGdyYWRlc1tpbmRleF1bM10pKTtcclxuICAgICAgICAgICAgICAgIC8vY2FsY3VsYXRlIGF0dGFjayBjb29sZG93blxyXG4gICAgICAgICAgICAgICAgdGhpcy5Ub3dlclN5c3RlbS5hdHRhY2tDb29sZG93biA9ICgxL3RoaXMuVG93ZXJTeXN0ZW0uYXR0YWNrUGVyU2Vjb25kKTtcclxuICAgICAgICAgICAgICAgIC8vc2NhbGUgYW5pbWF0aW9uXHJcbiAgICAgICAgICAgICAgICB0aGlzLlRvd2VyU3lzdGVtLmFuaW1hdGlvbnNbMV0uc3BlZWQgPSB0aGlzLlRvd2VyU3lzdGVtLmF0dGFja0FuaW1MZW5ndGggKiB0aGlzLlRvd2VyU3lzdGVtLmF0dGFja1BlclNlY29uZDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogY2FsbGVkIHdoZW4gYW4gZW5lbXkgZW50ZXJzIHRoZSB0b3dlcidzIHRyaWdnZXIgZmllbGRcclxuICAgICAqIEBwYXJhbSBlbmVteSBpbmRleCBvZiBlbmVteSB1bml0IHRoYXQgaGFzIGVudGVyZWQgdGFyZ2V0aW5nXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBFbmVteUVudGVyKGVuZW15Om51bWJlcilcclxuICAgIHtcclxuICAgICAgICB0aGlzLlRvd2VyU3lzdGVtLkFkZFRhcmdldChlbmVteSk7XHJcbiAgICB9XHJcbiBcclxuICAgIC8qKlxyXG4gICAgICogY2FsbGVkIHdoZW4gYW4gZW5lbXkgZXhpdHMgdGhlIHRvd2VyJ3MgdHJpZ2dlciBmaWVsZCxcclxuICAgICAqICBkb2VzIG5vdCBpbnRlcnJ1cHQgYW4gb24tZ29pbmcgYXR0YWNrIG9uIHRhcmdldCBpZiB1bml0IHBhc3NlcyBvdXQgb2YgcmFuZ2UgZHVyaW5nIGF0dGFja1xyXG4gICAgICogQHBhcmFtIGVuZW15IGluZGV4IG9mIGVuZW15IHVuaXQgdGhhdCBoYXMgZXhpdGVkIHRhcmdldGluZ1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgRW5lbXlFeGl0KGVuZW15Om51bWJlcilcclxuICAgIHtcclxuICAgICAgICB0aGlzLlRvd2VyU3lzdGVtLlJlbW92ZVRhcmdldChlbmVteSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBoYW5kbGVzIGFsbCByZWFsLXRpbWUgcHJvY2Vzc2luZyBmb3IgdGhlIHRvd2VyLCBpbmNsdWRpbmcgbG9va2luZyBhdCBhbmQgZGFtYWdpbmcgZW5lbWllc1xyXG4gKiBUT0RPOiBjcmVhdGUgY2FsbGJhY2sgZnJvbSBlbmVteSB0byB0b3dlciBzeXN0ZW0gdXBvbiBkZWF0aCB0byByZW1vdmUgdGFyZ2V0IGFuZCByZXNldCBhdHRhY2sgaWYgZW5lbXkgd2FzIHRhcmdldFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFRvd2VyU3RydWN0dXJlU3lzdGVtIGltcGxlbWVudHMgSVN5c3RlbVxyXG57XHJcbiAgICBUb3dlckRlZjpudW1iZXIgPSAwO1xyXG4gICAgLy9hY3RpdmUgZGF0YSwgZGVyaXZlZCBmcm9tIGRlZiBhbmQgdXBncmFkZSBsZXZlbHNcclxuICAgIC8vICBhdHRhY2sgZGFtYWdlXHJcbiAgICBhdHRhY2tEYW1hZ2U6bnVtYmVyID0gMDtcclxuICAgIGF0dGFja1BlbjpudW1iZXIgPSAwO1xyXG4gICAgYXR0YWNrUmVuZDpudW1iZXIgPSAwO1xyXG4gICAgLy8gIGF0dGFjayByYW5nZVxyXG4gICAgYXR0YWNrUmFuZ2U6bnVtYmVyID0gMDtcclxuICAgIC8vICBhdHRhY2sgc3BlZWRcclxuICAgIC8vICAgICAgYW5pbWF0aW9uIHJhdyBsZW5ndGhzXHJcbiAgICBhdHRhY2tBbmltTGVuZ3RoOm51bWJlciA9IDI7ICAgIC8vZnVsbCBsZW5ndGggb2YgYW5pbWF0aW9uXHJcbiAgICBhdHRhY2tBbmltRGFtYWdlUG9pbnQ6bnVtYmVyID0gMTsgIC8vcG9pbnQgaW4gYW5pbWF0aW9uIHdoZW4gZGFtYWdlIGlzIGRlYWx0XHJcbiAgICAvLyAgYXR0YWNrcyBwZXIgc2Vjb25kXHJcbiAgICBhdHRhY2tQZXJTZWNvbmQ6bnVtYmVyID0gMDtcclxuICAgIC8vICBhY3R1YWwgbGVuZ3RoIG9mIGF0dGFja3NcclxuICAgIGF0dGFja0Nvb2xkb3duOm51bWJlciA9IDA7XHJcbiAgICAvLyAgc3BlY2lhbCBtb2RpZmllcnMgKFdJUClcclxuICAgIC8vYXR0YWNrTW9kaWZpZXJzOm51bWJlcltdW107XHJcblxyXG4gICAgVGFyZ2V0aW5nVHlwZTpudW1iZXIgPSAwO1xyXG5cclxuICAgIC8vZW50aXR5IHRhcmdldGVkIGZvciBsb29rLWF0LWVuZW15IHJvdGF0aW9uc1xyXG4gICAgVG93ZXJBbmNob3JUcmFuc2Zvcm06VHJhbnNmb3JtO1xyXG4gICAgVG93ZXJHaW1iYWxUcmFuc2Zvcm06VHJhbnNmb3JtO1xyXG4gICAgLy9vYmplY3RzXHJcbiAgICBUb3dlckZyYW1lOkVudGl0eTtcclxuXHJcbiAgICAvL2F0dGFja1xyXG4gICAgLy8gIGRhbWFnZSBpcyBkZWFsdCBhIHBvcnRpb24gb2YgdGhlIHdheSB0aHJvdWdoIHRoZSBhdHRhY2sgYW5pbWF0aW9uXHJcbiAgICAvLyAgZXg6IGlmIGF0dGFja0RhbWFnZVBlcmlvZCBpcyAwLjUsIGRhbWFnZSBpcyBkZWFsdCAwLjVzIGFmdGVyIHRoZSBhdHRhY2sgYW5pbWF0aW9uIGhhcyBiZWd1blxyXG4gICAgLy9vbkF0dGFjazooKSA9PiB2b2lkO1xyXG4gICAgaXNBdHRhY2tpbmc6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgYXR0YWNrVGltZXI6bnVtYmVyW10gPSBbMCwwXTtcclxuICAgIGhhc0RhbWFnZWQ6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgXHJcbiAgICAvL2FuaW1hdG9uc1xyXG4gICAgYW5pbWF0b3I6QW5pbWF0b3I7XHJcbiAgICBhbmltYXRpb25zOkFuaW1hdGlvblN0YXRlW107XHJcblxyXG4gICAgcHVibGljIFNldEFuaW1hdGlvblN0YXRlKHN0YXRlOm51bWJlcilcclxuICAgIHtcclxuICAgICAgICAvL2Rpc2FibGUgYWxsIG90aGVyIGFuaW1hdGlvbnNcclxuICAgICAgICB0aGlzLmFuaW1hdGlvbnNbMF0uc3RvcCgpO1xyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uc1sxXS5zdG9wKCk7XHJcblxyXG4gICAgICAgIC8vYWN0aXZhdGUgdGFyZ2V0ZWQgYW5pbWF0aW9uXHJcbiAgICAgICAgdGhpcy5hbmltYXRpb25zW3N0YXRlXS5wbGF5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gIGN1cnJlbnQgdGFyZ2V0XHJcbiAgICBUb3dlclRhcmdldDp1bmRlZmluZWR8RW5lbXlVbml0T2JqZWN0O1xyXG4gICAgLy8gIHBvc3NpYmxlIHRhcmdldHNcclxuICAgIFRvd2VyVGFyZ2V0czpMaXN0PEVuZW15VW5pdE9iamVjdD47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGRzIGFuIGVuZW15IHVuaXQgdG8gdGhlIGxpc3Qgb2YgcG9zc2libGUgdGFyZ2V0c1xyXG4gICAgICogQHBhcmFtIGVuZW15IGluZGV4IG9mIGVuZW15IHRvIGJlIGFkZGVkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBBZGRUYXJnZXQoZW5lbXk6bnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIGlmKEdhbWVTdGF0ZS5kZWJ1Z2dpbmdUb3dlcikgbG9nKFwiVE9XRVIgU1lTVEVNOiBhZGRpbmcgdGFyZ2V0IElEOlwiK2VuZW15LnRvU3RyaW5nKCkpO1xyXG5cclxuICAgICAgICAvL2FkZCBlbmVteSBpbmRleCB0byBsaXN0aW5nIG9uIHRvd2VyXHJcbiAgICAgICAgdGhpcy5Ub3dlclRhcmdldHMuYWRkSXRlbShFbmVteVVuaXRNYW5hZ2VyLkluc3RhbmNlLmVuZW15RGljdC5nZXRJdGVtKGVuZW15LnRvU3RyaW5nKCkpKTtcclxuXHJcbiAgICAgICAgLy9pZiB0aGVyZSB3ZXJlIG5vIG90aGVyIHRhcmdldHMsIHJlLWVuYWJsZSBzeXN0ZW1cclxuICAgICAgICBpZih0aGlzLlRvd2VyVGFyZ2V0cy5zaXplKCkgPT0gMSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKEdhbWVTdGF0ZS5kZWJ1Z2dpbmdUb3dlcikgbG9nKFwiVE9XRVIgU1lTVEVNOiBubyBwcmV2aW91cyB0YXJnZXRzIGV4aXN0ZWQsIHJlYWN0aXZhdGluZyBzeXN0ZW0uLi5cIik7XHJcbiAgICAgICAgICAgIHRoaXMuUmVzZXQoKTtcclxuICAgICAgICAgICAgZW5naW5lLmFkZFN5c3RlbSh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoR2FtZVN0YXRlLmRlYnVnZ2luZ1Rvd2VyKSBsb2coXCJUT1dFUiBTWVNURU06IG5ldyB0YXJnZXRpbmcgbGlzdCBzaXplID0gXCIrdGhpcy5Ub3dlclRhcmdldHMuc2l6ZSgpKTtcclxuICAgIH1cclxuICAgICAgXHJcbiAgICAvKipcclxuICAgICAqIHJlbW92ZXMgYW4gZW5lbXkgdW5pdCBmcm9tIHRoZSBsaXN0IG9mIHBvc3NpYmxlIHRhcmdldHNcclxuICAgICAqIHNvbWV0aW1lcyB0aGUgZW5lbXkgY2xlYW4gdXAgcGhhc2UgaGFwcGVucyBiZWZvcmUgdGhpcyBzdGF0ZSBhbmQgdGhpcyBjYW4gcmVtb3ZhbCBjYW4gYmUgdGhyb3duIHR3aWNlXHJcbiAgICAgKiBvbmNlIGR1cmluZyBkZWF0aCBjaGVjayBhbmQgc2Vjb25kIHdoZW4gb2JqZWN0IGxlYXZlcyBjb2xsaWRlciwgb25seSBwcm9jZXNzIHRoaXMgY2FsbCBpZiB0aGUgZW5lbXkgaXMgYWxpdmVcclxuICAgICAqIEBwYXJhbSBlbmVteSBpbmRleCBvZiBlbmVteSB0byBiZSByZW1vdmVkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBSZW1vdmVUYXJnZXQoZW5lbXk6bnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIGlmKEVuZW15VW5pdE1hbmFnZXIuSW5zdGFuY2UuZW5lbXlEaWN0LmdldEl0ZW0oZW5lbXkudG9TdHJpbmcoKSkuSXNBbGl2ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKEdhbWVTdGF0ZS5kZWJ1Z2dpbmdUb3dlcikgbG9nKFwiVE9XRVIgU1lTVEVNOiByZW1vdmluZyB0YXJnZXQgSUQ6XCIrZW5lbXkudG9TdHJpbmcoKSk7XHJcblxyXG4gICAgICAgICAgICAvL3JlbW92ZSBlbmVteSBpbmRleCBmcm9tIGxpc3Rpbmcgb24gdG93ZXJcclxuICAgICAgICAgICAgdGhpcy5Ub3dlclRhcmdldHMucmVtb3ZlSXRlbShFbmVteVVuaXRNYW5hZ2VyLkluc3RhbmNlLmVuZW15RGljdC5nZXRJdGVtKGVuZW15LnRvU3RyaW5nKCkpKTtcclxuXHJcbiAgICAgICAgICAgIC8vaWYgZW5lbXkgaXMgdGhlIGN1cnJlbnQgdGFyZ2V0XHJcbiAgICAgICAgICAgIGlmKHRoaXMuVG93ZXJUYXJnZXQgPT09IEVuZW15VW5pdE1hbmFnZXIuSW5zdGFuY2UuZW5lbXlEaWN0LmdldEl0ZW0oZW5lbXkudG9TdHJpbmcoKSkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vaGFsdCBhbnkgb24tZ29pbmcgYXR0YWNrXHJcbiAgICAgICAgICAgICAgICB0aGlzLlJlc2V0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoR2FtZVN0YXRlLmRlYnVnZ2luZ1Rvd2VyKSBsb2coXCJUT1dFUiBTWVNURU06IG5ldyB0YXJnZXRpbmcgbGlzdCBzaXplID0gXCIrdGhpcy5Ub3dlclRhcmdldHMuc2l6ZSgpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy9jYWxsYmFja3NcclxuICAgIC8vICBkYW1hZ2VcclxuICAgIERhbWFnZUVuZW15OihpbmRleDpudW1iZXIsIGRhbTpudW1iZXIsIHBlbjpudW1iZXIsIHJlbmQ6bnVtYmVyKSA9PiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBkYW1hZ2VFbmVteShpbmRleDpudW1iZXIsIGRhbTpudW1iZXIsIHBlbjpudW1iZXIsIHJlbmQ6bnVtYmVyKSB7IGxvZyhcIlRPV0VSIFNZU1RFTTogdG93ZXIgY2FsbGJhY2sgbm90IHNldCAtIGRhbWFnZSBlbmVteTpcIitpbmRleC50b1N0cmluZygpKTsgfVxyXG4gICAgLy8gIGVmZmVjdHNcclxuICAgIEFwcGx5RWZmZWN0OihpbmRleDpudW1iZXIsIHR5cGU6bnVtYmVyLCBwb3dlcjpudW1iZXIsIGxlbmd0aDpudW1iZXIpID0+IHZvaWQ7XHJcbiAgICBwcml2YXRlIGFwcGx5RWZmZWN0KGluZGV4Om51bWJlciwgdHlwZTpudW1iZXIsIHBvd2VyOm51bWJlciwgbGVuZ3RoOm51bWJlcikgeyBsb2coXCJUT1dFUiBTWVNURU06IHRvd2VyIGNhbGxiYWNrIG5vdCBzZXQgLSBhcHBseSBlZmZlY3Q6XCIraW5kZXgudG9TdHJpbmcoKSk7IH1cclxuXHJcblxyXG4gICAgLy9pbml0aWFsaXplcyB1bml0IHVwb24gb2JqZWN0IGNyZWF0aW9uXHJcbiAgICAvLyAgdGFrZXMgaW4gaW5kZXggZm9yIHRoaXMgdW5pdCBhbmQgc3RhcnRpbmcgd2F5cG9pbnRcclxuICAgIGNvbnN0cnVjdG9yKHRvd2VyQW5jaG9yOlRyYW5zZm9ybSwgdG93ZXJHaW1iYWw6VHJhbnNmb3JtLCBvYmpGcmFtZTpFbnRpdHkpXHJcbiAgICB7XHJcbiAgICAgICAgLy90YXJnZXRzXHJcbiAgICAgICAgdGhpcy5Ub3dlclRhcmdldCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLlRvd2VyVGFyZ2V0cyA9IG5ldyBMaXN0PEVuZW15VW5pdE9iamVjdD4oKTtcclxuICAgICAgICBcclxuICAgICAgICAvL29iamVjdHNcclxuICAgICAgICB0aGlzLlRvd2VyQW5jaG9yVHJhbnNmb3JtID0gdG93ZXJBbmNob3I7XHJcbiAgICAgICAgdGhpcy5Ub3dlckdpbWJhbFRyYW5zZm9ybSA9IHRvd2VyR2ltYmFsO1xyXG4gICAgICAgIHRoaXMuVG93ZXJGcmFtZSA9IG9iakZyYW1lO1xyXG5cclxuICAgICAgICAvL2FuaW1hdGlvbnNcclxuICAgICAgICAvLyAgY29udHJvbGxlclxyXG4gICAgICAgIHRoaXMuYW5pbWF0b3IgPSB0aGlzLlRvd2VyRnJhbWUuYWRkQ29tcG9uZW50KG5ldyBBbmltYXRvcigpKTtcclxuICAgICAgICAvLyAgc3RhdGVzXHJcbiAgICAgICAgdGhpcy5hbmltYXRpb25zID0gW107XHJcbiAgICAgICAgdGhpcy5hbmltYXRpb25zLnB1c2gobmV3IEFuaW1hdGlvblN0YXRlKCdhbmltX2lkbGUnLCB7IGxvb3Bpbmc6IHRydWUsIHNwZWVkOiAwLjIgfSkpO1xyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9ucy5wdXNoKG5ldyBBbmltYXRpb25TdGF0ZSgnYW5pbV9hdHRhY2snLCB7IGxvb3Bpbmc6IGZhbHNlLCBzcGVlZDogMSB9KSk7XHJcbiAgICAgICAgLy8gIGNsaXBzXHJcbiAgICAgICAgdGhpcy5hbmltYXRvci5hZGRDbGlwKHRoaXMuYW5pbWF0aW9uc1swXSk7XHJcbiAgICAgICAgdGhpcy5hbmltYXRvci5hZGRDbGlwKHRoaXMuYW5pbWF0aW9uc1sxXSk7XHJcbiAgICAgICAgLy8gIGhhbHQgY2xpcHMgYnkgZGVmYXVsdFxyXG4gICAgICAgIHRoaXMuU2V0QW5pbWF0aW9uU3RhdGUoMCk7XHJcblxyXG4gICAgICAgIC8vbGluayBldmVudFxyXG4gICAgICAgIHRoaXMuRGFtYWdlRW5lbXkgPSB0aGlzLmRhbWFnZUVuZW15O1xyXG4gICAgICAgIHRoaXMuQXBwbHlFZmZlY3QgPSB0aGlzLmFwcGx5RWZmZWN0O1xyXG4gICAgfVxyXG5cclxuICAgIC8vcHJvY2Vzc2luZyBvdmVyIHRpbWVcclxuICAgIHVwZGF0ZShkdDogbnVtYmVyKSBcclxuICAgIHtcclxuICAgICAgICAvL2lmIHRhcmdldCwgbG9vayBhdCB0YXJnZXRcclxuICAgICAgICBpZih0aGlzLlRvd2VyVGFyZ2V0ICE9IHVuZGVmaW5lZClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vbG9vayBhdCBlbmVteVxyXG4gICAgICAgICAgICB0aGlzLlRvd2VyR2ltYmFsVHJhbnNmb3JtLnJvdGF0aW9uID0gXHJcbiAgICAgICAgICAgICAgICBRdWF0ZXJuaW9uLkxvb2tSb3RhdGlvbih0aGlzLlRvd2VyVGFyZ2V0LmdldENvbXBvbmVudChUcmFuc2Zvcm0pLnBvc2l0aW9uLnN1YnRyYWN0KHRoaXMuVG93ZXJBbmNob3JUcmFuc2Zvcm0ucG9zaXRpb24pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9pZiBub3QgYXR0YWNraW5nIGFuZCBvZmYgY29vbGRvd24sIGF0dGVtcHQgdG8gZmluZCB0YXJnZXQgYW5kIGJlZ2luIGF0dGFja1xyXG4gICAgICAgIGlmKCF0aGlzLmlzQXR0YWNraW5nICYmIHRoaXMuYXR0YWNrVGltZXJbMV0gPD0gMClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vYXR0ZW1wdCB0byBmaW5kIHRhcmdldFxyXG4gICAgICAgICAgICB0aGlzLkZpbmRUYXJnZXQoKTtcclxuXHJcbiAgICAgICAgICAgIC8vZW5zdXJlIHRhcmdldCBoYXMgYmVlbiBmb3VuZFxyXG4gICAgICAgICAgICBpZih0aGlzLlRvd2VyVGFyZ2V0ICE9IHVuZGVmaW5lZCkgXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKEdhbWVTdGF0ZS5kZWJ1Z2dpbmdUb3dlcikgbG9nKFwiVE9XRVIgU1lTVEVNOiBhdHRhY2sgYmVnaW5uaW5nIG9uIHRhcmdldFwiKTtcclxuICAgICAgICAgICAgICAgIC8vYXR0YWNrIGFuaW1hdGlvblxyXG4gICAgICAgICAgICAgICAgdGhpcy5TZXRBbmltYXRpb25TdGF0ZSgxKTtcclxuICAgICAgICAgICAgICAgIC8vdGltaW5nXHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzQXR0YWNraW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaGFzRGFtYWdlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgLy8gIHNjYWxlIHRpbWluZyBiYXNlZCBvbiBhdHRhY2sgc3BlZWRcclxuICAgICAgICAgICAgICAgIHRoaXMuYXR0YWNrVGltZXJbMF0gPSAodGhpcy5hdHRhY2tDb29sZG93biAqICh0aGlzLmF0dGFja0FuaW1EYW1hZ2VQb2ludC90aGlzLmF0dGFja0FuaW1MZW5ndGgpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXR0YWNrVGltZXJbMV0gPSB0aGlzLmF0dGFja0Nvb2xkb3duICogKCh0aGlzLmF0dGFja0FuaW1MZW5ndGggLSB0aGlzLmF0dGFja0FuaW1EYW1hZ2VQb2ludCkvdGhpcy5hdHRhY2tBbmltTGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgIC8vbG9nKFwiVEVTVDogYXR0YWNrQ0Q9XCIrdGhpcy5hdHRhY2tDb29sZG93bitcIiwgdGltZUJlZm9yZT1cIit0aGlzLmF0dGFja1RpbWVyWzBdK1wiLCB0aW1lQWZ0ZXI9XCIrdGhpcy5hdHRhY2tUaW1lclsxXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy9pZiBhdHRhY2tpbmcsIHJlZHVjZSBjb29sZG93blxyXG4gICAgICAgIGlmKHRoaXMuaXNBdHRhY2tpbmcpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvL2lmIGRhbWFnZSBoYXMgbm90IGJlZW4gZGVhbHQgeWV0XHJcbiAgICAgICAgICAgIGlmKCF0aGlzLmhhc0RhbWFnZWQpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vY291bnQgdGlja2VyIGRvd25cclxuICAgICAgICAgICAgICAgIHRoaXMuYXR0YWNrVGltZXJbMF0gLT0gZHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9jaGVjayBpZiBkYW1hZ2Ugc2hvdWxkIGJlIGRlYWx0XHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLmF0dGFja1RpbWVyWzBdIDw9IDApXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9sb2coXCJURVNUOiBEQU0sIFwiK3RoaXMuYXR0YWNrVGltZXJbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZGVhbCBkYW1hZ2VcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhc0RhbWFnZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuVG93ZXJUYXJnZXQgIT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoR2FtZVN0YXRlLmRlYnVnZ2luZ1Rvd2VyKSBsb2coXCJUT1dFUiBTWVNURU06IGF0dGFjayBjb21wbGV0ZWQsIGF0dGFjayBkYW1hZ2UgXCIrdGhpcy5hdHRhY2tEYW1hZ2UudG9TdHJpbmcoKStcIiBkZWFsdCB0byB0YXJnZXQgXCIrdGhpcy5Ub3dlclRhcmdldC5JbmRleC50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5EYW1hZ2VFbmVteSh0aGlzLlRvd2VyVGFyZ2V0LkluZGV4LCB0aGlzLmF0dGFja0RhbWFnZSwgdGhpcy5hdHRhY2tQZW4sIHRoaXMuYXR0YWNrUmVuZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2FwcGx5IGVmZmVjdHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHZhciB4Om51bWJlcj0wOyB4PGRhdGFUb3dlcnNbdGhpcy5Ub3dlckRlZl0uQXR0cmlidXRlcy5sZW5ndGg7IHgrKylcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5BcHBseUVmZmVjdCh0aGlzLlRvd2VyVGFyZ2V0LkluZGV4LCBkYXRhVG93ZXJzW3RoaXMuVG93ZXJEZWZdLkF0dHJpYnV0ZXNbeF1bMF0sIGRhdGFUb3dlcnNbdGhpcy5Ub3dlckRlZl0uQXR0cmlidXRlc1t4XVsxXSwgZGF0YVRvd2Vyc1t0aGlzLlRvd2VyRGVmXS5BdHRyaWJ1dGVzW3hdWzJdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihHYW1lU3RhdGUuZGVidWdnaW5nVG93ZXIpIGxvZyhcIlRPV0VSIFNZU1RFTTogYXR0YWNrIGNvbXBsZXRlZCwgbm8gdGFyZ2V0IGV4aXN0c1wiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gIFxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vY291bnQgdGlja2VyIGRvd25cclxuICAgICAgICAgICAgICAgIHRoaXMuYXR0YWNrVGltZXJbMV0gLT0gZHQ7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vY2hlY2sgaWYgYXR0YWNrIGhhcyBmaW5pc2hlZFxyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5hdHRhY2tUaW1lclsxXSA8PSAwKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZmluaXNoIGF0dGFja1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNBdHRhY2tpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAvL2xvZyhcIlRFU1Q6IEZJTiwgXCIrdGhpcy5hdHRhY2tUaW1lclsxXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vcmVzZXRzIHRoZSB0b3dlcidzIHN0YXRlIHRvIHByZS1hdHRhY2sgZGVmYXVsdHNcclxuICAgIHB1YmxpYyBSZXNldCgpXHJcbiAgICB7XHJcbiAgICAgICAgaWYoR2FtZVN0YXRlLmRlYnVnZ2luZ1Rvd2VyKSBsb2coXCJUT1dFUiBTWVNURU06IHN5c3RlbSBoYXMgYmVlbiByZXNldFwiKTtcclxuICAgICAgICB0aGlzLlRvd2VyVGFyZ2V0ID0gdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICB0aGlzLmlzQXR0YWNraW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5oYXNEYW1hZ2VkID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHRoaXMuYXR0YWNrVGltZXJbMF0gPSAxO1xyXG4gICAgICAgIHRoaXMuYXR0YWNrVGltZXJbMV0gPSAwO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uc1sxXS5zcGVlZCA9IDE7XHJcbiAgICAgICAgdGhpcy5TZXRBbmltYXRpb25TdGF0ZSgwKTtcclxuICAgIH1cclxuXHJcbiAgICAvL2NvbmR1Y3RzIGEgdGFyZ2V0IGNoZWNrIG9uIHRoZSBnaXZlbiBlbmVteSwgY2FsbGVkIHdoZW4gYW4gZW5lbXkgaXMga2lsbGVkXHJcbiAgICAvLyAgb25seSB0YWtlIGFjdGlvbiBpZiBlbmVteSBpcyB0aGUgY3VycmVudCB0YXJnZXQgYW5kIGFuIGF0dGFjayBoYXMgbm90IHlldCBkZWFsdCBkYW1hZ2UsXHJcbiAgICAvLyAgYWxsIG90aGVyIGRlYWQgdW5pdHMgY3VsbGVkIG9uIG5leHQgdGFyZ2V0IGZpbmRcclxuICAgIFRhcmdldERlYXRoQ2hlY2soaW5kZXg6bnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIC8vaWYgZW5lbXkgaXMgdG93ZXIncyB0YXJnZXRcclxuICAgICAgICBpZih0aGlzLlRvd2VyVGFyZ2V0Py5JbmRleCA9PSBpbmRleClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKEdhbWVTdGF0ZS5kZWJ1Z2dpbmdUb3dlcikgbG9nKFwiVE9XRVIgU1lTVEVNOiBjdXJyZW50bHkgdGFyZ2V0ZWQgZW5lbXk9XCIraW5kZXgudG9TdHJpbmcoKStcIiBoYXMgYmVlbiBraWxsZWQsIHJlYXNzaWduaW5nIHRhcmdldFwiKTtcclxuXHJcbiAgICAgICAgICAgIC8vcmVtb3ZlIHRhcmdldCBmcm9tIGxpc3RcclxuICAgICAgICAgICAgdGhpcy5Ub3dlclRhcmdldHMucmVtb3ZlSXRlbSh0aGlzLlRvd2VyVGFyZ2V0KTtcclxuXHJcbiAgICAgICAgICAgIC8vaWYgdG93ZXIgaGFzIG5vdCBmaXJlZCB5ZXQsIHJlc2V0IHRvd2VyIHRvIGZpbmQgbmV3IHRhcmdldFxyXG4gICAgICAgICAgICBpZighdGhpcy5oYXNEYW1hZ2VkKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLlJlc2V0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy9lbHNlLCB3YWl0IG91dCBleGlzdGluZyBjb29sZG93blxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvL2F0dGVtcHRzIHRvIGZpbmQgdGFyZ2V0XHJcbiAgICBwdWJsaWMgRmluZFRhcmdldCgpXHJcbiAgICB7XHJcbiAgICAgICAgaWYoR2FtZVN0YXRlLmRlYnVnZ2luZ1Rvd2VyKSBsb2coXCJUT1dFUiBTWVNURU06IGF0dGVtcHRpbmcgdG8gZmluZCB2YWxpZCB0YXJnZXQgZnJvbSB0YXJnZXRpbmcgbGlzdCwgc2l6ZSA9IFwiK3RoaXMuVG93ZXJUYXJnZXRzLnNpemUoKS50b1N0cmluZygpKTtcclxuICAgICAgICAvL3B1cmdlIGxpc3Qgb2YgZGVhZCBlbmVtaWVzXHJcbiAgICAgICAgdmFyIGk6bnVtYmVyID0gMDtcclxuICAgICAgICB2YXIgdGFyZ2V0OkVuZW15VW5pdE9iamVjdDtcclxuICAgICAgICB3aGlsZShpIDwgdGhpcy5Ub3dlclRhcmdldHMuc2l6ZSgpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy9pZiBlbmVteSBpcyBkZWFkLCByZW1vdmUgdW5pdFxyXG4gICAgICAgICAgICB0YXJnZXQgPSB0aGlzLlRvd2VyVGFyZ2V0cy5nZXRJdGVtKGkpO1xyXG4gICAgICAgICAgICBpZighdGFyZ2V0LklzQWxpdmUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuVG93ZXJUYXJnZXRzLnJlbW92ZUl0ZW0odGFyZ2V0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvL2Vsc2UgcHVzaCB0YXJnZXQgZm9yd2FyZFxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGkrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9pZiB0aGVyZSBhcmUgbm8gdGFyZ2V0cywgYmVnaW4gaWRsZVxyXG4gICAgICAgIGlmKHRoaXMuVG93ZXJUYXJnZXRzLnNpemUoKSA8PSAwKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoR2FtZVN0YXRlLmRlYnVnZ2luZ1Rvd2VyKSBsb2coXCJUT1dFUiBTWVNURU06IG5vIHZhbGlkIGVuZW15IHRhcmdldCBmb3VuZCwgcmVtb3Zpbmcgc3lzdGVtIGZyb20gZW5naW5lXCIpO1xyXG5cclxuICAgICAgICAgICAgLy9yZXNldCB0b3dlclxyXG4gICAgICAgICAgICB0aGlzLlJlc2V0KCk7XHJcblxyXG4gICAgICAgICAgICAvL3JlbW92ZSBzeXN0ZW1cclxuICAgICAgICAgICAgZW5naW5lLnJlbW92ZVN5c3RlbSh0aGlzKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9hcHBseSBzb3J0aW5nIHRlY2huaXF1ZVxyXG4gICAgICAgIHN3aXRjaCh0aGlzLlRhcmdldGluZ1R5cGUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICB0aGlzLkdldFRhcmdldERpc3RhbmNlKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5HZXRUYXJnZXRCeUhlYWx0aFZhbHVlSGlnaGVzdCgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgIHRoaXMuR2V0VGFyZ2V0QnlIZWFsdGhWYWx1ZUxvd2VzdCgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgIHRoaXMuR2V0VGFyZ2V0QnlIZWFsdGhQZXJjZW50SGlnaGVzdCgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgIHRoaXMuR2V0VGFyZ2V0QnlIZWFsdGhQZXJjZW50TG93ZXN0KCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgdGhpcy5HZXRUYXJnZXRCeUFybW91clZhbHVlSGlnaGVzdCgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgNjpcclxuICAgICAgICAgICAgICAgIHRoaXMuR2V0VGFyZ2V0QnlBcm1vdXJWYWx1ZUxvd2VzdCgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZihHYW1lU3RhdGUuZGVidWdnaW5nVG93ZXIpIGxvZyhcIlRPV0VSIFNZU1RFTTogZm91bmQgdmFsaWQgZW5lbXkgdGFyZ2V0ID0gXCIrdGhpcy5Ub3dlclRhcmdldD8uSW5kZXgudG9TdHJpbmcoKStcIiwgdW5pdCBoYXMgdHJhdmVsbGVkID0gXCIrdGhpcy5Ub3dlclRhcmdldD8udW5pdFN5c3RlbS5kaXN0YW5jZVRvdGFsLnRvU3RyaW5nKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vYWxsIGRpZmZlcmVudCBtZXRob2RzIGZvciBwcm9jZXNzaW5nIHdoaWNoIHVuaXQgd2lsbCBiZSB0YXJnZXRlZCBieSB0aGUgdG93ZXJcclxuICAgIC8vICB0aGVyZSBpcyBhIGZhaXIgYml0IG9mIHJlcGV0aXRpdmUgY29kZSBoZXJlLCBidXQgYmVjYXVzZSBvZiBob3cgb2Z0ZW4gdGhlc2UgZnVuY3Rpb25zIGFyZSBwcm9jZXNzZWRcclxuICAgIC8vICBieSB0b3dlcnMgaXQgaXMgd2VsbCB3b3J0aCB0aGUgc3RvcmFnZS1wcm9jZXNzaW5nIHRyYWRlLW9mZlxyXG4gICAgcHJpdmF0ZSB0YXJnZXRUZXN0VW5pdDp1bmRlZmluZWR8RW5lbXlVbml0T2JqZWN0ID0gdW5kZWZpbmVkO1xyXG4gICAgcHJpdmF0ZSB0YXJnZXRUZXN0VmFsdWU6bnVtYmVyID0gMDtcclxuICAgIC8vICB0cmF2ZWxsZWQgZnVydGhlc3QgZGlzdGFuY2UgZG93biBsYW5lXHJcbiAgICBwdWJsaWMgR2V0VGFyZ2V0RGlzdGFuY2UoKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuVG93ZXJUYXJnZXQgPSB0aGlzLlRvd2VyVGFyZ2V0cy5nZXRJdGVtKDApO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0VGVzdFZhbHVlID0gdGhpcy5Ub3dlclRhcmdldC51bml0U3lzdGVtLmRpc3RhbmNlVG90YWw7XHJcblxyXG4gICAgICAgIC8vcHJvY2VzcyBldmVyeSB0YXJnZXRcclxuICAgICAgICBmb3IodmFyIGk6bnVtYmVyPTA7IGk8dGhpcy5Ub3dlclRhcmdldHMuc2l6ZSgpOyBpKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvL3Rlc3QgdmFsdWUgXHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0VGVzdFVuaXQgPSB0aGlzLlRvd2VyVGFyZ2V0cy5nZXRJdGVtKGkpO1xyXG4gICAgICAgICAgICBpZih0aGlzLnRhcmdldFRlc3RWYWx1ZSA+IHRoaXMudGFyZ2V0VGVzdFVuaXQudW5pdFN5c3RlbS5kaXN0YW5jZVRvdGFsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLlRvd2VyVGFyZ2V0ID0gdGhpcy50YXJnZXRUZXN0VW5pdDsgXHJcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldFRlc3RWYWx1ZSA9IHRoaXMudGFyZ2V0VGVzdFVuaXQudW5pdFN5c3RlbS5kaXN0YW5jZVRvdGFsOyAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gIGhpZ2hlc3QgaGVhbHRoIHZhbHVlXHJcbiAgICBwdWJsaWMgR2V0VGFyZ2V0QnlIZWFsdGhWYWx1ZUhpZ2hlc3QoKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuVG93ZXJUYXJnZXQgPSB0aGlzLlRvd2VyVGFyZ2V0cy5nZXRJdGVtKDApO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0VGVzdFZhbHVlID0gdGhpcy5Ub3dlclRhcmdldC5IZWFsdGhDdXI7XHJcblxyXG4gICAgICAgIC8vcHJvY2VzcyBldmVyeSB0YXJnZXRcclxuICAgICAgICBmb3IodmFyIGk6bnVtYmVyPTA7IGk8dGhpcy5Ub3dlclRhcmdldHMuc2l6ZSgpOyBpKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvL3Rlc3QgdmFsdWUgXHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0VGVzdFVuaXQgPSB0aGlzLlRvd2VyVGFyZ2V0cy5nZXRJdGVtKGkpO1xyXG4gICAgICAgICAgICBpZih0aGlzLnRhcmdldFRlc3RWYWx1ZSA8IHRoaXMudGFyZ2V0VGVzdFVuaXQuSGVhbHRoQ3VyKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLlRvd2VyVGFyZ2V0ID0gdGhpcy50YXJnZXRUZXN0VW5pdDsgXHJcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldFRlc3RWYWx1ZSA9IHRoaXMudGFyZ2V0VGVzdFVuaXQuSGVhbHRoQ3VyOyAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gIGxvd2VzdCBoZWFsdGggdmFsdWVcclxuICAgIHB1YmxpYyBHZXRUYXJnZXRCeUhlYWx0aFZhbHVlTG93ZXN0KClcclxuICAgIHtcclxuICAgICAgICB0aGlzLlRvd2VyVGFyZ2V0ID0gdGhpcy5Ub3dlclRhcmdldHMuZ2V0SXRlbSgwKTtcclxuICAgICAgICB0aGlzLnRhcmdldFRlc3RWYWx1ZSA9IHRoaXMuVG93ZXJUYXJnZXQuSGVhbHRoQ3VyO1xyXG5cclxuICAgICAgICAvL3Byb2Nlc3MgZXZlcnkgdGFyZ2V0XHJcbiAgICAgICAgZm9yKHZhciBpOm51bWJlcj0wOyBpPHRoaXMuVG93ZXJUYXJnZXRzLnNpemUoKTsgaSsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy90ZXN0IHZhbHVlIFxyXG4gICAgICAgICAgICB0aGlzLnRhcmdldFRlc3RVbml0ID0gdGhpcy5Ub3dlclRhcmdldHMuZ2V0SXRlbShpKTtcclxuICAgICAgICAgICAgaWYodGhpcy50YXJnZXRUZXN0VmFsdWUgPiB0aGlzLnRhcmdldFRlc3RVbml0LkhlYWx0aEN1cilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5Ub3dlclRhcmdldCA9IHRoaXMudGFyZ2V0VGVzdFVuaXQ7IFxyXG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXRUZXN0VmFsdWUgPSB0aGlzLnRhcmdldFRlc3RVbml0LkhlYWx0aEN1cjsgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vICBoaWdoZXN0IGhlYWx0aCBwZXJjZW50XHJcbiAgICBwdWJsaWMgR2V0VGFyZ2V0QnlIZWFsdGhQZXJjZW50SGlnaGVzdCgpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5Ub3dlclRhcmdldCA9IHRoaXMuVG93ZXJUYXJnZXRzLmdldEl0ZW0oMCk7XHJcbiAgICAgICAgdGhpcy50YXJnZXRUZXN0VmFsdWUgPSB0aGlzLlRvd2VyVGFyZ2V0LkhlYWx0aEN1ci90aGlzLlRvd2VyVGFyZ2V0LkhlYWx0aE1heDtcclxuXHJcbiAgICAgICAgLy9wcm9jZXNzIGV2ZXJ5IHRhcmdldFxyXG4gICAgICAgIGZvcih2YXIgaTpudW1iZXI9MDsgaTx0aGlzLlRvd2VyVGFyZ2V0cy5zaXplKCk7IGkrKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vdGVzdCB2YWx1ZSBcclxuICAgICAgICAgICAgdGhpcy50YXJnZXRUZXN0VW5pdCA9IHRoaXMuVG93ZXJUYXJnZXRzLmdldEl0ZW0oaSk7XHJcbiAgICAgICAgICAgIGlmKHRoaXMudGFyZ2V0VGVzdFZhbHVlIDwgdGhpcy50YXJnZXRUZXN0VW5pdC5IZWFsdGhDdXIvdGhpcy50YXJnZXRUZXN0VW5pdC5IZWFsdGhNYXgpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuVG93ZXJUYXJnZXQgPSB0aGlzLnRhcmdldFRlc3RVbml0OyBcclxuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0VGVzdFZhbHVlID0gdGhpcy5Ub3dlclRhcmdldC5IZWFsdGhDdXIvdGhpcy5Ub3dlclRhcmdldC5IZWFsdGhNYXg7ICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyAgbG93ZXN0IGhlYWx0aCBwZXJjZW50XHJcbiAgICBwdWJsaWMgR2V0VGFyZ2V0QnlIZWFsdGhQZXJjZW50TG93ZXN0KClcclxuICAgIHtcclxuICAgICAgICB0aGlzLlRvd2VyVGFyZ2V0ID0gdGhpcy5Ub3dlclRhcmdldHMuZ2V0SXRlbSgwKTtcclxuICAgICAgICB0aGlzLnRhcmdldFRlc3RWYWx1ZSA9IHRoaXMuVG93ZXJUYXJnZXQuSGVhbHRoQ3VyL3RoaXMuVG93ZXJUYXJnZXQuSGVhbHRoTWF4O1xyXG5cclxuICAgICAgICAvL3Byb2Nlc3MgZXZlcnkgdGFyZ2V0XHJcbiAgICAgICAgZm9yKHZhciBpOm51bWJlcj0wOyBpPHRoaXMuVG93ZXJUYXJnZXRzLnNpemUoKTsgaSsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy90ZXN0IHZhbHVlIFxyXG4gICAgICAgICAgICB0aGlzLnRhcmdldFRlc3RVbml0ID0gdGhpcy5Ub3dlclRhcmdldHMuZ2V0SXRlbShpKTtcclxuICAgICAgICAgICAgaWYodGhpcy50YXJnZXRUZXN0VmFsdWUgPiB0aGlzLnRhcmdldFRlc3RVbml0LkhlYWx0aEN1ci90aGlzLnRhcmdldFRlc3RVbml0LkhlYWx0aE1heClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5Ub3dlclRhcmdldCA9IHRoaXMudGFyZ2V0VGVzdFVuaXQ7IFxyXG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXRUZXN0VmFsdWUgPSB0aGlzLlRvd2VyVGFyZ2V0LkhlYWx0aEN1ci90aGlzLlRvd2VyVGFyZ2V0LkhlYWx0aE1heDsgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vICBoaWdoZXN0IGFybW9yIHZhbHVlXHJcbiAgICBwdWJsaWMgR2V0VGFyZ2V0QnlBcm1vdXJWYWx1ZUhpZ2hlc3QoKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuVG93ZXJUYXJnZXQgPSB0aGlzLlRvd2VyVGFyZ2V0cy5nZXRJdGVtKDApO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0VGVzdFZhbHVlID0gdGhpcy5Ub3dlclRhcmdldC5Bcm1vdXI7XHJcblxyXG4gICAgICAgIC8vcHJvY2VzcyBldmVyeSB0YXJnZXRcclxuICAgICAgICBmb3IodmFyIGk6bnVtYmVyPTA7IGk8dGhpcy5Ub3dlclRhcmdldHMuc2l6ZSgpOyBpKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvL3Rlc3QgdmFsdWUgXHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0VGVzdFVuaXQgPSB0aGlzLlRvd2VyVGFyZ2V0cy5nZXRJdGVtKGkpO1xyXG4gICAgICAgICAgICBpZih0aGlzLnRhcmdldFRlc3RWYWx1ZSA8IHRoaXMudGFyZ2V0VGVzdFVuaXQuQXJtb3VyKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLlRvd2VyVGFyZ2V0ID0gdGhpcy50YXJnZXRUZXN0VW5pdDsgXHJcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldFRlc3RWYWx1ZSA9IHRoaXMudGFyZ2V0VGVzdFVuaXQuQXJtb3VyOyAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gIGxvd2VzdCBhcm1vciB2YWx1ZVxyXG4gICAgcHVibGljIEdldFRhcmdldEJ5QXJtb3VyVmFsdWVMb3dlc3QoKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuVG93ZXJUYXJnZXQgPSB0aGlzLlRvd2VyVGFyZ2V0cy5nZXRJdGVtKDApO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0VGVzdFZhbHVlID0gdGhpcy5Ub3dlclRhcmdldC5Bcm1vdXI7XHJcblxyXG4gICAgICAgIC8vcHJvY2VzcyBldmVyeSB0YXJnZXRcclxuICAgICAgICBmb3IodmFyIGk6bnVtYmVyPTA7IGk8dGhpcy5Ub3dlclRhcmdldHMuc2l6ZSgpOyBpKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvL3Rlc3QgdmFsdWUgXHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0VGVzdFVuaXQgPSB0aGlzLlRvd2VyVGFyZ2V0cy5nZXRJdGVtKGkpO1xyXG4gICAgICAgICAgICBpZih0aGlzLnRhcmdldFRlc3RWYWx1ZSA+IHRoaXMudGFyZ2V0VGVzdFVuaXQuQXJtb3VyKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLlRvd2VyVGFyZ2V0ID0gdGhpcy50YXJnZXRUZXN0VW5pdDsgXHJcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldFRlc3RWYWx1ZSA9IHRoaXMudGFyZ2V0VGVzdFVuaXQuQXJtb3VyOyAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiLyogICAgICBFTkVNWSBVTklUXHJcbiAgICByZXByZXNlbnRzIGEgc2luZ2xlIHVuaXQgaW4gdGhlIGdhbWUgd29ybGQgdGhhdCBhdHRlbXB0cyB0byB3YWxrXHJcbiAgICBkb3duIGEgY2hhaW4gb2Ygd2F5cG9pbnRzIGFuZCBhdHRhY2sgdGhlIHBsYXllcidzIGJhc2UuIHVuaXRzIG1hbmFnZVxyXG4gICAgdGhlaXIgb3duIG1vdmVtZW50IGFuZCBoZWFsdGgsIHB1c2hpbmcgZGVhdGggdHJpZ2dlcnMgdXAgdGhyb3VnaFxyXG4gICAgdG8gdGhlIGdhbWUgbWFuYWdlci4gd2hlbiBhIHVuaXQgcmVhY2hlcyB0aGUgcGxheWVyJ3MgYmFzZSBpdCB3aW5kc1xyXG4gICAgdXAgYSBzaW5nbGUgYXR0YWNrLCBkZWFscyBkYW1hZ2UgdG8gdGhlIHBsYXllcidzIGhlYWx0aFxyXG5cclxuICAgIHRoaXMgaXMgc3BsaXQgaW50byAyIGNsYXNzZXM6XHJcbiAgICAgIHVuaXQgc3lzdGVtOiBjb21wcmlzZWQgb2YgMiBlbnRpdGllczogaW52aXNpYmxlIG1vdmluZy90cmlnZ2VyIGFuZCB2aXNpYmxlIHNoYXBlIChwYXJlbnRlZCB1bmRlciBtb3ZlbWVudCBvYmopXHJcbiAgICAgIHVuaXQgb2JqZWN0OiBpbi1nYW1lIG9iamVjdCB2aXNpYmxlIHRvIHRoZSBwbGF5ZXIgYW5kIGFjdHMgYXMgYSB0YXJnZXQgZm9yIHRvd2Vyc1xyXG4qL1xyXG5pbXBvcnQgeyBEZWxheSwgVHJpZ2dlckJveFNoYXBlLCBUcmlnZ2VyQ29tcG9uZW50IH0gZnJvbSBcIkBkY2wvZWNzLXNjZW5lLXV0aWxzXCI7XHJcbmltcG9ydCB7IERpZmZpY3VsdHlEYXRhIH0gZnJvbSBcIi4vZGF0YS9kaWZmaWN1bHR5LWRhdGFcIjtcclxuaW1wb3J0IHsgRW5lbXlEYXRhIH0gZnJvbSBcIi4vZGF0YS9lbmVteS1kYXRhXCI7XHJcbmltcG9ydCB7IEdhbWVTdGF0ZSB9IGZyb20gXCIuL2dhbWUtc3RhdGVzXCI7XHJcbmltcG9ydCB7IFdheXBvaW50LCBXYXlwb2ludE1hbmFnZXIgfSBmcm9tIFwiLi9tYXAtcGF0aGluZ1wiO1xyXG5pbXBvcnQgeyBUb3dlclN0cnVjdHVyZVN5c3RlbSB9IGZyb20gXCIuL3Rvd2VyLWVudGl0eVwiO1xyXG5pbXBvcnQgeyBMaXN0IH0gZnJvbSBcInNyYy91dGlsaXRpZXMvY29sbGVjdGlvbnNcIjtcclxuLy9vYmplY3QgdGhhdCByZXByZXNlbnRzIGFuIGVuZW15IGluIHNjZW5lXHJcbmV4cG9ydCBjbGFzcyBFbmVteVVuaXRPYmplY3QgZXh0ZW5kcyBFbnRpdHlcclxue1xyXG4gICAgLy93aGV0aGVyIHVuaXQgaXMgaW4gdXNlXHJcbiAgICBJc0FsaXZlOmJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICAvL2FjY2VzcyBpbmRleFxyXG4gICAgcHJpdmF0ZSBpbmRleDpudW1iZXI7XHJcbiAgICBnZXQgSW5kZXgoKTpudW1iZXIgeyByZXR1cm4gdGhpcy5pbmRleDsgfTtcclxuXHJcbiAgICAvL3VuaXQgdHlwZVxyXG4gICAgVHlwZTpudW1iZXIgPSAwO1xyXG5cclxuICAgIC8vdW5pdCBzdXJ2aXZhbCBkZXRhaWxzXHJcbiAgICBIZWFsdGhDdXI6bnVtYmVyID0gMDtcclxuICAgIEhlYWx0aE1heDpudW1iZXIgPSAwO1xyXG4gICAgQXJtb3VyOm51bWJlciA9IDA7XHJcblxyXG4gICAgLy91bml0IGhlYWx0aCBiYXJcclxuICAgIGhlYWx0aEJhckN1cjpFbnRpdHk7XHJcblxyXG4gICAgLy91bml0IG9iamVjdFxyXG4gICAgdW5pdEF2YXRhcjpFbnRpdHk7XHJcblxyXG4gICAgLy91bml0IHN5c3RlbVxyXG4gICAgdW5pdFN5c3RlbTpFbmVteVVuaXRTeXN0ZW07XHJcblxyXG4gICAgLy9jYWxsYmFja3MgICAgXHJcbiAgICBPbkRlYXRoOihpbmRleDpudW1iZXIsIHJld2FyZGVkOmJvb2xlYW4pID0+IHZvaWQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBjb25zdHJ1Y3RvclxyXG4gICAgICogQHBhcmFtIGluZGV4IHVuaXF1ZSBhY2Nlc3MgaW5kZXhcclxuICAgICAqIEBwYXJhbSBoZWFsdGhTaGFwZUN1ciBzaGFwZSByZWZlcmVuY2UgZm9yIGRpc3BsYXlpbmcgY3VycmVudCBoZWFsdGhcclxuICAgICAqIEBwYXJhbSB0cmlnZ2VyU2hhcGUgc2hhcGUgcmVmZXJlbmNlIGZvciBjb2xsaXNpb24gaW50ZXJhY3Rpb25cclxuICAgICAqIEBwYXJhbSB1bml0QXR0YWNrIGNhbGxiYWNrIGZvciB1bml0IGF0dGFja1xyXG4gICAgICogQHBhcmFtIHVuaXREZWF0aCBjYWxsYmFjayBmb3IgdW5pdCBkZWF0aFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoaW5kZXg6bnVtYmVyLCBoZWFsdGhTaGFwZUN1cjpHTFRGU2hhcGUsIHRyaWdnZXJTaGFwZTpUcmlnZ2VyQm94U2hhcGUsIFxyXG4gICAgICAgIHVuaXRBdHRhY2s6KHZhbHVlOm51bWJlcik9PnZvaWQsIFxyXG4gICAgICAgIHVuaXREZWF0aDooaW5kZXg6bnVtYmVyLCByZXdhcmRlZDpib29sZWFuKT0+dm9pZCwgXHJcbiAgICAgICAgdW5pdEtpbGw6KGluZGV4Om51bWJlciwgcmV3YXJkZWQ6Ym9vbGVhbik9PnZvaWQsXHJcbiAgICAgICAgdW5pdERhbWFnZTooaW5kZXg6bnVtYmVyLCBkYW06bnVtYmVyLCBwZW46bnVtYmVyLCByZW5kOm51bWJlcikgPT4gdm9pZFxyXG4gICAgKVxyXG4gICAge1xyXG4gICAgICAgIC8vb2JqZWN0XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLmFkZENvbXBvbmVudChuZXcgVHJhbnNmb3JtXHJcbiAgICAgICAgKHtcclxuICAgICAgICAgICAgcG9zaXRpb246IG5ldyBWZWN0b3IzKDAsMCwwKSxcclxuICAgICAgICAgICAgc2NhbGU6IG5ldyBWZWN0b3IzKDEsMSwxKSxcclxuICAgICAgICAgICAgcm90YXRpb246IG5ldyBRdWF0ZXJuaW9uKCkuc2V0RXVsZXIoMCwwLDApXHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAvL2RhdGFcclxuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XHJcblxyXG4gICAgICAgIC8vaGVhbHRoIGJhclxyXG4gICAgICAgIC8vICBjdXJyZW50XHJcbiAgICAgICAgdGhpcy5oZWFsdGhCYXJDdXIgPSBuZXcgRW50aXR5KCk7XHJcbiAgICAgICAgdGhpcy5oZWFsdGhCYXJDdXIuYWRkQ29tcG9uZW50KGhlYWx0aFNoYXBlQ3VyKTtcclxuICAgICAgICB0aGlzLmhlYWx0aEJhckN1ci5hZGRDb21wb25lbnQobmV3IFRyYW5zZm9ybVxyXG4gICAgICAgICh7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiBuZXcgVmVjdG9yMygwLDIsMCksXHJcbiAgICAgICAgICAgIHNjYWxlOiBuZXcgVmVjdG9yMygxLDEsMSksXHJcbiAgICAgICAgICAgIHJvdGF0aW9uOiBuZXcgUXVhdGVybmlvbigpLnNldEV1bGVyKDAsMCwwKVxyXG4gICAgICAgIH0pKTtcclxuICAgICAgICB0aGlzLmhlYWx0aEJhckN1ci5zZXRQYXJlbnQodGhpcyk7XHJcblxyXG4gICAgICAgIC8vdW5pdCBvYmplY3RcclxuICAgICAgICB0aGlzLnVuaXRBdmF0YXIgPSBuZXcgRW50aXR5KCk7XHJcbiAgICAgICAgdGhpcy51bml0QXZhdGFyLmFkZENvbXBvbmVudChuZXcgVHJhbnNmb3JtXHJcbiAgICAgICAgKHtcclxuICAgICAgICAgICAgcG9zaXRpb246IG5ldyBWZWN0b3IzKDAsMCwwKSxcclxuICAgICAgICAgICAgc2NhbGU6IG5ldyBWZWN0b3IzKDEsMSwxKSxcclxuICAgICAgICAgICAgcm90YXRpb246IG5ldyBRdWF0ZXJuaW9uKCkuc2V0RXVsZXIoMCwwLDApXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIHRoaXMudW5pdEF2YXRhci5zZXRQYXJlbnQodGhpcyk7XHJcblxyXG4gICAgICAgIC8vdW5pdCBzeXN0ZW1cclxuICAgICAgICB0aGlzLnVuaXRTeXN0ZW0gPSBuZXcgRW5lbXlVbml0U3lzdGVtKHRoaXMuSW5kZXgsIHRoaXMsIHRoaXMudW5pdEF2YXRhciwgdW5pdEF0dGFjaywgdW5pdEtpbGwsIHVuaXREYW1hZ2UpO1xyXG5cclxuICAgICAgICAvL3RyaWdnZXJcclxuICAgICAgICB0aGlzLmFkZENvbXBvbmVudChcclxuICAgICAgICAgICAgbmV3IFRyaWdnZXJDb21wb25lbnQoXHJcbiAgICAgICAgICAgICAgICB0cmlnZ2VyU2hhcGUsXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9kZXNpZ25hdGVkIGxheWVyOiBlbmVteVxyXG4gICAgICAgICAgICAgICAgICAgIGxheWVyOiAyLFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLy9jYWxsYmFja3NcclxuICAgICAgICB0aGlzLk9uRGVhdGggPSB1bml0RGVhdGg7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBDYWxjSGVhbHRoKHR5cGU6bnVtYmVyLCB3YXZlOm51bWJlcik6bnVtYmVyXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIChFbmVteURhdGFbdHlwZV0uVmFsdWVIZWFsdGhCYXNlICsgKEVuZW15RGF0YVt0eXBlXS5WYWx1ZUhlYWx0aEdyb3d0aCAqIHdhdmUpKSAqIChEaWZmaWN1bHR5RGF0YVtHYW1lU3RhdGUuRGlmZmljdWx0eUN1cl0uRW5lbXlIZWFsdGhQZXJjZW50IC8gMTAwKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIENhbGNBcm1vdXIodHlwZTpudW1iZXIsIHdhdmU6bnVtYmVyKTpudW1iZXJcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gKEVuZW15RGF0YVt0eXBlXS5WYWx1ZUFybW91ckJhc2UgKyAoRW5lbXlEYXRhW3R5cGVdLlZhbHVlQXJtb3VyR3Jvd3RoICogd2F2ZSkpICogKERpZmZpY3VsdHlEYXRhW0dhbWVTdGF0ZS5EaWZmaWN1bHR5Q3VyXS5FbmVteUFybW9yUGVyY2VudCAvIDEwMCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhdGljIENhbGNNb3ZlU3BlZWQodHlwZTpudW1iZXIsIHdhdmU6bnVtYmVyKTpudW1iZXJcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gRW5lbXlEYXRhW3R5cGVdLlZhbHVlU3BlZWQgKiAoRGlmZmljdWx0eURhdGFbR2FtZVN0YXRlLkRpZmZpY3VsdHlDdXJdLkVuZW15U3BlZWRQZXJjZW50IC8gMTAwKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHByZXBhcmVzIHRoZSB1bml0IGZvciB1c2UsIHNldHRpbmcgdXAgdGhlaXIgc3Vydml2YWwgZGV0YWlscyBmb3IgdGhlIGdpdmVuIHdhdmVcclxuICAgICAqICB0aGUgdW5pdCBpcyB0aGVuIHB1c2hlZCB0byBhIHNwYXduIHBvaW50IGFuZCBiZWdpbnMgdHJhdmVyc2FsXHJcbiAgICAgKiBAcGFyYW0gdHlwZSBpbmRleCBvZiBkZWZpbml0aW9uIHRoaXMgdW5pdCB3aWxsIGJlIHR5cGVkIGFzXHJcbiAgICAgKiBAcGFyYW0gc2hhcGUgc2hhcGUgb2JqZWN0IHRvIGNoYW5nZSB0b1xyXG4gICAgICogQHJldHVybnMgcmVmZXJlbmNlIHRvIHRoaXMgdW5pdFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgSW5pdGlhbGl6ZSh0eXBlOm51bWJlciwgd2F5cG9pbnQ6bnVtYmVyLCBzaGFwZTpHTFRGU2hhcGUpOkVuZW15VW5pdE9iamVjdFxyXG4gICAge1xyXG4gICAgICAgIC8vY2xhaW0gdW5pdFxyXG4gICAgICAgIHRoaXMuSXNBbGl2ZSA9IHRydWU7XHJcblxyXG4gICAgICAgIC8vc2V0IHR5cGVcclxuICAgICAgICB0aGlzLlR5cGUgPSB0eXBlO1xyXG5cclxuICAgICAgICAvL2NhbGN1bGF0ZSBzdXJ2aXZhYmlsaXR5XHJcbiAgICAgICAgdGhpcy5IZWFsdGhNYXggPSBFbmVteVVuaXRPYmplY3QuQ2FsY0hlYWx0aCh0eXBlLCBHYW1lU3RhdGUuV2F2ZUN1cik7XHJcbiAgICAgICAgdGhpcy5IZWFsdGhDdXIgPSB0aGlzLkhlYWx0aE1heDtcclxuICAgICAgICB0aGlzLkFybW91ciA9IEVuZW15VW5pdE9iamVjdC5DYWxjQXJtb3VyKHR5cGUsIEdhbWVTdGF0ZS5XYXZlQ3VyKTtcclxuICAgICAgICBcclxuICAgICAgICAvL3NldCB3YXlwb2ludHNcclxuICAgICAgICB0aGlzLnVuaXRTeXN0ZW0uU2V0VGFyZ2V0KFdheXBvaW50TWFuYWdlci5JbnN0YW5jZS5HZXRTcGF3blBvaW50KCksIHRydWUpO1xyXG4gICAgICAgIHRoaXMudW5pdFN5c3RlbS51bml0TW92ZVNwZWVkTW9kID0gMTtcclxuICAgICAgICB0aGlzLnVuaXRTeXN0ZW0udW5pdE1vdmVTcGVlZCA9IEVuZW15VW5pdE9iamVjdC5DYWxjTW92ZVNwZWVkKHR5cGUsIEdhbWVTdGF0ZS5XYXZlQ3VyKTtcclxuICAgICAgICB0aGlzLnVuaXRTeXN0ZW0uYXR0YWNrTGVuZ3RoID0gRW5lbXlEYXRhW3R5cGVdLlZhbHVlQXR0YWNrSW50ZXJ2YWxGdWxsO1xyXG4gICAgICAgIHRoaXMudW5pdFN5c3RlbS5hdHRhY2tEYW1hZ2VQZXJpb2QgPSBFbmVteURhdGFbdHlwZV0uVmFsdWVBdHRhY2tJbnRlcnZhbERhbWFnZTtcclxuICAgICAgICBcclxuICAgICAgICBpZihHYW1lU3RhdGUuZGVidWdnaW5nRW5lbXkpIHsgbG9nKFwiRW5lbXkgVW5pdCBcIit0aGlzLkluZGV4LnRvU3RyaW5nKCkrXCI6IHVuaXQgaW5pdGlhbGl6ZWQsIGhlYWx0aCA9IFwiK3RoaXMuSGVhbHRoTWF4LnRvU3RyaW5nKCkrXCIsIGFybW91ciA9IFwiK3RoaXMuQXJtb3VyLnRvU3RyaW5nKCkrXCIsIHNwZWVkID0gXCIrdGhpcy51bml0U3lzdGVtLnVuaXRNb3ZlU3BlZWQudG9TdHJpbmcoKSk7IH1cclxuXHJcbiAgICAgICAgLy9yZXNldCBoZWFsdGggYmFyXHJcbiAgICAgICAgdGhpcy5oZWFsdGhCYXJDdXIuZ2V0Q29tcG9uZW50KFRyYW5zZm9ybSkucG9zaXRpb24gPSBuZXcgVmVjdG9yMyhFbmVteURhdGFbdHlwZV0uSGVhbHRoUG9zWzBdLEVuZW15RGF0YVt0eXBlXS5IZWFsdGhQb3NbMV0sRW5lbXlEYXRhW3R5cGVdLkhlYWx0aFBvc1syXSk7XHJcbiAgICAgICAgdGhpcy5oZWFsdGhCYXJDdXIuZ2V0Q29tcG9uZW50KFRyYW5zZm9ybSkuc2NhbGUgPSBuZXcgVmVjdG9yMyhFbmVteURhdGFbdHlwZV0uSGVhbHRoU2NhbGVbMF0sRW5lbXlEYXRhW3R5cGVdLkhlYWx0aFNjYWxlWzFdLEVuZW15RGF0YVt0eXBlXS5IZWFsdGhTY2FsZVsyXSk7XHJcblxyXG4gICAgICAgIC8vcHJvY2VzcyBzaGFwZSBjaGFuZ2VcclxuICAgICAgICBpZih0aGlzLnVuaXRBdmF0YXIuaGFzQ29tcG9uZW50KEdMVEZTaGFwZSkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvL2NoZWNrIGlmIHNoYXBlIG11c3QgYmUgcmVtb3ZlZFxyXG4gICAgICAgICAgICBpZih0aGlzLlR5cGUgIT0gdHlwZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy9yZW1vdmUgc2hhcGVcclxuICAgICAgICAgICAgICAgIHRoaXMudW5pdEF2YXRhci5yZW1vdmVDb21wb25lbnQoR0xURlNoYXBlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZighdGhpcy51bml0QXZhdGFyLmhhc0NvbXBvbmVudChHTFRGU2hhcGUpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy9hZGQgbmV3IHNoYXBlXHJcbiAgICAgICAgICAgIHRoaXMudW5pdEF2YXRhci5hZGRDb21wb25lbnQoc2hhcGUpO1xyXG5cclxuICAgICAgICAgICAgLy9hcHBseSB0eXBlIHNwZWNpZmljIGRldGFpbHNcclxuICAgICAgICAgICAgdGhpcy51bml0QXZhdGFyLmdldENvbXBvbmVudChUcmFuc2Zvcm0pLnBvc2l0aW9uID0gbmV3IFZlY3RvcjMoRW5lbXlEYXRhW3R5cGVdLk9iamVjdE9mZnNldFswXSwgRW5lbXlEYXRhW3R5cGVdLk9iamVjdE9mZnNldFsxXSwgRW5lbXlEYXRhW3R5cGVdLk9iamVjdE9mZnNldFsyXSk7XHJcbiAgICAgICAgICAgIHRoaXMudW5pdEF2YXRhci5nZXRDb21wb25lbnQoVHJhbnNmb3JtKS5zY2FsZSA9IG5ldyBWZWN0b3IzKEVuZW15RGF0YVt0eXBlXS5PYmplY3RTY2FsZVswXSwgRW5lbXlEYXRhW3R5cGVdLk9iamVjdFNjYWxlWzFdLCBFbmVteURhdGFbdHlwZV0uT2JqZWN0U2NhbGVbMl0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9jbGVhbiB1cCBleGlzdGluZyBkZWxheVxyXG4gICAgICAgIGlmKHRoaXMuaGFzQ29tcG9uZW50KERlbGF5KSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQ29tcG9uZW50KERlbGF5KVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGFwcGxpZXMgZGFtYWdlIHRvIGVuZW15IHVuaXQsIGNhbGN1bGF0aW5nIGRhbWFnZSB0byBhcm1vdXIgYW5kIGhlYWx0aFxyXG4gICAgICogIGRhbWFnZSB0byBoZWFsdGggaXMgYXBwbGllZCBhZnRlciBhcm1vdXIgaXMgcmVtb3ZlZFxyXG4gICAgICogQHBhcmFtIGRhbSBhbW91bnQgb2YgaGVhbHRoIHRvIGJlIHJlbW92ZWQgZnJvbSB1bml0XHJcbiAgICAgKiBAcGFyYW0gcGVuIGFtb3VudCBvZiBhcm1vdXIgaWdub3JlZCB3aGVuIGRlYWxpbmcgZGFtYWdlXHJcbiAgICAgKiBAcGFyYW0gcmVuZCBhbW91bnQgb2YgYXJtb3VyIHRvIGJlIHJlbW92ZWQgZnJvbSB1bml0XHJcbiAgICAgKiBAcmV0dXJucyBib29sZWFuOiB0cnVlID0gdW5pdCBhbGl2ZSwgZmFsc2UgPSB1bml0IGRlYWRcclxuICAgICAqL1xyXG4gICAgcHVibGljIEFwcGx5RGFtYWdlKGRhbTpudW1iZXIsIHBlbjpudW1iZXIsIHJlbmQ6bnVtYmVyKTpib29sZWFuXHJcbiAgICB7XHJcbiAgICAgICAgaWYodGhpcy5IZWFsdGhDdXIgPT0gMCkgXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsb2coXCJFbmVteSBVbml0IFwiK3RoaXMuSW5kZXgudG9TdHJpbmcoKStcIjogRVJST1IgYXR0ZW1wdGluZyB0byBkYW1hZ2UgYWxyZWFkeSBkZWFkIGVuZW15LCBjb3VsZCBiZSBhIHVuaXQgY2xlYW4tdXAgZGVzeW5jXCIpXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9yZW1vdmUgYW5kIGNsYW1wIGhlYWx0aFxyXG4gICAgICAgIHRoaXMuSGVhbHRoQ3VyIC09IGRhbSAtIE1hdGgubWF4KDAsIHRoaXMuQXJtb3VyLXBlbik7XHJcbiAgICAgICAgaWYodGhpcy5IZWFsdGhDdXIgPCAwKSB0aGlzLkhlYWx0aEN1ciA9IDA7XHJcblxyXG4gICAgICAgIC8vYWRqdXN0IGhlYWx0aCBiYXJcclxuICAgICAgICB0aGlzLmhlYWx0aEJhckN1ci5nZXRDb21wb25lbnQoVHJhbnNmb3JtKS5zY2FsZSA9IG5ldyBWZWN0b3IzXHJcbiAgICAgICAgKFxyXG4gICAgICAgICAgICB0aGlzLkhlYWx0aEN1ci90aGlzLkhlYWx0aE1heCAqIEVuZW15RGF0YVt0aGlzLlR5cGVdLk9iamVjdFNjYWxlWzBdLCBcclxuICAgICAgICAgICAgdGhpcy5IZWFsdGhDdXIvdGhpcy5IZWFsdGhNYXggKiBFbmVteURhdGFbdGhpcy5UeXBlXS5PYmplY3RTY2FsZVsxXSwgXHJcbiAgICAgICAgICAgIHRoaXMuSGVhbHRoQ3VyL3RoaXMuSGVhbHRoTWF4ICogRW5lbXlEYXRhW3RoaXMuVHlwZV0uT2JqZWN0U2NhbGVbMl1cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBpZihHYW1lU3RhdGUuZGVidWdnaW5nRW5lbXkpIHsgbG9nKFwiRW5lbXkgVW5pdCBcIit0aGlzLkluZGV4LnRvU3RyaW5nKCkrXCI6IGRhbWFnZSBkZWFsdCB0byB1bml0LCBoZWFsdGggcmVtYWluaW5nID0gXCIrdGhpcy5IZWFsdGhDdXIudG9TdHJpbmcoKSkgfVxyXG4gICAgICAgIGlmKHRoaXMuSGVhbHRoQ3VyID09IDApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLktpbGxVbml0KHRydWUpO1xyXG5cclxuICAgICAgICAgICAgLy9lbmVteSBoYXMgYmVlbiBraWxsZWRcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvL3JlbmQgYW5kIGNsYW1wIGFybW91clxyXG4gICAgICAgICAgICB0aGlzLkFybW91ciAtPSByZW5kO1xyXG4gICAgICAgICAgICBpZih0aGlzLkFybW91ciA+PSAwKSB7IHRoaXMuQXJtb3VyID0gMDsgfVxyXG5cclxuICAgICAgICAgICAgLy9lbmVteSBpcyBzdGlsbCBhbGl2ZVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICoga2lsbHMgdGhlIHVuaXQsIHBsYXlpbmcgZGVhdGggYW5pbWF0aW9uIHRoZW4gcmVtb3ZlcyB0aGUgZW50aXR5IGZyb20gc2NlbmVcclxuICAgICAqIEBwYXJhbSByZXdhcmRlZCBpZiB0cnVlIHBsYXllciBpcyByZXdhcmRlZC9jcmVkaXRlZCBmb3Iga2lsbGluZyBlbmVteSBcclxuICAgICAqL1xyXG4gICAgcHVibGljIEtpbGxVbml0KHJld2FyZGVkOmJvb2xlYW4pXHJcbiAgICB7XHJcbiAgICAgICAgLy9wbGF5IGRlYXRoIGFuaW1cclxuICAgICAgICB0aGlzLnVuaXRTeXN0ZW0uU2V0QW5pbWF0aW9uU3RhdGUoMyk7XHJcblxyXG4gICAgICAgIC8vaGlkZSBlbnRpdHkgZnJvbSBzY2VuZSBhZnRlciBkZWF0aFxyXG4gICAgICAgIHRoaXMuYWRkQ29tcG9uZW50KCBuZXcgRGVsYXkoRW5lbXlEYXRhW3RoaXMuVHlwZV0uVmFsdWVEZWF0aExlbmd0aCooMTAwMC9FbmVteURhdGFbdGhpcy5UeXBlXS5WYWx1ZURlYXRoTGVuZ3RoU2NhbGUpLCAoKSA9PiBcclxuICAgICAgICB7IFxyXG4gICAgICAgICAgICBsb2coXCJFbmVteSBVbml0IFwiK3RoaXMuaW5kZXgudG9TdHJpbmcoKStcIjogZGVhdGggZGVsYXkgY29tcGxldGVkLCB1bml0IGlzIGJlaW5nIHJlc2V0XCIpO1xyXG4gICAgICAgICAgICB0aGlzLklzQWxpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5TZXRFbmdpbmVTdGF0ZShmYWxzZSk7XHJcbiAgICAgICAgfSkgKTtcclxuXHJcbiAgICAgICAgLy9oYWx0IG1vdmVtZW50XHJcbiAgICAgICAgZW5naW5lLnJlbW92ZVN5c3RlbSh0aGlzLnVuaXRTeXN0ZW0pO1xyXG5cclxuICAgICAgICAvL2RlYXRoIGNhbGxiYWNrLCB3aXRoIHJld2FyZFxyXG4gICAgICAgIHRoaXMuT25EZWF0aCh0aGlzLkluZGV4LCByZXdhcmRlZCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBkZS9hY3RpdmF0ZXMgb2JqZWN0IGFuZCBzeXN0ZW0gd2l0aGluIHRoZSBlbmdpbmUgc3RhdGVcclxuICAgICAqIEBwYXJhbSBzdGF0ZSBuZXcgc3RhdGUgZm9yIG9iamVjdDogdHJ1ZSA9IG9iamVjdCBpcyBhY3RpdmUsIGZhbHNlID0gb2JqZWN0IGlzIGhpZGRlblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgU2V0RW5naW5lU3RhdGUoc3RhdGU6Ym9vbGVhbilcclxuICAgIHtcclxuICAgICAgICAvL2NoZWNrIGlmIHN0YXRlIGNoYW5nZSBpcyBuZWVkZWRcclxuICAgICAgICBpZih0aGlzLmlzQWRkZWRUb0VuZ2luZSgpICE9IHN0YXRlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoc3RhdGUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vYWRkIHRvIGVuZ2luZVxyXG4gICAgICAgICAgICAgICAgZW5naW5lLmFkZEVudGl0eSh0aGlzKTtcclxuICAgICAgICAgICAgICAgIGVuZ2luZS5hZGRTeXN0ZW0odGhpcy51bml0U3lzdGVtKTtcclxuICAgICAgICAgICAgICAgIC8vICBwcmVwYXJlIHN5c3RlbVxyXG4gICAgICAgICAgICAgICAgdGhpcy51bml0U3lzdGVtLkluaXRpYWxpemUodGhpcy5UeXBlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vcmVtb3ZlIGZyb20gZW5naW5lXHJcbiAgICAgICAgICAgICAgICBlbmdpbmUucmVtb3ZlRW50aXR5KHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgZW5naW5lLnJlbW92ZVN5c3RlbSh0aGlzLnVuaXRTeXN0ZW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8vaGFuZGxlcyBhbGwgcmVhbC10aW1lIHByb2Nlc3NpbmcgZm9yIHRoZSB1bml0LCBpbmNsdWRpbmcgbW92ZW1lbnQgYW5kIGRhbWFnZSBvdmVyIHRpbWVcclxuLy9UT0RPOiBwdXNoIHVuaXQgZWZmZWN0cyBiYWNrIGludG8gdGhlIG1haW4gZm9yayBhZnRlciBvcHRpbWl6YXRpb25zIGFyZSBjb21wbGV0ZWRcclxuZXhwb3J0IGNsYXNzIEVuZW15VW5pdFN5c3RlbSBpbXBsZW1lbnRzIElTeXN0ZW1cclxue1xyXG4gICAgcHJpdmF0ZSBpbmRleDpudW1iZXI7XHJcbiAgICBwcml2YXRlIHR5cGU6bnVtYmVyO1xyXG5cclxuICAgIC8vb2JqZWN0c1xyXG4gICAgdW5pdE9iamVjdDpFbnRpdHk7XHJcbiAgICB1bml0QXZhdGFyOkVudGl0eTtcclxuICAgIHVuaXRPYmplY3RUcmFuc2Zvcm06VHJhbnNmb3JtO1xyXG4gICAgXHJcbiAgICAvL21vdmVtZW50XHJcbiAgICBzZWVkOm51bWJlciA9IC0xO1xyXG4gICAgZGlzdGFuY2VUb3RhbDpudW1iZXIgPSAwO1xyXG4gICAgLy8gIHVuaXQgaXMgYXQgZmluYWwgd2F5cG9pbnQvcGxheWVyIGJhc2VcclxuICAgIGFycml2ZWQ6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgLy8gIHVuaXQgc3BlZWRcclxuICAgIHVuaXRNb3ZlU3BlZWRNb2Q6bnVtYmVyID0gMTsgIFxyXG4gICAgdW5pdE1vdmVTcGVlZDpudW1iZXIgPSAwLjU1O1xyXG4gICAgdW5pdFJvdFNwZWVkOm51bWJlciA9IDEwO1xyXG4gICAgLy8gIGN1cnJlbnQgd2F5cG9pbnQgXHJcbiAgICB3YXlwb2ludDpXYXlwb2ludHx1bmRlZmluZWQ7XHJcbiAgICB3YXlwb2ludFRyYW5zZm9ybTpUcmFuc2Zvcm18dW5kZWZpbmVkO1xyXG4gICAgXHJcbiAgICAvL2F0dGFja1xyXG4gICAgLy8gIGRhbWFnZSBpcyBkZWFsdCBhIHBvcnRpb24gb2YgdGhlIHdheSB0aHJvdWdoIHRoZSBhdHRhY2sgYW5pbWF0aW9uXHJcbiAgICAvLyAgZXg6IGlmIGF0dGFja0RhbWFnZVBlcmlvZCBpcyAwLjUsIGRhbWFnZSBpcyBkZWFsdCAwLjVzIGFmdGVyIHRoZSBhdHRhY2sgYW5pbWF0aW9uIGhhcyBiZWd1blxyXG4gICAgaXNBdHRhY2tpbmc6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgaGFzRGFtYWdlZDpib29sZWFuID0gZmFsc2U7XHJcbiAgICBhdHRhY2tMZW5ndGg6bnVtYmVyID0gMDtcclxuICAgIGF0dGFja0RhbWFnZVBlcmlvZDpudW1iZXIgPSAwO1xyXG4gICAgYXR0YWNrVGltZXI6bnVtYmVyW10gPSBbMCwwXTtcclxuXHJcbiAgICAvL2FuaW1hdG9uc1xyXG4gICAgYW5pbWF0b3I6dW5kZWZpbmVkfEFuaW1hdG9yO1xyXG4gICAgYW5pbWF0aW9uczpBbmltYXRpb25TdGF0ZVtdID0gW107XHJcblxyXG4gICAgcHVibGljIFNldEFuaW1hdGlvblN0YXRlKHN0YXRlOm51bWJlcilcclxuICAgIHtcclxuICAgICAgICAvL2Rpc2FibGUgYWxsIG90aGVyIGFuaW1hdGlvbnNcclxuICAgICAgICB0aGlzLmFuaW1hdGlvbnNbMF0uc3RvcCgpO1xyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uc1sxXS5zdG9wKCk7XHJcbiAgICAgICAgdGhpcy5hbmltYXRpb25zWzJdLnN0b3AoKTtcclxuICAgICAgICB0aGlzLmFuaW1hdGlvbnNbM10uc3RvcCgpO1xyXG5cclxuICAgICAgICAvL2FjdGl2YXRlIHRhcmdldGVkIGFuaW1hdGlvblxyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uc1tzdGF0ZV0ucGxheSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vZWZmZWN0c1xyXG4gICAgc3RhdGljIGFjdGl2ZUVmZmVjdFRpY2tlckxlbmd0aDpudW1iZXIgPSAwLjI1O1xyXG4gICAgYWN0aXZlRWZmZWN0VGlja2VyOm51bWJlciA9IDA7XHJcbiAgICBhY3RpdmVFZmZlY3RzOkxpc3Q8RW5lbXlFbnRpdHlFZmZlY3Q+ID0gbmV3IExpc3Q8RW5lbXlFbnRpdHlFZmZlY3Q+KCk7XHJcblxyXG4gICAgLy9jYWxsYmFja3NcclxuICAgIHVuaXRLaWxsOiAodmFsdWU6bnVtYmVyLCByZXdhcmRlZDpib29sZWFuKSA9PiB2b2lkO1xyXG4gICAgdW5pdERhbWFnZTogKGluZGV4Om51bWJlciwgZGFtOm51bWJlciwgcGVuOm51bWJlciwgcmVuZDpudW1iZXIpID0+IHZvaWQ7XHJcbiAgICBvbkF0dGFjazogKHZhbHVlOm51bWJlcikgPT4gdm9pZDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIGNvbnN0cnVjdG9yXHJcbiAgICAgKiBAcGFyYW0gb2JqZWN0IGxpbmsgdG8gdW5pdCBvYmplY3RcclxuICAgICAqIEBwYXJhbSB1bml0QXR0YWNrIGNhbGxiYWNrIGZvciB1bml0IGF0dGFja1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoaW5kOm51bWJlciwgb2JqZWN0OkVudGl0eSwgYXZhdGFyOkVudGl0eSwgdW5pdEF0dGFjazoodmFsdWU6bnVtYmVyKT0+dm9pZCwga2lsbFVuaXQ6KHZhbHVlOm51bWJlciwgcmV3YXJkZWQ6Ym9vbGVhbik9PnZvaWQsIFxyXG4gICAgICAgIGRhbWFnZUVuZW15OihpbmRleDpudW1iZXIsIGRhbTpudW1iZXIsIHBlbjpudW1iZXIsIHJlbmQ6bnVtYmVyKSA9PiB2b2lkKVxyXG4gICAge1xyXG4gICAgICAgIC8vYXNzaWduIGluZGV4XHJcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZDtcclxuICAgICAgICB0aGlzLnR5cGUgPSAtMTtcclxuXHJcbiAgICAgICAgLy9jcmVhdGUgZW5lbXkgdW5pdCBvYmplY3RcclxuICAgICAgICB0aGlzLnVuaXRPYmplY3QgPSBvYmplY3Q7XHJcbiAgICAgICAgdGhpcy51bml0QXZhdGFyID0gYXZhdGFyO1xyXG4gICAgICAgIHRoaXMudW5pdE9iamVjdFRyYW5zZm9ybSA9IHRoaXMudW5pdE9iamVjdC5nZXRDb21wb25lbnQoVHJhbnNmb3JtKTtcclxuICAgICAgICBcclxuICAgICAgICAvL2xpbmsgZXZlbnRzXHJcbiAgICAgICAgdGhpcy51bml0S2lsbCA9IGtpbGxVbml0O1xyXG4gICAgICAgIHRoaXMudW5pdERhbWFnZSA9IGRhbWFnZUVuZW15O1xyXG4gICAgICAgIHRoaXMub25BdHRhY2sgPSB1bml0QXR0YWNrO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogcmVzZXRzIHRvIGluaXRpYWwgc3RhdGUgXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBJbml0aWFsaXplKHR5cGU6bnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIC8vc2V0IHR5cGVcclxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG5cclxuICAgICAgICAvL2FuaW1hdGlvbnNcclxuICAgICAgICAvLyAgY29udHJvbGxlclxyXG4gICAgICAgIGlmKHRoaXMudW5pdEF2YXRhci5oYXNDb21wb25lbnQoQW5pbWF0b3IpKSB7IHRoaXMudW5pdEF2YXRhci5yZW1vdmVDb21wb25lbnQoQW5pbWF0b3IpOyB9XHJcbiAgICAgICAgdGhpcy5hbmltYXRvciA9IHRoaXMudW5pdEF2YXRhci5hZGRDb21wb25lbnQobmV3IEFuaW1hdG9yKCkpO1xyXG4gICAgICAgIC8vICBzdGF0ZXNcclxuICAgICAgICB0aGlzLmFuaW1hdGlvbnMgPSBbXTtcclxuICAgICAgICB0aGlzLmFuaW1hdGlvbnMucHVzaChuZXcgQW5pbWF0aW9uU3RhdGUoJ2FuaW1faWRsZScsIHsgbG9vcGluZzogdHJ1ZSwgc3BlZWQ6IDEgfSkpO1xyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9ucy5wdXNoKG5ldyBBbmltYXRpb25TdGF0ZSgnYW5pbV93YWxrJywgeyBsb29waW5nOiB0cnVlLCBzcGVlZDogMSB9KSk7XHJcbiAgICAgICAgdGhpcy5hbmltYXRpb25zLnB1c2gobmV3IEFuaW1hdGlvblN0YXRlKCdhbmltX2F0dGFjaycsIHsgbG9vcGluZzogdHJ1ZSwgc3BlZWQ6IDEgfSkpO1xyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9ucy5wdXNoKG5ldyBBbmltYXRpb25TdGF0ZSgnYW5pbV9kZWF0aCcsIHsgbG9vcGluZzogdHJ1ZSwgc3BlZWQ6IEVuZW15RGF0YVt0aGlzLnR5cGVdLlZhbHVlRGVhdGhMZW5ndGhTY2FsZSB9KSk7XHJcbiAgICAgICAgLy8gIGNsaXBzXHJcbiAgICAgICAgdGhpcy5hbmltYXRvci5hZGRDbGlwKHRoaXMuYW5pbWF0aW9uc1swXSk7XHJcbiAgICAgICAgdGhpcy5hbmltYXRvci5hZGRDbGlwKHRoaXMuYW5pbWF0aW9uc1sxXSk7XHJcbiAgICAgICAgdGhpcy5hbmltYXRvci5hZGRDbGlwKHRoaXMuYW5pbWF0aW9uc1syXSk7XHJcbiAgICAgICAgdGhpcy5hbmltYXRvci5hZGRDbGlwKHRoaXMuYW5pbWF0aW9uc1szXSk7XHJcblxyXG4gICAgICAgIC8vY2xlYXIgZWZmZWN0c1xyXG4gICAgICAgIHdoaWxlKHRoaXMuYWN0aXZlRWZmZWN0cy5zaXplKCkgPiAwKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5hY3RpdmVFZmZlY3RzLnJlbW92ZUl0ZW0odGhpcy5hY3RpdmVFZmZlY3RzLmdldEl0ZW0oMCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmFjdGl2ZUVmZmVjdFRpY2tlciA9IEVuZW15VW5pdFN5c3RlbS5hY3RpdmVFZmZlY3RUaWNrZXJMZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBwcm9jZXNzaW5nIG92ZXIgdGltZVxyXG4gICAgICogQHBhcmFtIGR0IGRlbHRhIHRpbWVcclxuICAgICAqL1xyXG4gICAgdXBkYXRlKGR0OiBudW1iZXIpIFxyXG4gICAge1xyXG4gICAgICAgIC8vaWYgdGhlcmUgYXJlIGVmZmVjdHNcclxuICAgICAgICBpZih0aGlzLmFjdGl2ZUVmZmVjdHMuc2l6ZSgpID4gMClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vZGVjIGVmZmVjdCB0aWNrZXJcclxuICAgICAgICAgICAgaWYodGhpcy5hY3RpdmVFZmZlY3RUaWNrZXIgPD0gMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy9wcm9jZXNzIGVmZmVjdHNcclxuICAgICAgICAgICAgICAgIHRoaXMuUHJvY2Vzc0VmZmVjdHModHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZUVmZmVjdFRpY2tlciA9IEVuZW15VW5pdFN5c3RlbS5hY3RpdmVFZmZlY3RUaWNrZXJMZW5ndGg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vYXZhdGFyIGlzIG1vdmluZyB0b3dhcmRzIHdheXBvaW50XHJcbiAgICAgICAgaWYoIXRoaXMuYXJyaXZlZCAmJiB0aGlzLndheXBvaW50ICE9IHVuZGVmaW5lZCAmJiB0aGlzLndheXBvaW50VHJhbnNmb3JtICE9IHVuZGVmaW5lZClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vY2hhbmdlIHJvdGF0aW9uIG9mIGF2YXRhciB0b3dhcmRzIHRhcmdldCBzcGF3bnBvaW50XHJcbiAgICAgICAgICAgIC8vICB0YXJnZXQgZGlyZWN0aW9uID0gd2F5cG9pbnQgcG9zIC0gYXZhdGFyIHBvc1xyXG4gICAgICAgICAgICBjb25zdCBkaXJlY3Rpb24gPSB0aGlzLndheXBvaW50VHJhbnNmb3JtLnBvc2l0aW9uLnN1YnRyYWN0KHRoaXMudW5pdE9iamVjdFRyYW5zZm9ybS5wb3NpdGlvbik7XHJcbiAgICAgICAgICAgIHRoaXMudW5pdE9iamVjdFRyYW5zZm9ybS5yb3RhdGlvbiA9IFF1YXRlcm5pb24uU2xlcnAodGhpcy51bml0T2JqZWN0VHJhbnNmb3JtLnJvdGF0aW9uLCBRdWF0ZXJuaW9uLkxvb2tSb3RhdGlvbihkaXJlY3Rpb24pLCBkdCAqIHRoaXMudW5pdFJvdFNwZWVkKTtcclxuXHJcbiAgICAgICAgICAgIC8vbW92ZSBhdmF0YXIgdG93YXJkcyBjdXJyZW50IHdheXBvaW50XHJcbiAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlID0gVmVjdG9yMy5EaXN0YW5jZVNxdWFyZWQodGhpcy51bml0T2JqZWN0VHJhbnNmb3JtLnBvc2l0aW9uLCB0aGlzLndheXBvaW50VHJhbnNmb3JtLnBvc2l0aW9uKTtcclxuICAgICAgICAgICAgaWYoZGlzdGFuY2UgPj0gMC4wMTUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vbW92ZSB1bml0IHRvd2FyZCBkZXN0aW5hdGlvblxyXG4gICAgICAgICAgICAgICAgY29uc3QgZm9yd2FyZFZlY3RvciA9IFZlY3RvcjMuRm9yd2FyZCgpLnJvdGF0ZSh0aGlzLnVuaXRPYmplY3RUcmFuc2Zvcm0ucm90YXRpb24pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW5jcmVtZW50ID0gZm9yd2FyZFZlY3Rvci5zY2FsZShkdCAqIHRoaXMudW5pdE1vdmVTcGVlZCAqIHRoaXMudW5pdE1vdmVTcGVlZE1vZCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVuaXRPYmplY3RUcmFuc2Zvcm0udHJhbnNsYXRlKGluY3JlbWVudCk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vYWRkIHRvIHRvdGFsIGRpc3RhbmNlIHRyYXZlbGxlZFxyXG4gICAgICAgICAgICAgICAgdGhpcy5kaXN0YW5jZVRvdGFsIC09IGR0KnRoaXMudW5pdE1vdmVTcGVlZDtcclxuICAgICAgICAgICAgICAgIC8vbG9nKFwiSUQ6XCIrdGhpcy5pbmRleC50b1N0cmluZygpK1wiLCBkaXN0YW5jZTpcIit0aGlzLmRpc3RhbmNlVG90YWwudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy9hdmF0YXIgaGFzIHJlYWNoZWQgdGFyZ2V0IHdheXBvaW50XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy9hdHRlbXB0IHRvIGdldCBuZXh0IHdheXBvaW50XHJcbiAgICAgICAgICAgICAgICBsZXQgbmV4dFdQOnVuZGVmaW5lZHxXYXlwb2ludCA9IFdheXBvaW50TWFuYWdlci5JbnN0YW5jZS5HZXROZXh0V2F5cG9pbnQodGhpcy53YXlwb2ludC5JbmRleCwgdGhpcy5zZWVkKTtcclxuICAgICAgICAgICAgICAgIC8vZ2V0IG5leHQgd2F5cG9pbnRcclxuICAgICAgICAgICAgICAgIGlmKG5leHRXUCAhPSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9zZXQgYW5pbWF0aW9uIHRvIHdhbGtpbmdcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLlNldEFuaW1hdGlvblN0YXRlKDEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL3NldCBuZXh0IHdheXBvaW50XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5TZXRUYXJnZXQobmV4dFdQKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vYXJyaXZlZCBhdCBwbGF5ZXIncyBiYXNlXHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoR2FtZVN0YXRlLmRlYnVnZ2luZ0VuZW15KXsgbG9nKFwiRW5lbXkgU3lzdGVtIFwiK3RoaXMuaW5kZXgudG9TdHJpbmcoKStcIjogZW5lbXkgdW5pdCBhcnJpdmVkIGF0IGZpbmFsIHdheXBvaW50XCIpOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcnJpdmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvL3VuaXQgaGFzIGFycml2ZWQgYXQgcGxheWVyJ3MgYmFzZTogcHJvY2VzcyBhdHRhY2sgdGltZXIsIHRoZW4gZGVhbCBkYW1hZ2UgYW5kIGRlc3Bhd24gZW5lbXlcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvL3Jlc2V0IGF0dGFja1xyXG4gICAgICAgICAgICBpZighdGhpcy5pc0F0dGFja2luZylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy90aW1pbmdcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNBdHRhY2tpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oYXNEYW1hZ2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmF0dGFja1RpbWVyWzBdID0gdGhpcy5hdHRhY2tMZW5ndGgtdGhpcy5hdHRhY2tEYW1hZ2VQZXJpb2Q7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmF0dGFja1RpbWVyWzFdID0gdGhpcy5hdHRhY2tEYW1hZ2VQZXJpb2Q7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9hbmltYXRpb24gdG8gYXR0YWNrXHJcbiAgICAgICAgICAgICAgICB0aGlzLlNldEFuaW1hdGlvblN0YXRlKDIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL2lmIGRhbWFnZSBoYXMgbm90IGJlZW4gZGVhbHQgeWV0XHJcbiAgICAgICAgICAgIGlmKCF0aGlzLmhhc0RhbWFnZWQpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vY291bnQgdGlja2VyIGRvd25cclxuICAgICAgICAgICAgICAgIHRoaXMuYXR0YWNrVGltZXJbMF0gLT0gZHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9jaGVjayBpZiBkYW1hZ2Ugc2hvdWxkIGJlIGRlYWx0XHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLmF0dGFja1RpbWVyWzBdIDw9IDApXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoR2FtZVN0YXRlLmRlYnVnZ2luZ0VuZW15KSBsb2coXCJFbmVteSBTeXN0ZW0gXCIrdGhpcy5pbmRleC50b1N0cmluZygpK1wiOiBlbmVteSBhdHRhY2tpbmcgcGxheWVyIGJhc2VcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy9kZWFsIGRhbWFnZSBiYXNlZCBvbiB0eXBlXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYXNEYW1hZ2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZihFbmVteURhdGFbdGhpcy50eXBlXS5TcGF3blR5cGUgIT0gMykgdGhpcy5vbkF0dGFjaygxKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHRoaXMub25BdHRhY2soMTApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2F1dG8ta2lsbCBlbmVteSB3aXRob3V0IHJld2FyZFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5pdEtpbGwodGhpcy5pbmRleCwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9ICBcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAvL2NvdW50IHRpY2tlciBkb3duXHJcbiAgICAgICAgICAgICAgICB0aGlzLmF0dGFja1RpbWVyWzFdIC09IGR0O1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvL2NoZWNrIGlmIGF0dGFjayBoYXMgZmluaXNoZWRcclxuICAgICAgICAgICAgICAgIGlmKHRoaXMuYXR0YWNrVGltZXJbMV0gPD0gMClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2ZpbmlzaCBhdHRhY2tcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzQXR0YWNraW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogc2V0cyB0aGUgcHJvdmlkZWQgd2F5cG9pbnQgYXMgdGhlIHRhcmdldCBhbmQgYmVnaW5zIHRyYXZlcnNhbCB0b3dhcmRzIHBvc2l0aW9uXHJcbiAgICAgKiBAcGFyYW0gd2F5cG9pbnQgd2F5cG9pbnQgb2JqZWN0IHRvIGJlIHNldCBhcyB0YXJnZXRcclxuICAgICAqIEBwYXJhbSBzcGF3biB3aGV0aGVyIHdheXBvaW50IGlzIGEgc3Bhd25wb2ludCwgaWYgdHJ1ZSB1bml0IGlzIHJlcG9zaXRpb25lZCB0byBsb2NhdGlvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgU2V0VGFyZ2V0KHdheXBvaW50OldheXBvaW50LCBzcGF3bjpib29sZWFuID0gZmFsc2UpXHJcbiAgICB7XHJcbiAgICAgICAgaWYoR2FtZVN0YXRlLmRlYnVnZ2luZ0VuZW15KXsgbG9nKFwiRW5lbXkgU3lzdGVtIFwiK3RoaXMuaW5kZXgudG9TdHJpbmcoKStcIjogdW5pdCBpcyBub3cgdGFyZ2V0aW5nIHdheXBvaW50IFwiK3dheXBvaW50LkluZGV4KTsgfVxyXG5cclxuICAgICAgICAvL3NldCB1cCBuZXh0IHdheXBvaW50XHJcbiAgICAgICAgdGhpcy53YXlwb2ludCA9IHdheXBvaW50O1xyXG4gICAgICAgIHRoaXMud2F5cG9pbnRUcmFuc2Zvcm0gPSB0aGlzLndheXBvaW50LmdldENvbXBvbmVudChUcmFuc2Zvcm0pO1xyXG5cclxuICAgICAgICAvL3BsYWNlIG9iamVjdCBhdCBnaXZlbiB3YXlwb2ludFxyXG4gICAgICAgIGlmKHNwYXduKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy51bml0T2JqZWN0VHJhbnNmb3JtLnBvc2l0aW9uID0gbmV3IFZlY3RvcjModGhpcy53YXlwb2ludFRyYW5zZm9ybS5wb3NpdGlvbi54LCB0aGlzLndheXBvaW50VHJhbnNmb3JtLnBvc2l0aW9uLnksIHRoaXMud2F5cG9pbnRUcmFuc2Zvcm0ucG9zaXRpb24ueik7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0aGlzLnNlZWQgPSBNYXRoLmZsb29yKChNYXRoLnJhbmRvbSgpKjY0KSs2NCk7ICAgLy9yYW5kb21pemUgc2VlZFxyXG4gICAgICAgICAgICB0aGlzLmRpc3RhbmNlVG90YWwgPSBXYXlwb2ludE1hbmFnZXIuSW5zdGFuY2UuR2V0Um91dGVEaXN0YW5jZSh0aGlzLndheXBvaW50LkluZGV4LCB0aGlzLnNlZWQpOyAgLy9nZXQgdG90YWwgZGlzdGFuY2VcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vdXBkYXRlIGRpc3RhbmNlIGVzdGltYXRpb25cclxuICAgICAgICB0aGlzLmRpc3RhbmNlVG90YWwgPSBXYXlwb2ludE1hbmFnZXIuSW5zdGFuY2UuR2V0Um91dGVEaXN0YW5jZSh0aGlzLndheXBvaW50LkluZGV4LCB0aGlzLnNlZWQpO1xyXG5cclxuICAgICAgICAvL3N0YXJ0IHRyYXZlcnNhbFxyXG4gICAgICAgIHRoaXMuYXJyaXZlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vYWRkcyBhbiBlZmZlY3QgdG8gdGhlIHVuaXRcclxuICAgIHB1YmxpYyBBZGRFZmZlY3QodHlwZTpudW1iZXIsIHBvd2VyOm51bWJlciwgbGVuZ3RoOm51bWJlcilcclxuICAgIHtcclxuICAgICAgICAvL2NoZWNrIGZvciBleGlzdGFuY2VcclxuICAgICAgICB2YXIgZm91bmQ6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgIGZvcih2YXIgaTpudW1iZXI9MDsgaTx0aGlzLmFjdGl2ZUVmZmVjdHMuc2l6ZSgpOyBpKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvL292ZXItd3JpdGUgZWZmZWN0XHJcbiAgICAgICAgICAgIGlmKHRoaXMuYWN0aXZlRWZmZWN0cy5nZXRJdGVtKGkpLlR5cGUgPT0gdHlwZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVFZmZlY3RzLmdldEl0ZW0oaSkuSW50aWFsaXplKHR5cGUsIHBvd2VyLCBsZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vYWRkIG5ldyBlZmZlY3RcclxuICAgICAgICBpZighZm91bmQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZUVmZmVjdHMuYWRkSXRlbShuZXcgRW5lbXlFbnRpdHlFZmZlY3QodHlwZSwgcG93ZXIsIGxlbmd0aCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvL3Byb2Nlc3MgZWZmZWN0c1xyXG4gICAgICAgIHRoaXMuUHJvY2Vzc0VmZmVjdHMoZmFsc2UsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICAvL2l0ZXJhdGVzIHRocm91Z2ggYWxsIGVmZmVjdHNcclxuICAgIHByaXZhdGUgc2VsZWN0ZWRFZmZlY3Q6dW5kZWZpbmVkfEVuZW15RW50aXR5RWZmZWN0Oy8vb3B0aW1pemF0aW9uXHJcbiAgICBwdWJsaWMgUHJvY2Vzc0VmZmVjdHMoaXNDb3VudGluZzpib29sZWFuLCBpc0RhbWFnaW5nOmJvb2xlYW4pXHJcbiAgICB7XHJcbiAgICAgICAgLy9wcm9jZXNzIGVmZmVjdFxyXG4gICAgICAgIGZvcih2YXIgaTpudW1iZXI9MDsgaTx0aGlzLmFjdGl2ZUVmZmVjdHMuc2l6ZSgpOyBpKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkRWZmZWN0ID0gdGhpcy5hY3RpdmVFZmZlY3RzLmdldEl0ZW0oaSk7XHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIHN3aXRjaCh0aGlzLnNlbGVjdGVkRWZmZWN0LlR5cGUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vc2xvd2luZyBlZmZlY3RcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuaXRNb3ZlU3BlZWRNb2QgKz0gdGhpcy5zZWxlY3RlZEVmZmVjdC5Qb3dlcjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgLy9kYW1hZ2UgaGVhbHRoXHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoaXNEYW1hZ2luZykgdGhpcy51bml0RGFtYWdlKHRoaXMuaW5kZXgsIHRoaXMuc2VsZWN0ZWRFZmZlY3QuUG93ZXIsIDUwLCAwKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgLy9kYW1hbmdlIGFybW91clxyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmKGlzRGFtYWdpbmcpIHRoaXMudW5pdERhbWFnZSh0aGlzLmluZGV4LCAwLCAwLCB0aGlzLnNlbGVjdGVkRWZmZWN0LlBvd2VyKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL2NvdW50IGRvd24gdGltZVxyXG4gICAgICAgICAgICBpZihpc0NvdW50aW5nKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAvL2NoZWNrIGV4cGlyeVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEVmZmVjdC5MZW5ndGgtLTtcclxuICAgICAgICAgICAgICAgIGlmKHRoaXMuc2VsZWN0ZWRFZmZlY3QuTGVuZ3RoIDw9IDApXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9yZW1vdmUgc2xvd2luZ1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuc2VsZWN0ZWRFZmZlY3QuVHlwZSA9PSAwKSB0aGlzLnVuaXRNb3ZlU3BlZWRNb2QgPSAxMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9yZW1vdmUgZWZmZWN0XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVFZmZlY3RzLnJlbW92ZUl0ZW0odGhpcy5zZWxlY3RlZEVmZmVjdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vZGVmaW5lcyBhbiBhY3RpdmUgZWZmZWN0IG9uIGFuIGVuZW15XHJcbmNsYXNzIEVuZW15RW50aXR5RWZmZWN0XHJcbntcclxuICAgIHB1YmxpYyBUeXBlOm51bWJlcjtcclxuICAgIHB1YmxpYyBQb3dlcjpudW1iZXI7XHJcbiAgICBwdWJsaWMgTGVuZ3RoOm51bWJlcjtcclxuIFxyXG4gICAgLy9cclxuICAgIGNvbnN0cnVjdG9yKHR5cGU6bnVtYmVyLCBwb3dlcjpudW1iZXIsIGxlbmd0aDpudW1iZXIpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5UeXBlID0gdHlwZTtcclxuICAgICAgICB0aGlzLlBvd2VyID0gcG93ZXI7XHJcbiAgICAgICAgdGhpcy5MZW5ndGggPSBsZW5ndGg7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vXHJcbiAgICBwdWJsaWMgSW50aWFsaXplKHR5cGU6bnVtYmVyLCBwb3dlcjpudW1iZXIsIGxlbmd0aDpudW1iZXIpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5UeXBlID0gdHlwZTtcclxuICAgICAgICB0aGlzLlBvd2VyID0gcG93ZXI7XHJcbiAgICAgICAgdGhpcy5MZW5ndGggPSBsZW5ndGg7XHJcbiAgICB9XHJcbn0iLCIvKiAgICAgIEVORU1ZIE1BTkFHRVJcclxuICAgIGhhbmRsZXMgdGhlIGNyZWF0aW9uIG9mIGVuZW15IHVuaXRzIHVzZWQgaW4gdGhlIHRvd2VyIGRlZmVuY2UgZ2FtZS5cclxuICAgIHRoaXMgdW5pdHMgYXJlIHJldXNlZCB3aGVuZXZlciBwb3NzaWJsZSwgZXZlbiBjaGFuZ2luZyBtb2RlbHMgYmV0d2VlblxyXG4gICAgdW5pdCB0eXBlcy5cclxuKi9cclxuaW1wb3J0IHsgVHJpZ2dlckJveFNoYXBlIH0gZnJvbSBcIkBkY2wvZWNzLXNjZW5lLXV0aWxzXCI7XHJcbmltcG9ydCB7IExpc3QsIERpY3Rpb25hcnkgfSBmcm9tIFwic3JjL3V0aWxpdGllcy9jb2xsZWN0aW9uc1wiO1xyXG5pbXBvcnQgeyBFbmVteURhdGEgfSBmcm9tIFwiLi9kYXRhL2VuZW15LWRhdGFcIjtcclxuaW1wb3J0IHsgRW5lbXlVbml0T2JqZWN0IH0gZnJvbSBcIi4vZW5lbXktZW50aXR5XCI7XHJcbmltcG9ydCB7IEdhbWVTdGF0ZSB9IGZyb20gXCIuL2dhbWUtc3RhdGVzXCI7XHJcbmV4cG9ydCBjbGFzcyBFbmVteVVuaXRNYW5hZ2VyIGV4dGVuZHMgRW50aXR5XHJcbntcclxuICAgIC8vYWNjZXNzIHBvY2tldGluZ1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6dW5kZWZpbmVkfEVuZW15VW5pdE1hbmFnZXI7XHJcbiAgICBwdWJsaWMgc3RhdGljIGdldCBJbnN0YW5jZSgpOkVuZW15VW5pdE1hbmFnZXJcclxuICAgIHtcclxuICAgICAgICAvL2Vuc3VyZSBpbnN0YW5jZSBpcyBzZXRcclxuICAgICAgICBpZihFbmVteVVuaXRNYW5hZ2VyLmluc3RhbmNlID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBFbmVteVVuaXRNYW5hZ2VyLmluc3RhbmNlID0gbmV3IEVuZW15VW5pdE1hbmFnZXIoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBFbmVteVVuaXRNYW5hZ2VyLmluc3RhbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vbWF4IGFsbG93ZWQgY291bnQgb2YgdW5pdHMgYWxsb3dlZFxyXG4gICAgcHJpdmF0ZSBlbmVteVNpemVNYXg6bnVtYmVyID0gMTtcclxuICAgIC8vbnVtYmVyIG9mIGVuZW1pZXMgaW4gdXNlXHJcbiAgICBlbmVteVNpemVDdXI6bnVtYmVyID0gMDtcclxuICAgIC8vbnVtYmVyIG9mIGVuZW1pZXMgcmVtYWluaW5nIGluIHdhdmVcclxuICAgIGVuZW15U2l6ZVJlbWFpbmluZzpudW1iZXIgPSAwO1xyXG5cclxuICAgIC8vYWNjZXNzIGNvbGxlY3Rpb25zXHJcbiAgICAvLyAgbGlzdCBvZiBBTEwgZW5lbXkgdW5pdCBvYmplY3RzXHJcbiAgICBlbmVteUxpc3Q6TGlzdDxFbmVteVVuaXRPYmplY3Q+ID0gbmV3IExpc3Q8RW5lbXlVbml0T2JqZWN0PigpO1xyXG4gICAgLy8gIGRpY3QgYWNjZXNzIGJ5IHVuaXQgaW5kZXhcclxuICAgIGVuZW15RGljdDpEaWN0aW9uYXJ5PEVuZW15VW5pdE9iamVjdD4gPSBuZXcgRGljdGlvbmFyeTxFbmVteVVuaXRPYmplY3Q+KCk7XHJcbiAgICAvLyAgc29ydGVkIGxpc3RzIG9mIGVuZW15IG9iamVjdHMgYnkgdHlwZVxyXG4gICAgZW5lbXlUeXBlRGljdDpEaWN0aW9uYXJ5PExpc3Q8RW5lbXlVbml0T2JqZWN0Pj4gPSBuZXcgRGljdGlvbmFyeTxMaXN0PEVuZW15VW5pdE9iamVjdD4+KCk7XHJcblxyXG4gICAgLy9yZXVzYWJsZSBzaGFwZXMgZm9yIGhlYWx0aCBiYXJzXHJcbiAgICBlbmVteUhlYWx0aEJhclNoYXBlQ3VyOkdMVEZTaGFwZSA9IG5ldyBHTFRGU2hhcGUoXCJtb2RlbHMvZW5lbXkvY29yZS9oZWFsdGhEaXNwbGF5Q3VyLmdsYlwiKTtcclxuICAgIGVuZW15SGVhbHRoQmFyU2hhcGVNYXg6R0xURlNoYXBlID0gbmV3IEdMVEZTaGFwZShcIm1vZGVscy9lbmVteS9jb3JlL2hlYWx0aERpc3BsYXlNYXguZ2xiXCIpO1xyXG5cclxuICAgIC8vcmV1c2FibGUgc2hhcGUgYXR0YWNoZWQgdG8gZW5lbWllcyBmb3IgY29sbGlzaW9uXHJcbiAgICBlbmVteVRyaWdnZXJTaGFwZTpUcmlnZ2VyQm94U2hhcGUgPSBuZXcgVHJpZ2dlckJveFNoYXBlKCk7XHJcbiAgICAvL2Fzc29ydG1lbnQgb2YgYWxsIGVuZW15IG1vZGVscywgYnkgdHlwZVxyXG4gICAgZW5lbXlNb2RlbERpY3Q6RGljdGlvbmFyeTxHTFRGU2hhcGU+ID0gbmV3IERpY3Rpb25hcnk8R0xURlNoYXBlPigpO1xyXG5cclxuICAgIC8vY2FsbGJhY2tzXHJcbiAgICAvLyAgdW5pdCBhdHRhY2tcclxuICAgIHB1YmxpYyBVbml0QXR0YWNrOih2YWx1ZTpudW1iZXIpID0+IHZvaWQ7XHJcbiAgICBwcml2YXRlIHVuaXRBdHRhY2sodmFsdWU6bnVtYmVyKSB7IGxvZyhcIkVuZW15IE1hbmFnZXI6IGNhbGxiYWNrIG5vdCBzZXQgLSBzdGFydCB3YXZlXCIpOyB9XHJcbiAgICAvLyAgdW5pdCBkZWF0aFxyXG4gICAgcHVibGljIFVuaXREZWF0aDooaW5kZXg6bnVtYmVyLCByZXdhcmRlZDpib29sZWFuKSA9PiB2b2lkO1xyXG4gICAgcHJpdmF0ZSB1bml0RGVhdGgoaW5kZXg6bnVtYmVyLCByZXdhcmRlZDpib29sZWFuKSB7IGxvZyhcIkVuZW15IE1hbmFnZXI6IGNhbGxiYWNrIG5vdCBzZXQgLSB1bml0IGRlYXRoOlwiK2luZGV4LnRvU3RyaW5nKCkpOyB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBjb25zdHJ1Y3RvclxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKClcclxuICAgIHtcclxuICAgICAgICAvL29iamVjdFxyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5hZGRDb21wb25lbnQobmV3IFRyYW5zZm9ybVxyXG4gICAgICAgICh7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiBuZXcgVmVjdG9yMygwLDAsMCksXHJcbiAgICAgICAgICAgIHNjYWxlOiBuZXcgVmVjdG9yMygxLDEsMSksXHJcbiAgICAgICAgICAgIHJvdGF0aW9uOiBuZXcgUXVhdGVybmlvbigpLnNldEV1bGVyKDAsMCwwKVxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgLy9nZW5lcmF0ZSBlbmVteSB1bml0IHNoYXBlc1xyXG4gICAgICAgIGZvcih2YXIgaTpudW1iZXI9MDsgaTxFbmVteURhdGEubGVuZ3RoOyBpKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmVuZW15TW9kZWxEaWN0LmFkZEl0ZW0oaS50b1N0cmluZygpLCBuZXcgR0xURlNoYXBlKFwibW9kZWxzL2VuZW15L1wiK0VuZW15RGF0YVtpXS5PYmplY3RQYXRoK1wiLmdsYlwiKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL3NldCBmaWxsZXIgY2FsbGJhY2tzXHJcbiAgICAgICAgdGhpcy5Vbml0QXR0YWNrID0gdGhpcy51bml0QXR0YWNrO1xyXG4gICAgICAgIHRoaXMuVW5pdERlYXRoID0gdGhpcy51bml0RGVhdGg7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBpbml0aWFsaXplcyB0aGUgc3lzdGVtIGZvciBhIG5ldyBnYW1lLCBjbGVhcmluZyBhbGwgdW5pdHNcclxuICAgICAqL1xyXG4gICAgcHVibGljIEluaXRpYWxpemUoKVxyXG4gICAge1xyXG4gICAgICAgIGlmKEdhbWVTdGF0ZS5kZWJ1Z2dpbmdFbmVteSkgeyBsb2coXCJFbmVteSBNYW5hZ2VyOiAtIGluaXRpYWxpemluZy4uLlwiKTsgfVxyXG5cclxuICAgICAgICAvL3ByZS13YXJtIGFsbCBvYmplY3RzXHJcbiAgICAgICAgd2hpbGUodGhpcy5lbmVteUxpc3Quc2l6ZSgpIDwgdGhpcy5lbmVteVNpemVNYXgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLkFkZEVuZW15VW5pdCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9lbnN1cmUgZXZlcnkgdW5pdCBpcyBkaXNhYmxlZFxyXG4gICAgICAgIHRoaXMuQ2xlYXJVbml0cygpO1xyXG4gICAgICAgIGlmKEdhbWVTdGF0ZS5kZWJ1Z2dpbmdFbmVteSkgeyBsb2coXCJFbmVteSBNYW5hZ2VyOiAtIGluaXRpYWxpemVkIVxcblxcdGVuZW15IGNvdW50OiBcIit0aGlzLmVuZW15TGlzdC5zaXplKCkpOyB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBjcmVhdGVzIGEgbmV3IHVuaXQsIHJlYWR5aW5nIGl0IHRvIGJlIHVzZWQgYnkgdGhpcyBzeXN0ZW1cclxuICAgICAqL1xyXG4gICAgcHVibGljIEFkZEVuZW15VW5pdCgpXHJcbiAgICB7XHJcbiAgICAgICAgLy9jcmVhdGUgb2JqZWN0XHJcbiAgICAgICAgY29uc3QgaW5kZXg6bnVtYmVyID0gdGhpcy5lbmVteUxpc3Quc2l6ZSgpO1xyXG4gICAgICAgIGNvbnN0IG9iajpFbmVteVVuaXRPYmplY3QgPSBuZXcgRW5lbXlVbml0T2JqZWN0KGluZGV4LCB0aGlzLmVuZW15SGVhbHRoQmFyU2hhcGVDdXIsIHRoaXMuZW5lbXlUcmlnZ2VyU2hhcGUsIHRoaXMuVW5pdEF0dGFjaywgdGhpcy5Vbml0RGVhdGgsIHRoaXMuY2FsbGJhY2tLaWxsVW5pdCwgdGhpcy5jYWxsYmFja0RhbWFnZVVuaXQpO1xyXG4gICAgICAgIG9iai5zZXRQYXJlbnQodGhpcyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy9hZGQgdG8gY29sbGVjdGlvbnNcclxuICAgICAgICB0aGlzLmVuZW15TGlzdC5hZGRJdGVtKG9iaik7XHJcbiAgICAgICAgdGhpcy5lbmVteURpY3QuYWRkSXRlbShvYmouSW5kZXgudG9TdHJpbmcoKSwgb2JqKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGF0dGVtcHRzIHRvIGZpbmQgYW4gdW51c2VkL291dCBvZiB1c2UgdW5pdCBvYmplY3RcclxuICAgICAqIEByZXR1cm5zIHJlZmVyZW5jZSB0byB0aGlzIHVuaXQgb3IgdW5kZWZpbmVkIGlmIHVuaXQgd2FzIG5vdCBmb3VuZFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGl0ZXJhdGlvbkluZGV4Om51bWJlciA9IDA7XHJcbiAgICBwcml2YXRlIGl0ZXJhdGlvbkhhbHQ6bnVtYmVyID0gMDtcclxuICAgIHB1YmxpYyBHZXRFbmVteVVuaXQoKTp1bmRlZmluZWR8RW5lbXlVbml0T2JqZWN0XHJcbiAgICB7XHJcbiAgICAgICAgLy9yZXNldCBwcm9jZXNzaW5nIGluZGV4XHJcbiAgICAgICAgdGhpcy5pdGVyYXRpb25IYWx0ID0gdGhpcy5pdGVyYXRpb25JbmRleDtcclxuICAgICAgICAvL3B1c2ggbmV4dCBpbmRleFxyXG4gICAgICAgIHRoaXMuaXRlcmF0aW9uSW5kZXgrKzsgXHJcbiAgICAgICAgaWYodGhpcy5pdGVyYXRpb25JbmRleCA+PSB0aGlzLmVuZW15TGlzdC5zaXplKCkpIHsgdGhpcy5pdGVyYXRpb25JbmRleCA9IDA7IH1cclxuXHJcbiAgICAgICAgLy9wcm9jZXNzIGV2ZXJ5IHVuaXRcclxuICAgICAgICB3aGlsZSh0cnVlKVxyXG4gICAgICAgIHsgICAgICAgICAgICBcclxuICAgICAgICAgICAgLy9jaGVjayBjdXJyZW50IHVuaXRzIGZvciBhIGZyZWUgdW5pdFxyXG4gICAgICAgICAgICBpZighdGhpcy5lbmVteUxpc3QuZ2V0SXRlbSh0aGlzLml0ZXJhdGlvbkluZGV4KS5Jc0FsaXZlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbmVteUxpc3QuZ2V0SXRlbSh0aGlzLml0ZXJhdGlvbkluZGV4KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy9leGl0IGFmdGVyIGNoZWNraW5nIHRoZSBlbnRyeSBpbmRleFxyXG4gICAgICAgICAgICBpZih0aGlzLml0ZXJhdGlvbkluZGV4ID09IHRoaXMuaXRlcmF0aW9uSGFsdCkge3JldHVybiB1bmRlZmluZWQ7fVxyXG5cclxuICAgICAgICAgICAgLy9wdXNoIG5leHQgaW5kZXhcclxuICAgICAgICAgICAgdGhpcy5pdGVyYXRpb25JbmRleCsrOyBcclxuICAgICAgICAgICAgaWYodGhpcy5pdGVyYXRpb25JbmRleCA+PSB0aGlzLmVuZW15TGlzdC5zaXplKCkpIHsgdGhpcy5pdGVyYXRpb25JbmRleCA9IDA7IH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gaW5kZXggXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgcHVibGljIEdldEVuZW15VW5pdEJ5SW5kZXgoaW5kZXg6bnVtYmVyKTp1bmRlZmluZWR8RW5lbXlVbml0T2JqZWN0XHJcbiAgICB7XHJcbiAgICAgICAgaWYodGhpcy5lbmVteURpY3QuY29udGFpbnNLZXkoaW5kZXgudG9TdHJpbmcoKSkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbmVteURpY3QuZ2V0SXRlbShpbmRleC50b1N0cmluZygpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBhdHRlbXB0cyB0byByZWRlZmluZXMgYWRkIGEgdW5pdCBvZiB0aGUgZ2l2ZW4gdHlwZSBpbnRvIHRoZSBnYW1lLCBwbGFjaW5nIGl0IGluIHRoZSBlbmdpbmUgYW5kIFxyXG4gICAgICogIHN0YXJ0aW5nIGl0cyBtb3ZlbWVudCBhbG9uZyB0aGUgZ2l2ZW4gd2F5cG9pbnQgcGF0aC4gdGhpcyBmdW5jdGlvbiBwdWxscyBmcm9tIGEgbGltaXRlZCBwb29saW5nXHJcbiAgICAgKiAgb2YgdW5pdHMsIHNvIGl0IGNhbiBmYWlsIGlmIGFsbCB1bml0cyBhcmUgaW4gdXNlLlxyXG4gICAgICogQHBhcmFtIHR5cGUgaW5kZXggb2YgZGVmaW5pdGlvbiB0aGlzIHVuaXQgd2lsbCBiZSB0eXBlZCBhc1xyXG4gICAgICogQHJldHVybnMgcmVmZXJlbmNlIHRvIHRoaXMgdW5pdCBvciB1bmRlZmluZWQgaWYgdW5pdCB3YXMgbm90IGZvdW5kXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBBc3NpZ25FbmVteVVuaXQodHlwZTpudW1iZXIsIHdheXBvaW50Om51bWJlcik6dW5kZWZpbmVkfEVuZW15VW5pdE9iamVjdFxyXG4gICAge1xyXG4gICAgICAgIGlmKEdhbWVTdGF0ZS5kZWJ1Z2dpbmdFbmVteSkgeyBsb2coXCJFbmVteSBNYW5hZ2VyOiAtIGFzc2lnbmluZyBuZXcgZW5lbXkgb2YgdHlwZTogXCIrdHlwZS50b1N0cmluZygpK1wiLi4uXCIpOyB9XHJcbiAgICAgICAgLy9nZXQgb2JqZWN0XHJcbiAgICAgICAgY29uc3Qgb2JqOnVuZGVmaW5lZHxFbmVteVVuaXRPYmplY3QgPSB0aGlzLkdldEVuZW15VW5pdCgpO1xyXG5cclxuICAgICAgICBpZihvYmogPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoR2FtZVN0YXRlLmRlYnVnZ2luZ0VuZW15KSB7IGxvZyhcIkVuZW15IE1hbmFnZXI6IC0gYXNzaWdubWVudCBmYWlsZWQ6IGFsbCB1bml0cyBhcmUgdXNlZC5cIik7IH1cclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vZGlzYWJsZSBlbmVteVxyXG4gICAgICAgIG9iai5TZXRFbmdpbmVTdGF0ZShmYWxzZSk7XHJcblxyXG4gICAgICAgIC8vaW5pdGlhbGl6ZSB3aXRoIG5ldyBkYXRhXHJcbiAgICAgICAgb2JqLkluaXRpYWxpemUodHlwZSwgd2F5cG9pbnQsIHRoaXMuZW5lbXlNb2RlbERpY3QuZ2V0SXRlbSh0eXBlLnRvU3RyaW5nKCkpKTtcclxuICAgICAgICB0aGlzLmVuZW15U2l6ZUN1cisrO1xyXG5cclxuICAgICAgICAvL2Rpc2FibGUgZW5lbXlcclxuICAgICAgICBvYmouU2V0RW5naW5lU3RhdGUodHJ1ZSk7XHJcblxyXG4gICAgICAgIGlmKEdhbWVTdGF0ZS5kZWJ1Z2dpbmdFbmVteSkgeyBsb2coXCJFbmVteSBNYW5hZ2VyOiAtIGFzc2lnbmVkIG5ldyBlbmVteSFcIik7IH1cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogZGVhbHMgdGhlIGdpdmVuIGFtb3VudCBvZiBkYW1hZ2UgdG8gdGhlIGVuZW15IG9mIHRoZSBnaXZlbiBpbmRleFxyXG4gICAgICogQHBhcmFtIGluZGV4IGFjY2VzcyBpbmRleCBvZiB1bml0IHRvIGJlIGRhbWFnZWRcclxuICAgICAqIEBwYXJhbSBkYW0gYW1vdW50IG9mIGhlYWx0aCB0byBiZSByZW1vdmVkIGZyb20gdW5pdFxyXG4gICAgICogQHBhcmFtIHBlbiBhbW91bnQgb2YgYXJtb3VyIGlnbm9yZWQgd2hlbiBkZWFsaW5nIGRhbWFnZVxyXG4gICAgICogQHBhcmFtIHJlbmQgYW1vdW50IG9mIGFybW91ciB0byBiZSByZW1vdmVkIGZyb20gdW5pdFxyXG4gICAgICogQHJldHVybnMgYm9vbGVhbjogdHJ1ZSA9IHVuaXQgYWxpdmUsIGZhbHNlID0gdW5pdCBkZWFkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjYWxsYmFja0RhbWFnZVVuaXQoaW5kZXg6bnVtYmVyLCBkYW06bnVtYmVyLCBwZW46bnVtYmVyLCByZW5kOm51bWJlcik6Ym9vbGVhblxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBFbmVteVVuaXRNYW5hZ2VyLkluc3RhbmNlLkRhbWFnZVVuaXQoaW5kZXgsIGRhbSwgcGVuLCByZW5kKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBEYW1hZ2VVbml0KGluZGV4Om51bWJlciwgZGFtOm51bWJlciwgcGVuOm51bWJlciwgcmVuZDpudW1iZXIpOmJvb2xlYW5cclxuICAgIHtcclxuICAgICAgICAvL2FjY2VzcyB1bml0IGFuZCBwYXNzIGNhbGwgZG93blxyXG4gICAgICAgIHJldHVybiB0aGlzLmVuZW15RGljdC5nZXRJdGVtKGluZGV4LnRvU3RyaW5nKCkpLkFwcGx5RGFtYWdlKGRhbSwgcGVuLCByZW5kKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGFwcGxpZXMgYW4gZWZmZWN0IG9uIHRoZSBlbmVteSBvZiB0aGUgZ2l2ZW4gaW5kZXhcclxuICAgICAqIEBwYXJhbSBpbmRleCBhY2Nlc3MgaW5kZXggb2YgdW5pdFxyXG4gICAgICogQHBhcmFtIHR5cGUgdHlwZSBvZiBlZmZlY3QgYXBwbGllZFxyXG4gICAgICogQHBhcmFtIHBvd2VyIHN0cmVuZ3RoIG9mIGFwcGxpZWQgZWZmZWN0XHJcbiAgICAgKiBAcGFyYW0gbGVuZ3RoIG51bWJlciBvZiB0aWNrcyBlZmZlY3QgbGFzdHMgZm9yXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjYWxsYmFja0FwcGx5RWZmZWN0KGluZGV4Om51bWJlciwgdHlwZTpudW1iZXIsIHBvd2VyOm51bWJlciwgbGVuZ3RoOm51bWJlcilcclxuICAgIHtcclxuICAgICAgICBFbmVteVVuaXRNYW5hZ2VyLkluc3RhbmNlLkFwcGx5RWZmZWN0KGluZGV4LCB0eXBlLCBwb3dlciwgbGVuZ3RoKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBBcHBseUVmZmVjdChpbmRleDpudW1iZXIsIHR5cGU6bnVtYmVyLCBwb3dlcjpudW1iZXIsIGxlbmd0aDpudW1iZXIpXHJcbiAgICB7XHJcbiAgICAgICAgLy9hY2Nlc3MgdW5pdCBhbmQgcGFzcyBjYWxsIGRvd25cclxuICAgICAgICB0aGlzLmVuZW15RGljdC5nZXRJdGVtKGluZGV4LnRvU3RyaW5nKCkpLnVuaXRTeXN0ZW0uQWRkRWZmZWN0KHR5cGUsIHBvd2VyLCBsZW5ndGgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICoga2lsbHMgdGhlIHVuaXQgb2YgdGhlIGdpdmVuIGluZGV4XHJcbiAgICAgKiBAcGFyYW0gaW5kZXggYWNjZXNzIGluZGV4IG9mIHVuaXQgdG8gYmUga2lsbGVkXHJcbiAgICAgKiBAcGFyYW0gcmV3YXJkZWQgaWYgdHJ1ZSBwbGF5ZXIgaXMgcmV3YXJkZWQvY3JlZGl0ZWQgZm9yIGtpbGxpbmcgZW5lbXkgXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjYWxsYmFja0tpbGxVbml0KGluZGV4Om51bWJlciwgcmV3YXJkZWQ6Ym9vbGVhbilcclxuICAgIHtcclxuICAgICAgICBFbmVteVVuaXRNYW5hZ2VyLkluc3RhbmNlLktpbGxVbml0KGluZGV4LCByZXdhcmRlZCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgS2lsbFVuaXQoaW5kZXg6bnVtYmVyLCByZXdhcmRlZDpib29sZWFuKVxyXG4gICAge1xyXG4gICAgICAgIC8vYWNjZXNzIHVuaXQgYW5kIHBhc3MgY2FsbCBkb3duXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZW5lbXlEaWN0LmdldEl0ZW0oaW5kZXgudG9TdHJpbmcoKSkuS2lsbFVuaXQocmV3YXJkZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogZGlzYWJsZXMgYWxsIHVuaXRzIG9uIHRoZSBnYW1lIGZpZWxkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBDbGVhclVuaXRzKClcclxuICAgIHtcclxuICAgICAgICBmb3IodmFyIGk6bnVtYmVyPTA7IGk8dGhpcy5lbmVteUxpc3Quc2l6ZSgpOyBpKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLkNsZWFyVW5pdChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5lbmVteVNpemVDdXIgPSAwO1xyXG4gICAgICAgIHRoaXMuZW5lbXlTaXplUmVtYWluaW5nID0gMDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGNsZWFycyB0aGUgdW5pdCBvZiB0aGUgZ2l2ZW4gaW5kZXgsIHJlbW92aW5nIHRoZW0gZnJvbSB0aGUgZmllbGRcclxuICAgICAqIEBwYXJhbSBpbmRleCBhY2Nlc3MgaW5kZXggb2YgdW5pdCB0byBiZSByZW1vdmVkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBDbGVhclVuaXQoaW5kZXg6bnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIC8vdW5pdCBpcyBub3QgYmVpbmcgdXNlZFxyXG4gICAgICAgIHRoaXMuZW5lbXlEaWN0LmdldEl0ZW0oaW5kZXgudG9TdHJpbmcoKSkuSXNBbGl2ZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICAvL3JlbW92ZSB1bml0IGZyb20gZW5naW5lXHJcbiAgICAgICAgdGhpcy5lbmVteURpY3QuZ2V0SXRlbShpbmRleC50b1N0cmluZygpKS5TZXRFbmdpbmVTdGF0ZShmYWxzZSk7XHJcbiAgICB9XHJcbn0iLCIvKiAgICAgIEVORU1ZIFdBVkUgTUFOQUdFUlxyXG4gICAgZ2VuZXJhdGVzIHdhdmVzIG9mIGVuZW1pZXMgZm9yIHRoZSBnYW1lIHRvIHNwYXduIGluLiB0aGUgZnVsbFxyXG4gICAgbGlzdCBvZiB3YXZlcyB0byBiZSB1c2VkIGZvciBhIGdhbWUgYXJlIGdlbmVyYXRlZCBhdCB0aGUgc3RhcnRcclxuICAgIG9mIHRoZSBnYW1lLiB0aGlzIGFsbG93cyB0aGUgcGxheWVyIHRvIHZpZXcgYWxsIHVwY29taW5nIHdhdmVzXHJcbiAgICBhbmQgcGxhbiBmb3IgaG93IHRvIGJlc3QgY291bnRlciB0aGVtLlxyXG5cclxuICAgIGVhY2ggd2F2ZSBjb250YWlucyAyIGVuZW15IHR5cGVzIHdoaWNoIHdpbGwgYmUgc3Bhd25lZCBkdXJpbmdcclxuICAgIHRoYXQgd2F2ZS4gdGhlIHNwYXduIHByb2Nlc3MgcmFuZG9taXplcyB0aGUgb3JkZXIgb2Ygd2hpY2ggdW5pdHNcclxuICAgIGFyZSBzcGF3bmVkLiBib3NzIHdhdmVzIGFyZSBhbHNvIGd1YXJlbnRlZWQgdG8gc3Bhd24gZXZlcnkgbnVtYmVyXHJcbiAgICBvZiB3YXZlcy5cclxuKi9cclxuaW1wb3J0IHsgR2FtZVN0YXRlIH0gZnJvbSBcIi4vZ2FtZS1zdGF0ZXNcIjtcclxuaW1wb3J0IHsgRW5lbXlEYXRhIH0gZnJvbSBcIi4vZGF0YS9lbmVteS1kYXRhXCI7XHJcbmV4cG9ydCBjbGFzcyBFbmVteVdhdmVNYW5hZ2VyXHJcbntcclxuICAgIC8vYWNjZXNzIHBvY2tldGluZ1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6dW5kZWZpbmVkfEVuZW15V2F2ZU1hbmFnZXI7XHJcbiAgICBwdWJsaWMgc3RhdGljIGdldCBJbnN0YW5jZSgpOkVuZW15V2F2ZU1hbmFnZXJcclxuICAgIHtcclxuICAgICAgICAvL2Vuc3VyZSBpbnN0YW5jZSBpcyBzZXRcclxuICAgICAgICBpZihFbmVteVdhdmVNYW5hZ2VyLmluc3RhbmNlID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBFbmVteVdhdmVNYW5hZ2VyLmluc3RhbmNlID0gbmV3IEVuZW15V2F2ZU1hbmFnZXIoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBFbmVteVdhdmVNYW5hZ2VyLmluc3RhbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vdmFsdWVzIHVzZWQgdG8gZGV0ZXJtaW5lIG51bWJlciBvZiBlbmVtaWVzIGluIGVhY2ggd2F2ZVxyXG4gICAgcHJpdmF0ZSBzcGF3bkNvc3RCYXNlOm51bWJlciA9IDg7XHJcbiAgICBwcml2YXRlIHNwYXduQ29zdEdyb3d0aDpudW1iZXIgPSAwLjc1O1xyXG4gICAgLy9udW1iZXIgb2Ygd2F2ZXJzIGJldHdlZW4gYm9zcyBlbmNvdW50ZXJzXHJcbiAgICBib3NzSW50ZXJ2YWw6bnVtYmVyID0gNTtcclxuXHJcbiAgICAvL2VuZW15IHdhdmVzLCBnZW5lcmF0ZWQgZWFjaCBnYW1lIHN0YXJ0XHJcbiAgICBwcml2YXRlIGVuZW15V2F2ZXM6RW5lbXlXYXZlW10gPSBbXTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybnMgd2F2ZSBkZWZpbml0aW9uIGF0IHRoZSBnaXZlbiBhY2Nlc3MgaW5kZXhcclxuICAgICAqL1xyXG4gICAgR2V0RW5lbXlXYXZlKGluZGV4Om51bWJlcik6RW5lbXlXYXZlXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZW5lbXlXYXZlc1tpbmRleF07XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm5zIHdhdmUgZGVmaW5pdGlvbiBvZiB0aGUgY3VycmVudCB3YXZlXHJcbiAgICAgKi9cclxuICAgIEdldEVuZW15V2F2ZUN1cnJlbnQoKTpFbmVteVdhdmVcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5lbmVteVdhdmVzW0dhbWVTdGF0ZS5XYXZlQ3VyXTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKi9cclxuICAgIEdldEVuZW15VW5pdFR5cGUod2F2ZTpudW1iZXIsIGluZGV4Om51bWJlcilcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5lbmVteVdhdmVzW3dhdmVdLmVuZW15VW5pdHNbaW5kZXhdLmVuZW15SW5kZXg7XHJcbiAgICB9XHJcbiAgICBHZXRFbmVteVVuaXRDb3VudCh3YXZlOm51bWJlciwgaW5kZXg6bnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVuZW15V2F2ZXNbd2F2ZV0uZW5lbXlVbml0c1tpbmRleF0uZW5lbXlDb3VudDtcclxuICAgIH1cclxuXHJcbiAgICAvL2VuZW15IGRhdGEga2V5cyBieSB0eXBlXHJcbiAgICBwcml2YXRlIGVuZW15VHlwZXM6bnVtYmVyW11bXSA9IFtbXSxbXSxbXSxbXV07XHJcblxyXG4gICAgLy9jb25zdHJ1Y3RvclxyXG4gICAgY29uc3RydWN0b3IoKVxyXG4gICAge1xyXG4gICAgICAgIC8vcHJlLXdhcm0gd2F2ZSBjb250YWluZXJcclxuICAgICAgICB3aGlsZSh0aGlzLmVuZW15V2F2ZXMubGVuZ3RoIDwgR2FtZVN0YXRlLldhdmVNYXgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmVuZW15V2F2ZXMucHVzaChuZXcgRW5lbXlXYXZlKCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9jcmVhdGUgdHlwZS1rZXkgZGljdCBmb3IgZW5lbXkgZGVmc1xyXG4gICAgICAgIGZvcih2YXIgaTpudW1iZXI9MDsgaTxFbmVteURhdGEubGVuZ3RoOyBpKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmVuZW15VHlwZXNbRW5lbXlEYXRhW2ldLlNwYXduVHlwZV0ucHVzaChpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBnZW5lcmF0ZXMgbmV3IHVuaXQgdHlwZXMgYW5kIGNvdW50cyBmb3IgYWxsIHdhdmVzXHJcbiAgICAgKi9cclxuICAgIEdlbmVyYXRlV2F2ZXMoKVxyXG4gICAge1xyXG4gICAgICAgIGlmKEdhbWVTdGF0ZS5kZWJ1Z2dpbmdXYXZlKSBsb2coXCJnZW5lcmF0aW5nIHdhdmVzIGZvciBkaWZmaWN1bHR5XCIrR2FtZVN0YXRlLkRpZmZpY3VsdHlDdXIudG9TdHJpbmcoKStcIi4uLlwiKTtcclxuICAgICAgICAvL2dlbmVyYXRlIG5ldyB3YXZlc1xyXG4gICAgICAgIGZvcih2YXIgaTpudW1iZXI9MDsgaTxHYW1lU3RhdGUuV2F2ZU1heDsgaSsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoR2FtZVN0YXRlLmRlYnVnZ2luZ1dhdmUpIGxvZyhcImdlbmVyYXRpbmcgd2F2ZSBcIitpLnRvU3RyaW5nKCkrXCIuLi5cIik7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvL3V0aWxpdHkgZGVmaW5lcyBudW1iZXIgb2Ygc3Bhd25zIHBlciBzaXplXHJcbiAgICAgICAgICAgIHZhciB1dGlsaXR5Om51bWJlciA9IHRoaXMuc3Bhd25Db3N0QmFzZSArICh0aGlzLnNwYXduQ29zdEdyb3d0aCppKTtcclxuICAgICAgICAgICAgLy9yYW5kb21pemUgdHlwZSAoZXhjbHVkZSBib3NzKVxyXG4gICAgICAgICAgICB2YXIgdHlwZTpudW1iZXIgPSBNYXRoLmZsb29yKCh0aGlzLmVuZW15VHlwZXMubGVuZ3RoLTEpICogTWF0aC5yYW5kb20oKSk7XHJcbiAgICAgICAgICAgIC8vcmFuZG9taXplIGVuZW15IGluZGV4ZXMgKGNhbiBiZSB0aGUgc2FtZSBpbmRleClcclxuICAgICAgICAgICAgdmFyIGluZGV4MDpudW1iZXIgPSBNYXRoLmZsb29yKHRoaXMuZW5lbXlUeXBlc1t0eXBlXS5sZW5ndGggKiBNYXRoLnJhbmRvbSgpKTtcclxuICAgICAgICAgICAgdmFyIGluZGV4MTpudW1iZXIgPSBNYXRoLmZsb29yKHRoaXMuZW5lbXlUeXBlc1t0eXBlXS5sZW5ndGggKiBNYXRoLnJhbmRvbSgpKTtcclxuXHJcbiAgICAgICAgICAgIC8vcmVzaXplIGNvbnRhaW5lclxyXG4gICAgICAgICAgICB3aGlsZSh0aGlzLmVuZW15V2F2ZXNbaV0uZW5lbXlVbml0cy5sZW5ndGggPCAyKSB7IHRoaXMuZW5lbXlXYXZlc1tpXS5lbmVteVVuaXRzLnB1c2gobmV3IEVuZW15V2F2ZVVuaXQoKSk7IH1cclxuXHJcbiAgICAgICAgICAgIC8vcG9wdWxhdGUgd2F2ZSBkYXRhXHJcbiAgICAgICAgICAgIHRoaXMuZW5lbXlXYXZlc1tpXS5lbmVteVVuaXRzWzBdLmVuZW15SW5kZXggPSBpbmRleDA7XHJcbiAgICAgICAgICAgIHRoaXMuZW5lbXlXYXZlc1tpXS5lbmVteVVuaXRzWzBdLmVuZW15Q291bnQgPSBNYXRoLmZsb29yKHV0aWxpdHkvRW5lbXlEYXRhW3R5cGVdLlNwYXduQ29zdC8yKTtcclxuICAgICAgICAgICAgdGhpcy5lbmVteVdhdmVzW2ldLmVuZW15VW5pdHNbMV0uZW5lbXlJbmRleCA9IGluZGV4MTtcclxuICAgICAgICAgICAgdGhpcy5lbmVteVdhdmVzW2ldLmVuZW15VW5pdHNbMV0uZW5lbXlDb3VudCA9IE1hdGguZmxvb3IodXRpbGl0eS9FbmVteURhdGFbdHlwZV0uU3Bhd25Db3N0LzIpO1xyXG5cclxuICAgICAgICAgICAgLy9ERUJVRzogc2V0IGVuZW15IGluZGV4IHRvIGEgY2VydGFpbiB2YWx1ZVxyXG4gICAgICAgICAgICAvL3RoaXMuZW5lbXlXYXZlc1tpXS5lbmVteVVuaXRzWzBdLmVuZW15SW5kZXggPSAzO1xyXG4gICAgICAgICAgICAvL3RoaXMuZW5lbXlXYXZlc1tpXS5lbmVteVVuaXRzWzFdLmVuZW15SW5kZXggPSAzO1xyXG5cclxuICAgICAgICAgICAgLy9jaGVjayBmb3IgYm9zcyBpbnRlcnZhbFxyXG4gICAgICAgICAgICBpZihpICE9IDEgJiYgKChpKzEpJXRoaXMuYm9zc0ludGVydmFsKSA9PSAwKSBcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdHlwZSA9IDM7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVuZW15V2F2ZXNbaV0uZW5lbXlVbml0c1swXS5lbmVteUluZGV4ID0gTWF0aC5mbG9vcih0aGlzLmVuZW15VHlwZXNbdHlwZV0ubGVuZ3RoICogTWF0aC5yYW5kb20oKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVuZW15V2F2ZXNbaV0uZW5lbXlVbml0c1swXS5lbmVteUNvdW50ID0gTWF0aC5mbG9vcih1dGlsaXR5L0VuZW15RGF0YVt0eXBlXS5TcGF3bkNvc3QvMik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vZW5zdXJlIGF0IGxlYXN0IDEgZW5lbXkgZXhpc3RzIGluIHRoZSB3YXZlXHJcbiAgICAgICAgICAgIC8vICBleHBlbnNpdmUgYm9zc2VzIGNhbiBzb21ldGltZXMgc2xpcCB0aHJvdWdoIHdpdGggMCBhc3NpZ25lZCB1bml0c1xyXG4gICAgICAgICAgICBpZih0aGlzLmVuZW15V2F2ZXNbaV0uZW5lbXlVbml0c1swXS5lbmVteUNvdW50ID09IDApIHsgdGhpcy5lbmVteVdhdmVzW2ldLmVuZW15VW5pdHNbMF0uZW5lbXlDb3VudCA9IDE7IH1cclxuICAgICAgICAgICAgaWYodGhpcy5lbmVteVdhdmVzW2ldLmVuZW15VW5pdHNbMV0uZW5lbXlDb3VudCA9PSAwKSB7IHRoaXMuZW5lbXlXYXZlc1tpXS5lbmVteVVuaXRzWzFdLmVuZW15Q291bnQgPSAxOyB9XHJcbiAgICAgICAgICAgIGlmKEdhbWVTdGF0ZS5kZWJ1Z2dpbmdXYXZlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RyOnN0cmluZyA9IFwiZ2VuZXJhdGVkIHdhdmUgXCIraS50b1N0cmluZygpK1wiLCB1dGlsaXR5OiBcIit1dGlsaXR5LnRvU3RyaW5nKCkrXCIsIHR5cGU6IFwiK3R5cGUudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgIGZvcih2YXIgajpudW1iZXI9MDsgajx0aGlzLmVuZW15V2F2ZXNbaV0uZW5lbXlVbml0cy5sZW5ndGg7IGorKylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHIgKz0gXCJcXG5cXHR1bml0IGluZGV4OiBcIit0aGlzLmVuZW15V2F2ZXNbaV0uZW5lbXlVbml0c1tqXS5lbmVteUluZGV4K1wiLCBjb3VudCBcIit0aGlzLmVuZW15V2F2ZXNbaV0uZW5lbXlVbml0c1tqXS5lbmVteUNvdW50O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGxvZyhzdHIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKEdhbWVTdGF0ZS5kZWJ1Z2dpbmdXYXZlKSBsb2coXCJnZW5lcmF0ZWQgd2F2ZXMhXCIpO1xyXG4gICAgfVxyXG59XHJcbi8vY29udGFpbnMgYWxsIGVuZW15IHVuaXRzIHRvIGJlIHNwYXduZWQgZHVyaW5nIGEgd2F2ZVxyXG4vLyAgc2VwZXJhdGVkIHNvIHdlIGNhbiBhcHBseSB3YXZlIHNwZWNpZmljIG1vZGlmaWVycyBhdCBhIGxhdGVyIGRhdGVcclxuZXhwb3J0IGNsYXNzIEVuZW15V2F2ZVxyXG57XHJcbiAgICBlbmVteVVuaXRzOkVuZW15V2F2ZVVuaXRbXSA9IFtdO1xyXG59XHJcbi8vcmVwcmVzZW50cyBhIHNpbmdsZSB1bml0IHdpdGhpbiBhIHdhdmVcclxuZXhwb3J0IGNsYXNzIEVuZW15V2F2ZVVuaXRcclxue1xyXG4gICAgZW5lbXlJbmRleDpudW1iZXIgPSAwO1xyXG4gICAgZW5lbXlDb3VudDpudW1iZXIgPSAwO1xyXG59IiwiLyogICAgICBUT1dFUiBNQU5BR0VSXHJcbiAgICBtYW5hZ2VzIHRoZSBpbml0aWFsIHBsYWNlbWVudCBhbmQgaW50ZXJhY3Rpb25zIG9mIHRvd2VyIGZvdW5kYXRpb25zLlxyXG5cclxuKi9cclxuaW1wb3J0IHsgTGlzdCwgRGljdGlvbmFyeSB9IGZyb20gXCJzcmMvdXRpbGl0aWVzL2NvbGxlY3Rpb25zXCI7XHJcbmltcG9ydCB7IGNvbmZpZ1Rvd2VyLCBzZXR0aW5nVG93ZXIgfSBmcm9tIFwiLi9jb25maWcvdG93ZXItY29uZmlnXCI7XHJcbmltcG9ydCB7IGRhdGFUb3dlcnMgfSBmcm9tIFwiLi9kYXRhL3Rvd2VyLWRhdGFcIjtcclxuaW1wb3J0IHsgVG93ZXJGb3VuZGF0aW9uLCBUb3dlckZyYW1lIH0gZnJvbSBcIi4vdG93ZXItZW50aXR5XCI7XHJcbmltcG9ydCB7IEdhbWVTdGF0ZSB9IGZyb20gXCIuL2dhbWUtc3RhdGVzXCI7XHJcbmV4cG9ydCBjbGFzcyBUb3dlck1hbmFnZXIgZXh0ZW5kcyBFbnRpdHkgXHJcbntcclxuICAgIC8vYWNjZXNzIHBvY2tldGluZ1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6dW5kZWZpbmVkfFRvd2VyTWFuYWdlcjtcclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IEluc3RhbmNlKCk6VG93ZXJNYW5hZ2VyXHJcbiAgICB7XHJcbiAgICAgICAgLy9lbnN1cmUgaW5zdGFuY2UgaXMgc2V0XHJcbiAgICAgICAgaWYoVG93ZXJNYW5hZ2VyLmluc3RhbmNlID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBUb3dlck1hbmFnZXIuaW5zdGFuY2UgPSBuZXcgVG93ZXJNYW5hZ2VyKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gVG93ZXJNYW5hZ2VyLmluc3RhbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vY29sbGVjdGlvbnNcclxuICAgIC8vICB3YXlwb2ludHNcclxuICAgIFRvd2VyRm91bmRhdGlvbkxpc3Q6TGlzdDxUb3dlckZvdW5kYXRpb24+ID0gbmV3IExpc3Q8VG93ZXJGb3VuZGF0aW9uPigpO1xyXG4gICAgVG93ZXJGb3VuZGF0aW9uRGljdDpEaWN0aW9uYXJ5PFRvd2VyRm91bmRhdGlvbj4gPSBuZXcgRGljdGlvbmFyeTxUb3dlckZvdW5kYXRpb24+KCk7XHJcblxyXG4gICAgLy9zaGFwZXMgZm9yIGRpZmZlcmVudCB0b3dlciBwaWVjZXNcclxuICAgIFRvd2VyU2hhcGVGb3VuZGF0aW9uOkdMVEZTaGFwZSA9IG5ldyBHTFRGU2hhcGUoXCJtb2RlbHMvdG93ZXIvY29yZS9Ub3dlckZvdW5kYXRpb24uZ2xiXCIpO1xyXG4gICAgVG93ZXJTaGFwZVN0cnVjdHVyZTpHTFRGU2hhcGUgPSBuZXcgR0xURlNoYXBlKFwibW9kZWxzL3Rvd2VyL2NvcmUvVG93ZXJTdHJ1Y3R1cmUuZ2xiXCIpO1xyXG4gICAgVG93ZXJTaGFwZUdpbWJhbDpHTFRGU2hhcGUgPSBuZXcgR0xURlNoYXBlKFwibW9kZWxzL3Rvd2VyL2NvcmUvVG93ZXJHaW1iYWwuZ2xiXCIpO1xyXG4gICAgVG93ZXJTaGFwZVJhbmdlOkdMVEZTaGFwZSA9IG5ldyBHTFRGU2hhcGUoXCJtb2RlbHMvdG93ZXIvY29yZS9Ub3dlclJhbmdlSW5kaWNhdG9yLmdsYlwiKTtcclxuICAgIFRvd2VyU2hhcGVGcmFtZXM6R0xURlNoYXBlW10gPSBbXTtcclxuXHJcbiAgICAvL05PVEU6IHByb3RvdHlwZSBmb3IgbW9kdWxhciBtYXRlcmlhbHMgd2hpY2ggc2hvdWxkIHNhdmUgYSBidW5kbGUgb2Ygc2NlbmUgcmVzb3VyY2VzIGluIHRoZSBmdXR1cmUgaWYgcHVzaGVkIHRvIGFsbCB0b3dlciBzaGFwZSB0eXBlc1xyXG4gICAgLy9jYWxsYmFjayBhY2Nlc3MgZm9yIHRvd2VyIHNoYXBlc1xyXG4gICAgcHVibGljIGNhbGxiYWNrR2V0VG93ZXJTaGFwZSh0eXBlOm51bWJlciwgaW5kZXg6bnVtYmVyKTpHTFRGU2hhcGVcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gVG93ZXJNYW5hZ2VyLkluc3RhbmNlLkdldFRvd2VyU2hhcGUodHlwZSwgaW5kZXgpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIEdldFRvd2VyU2hhcGUodHlwZTpudW1iZXIsIGluZGV4Om51bWJlcik6R0xURlNoYXBlXHJcbiAgICB7XHJcbiAgICAgICAgLy9yZXR1cm4gY29yZSBzaGFwZVxyXG4gICAgICAgIGlmKHR5cGUgPT0gMClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHN3aXRjaChpbmRleClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gdGhpcy5Ub3dlclNoYXBlRm91bmRhdGlvbjtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIHRoaXMuVG93ZXJTaGFwZVN0cnVjdHVyZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIHRoaXMuVG93ZXJTaGFwZUdpbWJhbDtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRoaXMuVG93ZXJTaGFwZVJhbmdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL3JldHVybiBmcmFtZSBzaGFwZVxyXG4gICAgICAgIHJldHVybiB0aGlzLlRvd2VyU2hhcGVGcmFtZXNbaW5kZXhdO1xyXG4gICAgfVxyXG5cclxuICAgIC8qIHByb2NlZHVyYWwgbWF0ZXJpYWxzLCBub3Qgd29ya2luZyBmb3IgY3VzdG9tIHNoYXBlc1xyXG4gICAgLy9tYXRlcmlhbCBwaWVjZXNcclxuICAgIFRvd2VyQ29yZVRleHR1cmVDb2xvdXI6VGV4dHVyZSA9IG5ldyBUZXh0dXJlKFwibWF0ZXJpYWxzL1Rvd2VyU3RydWN0dXJlX2NvbG9yLnBuZ1wiKTtcclxuICAgIFRvd2VyQ29yZVRleHR1cmVFbWlzc2lvbjpUZXh0dXJlID0gbmV3IFRleHR1cmUoXCJtYXRlcmlhbHMvVG93ZXJTdHJ1Y3R1cmVfZW1pc3Npb24ucG5nXCIpO1xyXG4gICAgVG93ZXJDb3JlVGV4dHVyZU5vcm1hbDpUZXh0dXJlID0gbmV3IFRleHR1cmUoXCJtYXRlcmlhbHMvVG93ZXJTdHJ1Y3R1cmVfbm9ybWFsLnBuZ1wiKTtcclxuICAgIFRvd2VyQ29yZU1hdGVyaWFsOk1hdGVyaWFsID0gbmV3IE1hdGVyaWFsKCk7XHJcblxyXG4gICAgLy9jYWxsYmFjayBhY2Nlc3MgZm9yIHRvd2VyIG1hdGVyaWFsc1xyXG4gICAgcHVibGljIGNhbGxiYWNrR2V0VG93ZXJNYXRlcmlhbCh0eXBlOm51bWJlciwgaW5kZXg6bnVtYmVyKTpNYXRlcmlhbFxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBUb3dlck1hbmFnZXIuSW5zdGFuY2UuR2V0VG93ZXJNYXRlcmlhbCh0eXBlLCBpbmRleCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgR2V0VG93ZXJNYXRlcmlhbCh0eXBlOm51bWJlciwgaW5kZXg6bnVtYmVyKTpNYXRlcmlhbFxyXG4gICAge1xyXG4gICAgICAgIC8vcmV0dXJuIGNvcmUgbWF0ZXJpYWxcclxuICAgICAgICByZXR1cm4gdGhpcy5Ub3dlckNvcmVNYXRlcmlhbDtcclxuICAgIH1cclxuICAgICovXHJcblxyXG4gICAgLy9jYWxsYmFja3NcclxuICAgIC8vICBzZWxlY3RlZCB0b3dlciBmb3Igc3dhcFxyXG4gICAgcHVibGljIEdldFNlbGVjdGVkVG93ZXJNb3ZlOigpID0+IHVuZGVmaW5lZHxUb3dlckZvdW5kYXRpb247XHJcbiAgICBwcml2YXRlIGdldFNlbGVjdGVkVG93ZXJNb3ZlKCkgeyBsb2coXCJ0b3dlciBtYW5hZ2VyIGNhbGxiYWNrIG5vdCBzZXQgLSBnZXQgc2VsZWN0ZWQgdG93ZXIgc3dhcFwiKTsgcmV0dXJuIHVuZGVmaW5lZDsgfVxyXG4gICAgLy8gIHRvd2VyIHNlbGVjdGlvblxyXG4gICAgcHVibGljIE1vdmVUb3dlcjooaW5kZXg6bnVtYmVyKSA9PiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBtb3ZlVG93ZXIoaW5kZXg6bnVtYmVyKSB7IGxvZyhcInRvd2VyIG1hbmFnZXIgY2FsbGJhY2sgbm90IHNldCAtIHNlbGVjdCB0b3dlciAoXCIraW5kZXgudG9TdHJpbmcoKStcIilcIik7IH1cclxuICAgIC8vICBzZWxlY3RlZCB0b3dlciBmb3IgZWRpdFxyXG4gICAgcHVibGljIEdldFNlbGVjdGVkVG93ZXI6KCkgPT4gdW5kZWZpbmVkfFRvd2VyRm91bmRhdGlvbjtcclxuICAgIHByaXZhdGUgZ2V0U2VsZWN0ZWRUb3dlcigpIHsgbG9nKFwidG93ZXIgbWFuYWdlciBjYWxsYmFjayBub3Qgc2V0IC0gZ2V0IHNlbGVjdGVkIHRvd2VyXCIpOyByZXR1cm4gdW5kZWZpbmVkOyB9XHJcbiAgICAvLyAgdG93ZXIgc2VsZWN0aW9uXHJcbiAgICBwdWJsaWMgU2VsZWN0VG93ZXI6KGluZGV4Om51bWJlcikgPT4gdm9pZDtcclxuICAgIHByaXZhdGUgc2VsZWN0VG93ZXIoaW5kZXg6bnVtYmVyKSB7IGxvZyhcInRvd2VyIG1hbmFnZXIgY2FsbGJhY2sgbm90IHNldCAtIHNlbGVjdCB0b3dlciAoXCIraW5kZXgudG9TdHJpbmcoKStcIilcIik7IH1cclxuICAgIC8vICBlbmVteSBkYW1hZ2VkXHJcbiAgICBwdWJsaWMgRGFtYWdlRW5lbXk6KGluZGV4Om51bWJlciwgZGFtOm51bWJlciwgcGVuOm51bWJlciwgcmVuZDpudW1iZXIpID0+IHZvaWQ7XHJcbiAgICBwcml2YXRlIGRhbWFnZUVuZW15KGluZGV4Om51bWJlciwgZGFtOm51bWJlciwgcGVuOm51bWJlciwgcmVuZDpudW1iZXIpIHsgbG9nKFwidG93ZXIgbWFuYWdlciBjYWxsYmFjayBub3Qgc2V0IC0gZGFtYWdlIGVuZW15IChcIitpbmRleC50b1N0cmluZygpK1wiKVwiKTsgfVxyXG4gICAgLy8gIGFwcGx5IGVmZmVjdFxyXG4gICAgcHVibGljIEFwcGx5RWZmZWN0OihpbmRleDpudW1iZXIsIHR5cGU6bnVtYmVyLCBwb3dlcjpudW1iZXIsIGxlbmd0aDpudW1iZXIpID0+IHZvaWQ7XHJcbiAgICBwcml2YXRlIGFwcGx5RWZmZWN0KGluZGV4Om51bWJlciwgdHlwZTpudW1iZXIsIHBvd2VyOm51bWJlciwgbGVuZ3RoOm51bWJlcikgeyBsb2coXCJ0b3dlciBtYW5hZ2VyIGNhbGxiYWNrIG5vdCBzZXQgLSBhcHBseSBlZmZlY3Q6XCIraW5kZXgudG9TdHJpbmcoKSk7IH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGNvbnN0cnVjdG9yXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKClcclxuICAgIHtcclxuICAgICAgICAvL29iamVjdFxyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5hZGRDb21wb25lbnQobmV3IFRyYW5zZm9ybVxyXG4gICAgICAgICh7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiBuZXcgVmVjdG9yMygwLDAsMCksXHJcbiAgICAgICAgICAgIHNjYWxlOiBuZXcgVmVjdG9yMygxLDEsMSksXHJcbiAgICAgICAgICAgIHJvdGF0aW9uOiBuZXcgUXVhdGVybmlvbigpLnNldEV1bGVyKDAsMCwwKVxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgLy90b3dlciBtb3ZlIG1hcmtlclxyXG4gICAgICAgIHRoaXMudG93ZXJNb3ZlTWFya2VyID0gbmV3IEVudGl0eSgpO1xyXG4gICAgICAgIHRoaXMudG93ZXJNb3ZlTWFya2VyLmFkZENvbXBvbmVudChuZXcgVHJhbnNmb3JtXHJcbiAgICAgICAgKHtcclxuICAgICAgICAgICAgcG9zaXRpb246IG5ldyBWZWN0b3IzKDAsMCwwKSxcclxuICAgICAgICAgICAgc2NhbGU6IG5ldyBWZWN0b3IzKDAuNSwwLjUsMC41KSxcclxuICAgICAgICAgICAgcm90YXRpb246IG5ldyBRdWF0ZXJuaW9uKCkuc2V0RXVsZXIoMCwwLDApXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIHRoaXMudG93ZXJNb3ZlTWFya2VyLnNldFBhcmVudCh0aGlzKTtcclxuICAgICAgICB0aGlzLnRvd2VyTW92ZU1hcmtlci5hZGRDb21wb25lbnQobmV3IEdMVEZTaGFwZShcIm1vZGVscy90b3dlci9jb3JlL1Rvd2VyU3RydWN0dXJlU2VsZWN0LmdsYlwiKSk7XHJcbiAgICAgICAgdGhpcy50b3dlck1vdmVNYXJrZXIuZ2V0Q29tcG9uZW50KEdMVEZTaGFwZSkuaXNQb2ludGVyQmxvY2tlciA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMudG93ZXJNb3ZlTWFya2VyLmdldENvbXBvbmVudChHTFRGU2hhcGUpLndpdGhDb2xsaXNpb25zID0gZmFsc2U7XHJcbiAgICAgICAgZW5naW5lLnJlbW92ZUVudGl0eSh0aGlzLnRvd2VyTW92ZU1hcmtlcik7XHJcblxyXG4gICAgICAgIC8qIHByb2NlZHVyYWwgbWF0ZXJpYWxzLCBub3Qgd29ya2luZyBmb3IgY3VzdG9tIHNoYXBlc1xyXG4gICAgICAgIC8vYnVpbGQgY29yZSBzaGFwZXNcclxuICAgICAgICB0aGlzLlRvd2VyQ29yZU1hdGVyaWFsLmFsYmVkb1RleHR1cmUgPSB0aGlzLlRvd2VyQ29yZVRleHR1cmVDb2xvdXI7XHJcbiAgICAgICAgdGhpcy5Ub3dlckNvcmVNYXRlcmlhbC5lbWlzc2l2ZVRleHR1cmUgPSB0aGlzLlRvd2VyQ29yZVRleHR1cmVFbWlzc2lvbjtcclxuICAgICAgICB0aGlzLlRvd2VyQ29yZU1hdGVyaWFsLmJ1bXBUZXh0dXJlID0gdGhpcy5Ub3dlckNvcmVUZXh0dXJlTm9ybWFsO1xyXG4gICAgICAgICovXHJcblxyXG4gICAgICAgIC8vZ2VuZXJhdGUgdG93ZXIgZnJhbWUgc2hhcGVzXHJcbiAgICAgICAgZm9yKHZhciBpOm51bWJlciA9IDA7IGk8ZGF0YVRvd2Vycy5sZW5ndGg7IGkrKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuVG93ZXJTaGFwZUZyYW1lcy5wdXNoKG5ldyBHTFRGU2hhcGUoXCJtb2RlbHMvdG93ZXIvXCIrZGF0YVRvd2Vyc1tpXS5QYXRoK1wiLmdsYlwiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vc2V0IGZpbGxlciBjYWxsYmFja3NcclxuICAgICAgICAvLyAgbW92ZSB0b3dlclxyXG4gICAgICAgIHRoaXMuR2V0U2VsZWN0ZWRUb3dlck1vdmUgPSB0aGlzLmdldFNlbGVjdGVkVG93ZXJNb3ZlO1xyXG4gICAgICAgIHRoaXMuTW92ZVRvd2VyID0gdGhpcy5tb3ZlVG93ZXI7XHJcbiAgICAgICAgLy8gIHNlbGVjdCB0b3dlclxyXG4gICAgICAgIHRoaXMuR2V0U2VsZWN0ZWRUb3dlciA9IHRoaXMuZ2V0U2VsZWN0ZWRUb3dlcjtcclxuICAgICAgICB0aGlzLlNlbGVjdFRvd2VyID0gdGhpcy5zZWxlY3RUb3dlcjtcclxuICAgICAgICAvLyAgZGFtYWdlIGVuZW15XHJcbiAgICAgICAgdGhpcy5EYW1hZ2VFbmVteSA9IHRoaXMuZGFtYWdlRW5lbXk7XHJcbiAgICAgICAgdGhpcy5BcHBseUVmZmVjdCA9IHRoaXMuYXBwbHlFZmZlY3Q7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBnZW5lcmF0ZXMgdG93ZXIgZm91bmRhdGlvbnMsIGxvYWRpbmcgZnJvbSBkZWZzIHN0b3JlZCBpbiB0b3dlci1jb25maWdcclxuICAgICovXHJcbiAgICBwcml2YXRlIGluZGV4Om51bWJlciA9IDA7XHJcbiAgICBwcml2YXRlIGdldEluZGV4KCk6bnVtYmVyIHsgcmV0dXJuIHRoaXMuaW5kZXgrKzsgfVxyXG4gICAgcHVibGljIEdlbmVyYXRlVG93ZXJGb3VuZGF0aW9ucygpXHJcbiAgICB7XHJcbiAgICAgICAgLy9wYXJzZSBhbGwgdG93ZXIgZm91bmRhdGlvbiBncmlkc1xyXG4gICAgICAgIGlmKEdhbWVTdGF0ZS5kZWJ1Z2dpbmdUb3dlcikgbG9nKFwiZ2VuZXJhdGluZyB0b3dlciBmb3VuZGF0aW9uIG9iamVjdHMuLi5cIik7XHJcbiAgICAgICAgZm9yKHZhciBpOm51bWJlcj0wOyBpPGNvbmZpZ1Rvd2VyLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy9wYXJzZSBlYWNoIGJsb2NrIGluIGdyaWRcclxuICAgICAgICAgICAgZm9yKHZhciB4Om51bWJlcj0wOyB4PGNvbmZpZ1Rvd2VyW2ldLkdyaWRTaXplWzBdOyB4KyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGZvcih2YXIgejpudW1iZXI9MDsgejxjb25maWdUb3dlcltpXS5HcmlkU2l6ZVsxXTsgeisrKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gaTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwb3NYID0geDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwb3NaID0gejtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9jcmVhdGUgYW5kIHBvc2l0aW9uIHRvd2VyIGZvdW5kYXRpb24gb2JqZWN0XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZm91bmRhdGlvbjpUb3dlckZvdW5kYXRpb24gPSBuZXcgVG93ZXJGb3VuZGF0aW9uKHRoaXMuZ2V0SW5kZXgoKSwgdGhpcy5nZXRTZWxlY3RlZFRvd2VyLCB0aGlzLmNhbGxiYWNrR2V0VG93ZXJTaGFwZSwgdGhpcy5Ub3dlclJhbmdlRW5lbXlFbnRlciwgdGhpcy5Ub3dlclJhbmdlRW5lbXlFeGl0KTtcclxuICAgICAgICAgICAgICAgICAgICBmb3VuZGF0aW9uLnNldFBhcmVudCh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgcG9zaXRpb25cclxuICAgICAgICAgICAgICAgICAgICBmb3VuZGF0aW9uLmdldENvbXBvbmVudChUcmFuc2Zvcm0pLnBvc2l0aW9uID0gbmV3IFZlY3RvcjNcclxuICAgICAgICAgICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdUb3dlclswXS5mb3VuZGF0aW9uT2Zmc2V0WzBdICsgY29uZmlnVG93ZXJbaW5kZXhdLkdyaWRMb2NhdGlvblswXSArIChzZXR0aW5nVG93ZXJbMF0uZm91bmRhdGlvblNwYWNpbmdbMF0gKiBwb3NYKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ1Rvd2VyWzBdLmZvdW5kYXRpb25PZmZzZXRbMV0gKyBjb25maWdUb3dlcltpbmRleF0uR3JpZExvY2F0aW9uWzFdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nVG93ZXJbMF0uZm91bmRhdGlvbk9mZnNldFsyXSArIGNvbmZpZ1Rvd2VyW2luZGV4XS5HcmlkTG9jYXRpb25bMl0gKyAoc2V0dGluZ1Rvd2VyWzBdLmZvdW5kYXRpb25TcGFjaW5nWzFdICogcG9zWiksXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgc2NhbGVcclxuICAgICAgICAgICAgICAgICAgICBmb3VuZGF0aW9uLmdldENvbXBvbmVudChUcmFuc2Zvcm0pLnNjYWxlID0gbmV3IFZlY3RvcjNcclxuICAgICAgICAgICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdUb3dlclswXS5mb3VuZGF0aW9uU2NhbGVbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdUb3dlclswXS5mb3VuZGF0aW9uU2NhbGVbMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdUb3dlclswXS5mb3VuZGF0aW9uU2NhbGVbMl1cclxuICAgICAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2FkZCBmb3VuZGF0aW9uIHRvIGNvbGxlY3Rpb25zXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5Ub3dlckZvdW5kYXRpb25MaXN0LmFkZEl0ZW0oZm91bmRhdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5Ub3dlckZvdW5kYXRpb25EaWN0LmFkZEl0ZW0oZm91bmRhdGlvbi5JbmRleC50b1N0cmluZygpLCBmb3VuZGF0aW9uKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9jcmVhdGUgZm91bmRhdGlvbiBrZXkgaW50ZXJhY3Rpb25zXHJcbiAgICAgICAgICAgICAgICAgICAgZm91bmRhdGlvbi5hZGRDb21wb25lbnRcclxuICAgICAgICAgICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBPblBvaW50ZXJEb3duXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChlKSA9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vRSAtIGF0dGVtcHQgdG8gc2VsZWN0IHRvd2VyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZS5idXR0b25JZCA9PSAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5TZWxlY3RUb3dlcihmb3VuZGF0aW9uLkluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9GIC0gYXR0ZW1wdCB0byBtb3ZlIHRvd2VyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihlLmJ1dHRvbklkID09IDIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLk1vdmVUb3dlcihmb3VuZGF0aW9uLkluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbjogQWN0aW9uQnV0dG9uLkFOWSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93RmVlZGJhY2s6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG92ZXJUZXh0OiBcIltFXSBFZGl0IFRvd2VyXFxuW0ZdIE1vdmUgVG93ZXJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZTogMTZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vbGluayBkYW1hZ2UgZnVuY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICBmb3VuZGF0aW9uLlRvd2VyRnJhbWUuVG93ZXJTeXN0ZW0uRGFtYWdlRW5lbXkgPSB0aGlzLkRhbWFnZUVuZW15O1xyXG4gICAgICAgICAgICAgICAgICAgIGZvdW5kYXRpb24uVG93ZXJGcmFtZS5Ub3dlclN5c3RlbS5BcHBseUVmZmVjdCA9IHRoaXMuQXBwbHlFZmZlY3Q7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoR2FtZVN0YXRlLmRlYnVnZ2luZ1Rvd2VyKSBsb2coXCJnZW5lcmF0ZWQgdG93ZXIgZm91bmRhdGlvbiBvYmplY3RzLCBjb3VudDogXCIrdGhpcy5Ub3dlckZvdW5kYXRpb25MaXN0LnNpemUoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBwbGFjZXMgdGhlIG1vdmUgc2VsZWN0aW9uIG1hcmtlciBhIHRoZSBnaXZlbiBmb3VuZGF0aW9uXHJcbiAgICAgKiBpZiBubyBmb3VuZGF0aW9uIGlzIGZvdW5kLCBtYXJrZXIgaXMgaGlkZGVuIFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHRvd2VyTW92ZU1hcmtlcjpFbnRpdHk7XHJcbiAgICBwdWJsaWMgU2V0VG93ZXJNb3ZlTWFya2VyKGluZGV4Om51bWJlcilcclxuICAgIHtcclxuICAgICAgICBjb25zdCB0b3dlckZvdW5kYXRpb246dW5kZWZpbmVkfFRvd2VyRm91bmRhdGlvbiA9IHRoaXMuVG93ZXJGb3VuZGF0aW9uRGljdC5nZXRJdGVtKGluZGV4LnRvU3RyaW5nKCkpO1xyXG5cclxuICAgICAgICAvL2lmIGZvdW5kYXRpb24gZXhpc3RzXHJcbiAgICAgICAgaWYodG93ZXJGb3VuZGF0aW9uICE9IHVuZGVmaW5lZClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vY2hlY2sgZW5naW5lIHN0YXRlXHJcbiAgICAgICAgICAgIGlmKCF0aGlzLnRvd2VyTW92ZU1hcmtlci5pc0FkZGVkVG9FbmdpbmUoKSlcclxuICAgICAgICAgICAgZW5naW5lLmFkZEVudGl0eSh0aGlzLnRvd2VyTW92ZU1hcmtlcik7XHJcblxyXG4gICAgICAgICAgICAvL3Bvc2l0aW9uIG1hcmtlclxyXG4gICAgICAgICAgICB0aGlzLnRvd2VyTW92ZU1hcmtlci5nZXRDb21wb25lbnQoVHJhbnNmb3JtKS5wb3NpdGlvbiA9IG5ldyBWZWN0b3IzXHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgIHRvd2VyRm91bmRhdGlvbi5nZXRDb21wb25lbnQoVHJhbnNmb3JtKS5wb3NpdGlvbi54LFxyXG4gICAgICAgICAgICAgICAgdG93ZXJGb3VuZGF0aW9uLmdldENvbXBvbmVudChUcmFuc2Zvcm0pLnBvc2l0aW9uLnksXHJcbiAgICAgICAgICAgICAgICB0b3dlckZvdW5kYXRpb24uZ2V0Q29tcG9uZW50KFRyYW5zZm9ybSkucG9zaXRpb24uelxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL2lmIGZvdW5kYXRpb24gZG9lcyBub3QgZXhpc3RcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvL2NoZWNrIGVuZ2luZSBzdGF0ZVxyXG4gICAgICAgICAgICBpZih0aGlzLnRvd2VyTW92ZU1hcmtlci5pc0FkZGVkVG9FbmdpbmUoKSlcclxuICAgICAgICAgICAgZW5naW5lLnJlbW92ZUVudGl0eSh0aGlzLnRvd2VyTW92ZU1hcmtlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHVibGljIFNldFRvd2VyTW92ZU1hcmtlclN0YXRlKHN0YXRlOmJvb2xlYW4pXHJcbiAgICB7XHJcbiAgICAgICAgLy9jaGVjayBlbmdpbmUgc3RhdGVcclxuICAgICAgICBpZihzdGF0ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKCF0aGlzLnRvd2VyTW92ZU1hcmtlci5pc0FkZGVkVG9FbmdpbmUoKSlcclxuICAgICAgICAgICAgZW5naW5lLmFkZEVudGl0eSh0aGlzLnRvd2VyTW92ZU1hcmtlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKHRoaXMudG93ZXJNb3ZlTWFya2VyLmlzQWRkZWRUb0VuZ2luZSgpKVxyXG4gICAgICAgICAgICBlbmdpbmUucmVtb3ZlRW50aXR5KHRoaXMudG93ZXJNb3ZlTWFya2VyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSB0YXJnZXQxIFxyXG4gICAgICogQHBhcmFtIHRhcmdldDIgXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZm91bmRhdGlvblN3YXA6dW5kZWZpbmVkfFRvd2VyRnJhbWU7XHJcbiAgICBwcml2YXRlIGZvdW5kYXRpb25UZW1wczpUb3dlckZvdW5kYXRpb25bXSA9IFtdO1xyXG4gICAgcHVibGljIE1vdmVUb3dlck9iamVjdCh0YXJnZXQxOm51bWJlciwgdGFyZ2V0MjpudW1iZXIpXHJcbiAgICB7XHJcbiAgICAgICAgLy9zdG9yZSB0b3dlciBkZXRhaWxzXHJcbiAgICAgICAgdGhpcy5mb3VuZGF0aW9uVGVtcHMgPSBbdGhpcy5Ub3dlckZvdW5kYXRpb25EaWN0LmdldEl0ZW0odGFyZ2V0MS50b1N0cmluZygpKSwgdGhpcy5Ub3dlckZvdW5kYXRpb25EaWN0LmdldEl0ZW0odGFyZ2V0Mi50b1N0cmluZygpKV07XHJcbiAgICAgICAgdGhpcy5mb3VuZGF0aW9uU3dhcCA9IHRoaXMuZm91bmRhdGlvblRlbXBzWzBdLlRvd2VyRnJhbWU7XHJcblxyXG4gICAgICAgIC8vcHVzaCBzZWNvbmQgdG8gZmlyc3RcclxuICAgICAgICB0aGlzLmZvdW5kYXRpb25UZW1wc1swXS5TZXRUb3dlckZyYW1lKHRoaXMuZm91bmRhdGlvblRlbXBzWzFdLlRvd2VyRnJhbWUpO1xyXG4gICAgICAgIC8vcHVzaCBzd2FwIHRvIHNlY29uZFxyXG4gICAgICAgIHRoaXMuZm91bmRhdGlvblRlbXBzWzFdLlNldFRvd2VyRnJhbWUodGhpcy5mb3VuZGF0aW9uU3dhcCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBidWlsZHMgYSB0b3dlciBvZiB0aGUgZ2l2ZW4gdHlwZSBvbiB0aGUgZm91bmRhdGlvbiBvZiB0aGUgZ2l2ZW4gaW5kZXhcclxuICAgICAqIEBwYXJhbSBpbmRleCBpbmRleCBvZiB0YXJnZXRlZCB0b3dlciBmb3VuZGF0aW9uXHJcbiAgICAgKiBAcGFyYW0gdHlwZSBpbmRleCBvZiB0YXJnZXRlZCB0b3dlciBkZWZcclxuICAgICAqL1xyXG4gICAgcHVibGljIEJ1aWxkVG93ZXIoaW5kZXg6bnVtYmVyLCB0eXBlOm51bWJlcilcclxuICAgIHtcclxuICAgICAgICBpZihHYW1lU3RhdGUuZGVidWdnaW5nVG93ZXIpIHsgbG9nKFwiVG93ZXIgTWFuYWdlcjogYnVpbGRpbmcgdG93ZXIgXCIrdHlwZS50b1N0cmluZygpK1wiIG9uIGZvdW5kYXRpb24gXCIraW5kZXgudG9TdHJpbmcoKSk7IH1cclxuICAgICAgICBcclxuICAgICAgICAvL3Bhc3MgY29tbWFuZCBkb3duXHJcbiAgICAgICAgdGhpcy5Ub3dlckZvdW5kYXRpb25EaWN0LmdldEl0ZW0oaW5kZXgudG9TdHJpbmcoKSkuVG93ZXJGcmFtZS5TZXRUb3dlcih0eXBlLCB0aGlzLlRvd2VyU2hhcGVGcmFtZXNbdHlwZV0pXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiByZXNldHMgYWxsIHRvd2VyIGZvdW5kYXRpb25zLCBjbGVhcmluZyB0aGVpciBjb25zdHJ1Y3RlZCB0b3dlciBmcmFtZXMgYW5kIHVwZ3JhZGVzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBDbGVhclRvd2VycygpXHJcbiAgICB7XHJcbiAgICAgICAgZm9yKHZhciBpOm51bWJlcj0wOyBpPHRoaXMuVG93ZXJGb3VuZGF0aW9uTGlzdC5zaXplKCk7IGkrKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuQ2xlYXJUb3dlcihpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBjbGVhcnMgYW55IGV4aXN0aW5nIHRvd2VyIGZyb20gdGhlIGdpdmVuIGZvdW5kYXRpb24sIHJlc2V0dGluZyB0byBkZWZhdWx0XHJcbiAgICAgKiBAcGFyYW0gaW5kZXggaW5kZXggb2YgdGFyZ2V0ZWQgdG93ZXIgZm91bmRhdGlvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgQ2xlYXJUb3dlcihpbmRleDpudW1iZXIsIHJlZnVuZDpib29sZWFuPWZhbHNlKVxyXG4gICAge1xyXG4gICAgICAgIGlmKHJlZnVuZClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vcmV0dXJuIHRvd2VyJ3MgY29zdCB0byBwbGF5ZXIncyBtb25leVxyXG4gICAgICAgICAgICBHYW1lU3RhdGUuUGxheWVyTW9uZXkgKz0gZGF0YVRvd2Vyc1t0aGlzLlRvd2VyRm91bmRhdGlvbkxpc3QuZ2V0SXRlbShpbmRleCkuVG93ZXJGcmFtZS5Ub3dlckRlZl0uVmFsdWVDb3N0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5Ub3dlckZvdW5kYXRpb25MaXN0LmdldEl0ZW0oaW5kZXgpLlRvd2VyRnJhbWUuSW5pdGlhbGl6ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogY2FsbGVkIHdoZW4gYW4gZW5lbXkgb2JqZWN0IGVudGVycyBhIHRvd2VyJ3MgcmFuZ2VcclxuICAgICAqIEBwYXJhbSB0b3dlckluZGV4IGluZGV4IG9mIHRhcmdldGVkIHRvd2VyIGZvdW5kYXRpb25cclxuICAgICAqIEBwYXJhbSBlbmVteUluZGV4IGluZGV4IG9mIHRhcmdldGVkIGVuZW15IG9iamVjdFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgVG93ZXJSYW5nZUVuZW15RW50ZXIodG93ZXJJbmRleDpudW1iZXIsIGVuZW15SW5kZXg6bnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIFRvd2VyTWFuYWdlci5JbnN0YW5jZS5Ub3dlckZvdW5kYXRpb25EaWN0LmdldEl0ZW0odG93ZXJJbmRleC50b1N0cmluZygpKS5Ub3dlckZyYW1lLkVuZW15RW50ZXIoZW5lbXlJbmRleCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBjYWxsZWQgd2hlbiBhbiBlbmVteSBvYmplY3QgdW5pdCBleGl0cyBhIHRvd2VyJ3MgcmFuZ2VcclxuICAgICAqIEBwYXJhbSB0b3dlckluZGV4IGluZGV4IG9mIHRhcmdldGVkIHRvd2VyIGZvdW5kYXRpb25cclxuICAgICAqIEBwYXJhbSBlbmVteUluZGV4IGluZGV4IG9mIHRhcmdldGVkIGVuZW15IG9iamVjdFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgVG93ZXJSYW5nZUVuZW15RXhpdCh0b3dlckluZGV4Om51bWJlciwgZW5lbXlJbmRleDpudW1iZXIpXHJcbiAgICB7XHJcbiAgICAgICAgVG93ZXJNYW5hZ2VyLkluc3RhbmNlLlRvd2VyRm91bmRhdGlvbkRpY3QuZ2V0SXRlbSh0b3dlckluZGV4LnRvU3RyaW5nKCkpLlRvd2VyRnJhbWUuRW5lbXlFeGl0KGVuZW15SW5kZXgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogcHJvY2Vzc2VzIGEgY2hlY2sgb24gYWxsIGFjdGl2ZSB0dXJyZXRzIHRvIGVuc3VyZSB0aGV5IGFyZSBub3QgY29uZHVjdGluZyBcclxuICAgICAqIGFuIGF0dGFjayBvbiB0aGUgZ2l2ZW4gZW5lbXlcclxuICAgICAqIEBwYXJhbSBpbmRleCBpbmRleCBvZiBlbmVteSB1bml0IHRoYXQgd2FzIGtpbGxlZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgVGFyZ2V0RGVhdGhDaGVjayhpbmRleDpudW1iZXIpXHJcbiAgICB7XHJcbiAgICAgICAgZm9yKHZhciBpOm51bWJlcj0wOyBpPHRoaXMuVG93ZXJGb3VuZGF0aW9uTGlzdC5zaXplKCk7IGkrKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuVG93ZXJGb3VuZGF0aW9uTGlzdC5nZXRJdGVtKGkpLlRvd2VyRnJhbWUuVG93ZXJTeXN0ZW0uVGFyZ2V0RGVhdGhDaGVjayhpbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiLyogICAgICBNRU5VIEdST1VQIDNEXHJcbiAgICB1c2VkIHRvIGNyZWF0ZSBhIDJkIG1lbnUgZ3JvdXAgaW4gdGhlIGdhbWUgc2NlbmUuIG1lbnUgb2JqZWN0cyBjYW4gYmUgY3JlYXRlZCBhbmQgXHJcbiAgICBvcmdhbml6ZWQgdGhyb3VnaCBhbiBpbnN0YW5jZSBvZiB0aGlzIG1hbmFnZXIuIGFsc28gY3JlYXRlcyBhIDNkIG9iamVjdCB0byBhY3QgYXNcclxuICAgIHRoZSBhY3RpdmF0b3IgZm9yIHRoZSBtZW51LlxyXG5cclxuICAgIHRoZSBtZW51IGdyb3VwIGFuZCB0b2dnbGUgYnV0dG9uIGFyZSBwbGFjZWQgYXMgcGFyZW50cyBvZiB0aGUgb2JqZWN0IGdpdmVuLCBhbGxcclxuICAgIG1lbnUgb2JqZWN0cyBhcmUgcGFyZW50ZWQgb250byB0aGUgbWVudSBncm91cCwgYW5kIGFsbCB0ZXh0IHNoYXBlIGVudGl0aWVzIGFyZVxyXG4gICAgcGFyZW50ZWQgdG8gdGhvc2UgbWVudSBvYmplY3RzLlxyXG5cclxuICAgIGltYWdlIG9iamVjdHMgY29uc3VtZSBjbGlja3MgYmUgZGVmYXVsdCwgYWxsIG90aGVyIG9iamVjdHMgZG8gbm90LlxyXG5cclxuICAgIFRPRE86IGNyZWF0ZSBtZXRob2RzIHRvIG1hbmlwdWxhdGUgZ3JvdXBQYXJlbnQgd2l0aG91dCBkaXJlY3QgYWNjZXNzXHJcbiovXHJcbmltcG9ydCB7IExpc3QsIERpY3Rpb25hcnkgfSBmcm9tIFwiY29sbGVjdGlvbnNcIjtcclxuQENvbXBvbmVudChcIk1lbnVHcm91cDJEXCIpXHJcbmV4cG9ydCBjbGFzcyBNZW51R3JvdXAyRFxyXG57XHJcbiAgICAvL3NpbmdsZSBjYXZhcyBpcyBzaGFyZWQgYmV0d2VlbiBhbGwgaW5zdGFuY2VzIG9mIG1lbnUgZ3JvdXBzIFxyXG4gICAgcHJpdmF0ZSBzdGF0aWMgY2FudmFzOnVuZGVmaW5lZHxVSUNhbnZhcyA9IHVuZGVmaW5lZDtcclxuICAgIC8vcGFyZW50IG9iamVjdFxyXG4gICAgcHVibGljIGdyb3VwUGFyZW50OlVJQ29udGFpbmVyUmVjdDtcclxuICAgIC8vYWN0aW9uIG9iamVjdCB1c2VkIHRvIHRvZ2dsZSBtYWluIG1lbnUgY2FudmFzXHJcbiAgICAvL3ByaXZhdGUgbWVudVRvZ2dsZUNhbnZhczpVSUNhbnZhcyA9IG5ldyBVSUNhbnZhcygpO1xyXG4gICAgcHJpdmF0ZSBtZW51VG9nZ2xlU3RhdGU6bnVtYmVyID0gMDtcclxuICAgIC8vcHJpdmF0ZSBtZW51VG9nZ2xlOlVJSW1hZ2U7XHJcbiAgICAvL2NvbGxlY3Rpb25zIGZvciBlbnRpdHkgYWNjZXNzXHJcbiAgICBwcml2YXRlIG1lbnVMaXN0Okxpc3Q8TWVudU9iamVjdDJEPjtcclxuICAgIHByaXZhdGUgbWVudURpY3Q6RGljdGlvbmFyeTxNZW51T2JqZWN0MkQ+O1xyXG5cclxuICAgIC8vY29uc3RydWN0b3IsIHRha2VzIGluIGFuIGVudGl0eSB0aGF0IHdpbGwgYmUgdXNlZCB3aGVuIHBhcmVudGluZ1xyXG4gICAgY29uc3RydWN0b3IoKVxyXG4gICAge1xyXG4gICAgICAgIC8vY2FudmFzIGluaXRcclxuICAgICAgICBpZihNZW51R3JvdXAyRC5jYW52YXMgPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgTWVudUdyb3VwMkQuY2FudmFzID0gbmV3IFVJQ2FudmFzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL29iamVjdFxyXG4gICAgICAgIHRoaXMuZ3JvdXBQYXJlbnQgPSBuZXcgVUlDb250YWluZXJSZWN0KE1lbnVHcm91cDJELmNhbnZhcyk7XHJcblxyXG4gICAgICAgIC8vaW5pdGlhbGl6ZSBjb2xsZWN0aW9uc1xyXG4gICAgICAgIHRoaXMubWVudUxpc3QgPSBuZXcgTGlzdDxNZW51T2JqZWN0MkQ+KCk7XHJcbiAgICAgICAgdGhpcy5tZW51RGljdCA9IG5ldyBEaWN0aW9uYXJ5PE1lbnVPYmplY3QyRD4oKTtcclxuLypcclxuICAgICAgICAvL3NldCB1cCBtZW51IHRvZ2dsZVxyXG4gICAgICAgIC8vb2JqZWN0XHJcbiAgICAgICAgdGhpcy5tZW51VG9nZ2xlID0gbmV3IFVJSW1hZ2UodGhpcy5tZW51VG9nZ2xlQ2FudmFzLCBtZW51R3JvdXAyRFJlZmVyZW5jZS5nZXRJbWFnZVNvdXJjZSgwKSk7XHJcbiAgICAgICAgdGhpcy5tZW51VG9nZ2xlLmlzUG9pbnRlckJsb2NrZXIgPSB0cnVlO1xyXG4gICAgICAgIC8vbG9jYXRpb25cclxuICAgICAgICB0aGlzLm1lbnVUb2dnbGUuc291cmNlTGVmdCA9IG1lbnVHcm91cDJEUmVmZXJlbmNlLnNvdXJjZUxvY2F0aW9uc1s0XVswXTtcclxuICAgICAgICB0aGlzLm1lbnVUb2dnbGUuc291cmNlVG9wID0gbWVudUdyb3VwMkRSZWZlcmVuY2Uuc291cmNlTG9jYXRpb25zWzRdWzFdO1xyXG4gICAgICAgIHRoaXMubWVudVRvZ2dsZS5zb3VyY2VXaWR0aCA9IG1lbnVHcm91cDJEUmVmZXJlbmNlLnNvdXJjZVNpemVzWzVdWzBdO1xyXG4gICAgICAgIHRoaXMubWVudVRvZ2dsZS5zb3VyY2VIZWlnaHQgPSBtZW51R3JvdXAyRFJlZmVyZW5jZS5zb3VyY2VTaXplc1s1XVsxXTtcclxuICAgICAgICAvL3NpemluZ1xyXG4gICAgICAgIHRoaXMubWVudVRvZ2dsZS53aWR0aCA9IG1lbnVHcm91cDJEUmVmZXJlbmNlLnNvdXJjZVNpemVzWzVdWzBdLzQ7XHJcbiAgICAgICAgdGhpcy5tZW51VG9nZ2xlLmhlaWdodCA9IG1lbnVHcm91cDJEUmVmZXJlbmNlLnNvdXJjZVNpemVzWzVdWzFdLzQ7XHJcbiAgICAgICAgLy9wb3NpdGlvbmluZ1xyXG4gICAgICAgIHRoaXMubWVudVRvZ2dsZS5wb3NpdGlvblggPSAwO1xyXG4gICAgICAgIHRoaXMubWVudVRvZ2dsZS5wb3NpdGlvblkgPSAwO1xyXG4gICAgICAgIHRoaXMubWVudVRvZ2dsZS5oQWxpZ24gPSBcImNlbnRlclwiO1xyXG4gICAgICAgIHRoaXMubWVudVRvZ2dsZS52QWxpZ24gPSBcImNlbnRlclwiO1xyXG4gICAgICAgIC8vYWN0aW9uc1xyXG4gICAgICAgIHRoaXMubWVudVRvZ2dsZS5vbkNsaWNrID1uZXcgT25DbGlja1xyXG4gICAgICAgIChcclxuICAgICAgICAgICAgKGUpID0+IFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLlRvZ2dsZU1lbnVTdGF0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKVxyXG4gICAgICAgICovXHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgLy90b2dnbGVzIHRoZSBjdXJyZW50IG1lbnUgc3RhdGVcclxuICAgIHB1YmxpYyBUb2dnbGVNZW51U3RhdGUoKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuU2V0TWVudVN0YXRlKCF0aGlzLmdyb3VwUGFyZW50LnZpc2libGUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vc2V0cyB0aGUgc3RhdGUgb2YgdGhlIHByaW1hcnkgbWVudSB0cmVlXHJcbiAgICBwdWJsaWMgU2V0TWVudVN0YXRlKHN0YXRlOmJvb2xlYW4pXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5ncm91cFBhcmVudC52aXNpYmxlID0gc3RhdGU7XHJcbiAgICB9XHJcblxyXG4gICAgLy9tZW51IHRvZ2dsZSBvYmplY3RcclxuICAgIC8vICB0eXBlOiAwLT5wb3NpdGlvbiwgMS0+c2NhbGUsIDItPnJvdGF0aW9uXHJcbiAgICAvKnB1YmxpYyBBZGp1c3RNZW51VG9nZ2xlKHR5cGU6bnVtYmVyLCB2ZWN0OlZlY3RvcjMpXHJcbiAgICB7XHJcbiAgICAgICAgc3dpdGNoKHR5cGUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1lbnVUb2dnbGUucG9zaXRpb25YID0gdmVjdC54O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tZW51VG9nZ2xlLnBvc2l0aW9uWSA9IHZlY3QueTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgIHRoaXMubWVudVRvZ2dsZS53aWR0aCA9IHZlY3QueDtcclxuICAgICAgICAgICAgICAgIHRoaXMubWVudVRvZ2dsZS5oZWlnaHQgPSB2ZWN0Lnk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2goTWF0aC5mbG9vcih2ZWN0LngpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogdGhpcy5tZW51VG9nZ2xlLmhBbGlnbiA9IFwibGVmdFwiOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6IHRoaXMubWVudVRvZ2dsZS5oQWxpZ24gPSBcImNlbnRlclwiOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHRoaXMubWVudVRvZ2dsZS5oQWxpZ24gPSBcInJpZ2h0XCI7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc3dpdGNoKE1hdGguZmxvb3IodmVjdC55KSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHRoaXMubWVudVRvZ2dsZS52QWxpZ24gPSBcInRvcFwiOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6IHRoaXMubWVudVRvZ2dsZS52QWxpZ24gPSBcImNlbnRlclwiOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHRoaXMubWVudVRvZ2dsZS52QWxpZ24gPSBcImJvdHRvbVwiOyBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfSovXHJcblxyXG4gICAgLy9wcmVwYXJlcyBhIG1lbnUgb2JqZWN0IG9mIHRoZSBnaXZlbiBzaXplL3NoYXBlLCB3aXRoIHRoZSBnaXZlbiB0ZXh0LCBcclxuICAgIC8vICByZWdpc3RlcmVkIHVuZGVyIHRoZSBnaXZlbiBuYW1lXHJcbiAgICBwdWJsaWMgQWRkTWVudU9iamVjdChuYW1lOnN0cmluZywgcGFyOnN0cmluZz0nJylcclxuICAgIHtcclxuICAgICAgICAvL2NyZWF0ZSBhbmQgcHJlcGFyZSBlbnRpdGllc1xyXG4gICAgICAgIHZhciB0bXA6TWVudU9iamVjdDJEO1xyXG4gICAgICAgIGlmKHBhciAhPSAnJykgdG1wID0gbmV3IE1lbnVPYmplY3QyRCggdGhpcy5ncm91cFBhcmVudCwgbmFtZSwgdGhpcy5tZW51RGljdC5nZXRJdGVtKHBhcikucmVjdCk7XHJcbiAgICAgICAgZWxzZSB0bXAgPSBuZXcgTWVudU9iamVjdDJEKCB0aGlzLmdyb3VwUGFyZW50LCBuYW1lKTtcclxuXHJcbiAgICAgICAgLy9kaXNhYmxlIGNsaWNrIGJ5IGRlZmF1bHRcclxuICAgICAgICB0bXAucmVjdC5pc1BvaW50ZXJCbG9ja2VyID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgLy9yZWdpc3RlciBvYmplY3QgdG8gY29sbGVjdGlvbnNcclxuICAgICAgICB0aGlzLm1lbnVMaXN0LmFkZEl0ZW0odG1wKTtcclxuICAgICAgICB0aGlzLm1lbnVEaWN0LmFkZEl0ZW0obmFtZSwgdG1wKTtcclxuICAgIH1cclxuXHJcbiAgICAvL3JldHVybnMgdGhlIHJlcXVlc3RlZCBtZW51IG9iamVjdFxyXG4gICAgcHVibGljIEdldE1lbnVPYmplY3Qob2JqTmFtZTpzdHJpbmcpOk1lbnVPYmplY3QyRFxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1lbnVEaWN0LmdldEl0ZW0ob2JqTmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9yZXR1cm5zIHRoZSByZXF1ZXN0ZWQgbWVudSBvYmplY3RcclxuICAgIHB1YmxpYyBHZXRNZW51T2JqZWN0VGV4dChvYmpOYW1lOnN0cmluZywgdGV4dE5hbWU6c3RyaW5nKTpVSVRleHRcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tZW51RGljdC5nZXRJdGVtKG9iak5hbWUpLkdldFRleHQodGV4dE5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vY2hhbmdlcyBhIHRhcmdldGVkIG1lbnUgb2JqZWN0XHJcbiAgICAvLyAgdHlwZTogXHJcbiAgICAvLyAgMC0+cG9zaXRpb25cclxuICAgIC8vICAxLT5zaXplKHg9d2lkdGgseT1oZWlnaHQpXHJcbiAgICAvLyAgMi0+YWxpZ25tZW50KHg9aEFsaWduLHk9dkFsaWdoKVxyXG4gICAgLy8gICAgICByZXN1bHQseDogMD1sZWZ0LDE9Y2VudGVyLDI9cmlnaHRcclxuICAgIC8vICAgICAgcmVzdWx0LHk6IDA9dG9wLDE9Y2VudGVyLDI9Ym90dG9tXHJcbiAgICBwdWJsaWMgQWRqdXN0TWVudU9iamVjdChuYW1lOnN0cmluZywgdHlwZTpudW1iZXIsIHZlY3Q6VmVjdG9yMilcclxuICAgIHtcclxuICAgICAgICBzd2l0Y2godHlwZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgIHRoaXMubWVudURpY3QuZ2V0SXRlbShuYW1lKS5yZWN0LnBvc2l0aW9uWCA9IHZlY3QueDtcclxuICAgICAgICAgICAgICAgIHRoaXMubWVudURpY3QuZ2V0SXRlbShuYW1lKS5yZWN0LnBvc2l0aW9uWSA9IHZlY3QueTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgIHRoaXMubWVudURpY3QuZ2V0SXRlbShuYW1lKS5yZWN0LndpZHRoID0gdmVjdC54O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tZW51RGljdC5nZXRJdGVtKG5hbWUpLnJlY3QuaGVpZ2h0ID0gdmVjdC55O1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgc3dpdGNoKE1hdGguZmxvb3IodmVjdC54KSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHRoaXMubWVudURpY3QuZ2V0SXRlbShuYW1lKS5yZWN0LmhBbGlnbiA9IFwibGVmdFwiOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6IHRoaXMubWVudURpY3QuZ2V0SXRlbShuYW1lKS5yZWN0LmhBbGlnbiA9IFwiY2VudGVyXCI7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogdGhpcy5tZW51RGljdC5nZXRJdGVtKG5hbWUpLnJlY3QuaEFsaWduID0gXCJyaWdodFwiOyBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHN3aXRjaChNYXRoLmZsb29yKHZlY3QueSkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiB0aGlzLm1lbnVEaWN0LmdldEl0ZW0obmFtZSkucmVjdC52QWxpZ24gPSBcInRvcFwiOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6IHRoaXMubWVudURpY3QuZ2V0SXRlbShuYW1lKS5yZWN0LnZBbGlnbiA9IFwiY2VudGVyXCI7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogdGhpcy5tZW51RGljdC5nZXRJdGVtKG5hbWUpLnJlY3QudkFsaWduID0gXCJib3R0b21cIjsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvL2NoYW5nZXMgYSB0YXJnZXRlZCBtZW51IG9iamVjdCdzIGNvbG91clxyXG4gICAgcHVibGljIEFkanVzdE1lbnVDb2xvdXIobmFtZTpzdHJpbmcsIGNvbG91cjpDb2xvcjQpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5tZW51RGljdC5nZXRJdGVtKG5hbWUpLnJlY3QuY29sb3IgPSBjb2xvdXI7XHJcbiAgICB9XHJcblxyXG4gICAgLy9wcmVwYXJlcyBhIG1lbnUgb2JqZWN0IG9mIHRoZSBnaXZlbiBzaXplL3NoYXBlLCB3aXRoIHRoZSBnaXZlbiB0ZXh0LCBcclxuICAgIC8vICByZWdpc3RlcmVkIHVuZGVyIHRoZSBnaXZlbiBuYW1lXHJcbiAgICBwdWJsaWMgQWRkTWVudVRleHQobmFtZU9iajpzdHJpbmcsIG5hbWVUeHQ6c3RyaW5nLCB0ZXh0OnN0cmluZylcclxuICAgIHtcclxuICAgICAgICB0aGlzLm1lbnVEaWN0LmdldEl0ZW0obmFtZU9iaikuQWRkVGV4dChuYW1lVHh0LCB0ZXh0KTtcclxuICAgIH1cclxuXHJcbiAgICAvL3NldHMgYSB0ZXh0IG9iamVjdCdzIGRpc3BsYXkgdGV4dFxyXG4gICAgcHVibGljIFNldE1lbnVUZXh0KG5hbWVPYmo6c3RyaW5nLCBuYW1lVHh0OnN0cmluZywgdGV4dDpzdHJpbmcpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5tZW51RGljdC5nZXRJdGVtKG5hbWVPYmopLkNoYW5nZVRleHQobmFtZVR4dCwgdGV4dCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9jaGFuZ2VzIGEgdGV4dCBvYmplY3QncyB0ZXh0c2hhcGUgc2V0dGluZ3NcclxuICAgIHB1YmxpYyBBZGp1c3RUZXh0T2JqZWN0KG5hbWVPYmo6c3RyaW5nLCBuYW1lVHh0OnN0cmluZywgdHlwZTpudW1iZXIsIHZhbHVlOlZlY3RvcjIpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5tZW51RGljdC5nZXRJdGVtKG5hbWVPYmopLkFkanVzdFRleHQobmFtZVR4dCwgdHlwZSwgdmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vY2hhbmdlcyBhIHRleHQgb2JqZWN0J3MgdGV4dHNoYXBlIHNldHRpbmdzXHJcbiAgICBwdWJsaWMgQWRqdXN0VGV4dERpc3BsYXkobmFtZU9iajpzdHJpbmcsIG5hbWVUeHQ6c3RyaW5nLCB0eXBlOm51bWJlciwgdmFsdWU6bnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMubWVudURpY3QuZ2V0SXRlbShuYW1lT2JqKS5BZGp1c3RUZXh0RGlzcGxheShuYW1lVHh0LCB0eXBlLCB2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9hZGRzIGFuIHVpSW1hZ2Ugb2JqZWN0IHBhcmVudGVkIHVuZGVyIHRoZSB0YWdnZWQgbWVudSBvYmplY3RcclxuICAgIC8vICB0eXBlIGlzIHB1bGxlZCBmcm9tIHRoZSAyZCBtZW51IGdyb3VwIHJlZmVyZW5jZSBzaGVldFxyXG4gICAgcHVibGljIEFkZEltYWdlT2JqZWN0KG5hbWVPYmo6c3RyaW5nLCBuYW1lSW1nOnN0cmluZywgaW1hZ2U6bnVtYmVyLCB0eXBlOm51bWJlciwgaXNWaXNpYmxlOmJvb2xlYW49dHJ1ZSlcclxuICAgIHtcclxuICAgICAgICB0aGlzLm1lbnVEaWN0LmdldEl0ZW0obmFtZU9iaikuQWRkSW1hZ2UobmFtZUltZywgaW1hZ2UsIHR5cGUsIGlzVmlzaWJsZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9jaGFuZ2VzIGEgaW1hZ2Ugb2JqZWN0J3Mgc2V0dGluZ3NcclxuICAgIHB1YmxpYyBBZGp1c3RJbWFnZU9iamVjdChuYW1lT2JqOnN0cmluZywgbmFtZUltZzpzdHJpbmcsIGltYWdlOm51bWJlciwgdHlwZTpudW1iZXIsIHZhbHVlOlZlY3RvcjIsIG92ZXJ3cml0ZTpib29sZWFuPWZhbHNlKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMubWVudURpY3QuZ2V0SXRlbShuYW1lT2JqKS5BZGp1c3RJbWFnZShuYW1lSW1nLCBpbWFnZSwgdHlwZSwgdmFsdWUsIG92ZXJ3cml0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9yZXR1cm5zIHRoZSByZXF1ZXN0ZWQgbWVudSBvYmplY3RcclxuICAgIHB1YmxpYyBHZXRNZW51SW1hZ2VPYmplY3Qob2JqTmFtZTpzdHJpbmcsIG5hbWVJbWc6c3RyaW5nKTpVSUltYWdlXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWVudURpY3QuZ2V0SXRlbShvYmpOYW1lKS5HZXRJbWFnZShuYW1lSW1nKTtcclxuICAgIH1cclxufVxyXG5cclxuLy9tb2RpZmllZCAyZCB1aSByZWN0IGNvbnRhaW5lclxyXG4vL2NhbiBjb250YWluIG11bHRpcGxlIHVpIHRleHQgb2JqZWN0c1xyXG5AQ29tcG9uZW50KFwiTWVudU9iamVjdDJEXCIpXHJcbmV4cG9ydCBjbGFzcyBNZW51T2JqZWN0MkRcclxue1xyXG4gICAgLy9hY2Nlc3Mga2V5XHJcbiAgICBwdWJsaWMgTmFtZTpzdHJpbmc7XHJcblxyXG4gICAgLy9jb2xsZWN0aW9uIG9mIGFsbCByZWN0IGVudGl0aWVzXHJcbiAgICByZWN0OlVJQ29udGFpbmVyUmVjdDtcclxuICAgIC8vY29sbGVjdGlvbnMgb2YgYWxsIHRleHQgZW50aXRpZXNcclxuICAgIHRleHRMaXN0Okxpc3Q8VUlUZXh0PjtcclxuICAgIHRleHREaWN0OkRpY3Rpb25hcnk8VUlUZXh0PjtcclxuICAgIC8vY29sbGVjdGlvbnMgb2YgYWxsIHRleHQgZW50aXRpZXNcclxuICAgIGltYWdlTGlzdDpMaXN0PFVJSW1hZ2U+O1xyXG4gICAgaW1hZ2VEaWN0OkRpY3Rpb25hcnk8VUlJbWFnZT47XHJcblxyXG4gICAgLy9jb25zdHJ1Y3RvclxyXG4gICAgY29uc3RydWN0b3IoY2FudmFzOlVJQ2FudmFzLCBuYW06c3RyaW5nLCBwYXI6VUlTaGFwZXx1bmRlZmluZWQ9dW5kZWZpbmVkKVxyXG4gICAge1xyXG4gICAgICAgIGlmKHBhciA9PSB1bmRlZmluZWQpIHRoaXMucmVjdCA9IG5ldyBVSUNvbnRhaW5lclJlY3QoY2FudmFzKTtcclxuICAgICAgICBlbHNlIHRoaXMucmVjdCA9IG5ldyBVSUNvbnRhaW5lclJlY3QocGFyKTtcclxuICAgICAgICB0aGlzLnJlY3QuY29sb3IgPSBuZXcgQ29sb3I0KDAuNSwgMC41LCAwLjUsIDEpO1xyXG5cclxuICAgICAgICAvL3NldCBhY2Nlc3MgbmFtZVxyXG4gICAgICAgIHRoaXMuTmFtZSA9IG5hbTtcclxuXHJcbiAgICAgICAgLy9jb2xsZWN0aW9uc1xyXG4gICAgICAgIHRoaXMudGV4dExpc3QgPSBuZXcgTGlzdDxVSVRleHQ+KCk7XHJcbiAgICAgICAgdGhpcy50ZXh0RGljdCA9IG5ldyBEaWN0aW9uYXJ5PFVJVGV4dD4oKTtcclxuICAgICAgICB0aGlzLmltYWdlTGlzdCA9IG5ldyBMaXN0PFVJSW1hZ2U+KCk7XHJcbiAgICAgICAgdGhpcy5pbWFnZURpY3QgPSBuZXcgRGljdGlvbmFyeTxVSUltYWdlPigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vcHJlcGFyZXMgYSB0ZXh0IG9iamVjdCB3aXRoIHRoZSBnaXZlbiB0ZXh0LCBcclxuICAgIC8vICByZWdpc3RlcmVkIHVuZGVyIHRoZSBnaXZlbiBuYW1lXHJcbiAgICBwdWJsaWMgQWRkVGV4dChuYW1lOnN0cmluZywgdGV4dDpzdHJpbmcpXHJcbiAgICB7XHJcbiAgICAgICAgLy9jcmVhdGUgYW5kIHByZXBhcmUgdGV4dFxyXG4gICAgICAgIHZhciB0bXA6VUlUZXh0ID0gbmV3IFVJVGV4dCh0aGlzLnJlY3QpO1xyXG4gICAgICAgIHRtcC5pc1BvaW50ZXJCbG9ja2VyID0gZmFsc2U7XHJcbiAgICAgICAgdG1wLnRleHRXcmFwcGluZyA9IHRydWU7XHJcbiAgICAgICAgdG1wLndpZHRoID0gdGhpcy5yZWN0LndpZHRoO1xyXG4gICAgICAgIHRtcC5oZWlnaHQgPSB0aGlzLnJlY3QuaGVpZ2h0O1xyXG4gICAgICAgIHRtcC5jb2xvciA9IENvbG9yNC5CbGFjaygpO1xyXG4gICAgICAgIHRtcC5oQWxpZ24gPSBcImNlbnRlclwiO1xyXG4gICAgICAgIHRtcC52QWxpZ24gPSBcImNlbnRlclwiO1xyXG4gICAgICAgIHRtcC5oVGV4dEFsaWduID0gXCJjZW50ZXJcIjtcclxuICAgICAgICB0bXAudlRleHRBbGlnbiA9IFwiY2VudGVyXCI7XHJcbiAgICAgICAgdG1wLmZvbnRTaXplID0gMjQ7XHJcbiAgICAgICAgdG1wLnZhbHVlID0gdGV4dDtcclxuICAgICAgICAvL3JlZ2lzdGVyIG9iamVjdCB0byBjb2xsZWN0aW9uc1xyXG4gICAgICAgIHRoaXMudGV4dExpc3QuYWRkSXRlbSh0bXApO1xyXG4gICAgICAgIHRoaXMudGV4dERpY3QuYWRkSXRlbShuYW1lLCB0bXApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vcmV0dXJucyB0aGUgcmVxdWVzdGVkIHRleHQgb2JqZWN0XHJcbiAgICBwdWJsaWMgR2V0VGV4dChuYW1lOnN0cmluZyk6VUlUZXh0XHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dERpY3QuZ2V0SXRlbShuYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICAvL2NoYW5nZXMgYSB0YXJnZXRlZCB0ZXh0IG9iamVjdCBlbnRpdHlcclxuICAgIC8vICB0eXBlOiBcclxuICAgIC8vICAwLT5wb3NpdGlvblxyXG4gICAgLy8gIDEtPnNpemUoeD13aWR0aCx5PWhlaWdodClcclxuICAgIC8vICAyLT5hbGlnbm1lbnQoeD1oQWxpZ24seT12QWxpZ2gpXHJcbiAgICAvLyAgICAgIHJlc3VsdCx4OiAwPWxlZnQsMT1jZW50ZXIsMj1yaWdodFxyXG4gICAgLy8gICAgICByZXN1bHQseTogMD10b3AsMT1jZW50ZXIsMj1ib3R0b21cclxuICAgIC8vICAyLT50ZXh0IGFsaWdubWVudCh4PWhBbGlnbix5PXZBbGlnaClcclxuICAgIC8vICAgICAgcmVzdWx0LHg6IDA9bGVmdCwxPWNlbnRlciwyPXJpZ2h0XHJcbiAgICAvLyAgICAgIHJlc3VsdCx5OiAwPXRvcCwxPWNlbnRlciwyPWJvdHRvbVxyXG4gICAgcHVibGljIEFkanVzdFRleHQobmFtZTpzdHJpbmcsIHR5cGU6bnVtYmVyLCB2ZWN0OlZlY3RvcjIpXHJcbiAgICB7XHJcbiAgICAgICAgc3dpdGNoKHR5cGUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRleHREaWN0LmdldEl0ZW0obmFtZSkucG9zaXRpb25YID0gdmVjdC54O1xyXG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0RGljdC5nZXRJdGVtKG5hbWUpLnBvc2l0aW9uWSA9IHZlY3QueTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgIHRoaXMudGV4dERpY3QuZ2V0SXRlbShuYW1lKS53aWR0aCA9IHZlY3QueDtcclxuICAgICAgICAgICAgICAgIHRoaXMudGV4dERpY3QuZ2V0SXRlbShuYW1lKS5oZWlnaHQgPSB2ZWN0Lnk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2goTWF0aC5mbG9vcih2ZWN0LngpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogdGhpcy50ZXh0RGljdC5nZXRJdGVtKG5hbWUpLmhBbGlnbiA9IFwibGVmdFwiOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6IHRoaXMudGV4dERpY3QuZ2V0SXRlbShuYW1lKS5oQWxpZ24gPSBcImNlbnRlclwiOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHRoaXMudGV4dERpY3QuZ2V0SXRlbShuYW1lKS5oQWxpZ24gPSBcInJpZ2h0XCI7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc3dpdGNoKE1hdGguZmxvb3IodmVjdC55KSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHRoaXMudGV4dERpY3QuZ2V0SXRlbShuYW1lKS52QWxpZ24gPSBcInRvcFwiOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6IHRoaXMudGV4dERpY3QuZ2V0SXRlbShuYW1lKS52QWxpZ24gPSBcImNlbnRlclwiOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHRoaXMudGV4dERpY3QuZ2V0SXRlbShuYW1lKS52QWxpZ24gPSBcImJvdHRvbVwiOyBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgIHN3aXRjaChNYXRoLmZsb29yKHZlY3QueCkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiB0aGlzLnRleHREaWN0LmdldEl0ZW0obmFtZSkuaFRleHRBbGlnbiA9IFwibGVmdFwiOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6IHRoaXMudGV4dERpY3QuZ2V0SXRlbShuYW1lKS5oVGV4dEFsaWduID0gXCJjZW50ZXJcIjsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiB0aGlzLnRleHREaWN0LmdldEl0ZW0obmFtZSkuaFRleHRBbGlnbiA9IFwicmlnaHRcIjsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2goTWF0aC5mbG9vcih2ZWN0LnkpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogdGhpcy50ZXh0RGljdC5nZXRJdGVtKG5hbWUpLnZUZXh0QWxpZ24gPSBcInRvcFwiOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6IHRoaXMudGV4dERpY3QuZ2V0SXRlbShuYW1lKS52VGV4dEFsaWduID0gXCJjZW50ZXJcIjsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiB0aGlzLnRleHREaWN0LmdldEl0ZW0obmFtZSkudlRleHRBbGlnbiA9IFwiYm90dG9tXCI7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy9jaGFuZ2VzIGEgdGFyZ2V0ZWQgbWVudSBvYmplY3QgZW50aXR5XHJcbiAgICAvLyAgdHlwZTogMC0+Zm9udCBzaXplXHJcbiAgICBwdWJsaWMgQWRqdXN0VGV4dERpc3BsYXkobmFtZTpzdHJpbmcsIHR5cGU6bnVtYmVyLCB2YWx1ZTpudW1iZXIpXHJcbiAgICB7XHJcbiAgICAgICAgc3dpdGNoKHR5cGUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRleHREaWN0LmdldEl0ZW0obmFtZSkuZm9udFNpemUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vY2hhbmdlcyB0aGUgdGV4dCBvZiBhIHRhcmdldGVkIHRleHRzaGFwZVxyXG4gICAgcHVibGljIENoYW5nZVRleHQobmFtZTpzdHJpbmcsIHRleHQ6c3RyaW5nKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMudGV4dERpY3QuZ2V0SXRlbShuYW1lKS52YWx1ZSA9IHRleHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy9wcmVwYXJlcyBhbiB1aUltYWdlIG9iamVjdCBvZiB0aGUgZ2l2ZW4gdHlwZVxyXG4gICAgLy8gIGlzVmlzaWJsZSBkZXRlcm1pbmVzIGlmIHRoZSBwYXJlbnRhbCBvYmplY3QncyB2aXNpYmlsaXR5IFxyXG4gICAgLy8gIHJlZ2lzdGVyZWQgdW5kZXIgdGhlIGdpdmVuIG5hbWVcclxuICAgIHB1YmxpYyBBZGRJbWFnZShuYW1lOnN0cmluZywgaW1hZ2U6bnVtYmVyLCB0eXBlOm51bWJlciwgaXNWaXNpYmxlOmJvb2xlYW4pXHJcbiAgICB7XHJcbiAgICAgICAgLy9jcmVhdGUgYW5kIHByZXBhcmUgdGV4dFxyXG4gICAgICAgIHZhciB0bXA6VUlJbWFnZSA9IG5ldyBVSUltYWdlKHRoaXMucmVjdCwgbWVudUdyb3VwMkRSZWZlcmVuY2UuZ2V0SW1hZ2VTb3VyY2UoaW1hZ2UpKTtcclxuICAgICAgICB0bXAuaXNQb2ludGVyQmxvY2tlciA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5yZWN0LnZpc2libGUgPSBpc1Zpc2libGU7XHJcbiAgICAgICAgLy8gIGxvYWQgc291cmNlIHBvc2l0aW9uaW5nXHJcbiAgICAgICAgdG1wLnNvdXJjZUxlZnQgPSBtZW51R3JvdXAyRFJlZmVyZW5jZS5nZXRJbWFnZUxvY2F0aW9uKGltYWdlLCB0eXBlLCAwKTtcclxuICAgICAgICB0bXAuc291cmNlVG9wID0gbWVudUdyb3VwMkRSZWZlcmVuY2UuZ2V0SW1hZ2VMb2NhdGlvbihpbWFnZSwgdHlwZSwgMSk7XHJcbiAgICAgICAgLy8gIGxvYWQgc291cmNlIHNpemluZ1xyXG4gICAgICAgIHRtcC5zb3VyY2VXaWR0aCA9IG1lbnVHcm91cDJEUmVmZXJlbmNlLmdldEltYWdlU2l6ZShpbWFnZSwgdHlwZSwgMCk7XHJcbiAgICAgICAgdG1wLnNvdXJjZUhlaWdodCA9IG1lbnVHcm91cDJEUmVmZXJlbmNlLmdldEltYWdlU2l6ZShpbWFnZSwgdHlwZSwgMSk7XHJcbiAgICAgICAgLy8gIHNldCBpbWFnZSBzaXppbmcgKGRlZmF1bHQgMS80IHNpemUpXHJcbiAgICAgICAgdG1wLndpZHRoID0gbWVudUdyb3VwMkRSZWZlcmVuY2UuZ2V0SW1hZ2VTaXplKGltYWdlLCB0eXBlLCAwKTtcclxuICAgICAgICB0bXAuaGVpZ2h0ID0gbWVudUdyb3VwMkRSZWZlcmVuY2UuZ2V0SW1hZ2VTaXplKGltYWdlLCB0eXBlLCAxKTtcclxuICAgICAgICAvLyAgZGVmYXVsdCBwb3NpdGlvbmluZ1xyXG4gICAgICAgIHRtcC5wb3NpdGlvblggPSAwO1xyXG4gICAgICAgIHRtcC5wb3NpdGlvblkgPSAwO1xyXG4gICAgICAgIHRtcC5oQWxpZ24gPSBcImNlbnRlclwiO1xyXG4gICAgICAgIHRtcC52QWxpZ24gPSBcImNlbnRlclwiO1xyXG5cclxuICAgICAgICAvL3JlZ2lzdGVyIG9iamVjdCB0byBjb2xsZWN0aW9uc1xyXG4gICAgICAgIHRoaXMuaW1hZ2VMaXN0LmFkZEl0ZW0odG1wKTtcclxuICAgICAgICB0aGlzLmltYWdlRGljdC5hZGRJdGVtKG5hbWUsIHRtcCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9jaGFuZ2VzIGEgdGFyZ2V0ZWQgdGV4dCBvYmplY3QgZW50aXR5XHJcbiAgICAvLyAgdHlwZTogXHJcbiAgICAvLyAgMC0+cG9zaXRpb25cclxuICAgIC8vICAxLT5zaXplKHg9d2lkdGgseT1oZWlnaHQpXHJcbiAgICAvLyAgMi0+YWxpZ25tZW50KHg9aEFsaWduLHk9dkFsaWdoKVxyXG4gICAgLy8gICAgICByZXN1bHQseDogMD1sZWZ0LDE9Y2VudGVyLDI9cmlnaHRcclxuICAgIC8vICAgICAgcmVzdWx0LHk6IDA9dG9wLDE9Y2VudGVyLDI9Ym90dG9tXHJcbiAgICAvLyAgMy0+c2NhbGUgKGJhc2VkIG9uIHNvdXJjZSlcclxuICAgIC8vICAgICAgcmVzdWx0LHg6IHNpemUgdHlwZVxyXG4gICAgLy8gICAgICByZXN1bHQseTogc2NhbGVcclxuICAgIHB1YmxpYyBBZGp1c3RJbWFnZShuYW1lOnN0cmluZywgaW1hZ2U6bnVtYmVyLCB0eXBlOm51bWJlciwgdmVjdDpWZWN0b3IyLCBvdmVyd3JpdGU6Ym9vbGVhbilcclxuICAgIHtcclxuICAgICAgICBzd2l0Y2godHlwZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2VEaWN0LmdldEl0ZW0obmFtZSkucG9zaXRpb25YID0gdmVjdC54O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZURpY3QuZ2V0SXRlbShuYW1lKS5wb3NpdGlvblkgPSB2ZWN0Lnk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlRGljdC5nZXRJdGVtKG5hbWUpLndpZHRoID0gdmVjdC54O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZURpY3QuZ2V0SXRlbShuYW1lKS5oZWlnaHQgPSB2ZWN0Lnk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2goTWF0aC5mbG9vcih2ZWN0LngpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogdGhpcy5pbWFnZURpY3QuZ2V0SXRlbShuYW1lKS5oQWxpZ24gPSBcImxlZnRcIjsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOiB0aGlzLmltYWdlRGljdC5nZXRJdGVtKG5hbWUpLmhBbGlnbiA9IFwiY2VudGVyXCI7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogdGhpcy5pbWFnZURpY3QuZ2V0SXRlbShuYW1lKS5oQWxpZ24gPSBcInJpZ2h0XCI7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc3dpdGNoKE1hdGguZmxvb3IodmVjdC55KSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHRoaXMuaW1hZ2VEaWN0LmdldEl0ZW0obmFtZSkudkFsaWduID0gXCJ0b3BcIjsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOiB0aGlzLmltYWdlRGljdC5nZXRJdGVtKG5hbWUpLnZBbGlnbiA9IFwiY2VudGVyXCI7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogdGhpcy5pbWFnZURpY3QuZ2V0SXRlbShuYW1lKS52QWxpZ24gPSBcImJvdHRvbVwiOyBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2VEaWN0LmdldEl0ZW0obmFtZSkud2lkdGggPSBtZW51R3JvdXAyRFJlZmVyZW5jZS5zb3VyY2VTaXplc1tpbWFnZV1bTWF0aC5mbG9vcih2ZWN0LngpXVswXSp2ZWN0Lnk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlRGljdC5nZXRJdGVtKG5hbWUpLmhlaWdodCA9IG1lbnVHcm91cDJEUmVmZXJlbmNlLnNvdXJjZVNpemVzW2ltYWdlXVtNYXRoLmZsb29yKHZlY3QueCldWzFdKnZlY3QueTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZihvdmVyd3JpdGUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWN0LndpZHRoID0gKG1lbnVHcm91cDJEUmVmZXJlbmNlLnNvdXJjZVNpemVzW2ltYWdlXVtNYXRoLmZsb29yKHZlY3QueCldWzBdKnZlY3QueSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWN0LmhlaWdodCA9IChtZW51R3JvdXAyRFJlZmVyZW5jZS5zb3VyY2VTaXplc1tpbWFnZV1bTWF0aC5mbG9vcih2ZWN0LngpXVsxXSp2ZWN0LnkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vcmV0dXJucyB0aGUgcmVxdWVzdGVkIHRleHQgb2JqZWN0XHJcbiAgICBwdWJsaWMgR2V0SW1hZ2UobmFtZTpzdHJpbmcpOlVJSW1hZ2VcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pbWFnZURpY3QuZ2V0SXRlbShuYW1lKTtcclxuICAgIH1cclxufVxyXG4vL3JlZmVyZW5jZSBmb3Igc3BsaWNlIHNoZWV0IHBpZWNlc1xyXG4vLyAgVE9ETzogbWF5YmUgYWRkIGVudW0gbGlua3MgZm9yIHBhc3NpbmcgdHlwZXMgdG8gbWFrZSBpdCBtb3JlIHJlYWRhYmxlIFxyXG5jbGFzcyBtZW51R3JvdXAyRFJlZmVyZW5jZVxyXG57XHJcbiAgICAvL3RleHR1cmUgc291cmNlc1xyXG4gICAgc3RhdGljIGltYWdlU291cmNlczpUZXh0dXJlW10gPSBcclxuICAgIFtcclxuICAgICAgICBuZXcgVGV4dHVyZShcImltYWdlcy9tZW51RGVidWdnaW5nLnBuZ1wiKSxcclxuICAgICAgICBuZXcgVGV4dHVyZShcImltYWdlcy9tZW51U3BsaWNlU2hlZXQucG5nXCIpLFxyXG4gICAgICAgIG5ldyBUZXh0dXJlKFwiaW1hZ2VzL3VpR2FtZUhlYWRlckNvcmUucG5nXCIpLFxyXG4gICAgICAgIG5ldyBUZXh0dXJlKFwiaW1hZ2VzL3VpR2FtZUhlYWRlckVuZW15LnBuZ1wiKVxyXG4gICAgXTtcclxuICAgIHN0YXRpYyBnZXRJbWFnZVNvdXJjZShpbWFnZTpudW1iZXIpOlRleHR1cmVcclxuICAgIHtcclxuICAgICAgICAvL2xvZyhcInNvdXJjZTogXCIraW1hZ2UpXHJcbiAgICAgICAgcmV0dXJuIG1lbnVHcm91cDJEUmVmZXJlbmNlLmltYWdlU291cmNlc1tpbWFnZV07XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZ2V0SW1hZ2VMb2NhdGlvbihpbWFnZTpudW1iZXIsIGluZGV4Om51bWJlciwgdHlwZTpudW1iZXIpOm51bWJlclxyXG4gICAge1xyXG4gICAgICAgIC8vbG9nKFwibG9jYXRpb246IFwiK2ltYWdlKVxyXG4gICAgICAgIHJldHVybiBtZW51R3JvdXAyRFJlZmVyZW5jZS5zb3VyY2VMb2NhdGlvbnNbaW1hZ2VdW2luZGV4XVt0eXBlXTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBnZXRJbWFnZVNpemUoaW1hZ2U6bnVtYmVyLCBpbmRleDpudW1iZXIsIHR5cGU6bnVtYmVyKTpudW1iZXJcclxuICAgIHtcclxuICAgICAgICAvL2xvZyhcInNpemU6IFwiK2ltYWdlK1wiLCBcIitpbmRleCtcIiwgXCIrdHlwZSlcclxuICAgICAgICAvL2xvZyhcInR5cGU6IFwiK21lbnVHcm91cDJEUmVmZXJlbmNlLnNvdXJjZVR5cGVzW2ltYWdlXVtpbmRleF0pXHJcbiAgICAgICAgcmV0dXJuIG1lbnVHcm91cDJEUmVmZXJlbmNlLnNvdXJjZVNpemVzW2ltYWdlXVttZW51R3JvdXAyRFJlZmVyZW5jZS5zb3VyY2VUeXBlc1tpbWFnZV1baW5kZXhdXVt0eXBlXTtcclxuICAgIH1cclxuXHJcbiAgICAvL2xvY2F0aW9ucyBvbi1zb3VyY2UgZm9yIHNwbGljZSBwb2ludHMsIGZyb20gdG9wIGxlZnQgb2Ygc2hlZXQgdG8gYm90dG9tIHJpZ2h0XHJcbiAgICAvLyAgW2ltYWdlX2luZGV4XVtzbGljZV9pbmRleF1bcG9pbnQgdHlwZSgwPXgsIDE9eSldXHJcbiAgICBzdGF0aWMgc291cmNlTG9jYXRpb25zOm51bWJlcltdW11bXSA9IFxyXG4gICAgW1xyXG4gICAgICAgIC8vbWVudSBiYWNrcGxhdGVcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgIFswLDBdLCAgICAvL3RpdGxlXHJcbiAgICAgICAgXSxcclxuICAgICAgICAvL21lbnUgc2hlZXRcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgIC8vICBlbXB0eVxyXG4gICAgICAgICAgICBbMCw1MDBdLCAgICAvL3RpdGxlXHJcbiAgICAgICAgICAgIFswLDYwMF0sICAgIC8vaGVhZGVyXHJcbiAgICAgICAgICAgIFs3NTAsNjAwXSwgIC8vbWVkaXVtXHJcbiAgICAgICAgICAgIFsxMDUwLDYwMF0sIC8vc21hbGxcclxuICAgICAgICAgICAgWzEwNTAsMF0sICAgLy9zcXVhcmUoaXNoKVxyXG4gICAgICAgICAgICAvLyAgdGV4dFxyXG4gICAgICAgICAgICBbMCwwXSwgICAgICAvL3RpdGxlXHJcbiAgICAgICAgICAgIFswLDIwMF0sICAgIC8vaGVhZGVyIHdhdmVcclxuICAgICAgICAgICAgWzAsMzAwXSwgICAgLy9oZWFkZXIgZW5lbWllc1xyXG4gICAgICAgICAgICBbMCw0MDBdLCAgICAvL2hlYWRlciBtb25leVxyXG4gICAgICAgICAgICBbNzUwLDIwMF0sICAvL3BsYXlcclxuICAgICAgICAgICAgWzEwNTAsMjAwXSwgLy9jbG9zZVxyXG4gICAgICAgICAgICBbNzUwLDMwMF0sICAvL25leHQgbWVkaXVtXHJcbiAgICAgICAgICAgIFsxMDUwLDMwMF0sIC8vYmFjayBtZWRpdW1cclxuICAgICAgICAgICAgWzc1MCw0MDBdLCAgLy9oZWxwIG1lZGl1bVxyXG4gICAgICAgICAgICBbMTA1MCw0MDBdLCAvL3JlcG9cclxuICAgICAgICAgICAgWzEwNTAsNTAwXSwgLy9uZXh0IHNtYWxsXHJcbiAgICAgICAgICAgIFsxMjAwLDUwMF0sIC8vYmFjayBzbWFsbFxyXG4gICAgICAgICAgICBbMTIwMCw2MDBdLCAvL2hlbHAgc21hbGxcclxuICAgICAgICBdLFxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgWzAsMF0sICAgIC8vdGl0bGVcclxuICAgICAgICBdLFxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgWzAsMF0sICAgIC8vdGl0bGVcclxuICAgICAgICBdXHJcbiAgICBdO1xyXG4gICAgLy9zaXplIHR5cGVzIG9mIG9uLXNvdXJjZSBzcGxpY2VzXHJcbiAgICAvLyAgW2ltYWdlX2luZGV4XVtzcGxpY2Ugc2hlZXQgaW5kZXgsIHNpemUgdHlwZSgwPXRpdGxlLCAxPWxvbmcsIDI9bWVkaXVtLCAzPXNob3J0KV1cclxuICAgIHN0YXRpYyBzb3VyY2VUeXBlczpudW1iZXJbXVtdID0gXHJcbiAgICBbXHJcbiAgICAgICAgLy9tZW51IGJhY2twbGF0ZVxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgMCxcclxuICAgICAgICBdLFxyXG4gICAgICAgIC8vbWVudSBzaGVldFxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgLy8gIGVtcHR5XHJcbiAgICAgICAgICAgIDEsICAvL3RpdGxlXHJcbiAgICAgICAgICAgIDIsICAvL2hlYWRlclxyXG4gICAgICAgICAgICAzLCAgLy9tZWRpdW1cclxuICAgICAgICAgICAgNCwgIC8vc21hbGxcclxuICAgICAgICAgICAgNSwgIC8vc3F1YXJlKGlzaClcclxuICAgICAgICAgICAgLy8gIHRleHRcclxuICAgICAgICAgICAgMCwgIC8vdGl0bGVcclxuICAgICAgICAgICAgMiwgIC8vaGVhZGVyIHdhdmVcclxuICAgICAgICAgICAgMiwgIC8vaGVhZGVyIGVuZW1pZXNcclxuICAgICAgICAgICAgMiwgIC8vaGVhZGVyIG1vbmV5XHJcbiAgICAgICAgICAgIDMsICAvL3BsYXlcclxuICAgICAgICAgICAgMywgIC8vY2xvc2VcclxuICAgICAgICAgICAgMywgIC8vbmV4dCBtZWRpdW1cclxuICAgICAgICAgICAgMywgIC8vYmFjayBtZWRpdW1cclxuICAgICAgICAgICAgMywgIC8vaGVscCBtZWRpdW1cclxuICAgICAgICAgICAgMywgIC8vcmVwb1xyXG4gICAgICAgICAgICA0LCAgLy9uZXh0IHNtYWxsXHJcbiAgICAgICAgICAgIDQsICAvL2JhY2sgc21hbGxcclxuICAgICAgICAgICAgNCwgIC8vaGVscCBzbWFsbFxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICAwLFxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICAwLFxyXG4gICAgICAgIF1cclxuICAgIF07XHJcbiAgICAvL3NpemUgZGVmaW5pdGlvbnNcclxuICAgIHN0YXRpYyBzb3VyY2VTaXplczpudW1iZXJbXVtdW10gPSBcclxuICAgIFtcclxuICAgICAgICAvL21lbnUgYmFja3BsYXRlXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICBbNjgwLCA0ODBdXHJcbiAgICAgICAgXSxcclxuICAgICAgICAvL21lbnUgc2hlZXRcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgIFsxMDUwLDIwMF0sIC8vdGl0bGUgdGFsbFxyXG4gICAgICAgICAgICBbMTA1MCwxMDBdLCAvL3RpdGxlIFxyXG4gICAgICAgICAgICBbNzUwLDEwMF0sICAvL2hlYWRlclxyXG4gICAgICAgICAgICBbMzAwLDEwMF0sICAvL21lZGl1bVxyXG4gICAgICAgICAgICBbMTUwLDEwMF0sICAvL3Nob3J0XHJcbiAgICAgICAgICAgIFszMDAsMjAwXSwgIC8vc3F1YXJlKGlzaClcclxuICAgICAgICBdLFxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgWzExNzAsMzA1XSwgICAgLy90aXRsZVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICBbMTE3MCwzMDVdLCAgICAvL3RpdGxlXHJcbiAgICAgICAgXVxyXG4gICAgXTtcclxufVxyXG4vL2NvbnRhaW5zIHRleHQgZm9yIHRoZSB0dXRvcmlhbCBtZW51XHJcbmV4cG9ydCBjbGFzcyBtZW51VHV0b3JpYWxUZXh0XHJcbntcclxuICAgIHN0YXRpYyBUZXh0SGVhZGVyOnN0cmluZ1tdID1cclxuICAgIFtcclxuICAgICAgICBcIkFib3V0IFRoaXMgTW9kdWxlXCIsXHJcbiAgICAgICAgXCJIb3cgVG8gUGxheVwiXHJcbiAgICBdO1xyXG5cclxuICAgIHN0YXRpYyBUZXh0RGVzYzpzdHJpbmdbXSA9IFxyXG4gICAgW1xyXG4gICAgICAgIFwidGV4dCB1bmF2YWlsYWJsZVwiLFxyXG4gICAgICAgIFwidGV4dCB1bmF2YWlsYWJsZVwiXHJcbiAgICBdO1xyXG59IiwiLyogICAgICBNRU5VIEdST1VQIDNEXHJcbiAgICB1c2VkIHRvIGNyZWF0ZSBhIDNkIG1lbnUgZ3JvdXAgaW4gdGhlIGdhbWUgc2NlbmUuIG1lbnUgb2JqZWN0cyBjYW4gYmUgY3JlYXRlZCBhbmQgXHJcbiAgICBvcmdhbml6ZWQgdGhyb3VnaCBhbiBpbnN0YW5jZSBvZiB0aGlzIG1hbmFnZXIuXHJcblxyXG4gICAgdGhlIG1lbnUgZ3JvdXAgYW5kIHRvZ2dsZSBidXR0b24gYXJlIHBsYWNlZCBhcyBwYXJlbnRzIG9mIHRoZSBvYmplY3QgZ2l2ZW4sIGFsbFxyXG4gICAgbWVudSBvYmplY3RzIGFyZSBwYXJlbnRlZCBvbnRvIHRoZSBtZW51IGdyb3VwLCBhbmQgYWxsIHRleHQgc2hhcGUgZW50aXRpZXMgYXJlXHJcbiAgICBwYXJlbnRlZCB0byB0aG9zZSBtZW51IG9iamVjdHMuXHJcbiovXHJcbmltcG9ydCB7IExpc3QsIERpY3Rpb25hcnkgfSBmcm9tIFwiY29sbGVjdGlvbnNcIjtcclxuQENvbXBvbmVudChcIk1lbnVHcm91cDNEXCIpXHJcbmV4cG9ydCBjbGFzcyBNZW51R3JvdXAzRFxyXG57XHJcbiAgICAvL2FkZHJlc3MgdG8gdGFyZ2V0IG1vZGVsc1xyXG4gICAgLy8gIE5PVEU6IHRoaXMgc2hvdWxkIGJlIHN0YXRpYywgYnV0IHN0YXRpYyBkZWZzIHNlZW0gdG8gYnJlYWsgaW4gdGhlIFNESyBkZXBsb3ltZW50XHJcbiAgICBwcml2YXRlIG9iamVjdF9sb2NhdGlvbnM6c3RyaW5nW10gPSBcclxuICAgIFtcclxuICAgICAgICAvL2VtcHR5XHJcbiAgICAgICAgXCJcIixcclxuICAgICAgICAvL3BhbmVsc1xyXG4gICAgICAgIFwibW9kZWxzL3V0aWxpdGllcy9NZW51M0RfUGFuZWxfU3F1YXJlLmdsYlwiLFxyXG4gICAgICAgIFwibW9kZWxzL3V0aWxpdGllcy9NZW51M0RfUGFuZWxfTG9uZy5nbGJcIixcclxuICAgICAgICAvL2J1dHRvbnNcclxuICAgICAgICBcIm1vZGVscy91dGlsaXRpZXMvTWVudTNEX0J1dHRvbl9TcXVhcmUuZ2xiXCIsXHJcbiAgICAgICAgXCJtb2RlbHMvdXRpbGl0aWVzL01lbnUzRF9CdXR0b25fTG9uZy5nbGJcIixcclxuICAgICAgICBcIm1vZGVscy91dGlsaXRpZXMvTWVudTNEX0J1dHRvbl9OYXJyb3cuZ2xiXCIsXHJcbiAgICBdO1xyXG5cclxuICAgIC8vcGFyZW50YWwgb2JqZWN0IGZvciBtZW51IGdyb3VwLCBob2xkcyBhbGwgYXNzb2NpYXRlZCBvYmplY3RzIChtZW51LCB0b2dnbGUsIGV0YylcclxuICAgIHB1YmxpYyBncm91cFBhcmVudDpFbnRpdHk7XHJcbiAgICAvL2FjdGlvbiBvYmplY3QgdXNlZCB0byB0b2dnbGUgbWFpbiBtZW51IG9iamVjdFxyXG4gICAgLy9wcml2YXRlIG1lbnVUb2dnbGVTdGF0ZTpib29sZWFuID0gZmFsc2U7XHJcbiAgICAvL3ByaXZhdGUgbWVudVRvZ2dsZTpFbnRpdHkgPSBuZXcgRW50aXR5KCk7XHJcbiAgICAvL2NvbGxlY3Rpb25zIGZvciBlbnRpdHkgYWNjZXNzXHJcbiAgICBwcml2YXRlIG1lbnVMaXN0Okxpc3Q8TWVudU9iamVjdDNEPjtcclxuICAgIHByaXZhdGUgbWVudURpY3Q6RGljdGlvbmFyeTxNZW51T2JqZWN0M0Q+O1xyXG5cclxuICAgIC8vY29uc3RydWN0b3IsIHRha2VzIGluIGFuIGVudGl0eSB0aGF0IHdpbGwgYmUgdXNlZCB3aGVuIHBhcmVudGluZ1xyXG4gICAgY29uc3RydWN0b3IoKVxyXG4gICAge1xyXG4gICAgICAgIC8vY3JlYXRlIGdyb3VwIHBhcmVudFxyXG4gICAgICAgIHRoaXMuZ3JvdXBQYXJlbnQgPSBuZXcgRW50aXR5KCk7XHJcbiAgICAgICAgdGhpcy5ncm91cFBhcmVudC5hZGRDb21wb25lbnQobmV3IFRyYW5zZm9ybVxyXG4gICAgICAgICh7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiBuZXcgVmVjdG9yMygwLDAsMCksXHJcbiAgICAgICAgICAgIHNjYWxlOiBuZXcgVmVjdG9yMygxLDEsMSksXHJcbiAgICAgICAgICAgIHJvdGF0aW9uOiBuZXcgUXVhdGVybmlvbigpLnNldEV1bGVyKDAsMCwwKVxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgLy9zZXQgdXAgbWVudSB0b2dnbGVcclxuICAgICAgICAvKnRoaXMubWVudVRvZ2dsZS5zZXRQYXJlbnQodGhpcy5ncm91cFBhcmVudCk7XHJcbiAgICAgICAgdGhpcy5tZW51VG9nZ2xlLmFkZENvbXBvbmVudChuZXcgR0xURlNoYXBlKFwibW9kZWxzL3V0aWxpdGllcy9tZW51T2JqU2V0dGluZ3NHZWFyQm94LmdsYlwiKSk7XHJcbiAgICAgICAgdGhpcy5tZW51VG9nZ2xlLmFkZENvbXBvbmVudChuZXcgVHJhbnNmb3JtXHJcbiAgICAgICAgKHtcclxuICAgICAgICAgICAgcG9zaXRpb246IG5ldyBWZWN0b3IzKDAsMCwwKSxcclxuICAgICAgICAgICAgc2NhbGU6IG5ldyBWZWN0b3IzKDEsMSwxKSxcclxuICAgICAgICAgICAgcm90YXRpb246IG5ldyBRdWF0ZXJuaW9uKCkuc2V0RXVsZXIoMCwwLDApXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIC8vICBwcmltYXJ5IGFjdGlvbjogdG9nZ2xlXHJcbiAgICAgICAgdGhpcy5tZW51VG9nZ2xlLmFkZENvbXBvbmVudFxyXG4gICAgICAgIChcclxuICAgICAgICAgICAgLy9hZGQgY2xpY2sgYWN0aW9uIGxpc3RlbmVyXHJcbiAgICAgICAgICAgIG5ldyBPblBvaW50ZXJEb3duXHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgIChlKSA9PlxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmJ1dHRvbklkID09IDEpIHsgdGhpcy5Ub2dnbGVNZW51U3RhdGUoKTsgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBidXR0b246IEFjdGlvbkJ1dHRvbi5BTlksXHJcbiAgICAgICAgICAgICAgICAgICAgc2hvd0ZlZWRiYWNrOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGhvdmVyVGV4dDogXCJbRV0gVG9nZ2xlIE1lbnVcIixcclxuICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZTogOFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTsqL1xyXG5cclxuICAgICAgICAvL2luaXRpYWxpemUgY29sbGVjdGlvbnNcclxuICAgICAgICB0aGlzLm1lbnVMaXN0ID0gbmV3IExpc3Q8TWVudU9iamVjdDNEPigpO1xyXG4gICAgICAgIHRoaXMubWVudURpY3QgPSBuZXcgRGljdGlvbmFyeTxNZW51T2JqZWN0M0Q+KCk7XHJcbiAgICB9XHJcbi8qXHJcbiAgICAvL3RvZ2dsZXMgdGhlIGN1cnJlbnQgbWVudSBzdGF0ZVxyXG4gICAgcHVibGljIFRvZ2dsZU1lbnVTdGF0ZSgpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5tZW51VG9nZ2xlU3RhdGUgPSAhdGhpcy5tZW51VG9nZ2xlU3RhdGU7XHJcbiAgICAgICAgdGhpcy5TZXRNZW51U3RhdGUodGhpcy5tZW51VG9nZ2xlU3RhdGUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vbWVudSB0b2dnbGUgb2JqZWN0XHJcbiAgICAvLyAgdHlwZTogMC0+cG9zaXRpb24sIDEtPnNjYWxlLCAyLT5yb3RhdGlvblxyXG4gICAgcHVibGljIEFkanVzdE1lbnVUb2dnbGUodHlwZTpudW1iZXIsIHZlY3Q6VmVjdG9yMylcclxuICAgIHtcclxuICAgICAgICBzd2l0Y2godHlwZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgIHRoaXMubWVudVRvZ2dsZS5nZXRDb21wb25lbnQoVHJhbnNmb3JtKS5wb3NpdGlvbiA9IHZlY3Q7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1lbnVUb2dnbGUuZ2V0Q29tcG9uZW50KFRyYW5zZm9ybSkuc2NhbGUgPSB2ZWN0O1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5tZW51VG9nZ2xlLmdldENvbXBvbmVudChUcmFuc2Zvcm0pLnJvdGF0aW9uID0gbmV3IFF1YXRlcm5pb24odmVjdC54LCB2ZWN0LnksIHZlY3Queik7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuKi9cclxuICAgIC8vc2V0cyB0aGUgc3RhdGUgb2YgdGhlIHByaW1hcnkgbWVudSB0cmVlXHJcbiAgICBwdWJsaWMgU2V0TWVudVN0YXRlKHN0YXRlOmJvb2xlYW4pXHJcbiAgICB7XHJcbiAgICAgICAgLy9lbmFibGUgbWVudVxyXG4gICAgICAgIGlmKHN0YXRlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZW5naW5lLmFkZEVudGl0eSh0aGlzLmdyb3VwUGFyZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9kaXNhYmxlIG1lbnVcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBlbmdpbmUucmVtb3ZlRW50aXR5KHRoaXMuZ3JvdXBQYXJlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL3RoaXMubWVudVRvZ2dsZVN0YXRlID0gc3RhdGU7XHJcbiAgICB9XHJcblxyXG4gICAgLy9tb2RpZmllcyB0aGUgdHJhbnNmb3JtIGRldGFpbHMgb2YgdGhlIG1lbnUgZ3JvdXAgcGFyZW50IG9iamVjdFxyXG4gICAgLy8gIHR5cGU6IDAtPnBvc2l0aW9uLCAxLT5zY2FsZSwgMi0+cm90YXRpb25cclxuICAgIHB1YmxpYyBBZGp1c3RNZW51UGFyZW50KHR5cGU6bnVtYmVyLCB2ZWN0OlZlY3RvcjMpXHJcbiAgICB7XHJcbiAgICAgICAgc3dpdGNoKHR5cGUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdyb3VwUGFyZW50LmdldENvbXBvbmVudChUcmFuc2Zvcm0pLnBvc2l0aW9uID0gdmVjdDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgIHRoaXMuZ3JvdXBQYXJlbnQuZ2V0Q29tcG9uZW50KFRyYW5zZm9ybSkuc2NhbGUgPSB2ZWN0O1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5ncm91cFBhcmVudC5nZXRDb21wb25lbnQoVHJhbnNmb3JtKS5yb3RhdGlvbiA9IG5ldyBRdWF0ZXJuaW9uKCkuc2V0RXVsZXIodmVjdC54LCB2ZWN0LnksIHZlY3Queik7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvL3ByZXBhcmVzIGEgbWVudSBvYmplY3Qgb2YgdGhlIGdpdmVuIHNpemUvc2hhcGUsIHdpdGggdGhlIGdpdmVuIHRleHQsIFxyXG4gICAgLy8gIHJlZ2lzdGVyZWQgdW5kZXIgdGhlIGdpdmVuIG5hbWVcclxuICAgIHB1YmxpYyBBZGRNZW51T2JqZWN0KG5hbWU6c3RyaW5nLCB0eXBlOm51bWJlciwgcGFyOnN0cmluZz0nJylcclxuICAgIHtcclxuICAgICAgICAvL2NyZWF0ZSBhbmQgcHJlcGFyZSBlbnRpdGllc1xyXG4gICAgICAgIHZhciB0bXA6TWVudU9iamVjdDNEID0gbmV3IE1lbnVPYmplY3QzRCh0aGlzLm9iamVjdF9sb2NhdGlvbnNbdHlwZV0sIG5hbWUpO1xyXG4gICAgICAgIGlmKHBhciAhPSAnJykgdG1wLnNldFBhcmVudCh0aGlzLkdldE1lbnVPYmplY3QocGFyKSk7XHJcbiAgICAgICAgZWxzZSB0bXAuc2V0UGFyZW50KHRoaXMuZ3JvdXBQYXJlbnQpO1xyXG5cclxuICAgICAgICAvL3JlZ2lzdGVyIG9iamVjdCB0byBjb2xsZWN0aW9uc1xyXG4gICAgICAgIHRoaXMubWVudUxpc3QuYWRkSXRlbSh0bXApO1xyXG4gICAgICAgIHRoaXMubWVudURpY3QuYWRkSXRlbShuYW1lLCB0bXApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vcmV0dXJucyB0aGUgcmVxdWVzdGVkIG1lbnUgb2JqZWN0XHJcbiAgICBwdWJsaWMgR2V0TWVudU9iamVjdChvYmpOYW1lOnN0cmluZyk6TWVudU9iamVjdDNEXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWVudURpY3QuZ2V0SXRlbShvYmpOYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICAvL3JldHVybnMgdGhlIHJlcXVlc3RlZCBtZW51IG9iamVjdFxyXG4gICAgcHVibGljIEdldE1lbnVPYmplY3RUZXh0KG9iak5hbWU6c3RyaW5nLCB0ZXh0TmFtZTpzdHJpbmcpOkVudGl0eVxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1lbnVEaWN0LmdldEl0ZW0ob2JqTmFtZSkuR2V0VGV4dE9iamVjdCh0ZXh0TmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9jaGFuZ2VzIGEgdGFyZ2V0ZWQgbWVudSBvYmplY3QgZW50aXR5XHJcbiAgICAvLyAgdHlwZTogMC0+cG9zaXRpb24sIDEtPnNjYWxlLCAyLT5yb3RhdGlvblxyXG4gICAgcHVibGljIEFkanVzdE1lbnVPYmplY3QobmFtZTpzdHJpbmcsIHR5cGU6bnVtYmVyLCB2ZWN0OlZlY3RvcjMpXHJcbiAgICB7XHJcbiAgICAgICAgc3dpdGNoKHR5cGUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1lbnVEaWN0LmdldEl0ZW0obmFtZSkuZ2V0Q29tcG9uZW50KFRyYW5zZm9ybSkucG9zaXRpb24gPSB2ZWN0O1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5tZW51RGljdC5nZXRJdGVtKG5hbWUpLmdldENvbXBvbmVudChUcmFuc2Zvcm0pLnNjYWxlID0gdmVjdDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgIHRoaXMubWVudURpY3QuZ2V0SXRlbShuYW1lKS5nZXRDb21wb25lbnQoVHJhbnNmb3JtKS5yb3RhdGlvbiA9ICBuZXcgUXVhdGVybmlvbigpLnNldEV1bGVyKHZlY3QueCwgdmVjdC55LCB2ZWN0LnopO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy9wcmVwYXJlcyBhIG1lbnUgb2JqZWN0IG9mIHRoZSBnaXZlbiBzaXplL3NoYXBlLCB3aXRoIHRoZSBnaXZlbiB0ZXh0LCBcclxuICAgIC8vICByZWdpc3RlcmVkIHVuZGVyIHRoZSBnaXZlbiBuYW1lXHJcbiAgICBwdWJsaWMgQWRkTWVudVRleHQobmFtZU9iajpzdHJpbmcsIG5hbWVUeHQ6c3RyaW5nLCB0ZXh0OnN0cmluZylcclxuICAgIHtcclxuICAgICAgICB0aGlzLm1lbnVEaWN0LmdldEl0ZW0obmFtZU9iaikuQWRkVGV4dE9iamVjdChuYW1lVHh0LCB0ZXh0KTtcclxuICAgICAgICB0aGlzLm1lbnVEaWN0LmdldEl0ZW0obmFtZU9iaikuR2V0VGV4dE9iamVjdChuYW1lVHh0KS5nZXRDb21wb25lbnQoVGV4dFNoYXBlKS53aWR0aCA9IDA7XHJcbiAgICAgICAgdGhpcy5tZW51RGljdC5nZXRJdGVtKG5hbWVPYmopLkdldFRleHRPYmplY3QobmFtZVR4dCkuZ2V0Q29tcG9uZW50KFRleHRTaGFwZSkuaGVpZ2h0ID0gMDtcclxuICAgICAgICB0aGlzLm1lbnVEaWN0LmdldEl0ZW0obmFtZU9iaikuR2V0VGV4dE9iamVjdChuYW1lVHh0KS5nZXRDb21wb25lbnQoVGV4dFNoYXBlKS50ZXh0V3JhcHBpbmcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLm1lbnVEaWN0LmdldEl0ZW0obmFtZU9iaikuR2V0VGV4dE9iamVjdChuYW1lVHh0KS5nZXRDb21wb25lbnQoVGV4dFNoYXBlKS5jb2xvciA9IHRoaXMudGV4dENvbG91cjtcclxuICAgIH1cclxuXHJcbiAgICAvL3NldHMgYSB0ZXh0IG9iamVjdCdzIGRpc3BsYXkgdGV4dFxyXG4gICAgcHVibGljIFNldE1lbnVUZXh0KG5hbWVPYmo6c3RyaW5nLCBuYW1lVHh0OnN0cmluZywgdGV4dDpzdHJpbmcpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5tZW51RGljdC5nZXRJdGVtKG5hbWVPYmopLkNoYW5nZVRleHQobmFtZVR4dCwgdGV4dCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9jaGFuZ2VzIGEgdGV4dCBvYmplY3QncyB0ZXh0c2hhcGUgc2V0dGluZ3NcclxuICAgIHB1YmxpYyBBZGp1c3RUZXh0T2JqZWN0KG5hbWVPYmo6c3RyaW5nLCBuYW1lVHh0OnN0cmluZywgdHlwZTpudW1iZXIsIHZhbHVlOlZlY3RvcjMpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5tZW51RGljdC5nZXRJdGVtKG5hbWVPYmopLkFkanVzdFRleHRPYmplY3QobmFtZVR4dCwgdHlwZSwgdmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vY2hhbmdlcyBhIHRleHQgb2JqZWN0J3MgdGV4dHNoYXBlIHNldHRpbmdzXHJcbiAgICBwdWJsaWMgQWRqdXN0VGV4dERpc3BsYXkobmFtZU9iajpzdHJpbmcsIG5hbWVUeHQ6c3RyaW5nLCB0eXBlOm51bWJlciwgdmFsdWU6bnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMubWVudURpY3QuZ2V0SXRlbShuYW1lT2JqKS5BZGp1c3RUZXh0RGlzcGxheShuYW1lVHh0LCB0eXBlLCB2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB0ZXh0Q29sb3VyOkNvbG9yMyA9IENvbG9yMy5CbGFjaygpO1xyXG4gICAgcHVibGljIFNldENvbG91cihjb2xvdXI6Q29sb3IzKVxyXG4gICAge1xyXG4gICAgICAgIC8vY2hhbmdlIGRlZmF1bHQgY29sb3VyXHJcbiAgICAgICAgdGhpcy50ZXh0Q29sb3VyID0gY29sb3VyO1xyXG5cclxuICAgICAgICAvL2FwcGx5IGNoYW5nZSB0byBhbGwgbWVudSB0ZXh0IG9iamVjdHNcclxuICAgICAgICBmb3IodmFyIGk6bnVtYmVyID0gMDsgaTx0aGlzLm1lbnVMaXN0LnNpemUoKTsgaSsrKVxyXG4gICAgICAgIHsgICAgXHJcbiAgICAgICAgICAgIGZvcih2YXIgajpudW1iZXIgPSAwOyBqPHRoaXMubWVudUxpc3QuZ2V0SXRlbShpKS50ZXh0TGlzdC5zaXplKCk7IGorKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tZW51TGlzdC5nZXRJdGVtKGkpLnRleHRMaXN0LmdldEl0ZW0oaikuZ2V0Q29tcG9uZW50KFRleHRTaGFwZSkuY29sb3IgPSB0aGlzLnRleHRDb2xvdXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbkBDb21wb25lbnQoXCJNZW51T2JqZWN0M0RcIilcclxuZXhwb3J0IGNsYXNzIE1lbnVPYmplY3QzRCBleHRlbmRzIEVudGl0eSBcclxue1xyXG4gICAgLy9hY2Nlc3Mga2V5XHJcbiAgICBwdWJsaWMgTmFtZTpzdHJpbmc7XHJcblxyXG4gICAgLy9jb2xsZWN0aW9ucyBvZiBhbGwgdGV4dCBlbnRpdGllc1xyXG4gICAgdGV4dExpc3Q6TGlzdDxFbnRpdHk+O1xyXG4gICAgdGV4dERpY3Q6RGljdGlvbmFyeTxFbnRpdHk+O1xyXG5cclxuICAgIC8vY29uc3RydWN0b3JcclxuICAgIGNvbnN0cnVjdG9yKG1vZGVsOnN0cmluZywgbmFtOnN0cmluZylcclxuICAgIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vYWRkIHRyYW5zZm9ybVxyXG4gICAgICAgIHRoaXMuYWRkQ29tcG9uZW50KG5ldyBUcmFuc2Zvcm1cclxuICAgICAgICAoe1xyXG4gICAgICAgICAgICBwb3NpdGlvbjogbmV3IFZlY3RvcjMoMCwwLDApLFxyXG4gICAgICAgICAgICBzY2FsZTogbmV3IFZlY3RvcjMoMSwxLDEpLFxyXG4gICAgICAgICAgICByb3RhdGlvbjogbmV3IFF1YXRlcm5pb24oKS5zZXRFdWxlcigwLDAsMClcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYobW9kZWwgIT0gJycpIHRoaXMuYWRkQ29tcG9uZW50KG5ldyBHTFRGU2hhcGUobW9kZWwpKTtcclxuXHJcbiAgICAgICAgLy9zZXQgYWNjZXNzIG5hbWVcclxuICAgICAgICB0aGlzLk5hbWUgPSBuYW07XHJcblxyXG4gICAgICAgIC8vY29sbGVjdGlvbnNcclxuICAgICAgICB0aGlzLnRleHRMaXN0ID0gbmV3IExpc3Q8RW50aXR5PigpO1xyXG4gICAgICAgIHRoaXMudGV4dERpY3QgPSBuZXcgRGljdGlvbmFyeTxFbnRpdHk+KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIFNldE9iamVjdFN0YXRlKHN0YXRlOmJvb2xlYW4pXHJcbiAgICB7XHJcbiAgICAgICAgaWYoc3RhdGUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZighdGhpcy5pc0FkZGVkVG9FbmdpbmUoKSkgZW5naW5lLmFkZEVudGl0eSh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYodGhpcy5pc0FkZGVkVG9FbmdpbmUoKSkgZW5naW5lLnJlbW92ZUVudGl0eSh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIEdldFRleHRPYmplY3QobmFtZTpzdHJpbmcpOkVudGl0eVxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRleHREaWN0LmdldEl0ZW0obmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9wcmVwYXJlcyBhIHRleHQgb2JqZWN0IHdpdGggdGhlIGdpdmVuIHRleHQsIFxyXG4gICAgLy8gIHJlZ2lzdGVyZWQgdW5kZXIgdGhlIGdpdmVuIG5hbWVcclxuICAgIHB1YmxpYyBBZGRUZXh0T2JqZWN0KG5hbWU6c3RyaW5nLCB0ZXh0OnN0cmluZylcclxuICAgIHtcclxuICAgICAgICAvL2NyZWF0ZSBhbmQgcHJlcGFyZSBlbnRpdHlcclxuICAgICAgICB2YXIgdG1wOkVudGl0eSA9IG5ldyBFbnRpdHkoKTtcclxuICAgICAgICB0bXAuYWRkQ29tcG9uZW50KG5ldyBUcmFuc2Zvcm1cclxuICAgICAgICAoe1xyXG4gICAgICAgICAgICBwb3NpdGlvbjogbmV3IFZlY3RvcjMoMCwwLDApLFxyXG4gICAgICAgICAgICBzY2FsZTogbmV3IFZlY3RvcjMoMSwxLDEpLFxyXG4gICAgICAgICAgICByb3RhdGlvbjogbmV3IFF1YXRlcm5pb24oKS5zZXRFdWxlcigwLDAsMClcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgdG1wLnNldFBhcmVudCh0aGlzKTtcclxuXHJcbiAgICAgICAgLy9hZGQgdGV4dCBzaGFwZSB3aXRoIGRlZmF1bHRlZCB2YWx1ZXNcclxuICAgICAgICB0bXAuYWRkQ29tcG9uZW50KG5ldyBUZXh0U2hhcGUodGV4dCkpO1xyXG4gICAgICAgIHRtcC5nZXRDb21wb25lbnQoVGV4dFNoYXBlKS5jb2xvciA9IENvbG9yMy5CbGFjaygpO1xyXG4gICAgICAgIHRtcC5nZXRDb21wb25lbnQoVGV4dFNoYXBlKS5mb250U2l6ZSA9IDk7XHJcblxyXG4gICAgICAgIC8vcmVnaXN0ZXIgb2JqZWN0IHRvIGNvbGxlY3Rpb25zXHJcbiAgICAgICAgdGhpcy50ZXh0TGlzdC5hZGRJdGVtKHRtcCk7XHJcbiAgICAgICAgdGhpcy50ZXh0RGljdC5hZGRJdGVtKG5hbWUsIHRtcCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9jaGFuZ2VzIGEgdGFyZ2V0ZWQgdGV4dCBvYmplY3QgZW50aXR5XHJcbiAgICAvLyAgdHlwZTogMC0+cG9zaXRpb24sIDEtPnNjYWxlLCAyLT5yb3RhdGlvblxyXG4gICAgcHVibGljIEFkanVzdFRleHRPYmplY3QobmFtZTpzdHJpbmcsIHR5cGU6bnVtYmVyLCB2ZWN0OlZlY3RvcjMpXHJcbiAgICB7XHJcblxyXG4gICAgICAgIC8vbGV0IGVudGl0eSA9IHRoaXMudGV4dERpY3QuZ2V0SXRlbShuYW1lKS5nZXRDb21wb25lbnQoVHJhbnNmb3JtKTtcclxuICAgICAgICBzd2l0Y2godHlwZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgIHRoaXMudGV4dERpY3QuZ2V0SXRlbShuYW1lKS5nZXRDb21wb25lbnQoVHJhbnNmb3JtKS5wb3NpdGlvbiA9IHZlY3Q7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRleHREaWN0LmdldEl0ZW0obmFtZSkuZ2V0Q29tcG9uZW50KFRyYW5zZm9ybSkuc2NhbGUgPSB2ZWN0O1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0RGljdC5nZXRJdGVtKG5hbWUpLmdldENvbXBvbmVudChUcmFuc2Zvcm0pLnJvdGF0aW9uID0gbmV3IFF1YXRlcm5pb24oKS5zZXRFdWxlcih2ZWN0LngsIHZlY3QueSwgdmVjdC56KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vY2hhbmdlcyBhIHRhcmdldGVkIG1lbnUgb2JqZWN0IGVudGl0eVxyXG4gICAgLy8gIHR5cGU6IDAtPmZvbnQgc2l6ZSwgaCBhbGlnbiwgdiBhbGlnblxyXG4gICAgcHVibGljIEFkanVzdFRleHREaXNwbGF5KG5hbWU6c3RyaW5nLCB0eXBlOm51bWJlciwgdmFsdWU6bnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIHN3aXRjaCh0eXBlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0RGljdC5nZXRJdGVtKG5hbWUpLmdldENvbXBvbmVudChUZXh0U2hhcGUpLmZvbnRTaXplID0gdmFsdWU7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2godmFsdWUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiB0aGlzLnRleHREaWN0LmdldEl0ZW0obmFtZSkuZ2V0Q29tcG9uZW50KFRleHRTaGFwZSkuaFRleHRBbGlnbiA9IFwibGVmdFwiOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6IHRoaXMudGV4dERpY3QuZ2V0SXRlbShuYW1lKS5nZXRDb21wb25lbnQoVGV4dFNoYXBlKS5oVGV4dEFsaWduID0gXCJjZW50ZXJcIjsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiB0aGlzLnRleHREaWN0LmdldEl0ZW0obmFtZSkuZ2V0Q29tcG9uZW50KFRleHRTaGFwZSkuaFRleHRBbGlnbiA9IFwicmlnaHRcIjsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2godmFsdWUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiB0aGlzLnRleHREaWN0LmdldEl0ZW0obmFtZSkuZ2V0Q29tcG9uZW50KFRleHRTaGFwZSkudlRleHRBbGlnbiA9IFwidG9wXCI7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTogdGhpcy50ZXh0RGljdC5nZXRJdGVtKG5hbWUpLmdldENvbXBvbmVudChUZXh0U2hhcGUpLnZUZXh0QWxpZ24gPSBcImNlbnRlclwiOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHRoaXMudGV4dERpY3QuZ2V0SXRlbShuYW1lKS5nZXRDb21wb25lbnQoVGV4dFNoYXBlKS52VGV4dEFsaWduID0gXCJib3R0b21cIjsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRleHREaWN0LmdldEl0ZW0obmFtZSkuZ2V0Q29tcG9uZW50KFRleHRTaGFwZSkubGluZVNwYWNpbmcgPSB2YWx1ZS50b1N0cmluZygpOyBcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vY2hhbmdlcyB0aGUgdGV4dCBvZiBhIHRhcmdldGVkIHRleHRzaGFwZVxyXG4gICAgcHVibGljIENoYW5nZVRleHQobmFtZTpzdHJpbmcsIHRleHQ6c3RyaW5nKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMudGV4dERpY3QuZ2V0SXRlbShuYW1lKS5nZXRDb21wb25lbnQoVGV4dFNoYXBlKS52YWx1ZSA9IHRleHQ7XHJcbiAgICB9XHJcbn0iLCIvKiAgICAgIEdBTUUgTUVOVVxyXG4gICAgY29udGFpbnMgYWxsIG1lbnUgc2V0dXAgYW5kIGNvbnRyb2wgbGlua3MuXHJcblxyXG4qL1xyXG5pbXBvcnQgeyBNZW51R3JvdXAyRCB9IGZyb20gXCJzcmMvdXRpbGl0aWVzL21lbnUtZ3JvdXAtMkRcIjtcclxuaW1wb3J0IHsgTWVudUdyb3VwM0QgfSBmcm9tIFwic3JjL3V0aWxpdGllcy9tZW51LWdyb3VwLTNEXCI7XHJcbmltcG9ydCB7IERpZmZpY3VsdHlEYXRhIH0gZnJvbSBcIi4vZGF0YS9kaWZmaWN1bHR5LWRhdGFcIjtcclxuaW1wb3J0IHsgRW5lbXlXYXZlTWFuYWdlciB9IGZyb20gXCIuL2VuZW15LXdhdmUtbWFuYWdlclwiO1xyXG5pbXBvcnQgeyBFbmVteVVuaXRNYW5hZ2VyIH0gZnJvbSBcIi4vZW5lbXktbWFuYWdlclwiO1xyXG5pbXBvcnQgeyBFbmVteVVuaXRPYmplY3QgfSBmcm9tIFwiLi9lbmVteS1lbnRpdHlcIjtcclxuaW1wb3J0IHsgVG93ZXJGb3VuZGF0aW9uIH0gZnJvbSBcIi4vdG93ZXItZW50aXR5XCI7XHJcbmltcG9ydCB7IEVuZW15RGF0YSB9IGZyb20gXCIuL2RhdGEvZW5lbXktZGF0YVwiO1xyXG5pbXBvcnQgeyBkYXRhVG93ZXJzIH0gZnJvbSBcIi4vZGF0YS90b3dlci1kYXRhXCI7XHJcbmltcG9ydCB7IEdhbWVTdGF0ZSB9IGZyb20gXCIuL2dhbWUtc3RhdGVzXCI7XHJcbmV4cG9ydCBjbGFzcyBHYW1lTWVudVxyXG57XHJcbiAgICAvL2FjY2VzcyBwb2NrZXRpbmdcclxuICAgIHByaXZhdGUgc3RhdGljIGluc3RhbmNlOnVuZGVmaW5lZHxHYW1lTWVudTtcclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IEluc3RhbmNlKCk6R2FtZU1lbnVcclxuICAgIHtcclxuICAgICAgICAvL2Vuc3VyZSBpbnN0YW5jZSBpcyBzZXRcclxuICAgICAgICBpZihHYW1lTWVudS5pbnN0YW5jZSA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgR2FtZU1lbnUuaW5zdGFuY2UgPSBuZXcgR2FtZU1lbnUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBHYW1lTWVudS5pbnN0YW5jZTtcclxuICAgIH1cclxuXHJcbiAgICAvL2NvbnN0cnVjdG9yXHJcbiAgICAvLyAgZ2VuZXJhdGVzIGFuZCBwbGFjZXMgZWFjaCBvYmplY3RcclxuICAgIGNvbnN0cnVjdG9yKClcclxuICAgIHtcclxuICAgICAgICAvLzJEXHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBIVUQgPSBuZXcgTWVudUdyb3VwMkQoKTtcclxuICAgICAgICB0aGlzLm1lbnVIVURTZXR1cDJEKCk7XHJcblxyXG4gICAgICAgIC8vM0QgbWFpbiBtZW51XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudSA9IG5ldyBNZW51R3JvdXAzRCgpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuU2V0Q29sb3VyKG5ldyBDb2xvcjMoMSwwLDEpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkanVzdE1lbnVQYXJlbnQoMCxuZXcgVmVjdG9yMyg0NCwwLDMyKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RNZW51UGFyZW50KDIsbmV3IFZlY3RvcjMoMCw5MCwwKSk7XHJcbiAgICAgICAgdGhpcy5tZW51TWFpblNldHVwKCk7XHJcblxyXG4gICAgICAgIC8vM0QgdG93ZXIgbWVudVxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIgPSBuZXcgTWVudUdyb3VwM0QoKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLlNldENvbG91cihuZXcgQ29sb3IzKDEsMCwxKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RNZW51UGFyZW50KDAsbmV3IFZlY3RvcjMoOCwwLDgpKTtcclxuICAgICAgICB0aGlzLm1lbnVUb3dlclNldHVwKCk7XHJcblxyXG4gICAgICAgIC8vM0QgaW5mbyBtZW51XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBTY2VuZUluZm8gPSBuZXcgTWVudUdyb3VwM0QoKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5TZXRDb2xvdXIobmV3IENvbG9yMygxLDAsMSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwU2NlbmVJbmZvLkFkanVzdE1lbnVQYXJlbnQoMCxuZXcgVmVjdG9yMygyMCwwLDIwKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBTY2VuZUluZm8uQWRqdXN0TWVudVBhcmVudCgyLG5ldyBWZWN0b3IzKDAsMCwwKSk7XHJcbiAgICAgICAgdGhpcy5tZW51VHV0b3JpYWxTZXR1cCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vMkQgSFVEXHJcbiAgICBtZW51R3JvdXBIVUQ6TWVudUdyb3VwMkQ7XHJcbiAgICAvLyAgc2V0dXBcclxuICAgIHByaXZhdGUgbWVudUhVRFNldHVwMkQoKVxyXG4gICAge1xyXG4gICAgICAgIC8vcGFyZW50IHNldHRpbmdzXHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBIVUQuZ3JvdXBQYXJlbnQud2lkdGggPSA1MDA7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBIVUQuZ3JvdXBQYXJlbnQuaGVpZ2h0ID0gMDtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cEhVRC5ncm91cFBhcmVudC5wb3NpdGlvblkgPSA3MztcclxuICAgICAgICB0aGlzLm1lbnVHcm91cEhVRC5ncm91cFBhcmVudC52QWxpZ24gPSBcInRvcFwiO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwSFVELmdyb3VwUGFyZW50LmhBbGlnbiA9IFwiY2VudGVyXCI7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy9odWQgZW5lbXkgY291bnRcclxuICAgICAgICAvLyAgcGFyZW50IG9ialxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwSFVELkFkZE1lbnVPYmplY3QoXCJodWRFbmVteVwiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cEhVRC5BZGp1c3RNZW51T2JqZWN0KFwiaHVkRW5lbXlcIiwgMCwgbmV3IFZlY3RvcjIoMCwwKSk7IC8vcG9zaXRpb25cclxuICAgICAgICB0aGlzLm1lbnVHcm91cEhVRC5BZGp1c3RNZW51T2JqZWN0KFwiaHVkRW5lbXlcIiwgMSwgbmV3IFZlY3RvcjIoNTAwLDE1MCkpOyAvL3NpemVcclxuICAgICAgICB0aGlzLm1lbnVHcm91cEhVRC5BZGp1c3RNZW51T2JqZWN0KFwiaHVkRW5lbXlcIiwgMiwgbmV3IFZlY3RvcjIoMSwwKSk7IC8vYWxpZ25tZW50XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBIVUQuQWRqdXN0TWVudUNvbG91cihcImh1ZEVuZW15XCIsIG5ldyBDb2xvcjQoMC4yLCAwLjIsIDAuMiwgMCkpO1xyXG4gICAgICAgIC8vICBmcmFtZSBpbWdcclxuICAgICAgICB0aGlzLm1lbnVHcm91cEhVRC5BZGRJbWFnZU9iamVjdChcImh1ZEVuZW15XCIsIFwiaW1nRW5lbXlcIiwgMywgMCwgdHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBIVUQuQWRqdXN0SW1hZ2VPYmplY3QoXCJodWRFbmVteVwiLCBcImltZ0VuZW15XCIsIDIsIDEsIG5ldyBWZWN0b3IyKDAsMCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwSFVELkFkanVzdEltYWdlT2JqZWN0KFwiaHVkRW5lbXlcIiwgXCJpbWdFbmVteVwiLCAyLCAyLCBuZXcgVmVjdG9yMigxLDApKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cEhVRC5BZGp1c3RJbWFnZU9iamVjdChcImh1ZEVuZW15XCIsIFwiaW1nRW5lbXlcIiwgMiwgMywgbmV3IFZlY3RvcjIoMCwwLjM1KSwgZmFsc2UpO1xyXG4gICAgICAgIC8vICBlbmVteSBjb3VudFxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwSFVELkFkZE1lbnVUZXh0KFwiaHVkRW5lbXlcIiwgXCJUZXh0RW5lbXlcIiwgXCIjIyMjXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwSFVELkFkanVzdFRleHREaXNwbGF5KFwiaHVkRW5lbXlcIiwgXCJUZXh0RW5lbXlcIiwgMCwgMTgpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwSFVELkFkanVzdFRleHRPYmplY3QoXCJodWRFbmVteVwiLCBcIlRleHRFbmVteVwiLCAwLCBuZXcgVmVjdG9yMigzMiwtODEpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cEhVRC5BZGp1c3RUZXh0T2JqZWN0KFwiaHVkRW5lbXlcIiwgXCJUZXh0RW5lbXlcIiwgMSwgbmV3IFZlY3RvcjIoODAsMCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwSFVELkFkanVzdFRleHRPYmplY3QoXCJodWRFbmVteVwiLCBcIlRleHRFbmVteVwiLCAyLCBuZXcgVmVjdG9yMigxLDApKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cEhVRC5BZGp1c3RUZXh0T2JqZWN0KFwiaHVkRW5lbXlcIiwgXCJUZXh0RW5lbXlcIiwgMywgbmV3IFZlY3RvcjIoMiwxKSk7XHJcblxyXG4gICAgICAgIC8vaHVkIG1haW4gZGlzcGxheVxyXG4gICAgICAgIC8vICBwYXJlbnQgb2JqXHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBIVUQuQWRkTWVudU9iamVjdChcImh1ZE1haW5cIik7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBIVUQuQWRqdXN0TWVudU9iamVjdChcImh1ZE1haW5cIiwgMCwgbmV3IFZlY3RvcjIoMCwwKSk7IC8vcG9zaXRpb25cclxuICAgICAgICB0aGlzLm1lbnVHcm91cEhVRC5BZGp1c3RNZW51T2JqZWN0KFwiaHVkTWFpblwiLCAxLCBuZXcgVmVjdG9yMig1MDAsMTUwKSk7IC8vc2l6ZVxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwSFVELkFkanVzdE1lbnVPYmplY3QoXCJodWRNYWluXCIsIDIsIG5ldyBWZWN0b3IyKDEsMCkpOyAvL2FsaWdubWVudFxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwSFVELkFkanVzdE1lbnVDb2xvdXIoXCJodWRNYWluXCIsIG5ldyBDb2xvcjQoMC4yLCAwLjIsIDAuMiwgMCkpO1xyXG4gICAgICAgIC8vICBmcmFtZVxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwSFVELkFkZEltYWdlT2JqZWN0KFwiaHVkTWFpblwiLCBcImltZ01haW5cIiwgMiwgMCwgdHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBIVUQuQWRqdXN0SW1hZ2VPYmplY3QoXCJodWRNYWluXCIsIFwiaW1nTWFpblwiLCAyLCAxLCBuZXcgVmVjdG9yMigwLDApKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cEhVRC5BZGp1c3RJbWFnZU9iamVjdChcImh1ZE1haW5cIiwgXCJpbWdNYWluXCIsIDIsIDIsIG5ldyBWZWN0b3IyKDEsMCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwSFVELkFkanVzdEltYWdlT2JqZWN0KFwiaHVkTWFpblwiLCBcImltZ01haW5cIiwgMiwgMywgbmV3IFZlY3RvcjIoMCwwLjM1KSwgZmFsc2UpO1xyXG4gICAgICAgIC8vICBnYW1lIHdhdmVzXHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBIVUQuQWRkTWVudVRleHQoXCJodWRNYWluXCIsIFwiVGV4dFdhdmVzXCIsIFwiIyMjXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwSFVELkFkanVzdFRleHREaXNwbGF5KFwiaHVkTWFpblwiLCBcIlRleHRXYXZlc1wiLCAwLCAxOCk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBIVUQuQWRqdXN0VGV4dE9iamVjdChcImh1ZE1haW5cIiwgXCJUZXh0V2F2ZXNcIiwgMCwgbmV3IFZlY3RvcjIoMTcsLTE2KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBIVUQuQWRqdXN0VGV4dE9iamVjdChcImh1ZE1haW5cIiwgXCJUZXh0V2F2ZXNcIiwgMSwgbmV3IFZlY3RvcjIoODAsMCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwSFVELkFkanVzdFRleHRPYmplY3QoXCJodWRNYWluXCIsIFwiVGV4dFdhdmVzXCIsIDIsIG5ldyBWZWN0b3IyKDEsMCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwSFVELkFkanVzdFRleHRPYmplY3QoXCJodWRNYWluXCIsIFwiVGV4dFdhdmVzXCIsIDMsIG5ldyBWZWN0b3IyKDIsMSkpO1xyXG4gICAgICAgIC8vICBwbGF5ZXIgaGVhbHRoXHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBIVUQuQWRkTWVudVRleHQoXCJodWRNYWluXCIsIFwiVGV4dExpZmVcIiwgXCIjIyMjXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwSFVELkFkanVzdFRleHREaXNwbGF5KFwiaHVkTWFpblwiLCBcIlRleHRMaWZlXCIsIDAsIDE4KTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cEhVRC5BZGp1c3RUZXh0T2JqZWN0KFwiaHVkTWFpblwiLCBcIlRleHRMaWZlXCIsIDAsIG5ldyBWZWN0b3IyKC0zNywtNDQpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cEhVRC5BZGp1c3RUZXh0T2JqZWN0KFwiaHVkTWFpblwiLCBcIlRleHRMaWZlXCIsIDEsIG5ldyBWZWN0b3IyKDYwLDApKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cEhVRC5BZGp1c3RUZXh0T2JqZWN0KFwiaHVkTWFpblwiLCBcIlRleHRMaWZlXCIsIDIsIG5ldyBWZWN0b3IyKDEsMCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwSFVELkFkanVzdFRleHRPYmplY3QoXCJodWRNYWluXCIsIFwiVGV4dExpZmVcIiwgMywgbmV3IFZlY3RvcjIoMiwxKSk7XHJcbiAgICAgICAgLy8gIHBsYXllciBtb25leVxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwSFVELkFkZE1lbnVUZXh0KFwiaHVkTWFpblwiLCBcIlRleHRNb25leVwiLCBcIiMjIyNcIik7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBIVUQuQWRqdXN0VGV4dERpc3BsYXkoXCJodWRNYWluXCIsIFwiVGV4dE1vbmV5XCIsIDAsIDE4KTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cEhVRC5BZGp1c3RUZXh0T2JqZWN0KFwiaHVkTWFpblwiLCBcIlRleHRNb25leVwiLCAwLCBuZXcgVmVjdG9yMigxMjAsLTQ0KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBIVUQuQWRqdXN0VGV4dE9iamVjdChcImh1ZE1haW5cIiwgXCJUZXh0TW9uZXlcIiwgMSwgbmV3IFZlY3RvcjIoNjAsMCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwSFVELkFkanVzdFRleHRPYmplY3QoXCJodWRNYWluXCIsIFwiVGV4dE1vbmV5XCIsIDIsIG5ldyBWZWN0b3IyKDEsMCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwSFVELkFkanVzdFRleHRPYmplY3QoXCJodWRNYWluXCIsIFwiVGV4dE1vbmV5XCIsIDMsIG5ldyBWZWN0b3IyKDIsMSkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vM0QgbWFpbiBtZW51XHJcbiAgICBtZW51R3JvdXBNYWluTWVudTpNZW51R3JvdXAzRDtcclxuICAgIFxyXG4gICAgLy9jYWxsYmFja3NcclxuICAgIC8vICBzZXQgZGlmZmljdWx0aWVzXHJcbiAgICBwdWJsaWMgU2V0RGlmZmljdWx0eToobnVtOm51bWJlcikgPT4gdm9pZCA9IHRoaXMuc2V0RGlmZmljdWx0eTtcclxuICAgIHByaXZhdGUgc2V0RGlmZmljdWx0eShudW06bnVtYmVyKSB7IGxvZyhcImdhbWUgbWVudSBjYWxsYmFjayBub3Qgc2V0IC0gc2V0IGRpZmZpY3VsdHkgXCIrbnVtLnRvU3RyaW5nKCkpOyB9XHJcbiAgICAvLyAgc3RhcnQgd2F2ZVxyXG4gICAgcHVibGljIEdhbWVSZXNldDooKSA9PiB2b2lkID0gdGhpcy5nYW1lUmVzZXQ7XHJcbiAgICBwcml2YXRlIGdhbWVSZXNldCgpIHsgbG9nKFwiZ2FtZSBtZW51IGNhbGxiYWNrIG5vdCBzZXQgLSByZXNldCBnYW1lXCIpOyB9XHJcbiAgICAvLyAgc3RhcnQgZ2FtZVxyXG4gICAgcHVibGljIEdhbWVTdGFydDooKSA9PiB2b2lkID0gdGhpcy5nYW1lU3RhcnQ7XHJcbiAgICBwcml2YXRlIGdhbWVTdGFydCgpIHsgbG9nKFwiZ2FtZSBtZW51IGNhbGxiYWNrIG5vdCBzZXQgLSBzdGFydCBnYW1lXCIpOyB9XHJcbiAgICAvLyAgc3RhcnQgd2F2ZVxyXG4gICAgcHVibGljIFdhdmVTdGFydDooKSA9PiB2b2lkID0gdGhpcy53YXZlU3RhcnQ7XHJcbiAgICBwcml2YXRlIHdhdmVTdGFydCgpIHsgbG9nKFwiZ2FtZSBtZW51IGNhbGxiYWNrIG5vdCBzZXQgLSBzdGFydCB3YXZlXCIpOyB9XHJcbiAgICBcclxuICAgIC8vc2V0dXBcclxuICAgIHByaXZhdGUgbWVudU1haW5TZXR1cCgpXHJcbiAgICB7XHJcbiAgICAgICAgLy9jcmVhdGUgb3ZlcmhlYWQgb2JqZWN0XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGRNZW51T2JqZWN0KFwibWVudU9mZnNldFwiLCAwKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkanVzdE1lbnVPYmplY3QoXCJtZW51T2Zmc2V0XCIsIDAsIG5ldyBWZWN0b3IzKDAsMS41LC0xKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RNZW51T2JqZWN0KFwibWVudU9mZnNldFwiLCAxLCBuZXcgVmVjdG9yMygxLDEsMSkpO1xyXG5cclxuICAgICAgICAvL01BSU4gR0FNRSBERVRBSUxTXHJcbiAgICAgICAgLy8gIG9mZnNldFxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRkTWVudU9iamVjdChcIm1lbnVNYWluRnJhbWVcIiwgMiwgXCJtZW51T2Zmc2V0XCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0TWVudU9iamVjdChcIm1lbnVNYWluRnJhbWVcIiwgMCwgbmV3IFZlY3RvcjMoMCwwLDApKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkanVzdE1lbnVPYmplY3QoXCJtZW51TWFpbkZyYW1lXCIsIDEsIG5ldyBWZWN0b3IzKDEsMSwxKSk7XHJcbiAgICAgICAgLy8gIG1haW4gbWVudSBkaXNwbGF5IG9iamVjdFxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRkTWVudU9iamVjdChcIm1lbnVNYWluSW5mb1wiLCAwLCBcIm1lbnVPZmZzZXRcIik7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RNZW51T2JqZWN0KFwibWVudU1haW5JbmZvXCIsIDAsIG5ldyBWZWN0b3IzKDAsMCwwLjAxMjUpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkanVzdE1lbnVPYmplY3QoXCJtZW51TWFpbkluZm9cIiwgMSwgbmV3IFZlY3RvcjMoMSwxLDEpKTtcclxuICAgICAgICAvLyAgbGFiZWwgaGVhZGVyIHRleHRcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkZE1lbnVUZXh0KFwibWVudU1haW5JbmZvXCIsIFwibWVudUxhYmVsXCIsIFwiRENMIFRPV0VSIERFRkVOQ0VcIik7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RUZXh0T2JqZWN0KFwibWVudU1haW5JbmZvXCIsIFwibWVudUxhYmVsXCIsIDAsIG5ldyBWZWN0b3IzKDAsMC42NSwwKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RUZXh0T2JqZWN0KFwibWVudU1haW5JbmZvXCIsIFwibWVudUxhYmVsXCIsIDEsIG5ldyBWZWN0b3IzKDAuNCwwLjQsMSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0VGV4dERpc3BsYXkoXCJtZW51TWFpbkluZm9cIiwgXCJtZW51TGFiZWxcIiwgMCwgNSk7XHJcblxyXG4gICAgICAgIC8vU0VTU0lPTiBDT05UUk9MUyAoR0FNRSBTVEFSVClcclxuICAgICAgICAvLyAgb2Zmc2V0XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGRNZW51T2JqZWN0KFwiZ2FtZVN0YXJ0Q29udGFpbmVyXCIsIDAsIFwibWVudU9mZnNldFwiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkanVzdE1lbnVPYmplY3QoXCJnYW1lU3RhcnRDb250YWluZXJcIiwgMCwgbmV3IFZlY3RvcjMoMCwwLDApKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkanVzdE1lbnVPYmplY3QoXCJnYW1lU3RhcnRDb250YWluZXJcIiwgMSwgbmV3IFZlY3RvcjMoMSwxLDEpKTtcclxuICAgICAgICAvLyAgbGFiZWwgaGVhZGVyIHRleHRcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkZE1lbnVUZXh0KFwiZ2FtZVN0YXJ0Q29udGFpbmVyXCIsIFwibWVudUxhYmVsXCIsIFwiU0VMRUNUIEdBTUUgRElGRklDVUxUWVwiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkanVzdFRleHRPYmplY3QoXCJnYW1lU3RhcnRDb250YWluZXJcIiwgXCJtZW51TGFiZWxcIiwgMCwgbmV3IFZlY3RvcjMoMCwwLjMsMCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0VGV4dE9iamVjdChcImdhbWVTdGFydENvbnRhaW5lclwiLCBcIm1lbnVMYWJlbFwiLCAxLCBuZXcgVmVjdG9yMygwLjQsMC40LDEpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkanVzdFRleHREaXNwbGF5KFwiZ2FtZVN0YXJ0Q29udGFpbmVyXCIsIFwibWVudUxhYmVsXCIsIDAsIDQpO1xyXG4gICAgICAgIC8vICBkaWZmaWN1bHR5IG9iamVjdFxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRkTWVudU9iamVjdChcImludGVyYWN0RGlmZmljdWx0eURpc3BsYXlcIiwgNCwgXCJnYW1lU3RhcnRDb250YWluZXJcIik7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RNZW51T2JqZWN0KFwiaW50ZXJhY3REaWZmaWN1bHR5RGlzcGxheVwiLCAwLCBuZXcgVmVjdG9yMygwLjAsMC4wNSwwKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RNZW51T2JqZWN0KFwiaW50ZXJhY3REaWZmaWN1bHR5RGlzcGxheVwiLCAxLCBuZXcgVmVjdG9yMygwLjIwLDAuMTUsMC4xNSkpO1xyXG4gICAgICAgIC8vICBkaWZmaWN1bHR5IGxhYmVsXHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGRNZW51VGV4dChcImludGVyYWN0RGlmZmljdWx0eURpc3BsYXlcIiwgXCJidXR0b25MYWJlbFwiLCBcIkRJRkZJQ1VMVFlcIik7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RUZXh0T2JqZWN0KFwiaW50ZXJhY3REaWZmaWN1bHR5RGlzcGxheVwiLCBcImJ1dHRvbkxhYmVsXCIsIDAsIG5ldyBWZWN0b3IzKDAsMCwtMC4wNCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0VGV4dE9iamVjdChcImludGVyYWN0RGlmZmljdWx0eURpc3BsYXlcIiwgXCJidXR0b25MYWJlbFwiLCAxLCBuZXcgVmVjdG9yMygwLjc1LDEsMSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0VGV4dERpc3BsYXkoXCJpbnRlcmFjdERpZmZpY3VsdHlEaXNwbGF5XCIsIFwiYnV0dG9uTGFiZWxcIiwgMCwgNSk7XHJcbiAgICAgICAgLy8gIGRpZmZpY3VsdHkgbmV4dCBvYmplY3RcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkZE1lbnVPYmplY3QoXCJpbnRlcmFjdERpZmZpY3VsdHlEZWNcIiwgMywgXCJnYW1lU3RhcnRDb250YWluZXJcIik7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RNZW51T2JqZWN0KFwiaW50ZXJhY3REaWZmaWN1bHR5RGVjXCIsIDAsIG5ldyBWZWN0b3IzKC0wLjQ1LDAuMDUsMCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0TWVudU9iamVjdChcImludGVyYWN0RGlmZmljdWx0eURlY1wiLCAxLCBuZXcgVmVjdG9yMygwLjE1LDAuMTUsMC4xNSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuR2V0TWVudU9iamVjdChcImludGVyYWN0RGlmZmljdWx0eURlY1wiKS5hZGRDb21wb25lbnRcclxuICAgICAgICAoXHJcbiAgICAgICAgICAgIC8vYWRkIGNsaWNrIGFjdGlvbiBsaXN0ZW5lclxyXG4gICAgICAgICAgICBuZXcgT25Qb2ludGVyRG93blxyXG4gICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICAoZSkgPT4gXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5TZXREaWZmaWN1bHR5KEdhbWVTdGF0ZS5EaWZmaWN1bHR5Q3VyLTEpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHsgYnV0dG9uOiBBY3Rpb25CdXR0b24uQU5ZLCBzaG93RmVlZGJhY2s6IHRydWUsIGhvdmVyVGV4dDogXCJJTkNSRUFTRSBESUZGSUNVTFRZXCIsIGRpc3RhbmNlOiAxNiB9XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApO1xyXG4gICAgICAgIC8vICBkaWZmaWN1bHR5IG5leHQgbGFiZWxcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkZE1lbnVUZXh0KFwiaW50ZXJhY3REaWZmaWN1bHR5RGVjXCIsIFwiYnV0dG9uTGFiZWxcIiwgXCJQUkVWXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0VGV4dE9iamVjdChcImludGVyYWN0RGlmZmljdWx0eURlY1wiLCBcImJ1dHRvbkxhYmVsXCIsIDAsIG5ldyBWZWN0b3IzKDAsMCwtMC4wNCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0VGV4dE9iamVjdChcImludGVyYWN0RGlmZmljdWx0eURlY1wiLCBcImJ1dHRvbkxhYmVsXCIsIDEsIG5ldyBWZWN0b3IzKDEsMSwxKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RUZXh0RGlzcGxheShcImludGVyYWN0RGlmZmljdWx0eURlY1wiLCBcImJ1dHRvbkxhYmVsXCIsIDAsIDUpO1xyXG4gICAgICAgIC8vICBkaWZmaWN1bHR5IG5leHQgb2JqZWN0XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGRNZW51T2JqZWN0KFwiaW50ZXJhY3REaWZmaWN1bHR5SW5jXCIsIDMsIFwiZ2FtZVN0YXJ0Q29udGFpbmVyXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0TWVudU9iamVjdChcImludGVyYWN0RGlmZmljdWx0eUluY1wiLCAwLCBuZXcgVmVjdG9yMygwLjQ1LDAuMDUsMCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0TWVudU9iamVjdChcImludGVyYWN0RGlmZmljdWx0eUluY1wiLCAxLCBuZXcgVmVjdG9yMygwLjE1LDAuMTUsMC4xNSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuR2V0TWVudU9iamVjdChcImludGVyYWN0RGlmZmljdWx0eUluY1wiKS5hZGRDb21wb25lbnRcclxuICAgICAgICAoXHJcbiAgICAgICAgICAgIC8vYWRkIGNsaWNrIGFjdGlvbiBsaXN0ZW5lclxyXG4gICAgICAgICAgICBuZXcgT25Qb2ludGVyRG93blxyXG4gICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICAoZSkgPT4gXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5TZXREaWZmaWN1bHR5KEdhbWVTdGF0ZS5EaWZmaWN1bHR5Q3VyKzEpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHsgYnV0dG9uOiBBY3Rpb25CdXR0b24uQU5ZLCBzaG93RmVlZGJhY2s6IHRydWUsIGhvdmVyVGV4dDogXCJJTkNSRUFTRSBESUZGSUNVTFRZXCIsIGRpc3RhbmNlOiAxNiB9XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApO1xyXG4gICAgICAgIC8vICBkaWZmaWN1bHR5IG5leHQgbGFiZWxcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkZE1lbnVUZXh0KFwiaW50ZXJhY3REaWZmaWN1bHR5SW5jXCIsIFwiYnV0dG9uTGFiZWxcIiwgXCJORVhUXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0VGV4dE9iamVjdChcImludGVyYWN0RGlmZmljdWx0eUluY1wiLCBcImJ1dHRvbkxhYmVsXCIsIDAsIG5ldyBWZWN0b3IzKDAsMCwtMC4wNCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0VGV4dE9iamVjdChcImludGVyYWN0RGlmZmljdWx0eUluY1wiLCBcImJ1dHRvbkxhYmVsXCIsIDEsIG5ldyBWZWN0b3IzKDEsMSwxKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RUZXh0RGlzcGxheShcImludGVyYWN0RGlmZmljdWx0eUluY1wiLCBcImJ1dHRvbkxhYmVsXCIsIDAsIDUpO1xyXG4gICAgICAgIC8vICBnYW1lIHN0YXJ0IG9ialxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRkTWVudU9iamVjdChcImludGVyYWN0R2FtZVN0YXJ0XCIsIDQsIFwiZ2FtZVN0YXJ0Q29udGFpbmVyXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0TWVudU9iamVjdChcImludGVyYWN0R2FtZVN0YXJ0XCIsIDAsIG5ldyBWZWN0b3IzKDAuMCwtMC41NSwwKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RNZW51T2JqZWN0KFwiaW50ZXJhY3RHYW1lU3RhcnRcIiwgMSwgbmV3IFZlY3RvcjMoMC4xNSwwLjE1LDAuMTUpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkdldE1lbnVPYmplY3QoXCJpbnRlcmFjdEdhbWVTdGFydFwiKS5hZGRDb21wb25lbnRcclxuICAgICAgICAoXHJcbiAgICAgICAgICAgIC8vYWRkIGNsaWNrIGFjdGlvbiBsaXN0ZW5lclxyXG4gICAgICAgICAgICBuZXcgT25Qb2ludGVyRG93blxyXG4gICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICAoZSkgPT4gXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5TZXRUb3dlck1lbnVTdGF0ZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5HYW1lU3RhcnQoKTsgXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgeyBidXR0b246IEFjdGlvbkJ1dHRvbi5BTlksIHNob3dGZWVkYmFjazogdHJ1ZSwgaG92ZXJUZXh0OiBcIlNUQVJUIEdBTUVcIiwgZGlzdGFuY2U6IDE2IH1cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgLy8gIGdhbWUgc3RhcnQgbGFiZWxcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkZE1lbnVUZXh0KFwiaW50ZXJhY3RHYW1lU3RhcnRcIiwgXCJidXR0b25MYWJlbFwiLCBcIlNUQVJUXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0VGV4dE9iamVjdChcImludGVyYWN0R2FtZVN0YXJ0XCIsIFwiYnV0dG9uTGFiZWxcIiwgMCwgbmV3IFZlY3RvcjMoMCwwLC0wLjA0KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RUZXh0T2JqZWN0KFwiaW50ZXJhY3RHYW1lU3RhcnRcIiwgXCJidXR0b25MYWJlbFwiLCAxLCBuZXcgVmVjdG9yMygxLDEsMSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0VGV4dERpc3BsYXkoXCJpbnRlcmFjdEdhbWVTdGFydFwiLCBcImJ1dHRvbkxhYmVsXCIsIDAsIDUpO1xyXG5cclxuICAgICAgICAvL1NFU1NJT04gQ09OVFJPTFMgKEJFVFdFRU4gV0FWRVMpXHJcbiAgICAgICAgLy8gIG9mZnNldFxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRkTWVudU9iamVjdChcIndhdmVCcmVha0NvbnRhaW5lclwiLCAwLCBcIm1lbnVPZmZzZXRcIik7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RNZW51T2JqZWN0KFwid2F2ZUJyZWFrQ29udGFpbmVyXCIsIDAsIG5ldyBWZWN0b3IzKDAsMCwwKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RNZW51T2JqZWN0KFwid2F2ZUJyZWFrQ29udGFpbmVyXCIsIDEsIG5ldyBWZWN0b3IzKDEsMSwxKSk7XHJcbiAgICAgICAgLy8gIGxhYmVsIGhlYWRlciB0ZXh0XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGRNZW51VGV4dChcIndhdmVCcmVha0NvbnRhaW5lclwiLCBcIm1lbnVMYWJlbFwiLCBcIlBSRVBBUkUgWU9VUiBERUZFTkNFUyFcIik7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RUZXh0T2JqZWN0KFwid2F2ZUJyZWFrQ29udGFpbmVyXCIsIFwibWVudUxhYmVsXCIsIDAsIG5ldyBWZWN0b3IzKDAsMC40LDApKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkanVzdFRleHRPYmplY3QoXCJ3YXZlQnJlYWtDb250YWluZXJcIiwgXCJtZW51TGFiZWxcIiwgMSwgbmV3IFZlY3RvcjMoMC40LDAuNCwxKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RUZXh0RGlzcGxheShcIndhdmVCcmVha0NvbnRhaW5lclwiLCBcIm1lbnVMYWJlbFwiLCAwLCA0KTtcclxuICAgICAgICAvLyAgd2F2ZSBsYWJlbFxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRkTWVudVRleHQoXCJ3YXZlQnJlYWtDb250YWluZXJcIiwgXCJ3YXZlTGFiZWxcIiwgXCJXQVZFOiAwMDAgLyAwMDBcIik7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RUZXh0T2JqZWN0KFwid2F2ZUJyZWFrQ29udGFpbmVyXCIsIFwid2F2ZUxhYmVsXCIsIDAsIG5ldyBWZWN0b3IzKC0wLjYsMC4yLC0wLjA0KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RUZXh0T2JqZWN0KFwid2F2ZUJyZWFrQ29udGFpbmVyXCIsIFwid2F2ZUxhYmVsXCIsIDEsIG5ldyBWZWN0b3IzKDAuNzUsMC43NSwxKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RUZXh0RGlzcGxheShcIndhdmVCcmVha0NvbnRhaW5lclwiLCBcIndhdmVMYWJlbFwiLCAwLCAyKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkanVzdFRleHREaXNwbGF5KFwid2F2ZUJyZWFrQ29udGFpbmVyXCIsIFwid2F2ZUxhYmVsXCIsIDEsIDApO1xyXG4gICAgICAgIC8vICBlbmVteSBuYW1lIGxhYmVsIDBcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkZE1lbnVUZXh0KFwid2F2ZUJyZWFrQ29udGFpbmVyXCIsIFwiZW5lbXlOYW1lTGFiZWwwXCIsIFwiPEVORU1ZIE5BTUU+XCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0VGV4dE9iamVjdChcIndhdmVCcmVha0NvbnRhaW5lclwiLCBcImVuZW15TmFtZUxhYmVsMFwiLCAwLCBuZXcgVmVjdG9yMygtMC43LDAuMDI1LC0wLjA0KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RUZXh0T2JqZWN0KFwid2F2ZUJyZWFrQ29udGFpbmVyXCIsIFwiZW5lbXlOYW1lTGFiZWwwXCIsIDEsIG5ldyBWZWN0b3IzKDEsMSwxKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RUZXh0RGlzcGxheShcIndhdmVCcmVha0NvbnRhaW5lclwiLCBcImVuZW15TmFtZUxhYmVsMFwiLCAwLCAxKTtcclxuICAgICAgICAvLyAgZW5lbXkgc3RhdCBsYWJlbCAwXHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGRNZW51VGV4dChcIndhdmVCcmVha0NvbnRhaW5lclwiLCBcImVuZW15U3RhdExhYmVsMFwiLCBcIkNPVU5UOiAwMDBcXG5IRUFMVEg6IDAwMFxcbkFSTU9VUjogMDAwXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0VGV4dE9iamVjdChcIndhdmVCcmVha0NvbnRhaW5lclwiLCBcImVuZW15U3RhdExhYmVsMFwiLCAwLCBuZXcgVmVjdG9yMygtMS4wLC0wLjE1LC0wLjA0KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RUZXh0T2JqZWN0KFwid2F2ZUJyZWFrQ29udGFpbmVyXCIsIFwiZW5lbXlTdGF0TGFiZWwwXCIsIDEsIG5ldyBWZWN0b3IzKDAuNjUsMC42NSwxKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RUZXh0RGlzcGxheShcIndhdmVCcmVha0NvbnRhaW5lclwiLCBcImVuZW15U3RhdExhYmVsMFwiLCAwLCAxKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkanVzdFRleHREaXNwbGF5KFwid2F2ZUJyZWFrQ29udGFpbmVyXCIsIFwiZW5lbXlTdGF0TGFiZWwwXCIsIDEsIDApO1xyXG4gICAgICAgIC8vICBlbmVteSBuYW1lIGxhYmVsIDFcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkZE1lbnVUZXh0KFwid2F2ZUJyZWFrQ29udGFpbmVyXCIsIFwiZW5lbXlOYW1lTGFiZWwxXCIsIFwiPEVORU1ZIE5BTUU+XCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0VGV4dE9iamVjdChcIndhdmVCcmVha0NvbnRhaW5lclwiLCBcImVuZW15TmFtZUxhYmVsMVwiLCAwLCBuZXcgVmVjdG9yMygwLjcsMC4wMjUsLTAuMDQpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkanVzdFRleHRPYmplY3QoXCJ3YXZlQnJlYWtDb250YWluZXJcIiwgXCJlbmVteU5hbWVMYWJlbDFcIiwgMSwgbmV3IFZlY3RvcjMoMSwxLDEpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkanVzdFRleHREaXNwbGF5KFwid2F2ZUJyZWFrQ29udGFpbmVyXCIsIFwiZW5lbXlOYW1lTGFiZWwxXCIsIDAsIDEpO1xyXG4gICAgICAgIC8vICBlbmVteSBzdGF0IGxhYmVsIDFcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkZE1lbnVUZXh0KFwid2F2ZUJyZWFrQ29udGFpbmVyXCIsIFwiZW5lbXlTdGF0TGFiZWwxXCIsIFwiQ09VTlQ6IDAwMFxcbkhFQUxUSDogMDAwXFxuQVJNT1VSOiAwMDBcIik7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RUZXh0T2JqZWN0KFwid2F2ZUJyZWFrQ29udGFpbmVyXCIsIFwiZW5lbXlTdGF0TGFiZWwxXCIsIDAsIG5ldyBWZWN0b3IzKDAuNCwtMC4xNSwtMC4wNCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0VGV4dE9iamVjdChcIndhdmVCcmVha0NvbnRhaW5lclwiLCBcImVuZW15U3RhdExhYmVsMVwiLCAxLCBuZXcgVmVjdG9yMygwLjY1LDAuNjUsMSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0VGV4dERpc3BsYXkoXCJ3YXZlQnJlYWtDb250YWluZXJcIiwgXCJlbmVteVN0YXRMYWJlbDFcIiwgMCwgMSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RUZXh0RGlzcGxheShcIndhdmVCcmVha0NvbnRhaW5lclwiLCBcImVuZW15U3RhdExhYmVsMVwiLCAxLCAwKTtcclxuICAgICAgICAvLyAgd2F2ZSBzdGFydCBidXR0b25cclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkZE1lbnVPYmplY3QoXCJpbnRlcmFjdFdhdmVTdGFydFwiLCA0LCBcIndhdmVCcmVha0NvbnRhaW5lclwiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkanVzdE1lbnVPYmplY3QoXCJpbnRlcmFjdFdhdmVTdGFydFwiLCAwLCBuZXcgVmVjdG9yMygtMC4yNSwtMC41NSwwKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RNZW51T2JqZWN0KFwiaW50ZXJhY3RXYXZlU3RhcnRcIiwgMSwgbmV3IFZlY3RvcjMoMC4xNSwwLjE1LDAuMTUpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkdldE1lbnVPYmplY3QoXCJpbnRlcmFjdFdhdmVTdGFydFwiKS5hZGRDb21wb25lbnRcclxuICAgICAgICAoXHJcbiAgICAgICAgICAgIC8vYWRkIGNsaWNrIGFjdGlvbiBsaXN0ZW5lclxyXG4gICAgICAgICAgICBuZXcgT25Qb2ludGVyRG93blxyXG4gICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICAoZSkgPT4gXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5TZXRUb3dlck1lbnVTdGF0ZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5XYXZlU3RhcnQoKTsgXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgeyBidXR0b246IEFjdGlvbkJ1dHRvbi5BTlksIHNob3dGZWVkYmFjazogdHJ1ZSwgaG92ZXJUZXh0OiBcIlNUQVJUIFdBVkVcIiwgZGlzdGFuY2U6IDE2IH1cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgLy8gIHdhdmUgc3RhcnQgbGFiZWxcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkZE1lbnVUZXh0KFwiaW50ZXJhY3RXYXZlU3RhcnRcIiwgXCJidXR0b25MYWJlbFwiLCBcIlNUQVJUXFxuV0FWRVwiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkanVzdFRleHRPYmplY3QoXCJpbnRlcmFjdFdhdmVTdGFydFwiLCBcImJ1dHRvbkxhYmVsXCIsIDAsIG5ldyBWZWN0b3IzKDAsMCwtMC4wNCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0VGV4dE9iamVjdChcImludGVyYWN0V2F2ZVN0YXJ0XCIsIFwiYnV0dG9uTGFiZWxcIiwgMSwgbmV3IFZlY3RvcjMoMSwxLDEpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkanVzdFRleHREaXNwbGF5KFwiaW50ZXJhY3RXYXZlU3RhcnRcIiwgXCJidXR0b25MYWJlbFwiLCAwLCA1KTtcclxuICAgICAgICAvLyAgZ2FtZSByZXNldCBidXR0b25cclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkZE1lbnVPYmplY3QoXCJpbnRlcmFjdEdhbWVSZXNldFwiLCA0LCBcIndhdmVCcmVha0NvbnRhaW5lclwiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkanVzdE1lbnVPYmplY3QoXCJpbnRlcmFjdEdhbWVSZXNldFwiLCAwLCBuZXcgVmVjdG9yMygwLjI1LC0wLjU1LDApKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkanVzdE1lbnVPYmplY3QoXCJpbnRlcmFjdEdhbWVSZXNldFwiLCAxLCBuZXcgVmVjdG9yMygwLjE1LDAuMTUsMC4xNSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuR2V0TWVudU9iamVjdChcImludGVyYWN0R2FtZVJlc2V0XCIpLmFkZENvbXBvbmVudFxyXG4gICAgICAgIChcclxuICAgICAgICAgICAgLy9hZGQgY2xpY2sgYWN0aW9uIGxpc3RlbmVyXHJcbiAgICAgICAgICAgIG5ldyBPblBvaW50ZXJEb3duXHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgIChlKSA9PiBcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLlNldFRvd2VyTWVudVN0YXRlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLkdhbWVSZXNldCgpOyBcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7IGJ1dHRvbjogQWN0aW9uQnV0dG9uLkFOWSwgc2hvd0ZlZWRiYWNrOiB0cnVlLCBob3ZlclRleHQ6IFwiUkVTRVQgR0FNRVwiLCBkaXN0YW5jZTogMTYgfVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgICAgICAvLyAgZ2FtZSByZXNldCBsYWJlbFxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRkTWVudVRleHQoXCJpbnRlcmFjdEdhbWVSZXNldFwiLCBcImJ1dHRvbkxhYmVsXCIsIFwiUkVTRVRcXG5HQU1FXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0VGV4dE9iamVjdChcImludGVyYWN0R2FtZVJlc2V0XCIsIFwiYnV0dG9uTGFiZWxcIiwgMCwgbmV3IFZlY3RvcjMoMCwwLC0wLjA0KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RUZXh0T2JqZWN0KFwiaW50ZXJhY3RHYW1lUmVzZXRcIiwgXCJidXR0b25MYWJlbFwiLCAxLCBuZXcgVmVjdG9yMygxLDEsMSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0VGV4dERpc3BsYXkoXCJpbnRlcmFjdEdhbWVSZXNldFwiLCBcImJ1dHRvbkxhYmVsXCIsIDAsIDUpO1xyXG5cclxuICAgICAgICAvL1NFU1NJT04gQ09OVFJPTFMgKERVUklORyBXQVZFKVxyXG4gICAgICAgIC8vICBvZmZzZXRcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkZE1lbnVPYmplY3QoXCJ3YXZlT25Hb2luZ0NvbnRhaW5lclwiLCAwLCBcIm1lbnVPZmZzZXRcIik7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RNZW51T2JqZWN0KFwid2F2ZU9uR29pbmdDb250YWluZXJcIiwgMCwgbmV3IFZlY3RvcjMoMCwwLDApKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkanVzdE1lbnVPYmplY3QoXCJ3YXZlT25Hb2luZ0NvbnRhaW5lclwiLCAxLCBuZXcgVmVjdG9yMygxLDEsMSkpO1xyXG4gICAgICAgIC8vICBsYWJlbCBoZWFkZXIgdGV4dFxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRkTWVudVRleHQoXCJ3YXZlT25Hb2luZ0NvbnRhaW5lclwiLCBcIm1lbnVMYWJlbFwiLCBcIkRFRkVORCBZT1VSIEJBU0UhXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0VGV4dE9iamVjdChcIndhdmVPbkdvaW5nQ29udGFpbmVyXCIsIFwibWVudUxhYmVsXCIsIDAsIG5ldyBWZWN0b3IzKDAsMC40LDApKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkanVzdFRleHRPYmplY3QoXCJ3YXZlT25Hb2luZ0NvbnRhaW5lclwiLCBcIm1lbnVMYWJlbFwiLCAxLCBuZXcgVmVjdG9yMygwLjQsMC40LDEpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkanVzdFRleHREaXNwbGF5KFwid2F2ZU9uR29pbmdDb250YWluZXJcIiwgXCJtZW51TGFiZWxcIiwgMCwgNCk7XHJcbiAgICAgICAgLy8gIHdhdmUgbGFiZWxcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkZE1lbnVUZXh0KFwid2F2ZU9uR29pbmdDb250YWluZXJcIiwgXCJ3YXZlTGFiZWxcIiwgXCJXQVZFOiAwMDAgLyAwMDBcIik7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RUZXh0T2JqZWN0KFwid2F2ZU9uR29pbmdDb250YWluZXJcIiwgXCJ3YXZlTGFiZWxcIiwgMCwgbmV3IFZlY3RvcjMoLTAuNiwwLjIsLTAuMDQpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkanVzdFRleHRPYmplY3QoXCJ3YXZlT25Hb2luZ0NvbnRhaW5lclwiLCBcIndhdmVMYWJlbFwiLCAxLCBuZXcgVmVjdG9yMygwLjc1LDAuNzUsMSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0VGV4dERpc3BsYXkoXCJ3YXZlT25Hb2luZ0NvbnRhaW5lclwiLCBcIndhdmVMYWJlbFwiLCAwLCAyKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkanVzdFRleHREaXNwbGF5KFwid2F2ZU9uR29pbmdDb250YWluZXJcIiwgXCJ3YXZlTGFiZWxcIiwgMSwgMCk7XHJcbiAgICAgICAgLy8gIGVuZW15IGNvdW50IGxhYmVsXHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGRNZW51VGV4dChcIndhdmVPbkdvaW5nQ29udGFpbmVyXCIsIFwiZW5lbXlDb3VudExhYmVsXCIsIFwiRU5FTUlFUzogMDAwXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0VGV4dE9iamVjdChcIndhdmVPbkdvaW5nQ29udGFpbmVyXCIsIFwiZW5lbXlDb3VudExhYmVsXCIsIDAsIG5ldyBWZWN0b3IzKC0wLjYsMC4wMjUsLTAuMDQpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkanVzdFRleHRPYmplY3QoXCJ3YXZlT25Hb2luZ0NvbnRhaW5lclwiLCBcImVuZW15Q291bnRMYWJlbFwiLCAxLCBuZXcgVmVjdG9yMygwLjc1LDAuNzUsMSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0VGV4dERpc3BsYXkoXCJ3YXZlT25Hb2luZ0NvbnRhaW5lclwiLCBcImVuZW15Q291bnRMYWJlbFwiLCAwLCAyKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkanVzdFRleHREaXNwbGF5KFwid2F2ZU9uR29pbmdDb250YWluZXJcIiwgXCJlbmVteUNvdW50TGFiZWxcIiwgMSwgMCk7XHJcbiAgICAgICAgLy8gIGdhbWUgcmVzZXQgYnV0dG9uXHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGRNZW51T2JqZWN0KFwiaW50ZXJhY3RHYW1lUmVzZXRcIiwgNCwgXCJ3YXZlT25Hb2luZ0NvbnRhaW5lclwiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkanVzdE1lbnVPYmplY3QoXCJpbnRlcmFjdEdhbWVSZXNldFwiLCAwLCBuZXcgVmVjdG9yMygwLjI1LC0wLjU1LDApKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkanVzdE1lbnVPYmplY3QoXCJpbnRlcmFjdEdhbWVSZXNldFwiLCAxLCBuZXcgVmVjdG9yMygwLjE1LDAuMTUsMC4xNSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuR2V0TWVudU9iamVjdChcImludGVyYWN0R2FtZVJlc2V0XCIpLmFkZENvbXBvbmVudFxyXG4gICAgICAgIChcclxuICAgICAgICAgICAgLy9hZGQgY2xpY2sgYWN0aW9uIGxpc3RlbmVyXHJcbiAgICAgICAgICAgIG5ldyBPblBvaW50ZXJEb3duXHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgIChlKSA9PiBcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLlNldFRvd2VyTWVudVN0YXRlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLkdhbWVSZXNldCgpOyBcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7IGJ1dHRvbjogQWN0aW9uQnV0dG9uLkFOWSwgc2hvd0ZlZWRiYWNrOiB0cnVlLCBob3ZlclRleHQ6IFwiUkVTRVQgR0FNRVwiLCBkaXN0YW5jZTogMTYgfVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgICAgICAvLyAgZ2FtZSByZXNldCBsYWJlbFxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRkTWVudVRleHQoXCJpbnRlcmFjdEdhbWVSZXNldFwiLCBcImJ1dHRvbkxhYmVsXCIsIFwiUkVTRVRcXG5HQU1FXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0VGV4dE9iamVjdChcImludGVyYWN0R2FtZVJlc2V0XCIsIFwiYnV0dG9uTGFiZWxcIiwgMCwgbmV3IFZlY3RvcjMoMCwwLC0wLjA0KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RUZXh0T2JqZWN0KFwiaW50ZXJhY3RHYW1lUmVzZXRcIiwgXCJidXR0b25MYWJlbFwiLCAxLCBuZXcgVmVjdG9yMygxLDEsMSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0VGV4dERpc3BsYXkoXCJpbnRlcmFjdEdhbWVSZXNldFwiLCBcImJ1dHRvbkxhYmVsXCIsIDAsIDUpO1xyXG5cclxuICAgICAgICAvL1NFU1NJT04gQ09OVFJPTFMgKEdBTUUgRU5EKVxyXG4gICAgICAgIC8vICBvZmZzZXRcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkZE1lbnVPYmplY3QoXCJnYW1lRW5kQ29udGFpbmVyXCIsIDAsIFwibWVudU9mZnNldFwiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkanVzdE1lbnVPYmplY3QoXCJnYW1lRW5kQ29udGFpbmVyXCIsIDAsIG5ldyBWZWN0b3IzKDAsMCwwKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RNZW51T2JqZWN0KFwiZ2FtZUVuZENvbnRhaW5lclwiLCAxLCBuZXcgVmVjdG9yMygxLDEsMSkpO1xyXG4gICAgICAgIC8vICBsYWJlbCBoZWFkZXIgdGV4dFxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRkTWVudVRleHQoXCJnYW1lRW5kQ29udGFpbmVyXCIsIFwibWVudUxhYmVsXCIsIFwiR0FNRSBPVkVSOiAjIyMjIyMhXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0VGV4dE9iamVjdChcImdhbWVFbmRDb250YWluZXJcIiwgXCJtZW51TGFiZWxcIiwgMCwgbmV3IFZlY3RvcjMoMCwwLjQsMCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0VGV4dE9iamVjdChcImdhbWVFbmRDb250YWluZXJcIiwgXCJtZW51TGFiZWxcIiwgMSwgbmV3IFZlY3RvcjMoMC40LDAuNCwxKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RUZXh0RGlzcGxheShcImdhbWVFbmRDb250YWluZXJcIiwgXCJtZW51TGFiZWxcIiwgMCwgNCk7XHJcbiAgICAgICAgLy8gIHdhdmUgbGFiZWxcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkZE1lbnVUZXh0KFwiZ2FtZUVuZENvbnRhaW5lclwiLCBcIndhdmVMYWJlbFwiLCBcIldBVkVTIENPTVBMRVRFRDogMDAwIC8gMDAwXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0VGV4dE9iamVjdChcImdhbWVFbmRDb250YWluZXJcIiwgXCJ3YXZlTGFiZWxcIiwgMCwgbmV3IFZlY3RvcjMoLTAuNiwwLjIsLTAuMDQpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkanVzdFRleHRPYmplY3QoXCJnYW1lRW5kQ29udGFpbmVyXCIsIFwid2F2ZUxhYmVsXCIsIDEsIG5ldyBWZWN0b3IzKDAuNzUsMC43NSwxKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RUZXh0RGlzcGxheShcImdhbWVFbmRDb250YWluZXJcIiwgXCJ3YXZlTGFiZWxcIiwgMCwgMik7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RUZXh0RGlzcGxheShcImdhbWVFbmRDb250YWluZXJcIiwgXCJ3YXZlTGFiZWxcIiwgMSwgMCk7XHJcbiAgICAgICAgLy8gIGVuZW15IGNvdW50IGxhYmVsXHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGRNZW51VGV4dChcImdhbWVFbmRDb250YWluZXJcIiwgXCJlbmVteUNvdW50TGFiZWxcIiwgXCJFTkVNSUVTIFNMQUlOOiAwMDBcIik7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RUZXh0T2JqZWN0KFwiZ2FtZUVuZENvbnRhaW5lclwiLCBcImVuZW15Q291bnRMYWJlbFwiLCAwLCBuZXcgVmVjdG9yMygtMC42LDAuMDI1LC0wLjA0KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RUZXh0T2JqZWN0KFwiZ2FtZUVuZENvbnRhaW5lclwiLCBcImVuZW15Q291bnRMYWJlbFwiLCAxLCBuZXcgVmVjdG9yMygwLjc1LDAuNzUsMSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0VGV4dERpc3BsYXkoXCJnYW1lRW5kQ29udGFpbmVyXCIsIFwiZW5lbXlDb3VudExhYmVsXCIsIDAsIDIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0VGV4dERpc3BsYXkoXCJnYW1lRW5kQ29udGFpbmVyXCIsIFwiZW5lbXlDb3VudExhYmVsXCIsIDEsIDApO1xyXG4gICAgICAgIC8vICBnYW1lIHJlc2V0IGJ1dHRvblxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRkTWVudU9iamVjdChcImludGVyYWN0R2FtZVJlc2V0XCIsIDQsIFwiZ2FtZUVuZENvbnRhaW5lclwiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkanVzdE1lbnVPYmplY3QoXCJpbnRlcmFjdEdhbWVSZXNldFwiLCAwLCBuZXcgVmVjdG9yMygwLjI1LC0wLjU1LDApKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkFkanVzdE1lbnVPYmplY3QoXCJpbnRlcmFjdEdhbWVSZXNldFwiLCAxLCBuZXcgVmVjdG9yMygwLjE1LDAuMTUsMC4xNSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuR2V0TWVudU9iamVjdChcImludGVyYWN0R2FtZVJlc2V0XCIpLmFkZENvbXBvbmVudFxyXG4gICAgICAgIChcclxuICAgICAgICAgICAgLy9hZGQgY2xpY2sgYWN0aW9uIGxpc3RlbmVyXHJcbiAgICAgICAgICAgIG5ldyBPblBvaW50ZXJEb3duXHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgIChlKSA9PiBcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLlNldFRvd2VyTWVudVN0YXRlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLkdhbWVSZXNldCgpOyBcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7IGJ1dHRvbjogQWN0aW9uQnV0dG9uLkFOWSwgc2hvd0ZlZWRiYWNrOiB0cnVlLCBob3ZlclRleHQ6IFwiUkVTRVQgR0FNRVwiLCBkaXN0YW5jZTogMTYgfVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgICAgICAvLyAgZ2FtZSByZXNldCBsYWJlbFxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRkTWVudVRleHQoXCJpbnRlcmFjdEdhbWVSZXNldFwiLCBcImJ1dHRvbkxhYmVsXCIsIFwiUkVTRVRcXG5HQU1FXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0VGV4dE9iamVjdChcImludGVyYWN0R2FtZVJlc2V0XCIsIFwiYnV0dG9uTGFiZWxcIiwgMCwgbmV3IFZlY3RvcjMoMCwwLC0wLjA0KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5BZGp1c3RUZXh0T2JqZWN0KFwiaW50ZXJhY3RHYW1lUmVzZXRcIiwgXCJidXR0b25MYWJlbFwiLCAxLCBuZXcgVmVjdG9yMygxLDEsMSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuQWRqdXN0VGV4dERpc3BsYXkoXCJpbnRlcmFjdEdhbWVSZXNldFwiLCBcImJ1dHRvbkxhYmVsXCIsIDAsIDUpO1xyXG5cclxuICAgICAgICAvL2VuYWJsZSBtYWluIG1lbnVcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LlNldE1lbnVTdGF0ZSh0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICAvL3VwZGF0ZXNcclxuICAgIC8vICB1cGRhdGUgZGlmZmljdWx0eSBkaXNwbGF5XHJcbiAgICB1cGRhdGVEaWZmaWN1bHR5KClcclxuICAgIHtcclxuICAgICAgICAvLzNkXHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5TZXRNZW51VGV4dChcImludGVyYWN0RGlmZmljdWx0eURpc3BsYXlcIiwgXCJidXR0b25MYWJlbFwiLCBEaWZmaWN1bHR5RGF0YVtHYW1lU3RhdGUuRGlmZmljdWx0eUN1cl0uRGlzcGxheU5hbWUpO1xyXG4gICAgfVxyXG4gICAgLy91cGRhdGVzIGxpZmUgY291bnRcclxuICAgIHVwZGF0ZUxpZmVDb3VudCgpIFxyXG4gICAgeyBcclxuICAgICAgICAvLzJkXHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBIVUQuU2V0TWVudVRleHQoXCJodWRNYWluXCIsIFwiVGV4dExpZmVcIiwgR2FtZVN0YXRlLlBsYXllckhlYWx0aC50b1N0cmluZygpKTsgXHJcbiAgICB9XHJcbiAgICAvL3VwZGF0ZXMgbW9uZXkgY291bnRcclxuICAgIHVwZGF0ZU1vbmV5Q291bnQoKSBcclxuICAgIHsgXHJcbiAgICAgICAgLy8yZFxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwSFVELlNldE1lbnVUZXh0KFwiaHVkTWFpblwiLCBcIlRleHRNb25leVwiLCBHYW1lU3RhdGUuUGxheWVyTW9uZXkudG9TdHJpbmcoKSk7IFxyXG4gICAgfVxyXG4gICAgLy8gIHVwZGF0ZSB3YXZlIGNvdW50XHJcbiAgICBVcGRhdGVXYXZlQ291bnQoKVxyXG4gICAge1xyXG4gICAgICAgIC8vMmRcclxuICAgICAgICB0aGlzLm1lbnVHcm91cEhVRC5TZXRNZW51VGV4dChcImh1ZE1haW5cIiwgXCJUZXh0V2F2ZXNcIiwgR2FtZVN0YXRlLldhdmVDdXIudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgLy8zZFxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuU2V0TWVudVRleHQoXCJ3YXZlT25Hb2luZ0NvbnRhaW5lclwiLCBcIndhdmVMYWJlbFwiLCBcIldBVkU6IFwiK0dhbWVTdGF0ZS5XYXZlQ3VyLnRvU3RyaW5nKCkrXCIgLyBcIlxyXG4gICAgICAgICAgICArR2FtZVN0YXRlLldhdmVNYXgudG9TdHJpbmcoKSk7ICAgIFxyXG4gICAgfVxyXG4gICAgLy8gIHVwZGF0ZSBlbmVteSBjb3VudFxyXG4gICAgVXBkYXRlRW5lbXlDb3VudCgpXHJcbiAgICB7XHJcbiAgICAgICAgLy8yZFxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwSFVELlNldE1lbnVUZXh0KFwiaHVkRW5lbXlcIiwgXCJUZXh0RW5lbXlcIiwgRW5lbXlVbml0TWFuYWdlci5JbnN0YW5jZS5lbmVteVNpemVDdXIudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgLy8zZFxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuU2V0TWVudVRleHQoXCJ3YXZlT25Hb2luZ0NvbnRhaW5lclwiLCBcImVuZW15Q291bnRMYWJlbFwiLCBcIkVORU1JRVM6IFwiK0VuZW15VW5pdE1hbmFnZXIuSW5zdGFuY2UuZW5lbXlTaXplQ3VyKTtcclxuICAgIH1cclxuICAgIC8vICB1cGRhdGUgZW5lbXkgdHlwZVxyXG4gICAgVXBkYXRlRW5lbXlUeXBlcygpXHJcbiAgICB7XHJcbiAgICAgICAgLy9zYW1lIGVuZW15IHR5cGVzXHJcbiAgICAgICAgaWYoRW5lbXlXYXZlTWFuYWdlci5JbnN0YW5jZS5HZXRFbmVteVVuaXRUeXBlKEdhbWVTdGF0ZS5XYXZlQ3VyLCAwKSA9PSBFbmVteVdhdmVNYW5hZ2VyLkluc3RhbmNlLkdldEVuZW15VW5pdFR5cGUoR2FtZVN0YXRlLldhdmVDdXIsIDEpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy9lbmVteSAwXHJcbiAgICAgICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuU2V0TWVudVRleHQoXCJ3YXZlQnJlYWtDb250YWluZXJcIiwgXCJlbmVteU5hbWVMYWJlbDBcIiwgXHJcbiAgICAgICAgICAgICAgICBFbmVteURhdGFbRW5lbXlXYXZlTWFuYWdlci5JbnN0YW5jZS5HZXRFbmVteVVuaXRUeXBlKEdhbWVTdGF0ZS5XYXZlQ3VyLCAwKV0uRGlzcGxheU5hbWVcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5TZXRNZW51VGV4dChcIndhdmVCcmVha0NvbnRhaW5lclwiLCBcImVuZW15U3RhdExhYmVsMFwiLCBcclxuICAgICAgICAgICAgICAgIFwiQ09VTlQ6IFwiKyhFbmVteVdhdmVNYW5hZ2VyLkluc3RhbmNlLkdldEVuZW15VW5pdENvdW50KEdhbWVTdGF0ZS5XYXZlQ3VyLCAwKVxyXG4gICAgICAgICAgICAgICAgICAgICtFbmVteVdhdmVNYW5hZ2VyLkluc3RhbmNlLkdldEVuZW15VW5pdENvdW50KEdhbWVTdGF0ZS5XYXZlQ3VyLCAxKSlcclxuICAgICAgICAgICAgICAgICtcIlxcbkhFQUxUSDogXCIrRW5lbXlVbml0T2JqZWN0LkNhbGNIZWFsdGgoRW5lbXlXYXZlTWFuYWdlci5JbnN0YW5jZS5HZXRFbmVteVVuaXRUeXBlKEdhbWVTdGF0ZS5XYXZlQ3VyLCAwKSwgR2FtZVN0YXRlLldhdmVDdXIpXHJcbiAgICAgICAgICAgICAgICArXCJcXG5BUk1PVVI6IFwiK0VuZW15VW5pdE9iamVjdC5DYWxjQXJtb3VyKEVuZW15V2F2ZU1hbmFnZXIuSW5zdGFuY2UuR2V0RW5lbXlVbml0VHlwZShHYW1lU3RhdGUuV2F2ZUN1ciwgMCksIEdhbWVTdGF0ZS5XYXZlQ3VyKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy9lbmVteSAxXHJcbiAgICAgICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuU2V0TWVudVRleHQoXCJ3YXZlQnJlYWtDb250YWluZXJcIiwgXCJlbmVteU5hbWVMYWJlbDFcIiwgXCJcIik7XHJcbiAgICAgICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuU2V0TWVudVRleHQoXCJ3YXZlQnJlYWtDb250YWluZXJcIiwgXCJlbmVteVN0YXRMYWJlbDFcIiwgXCJcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vZGlmZmVyZW50IGVuZW15IHR5cGVzXHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy9lbmVteSAwXHJcbiAgICAgICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuU2V0TWVudVRleHQoXCJ3YXZlQnJlYWtDb250YWluZXJcIiwgXCJlbmVteU5hbWVMYWJlbDBcIiwgXHJcbiAgICAgICAgICAgICAgICBFbmVteURhdGFbRW5lbXlXYXZlTWFuYWdlci5JbnN0YW5jZS5HZXRFbmVteVVuaXRUeXBlKEdhbWVTdGF0ZS5XYXZlQ3VyLCAwKV0uRGlzcGxheU5hbWUpO1xyXG4gICAgICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LlNldE1lbnVUZXh0KFwid2F2ZUJyZWFrQ29udGFpbmVyXCIsIFwiZW5lbXlTdGF0TGFiZWwwXCIsIFxyXG4gICAgICAgICAgICAgICAgXCJDT1VOVDogXCIrRW5lbXlXYXZlTWFuYWdlci5JbnN0YW5jZS5HZXRFbmVteVVuaXRDb3VudChHYW1lU3RhdGUuV2F2ZUN1ciwgMClcclxuICAgICAgICAgICAgICAgICtcIlxcbkhFQUxUSDogXCIrRW5lbXlVbml0T2JqZWN0LkNhbGNIZWFsdGgoRW5lbXlXYXZlTWFuYWdlci5JbnN0YW5jZS5HZXRFbmVteVVuaXRUeXBlKEdhbWVTdGF0ZS5XYXZlQ3VyLCAwKSwgR2FtZVN0YXRlLldhdmVDdXIpXHJcbiAgICAgICAgICAgICAgICArXCJcXG5BUk1PVVI6IFwiK0VuZW15VW5pdE9iamVjdC5DYWxjQXJtb3VyKEVuZW15V2F2ZU1hbmFnZXIuSW5zdGFuY2UuR2V0RW5lbXlVbml0VHlwZShHYW1lU3RhdGUuV2F2ZUN1ciwgMCksIEdhbWVTdGF0ZS5XYXZlQ3VyKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy9lbmVteSAxXHJcbiAgICAgICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuU2V0TWVudVRleHQoXCJ3YXZlQnJlYWtDb250YWluZXJcIiwgXCJlbmVteU5hbWVMYWJlbDFcIiwgXHJcbiAgICAgICAgICAgICAgICBFbmVteURhdGFbRW5lbXlXYXZlTWFuYWdlci5JbnN0YW5jZS5HZXRFbmVteVVuaXRUeXBlKEdhbWVTdGF0ZS5XYXZlQ3VyLCAxKV0uRGlzcGxheU5hbWUpO1xyXG4gICAgICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LlNldE1lbnVUZXh0KFwid2F2ZUJyZWFrQ29udGFpbmVyXCIsIFwiZW5lbXlTdGF0TGFiZWwxXCIsIFxyXG4gICAgICAgICAgICAgICAgXCJDT1VOVDogXCIrRW5lbXlXYXZlTWFuYWdlci5JbnN0YW5jZS5HZXRFbmVteVVuaXRDb3VudChHYW1lU3RhdGUuV2F2ZUN1ciwgMSlcclxuICAgICAgICAgICAgICAgICtcIlxcbkhFQUxUSDogXCIrRW5lbXlVbml0T2JqZWN0LkNhbGNIZWFsdGgoRW5lbXlXYXZlTWFuYWdlci5JbnN0YW5jZS5HZXRFbmVteVVuaXRUeXBlKEdhbWVTdGF0ZS5XYXZlQ3VyLCAxKSwgR2FtZVN0YXRlLldhdmVDdXIpXHJcbiAgICAgICAgICAgICAgICArXCJcXG5BUk1PVVI6IFwiK0VuZW15VW5pdE9iamVjdC5DYWxjQXJtb3VyKEVuZW15V2F2ZU1hbmFnZXIuSW5zdGFuY2UuR2V0RW5lbXlVbml0VHlwZShHYW1lU3RhdGUuV2F2ZUN1ciwgMSksIEdhbWVTdGF0ZS5XYXZlQ3VyKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbiAgICAvLyAgY2hhbmdlIG1lbnUgc3RhdGVcclxuICAgIFVwZGF0ZU1haW5NZW51U3RhdGUoc3RhdGU6bnVtYmVyLCByZXN1bHQ6Ym9vbGVhbj10cnVlKVxyXG4gICAge1xyXG4gICAgICAgIC8vZGlzYWJsZSBhbGwgbWVudXMgYnkgZGVmYXVsdFxyXG4gICAgICAgIC8vICAyZFxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwSFVELkdldE1lbnVPYmplY3QoXCJodWRFbmVteVwiKS5yZWN0LnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAvLyAgM2RcclxuICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkdldE1lbnVPYmplY3QoXCJnYW1lU3RhcnRDb250YWluZXJcIikuU2V0T2JqZWN0U3RhdGUoZmFsc2UpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuR2V0TWVudU9iamVjdChcIndhdmVCcmVha0NvbnRhaW5lclwiKS5TZXRPYmplY3RTdGF0ZShmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5HZXRNZW51T2JqZWN0KFwid2F2ZU9uR29pbmdDb250YWluZXJcIikuU2V0T2JqZWN0U3RhdGUoZmFsc2UpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuR2V0TWVudU9iamVjdChcImdhbWVFbmRDb250YWluZXJcIikuU2V0T2JqZWN0U3RhdGUoZmFsc2UpO1xyXG5cclxuICAgICAgICAvL3NldCBuZXcgbWVudSBzdGF0ZVxyXG4gICAgICAgIHN3aXRjaChzdGF0ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vZ2FtZSBzdGFydFxyXG4gICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkdldE1lbnVPYmplY3QoXCJnYW1lU3RhcnRDb250YWluZXJcIikuU2V0T2JqZWN0U3RhdGUodHJ1ZSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAvL2JldHdlZW4gd2F2ZVxyXG4gICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAvL3VwZGF0ZSB3YXZlIGNvdW50XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LlNldE1lbnVUZXh0KFwid2F2ZUJyZWFrQ29udGFpbmVyXCIsIFwid2F2ZUxhYmVsXCIsIFwiV0FWRTogXCIrKEdhbWVTdGF0ZS5XYXZlQ3VyKzEpK1wiIC8gXCJcclxuICAgICAgICAgICAgICAgICAgICArR2FtZVN0YXRlLldhdmVNYXgudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgICAgICAvL2Rpc3BsYXkgZW5lbXkgdHlwZXMgaW4gd2F2ZVxyXG4gICAgICAgICAgICAgICAgdGhpcy5VcGRhdGVFbmVteVR5cGVzKCk7XHJcbiAgICAgICAgICAgICAgICAvL2VuYWJsZSBtZW51XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkdldE1lbnVPYmplY3QoXCJ3YXZlQnJlYWtDb250YWluZXJcIikuU2V0T2JqZWN0U3RhdGUodHJ1ZSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAvL29uLWdvaW5nIHdhdmVcclxuICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgLy91cGRhdGUgd2F2ZSBjb3VudFxyXG4gICAgICAgICAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5TZXRNZW51VGV4dChcIndhdmVPbkdvaW5nQ29udGFpbmVyXCIsIFwid2F2ZUxhYmVsXCIsIFwiV0FWRTogXCIrKEdhbWVTdGF0ZS5XYXZlQ3VyKzEpK1wiIC8gXCJcclxuICAgICAgICAgICAgICAgICAgICArR2FtZVN0YXRlLldhdmVNYXgudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgICAgICAvL3JlZHJhdyBlbmVteSBjb3VudFxyXG4gICAgICAgICAgICAgICAgR2FtZU1lbnUuSW5zdGFuY2UuVXBkYXRlRW5lbXlDb3VudCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tZW51R3JvdXBIVUQuR2V0TWVudU9iamVjdChcImh1ZEVuZW15XCIpLnJlY3QudmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAvL2VuYWJsZSBtZW51XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LkdldE1lbnVPYmplY3QoXCJ3YXZlT25Hb2luZ0NvbnRhaW5lclwiKS5TZXRPYmplY3RTdGF0ZSh0cnVlKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIC8vZ2FtZSBvdmVyIHN1bW1hcnlcclxuICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5tZW51R3JvdXBNYWluTWVudS5HZXRNZW51T2JqZWN0KFwiZ2FtZUVuZENvbnRhaW5lclwiKS5TZXRPYmplY3RTdGF0ZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgIC8vcHJvY2VzcyBiYXNlZCBvbiB3aW4vbG9zc1xyXG4gICAgICAgICAgICAgICAgaWYocmVzdWx0KVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWVudUdyb3VwTWFpbk1lbnUuU2V0TWVudVRleHQoXCJnYW1lRW5kQ29udGFpbmVyXCIsIFwibWVudUxhYmVsXCIsIFwiR0FNRSBPVkVSOiBWSUNUT1JZIVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1lbnVHcm91cE1haW5NZW51LlNldE1lbnVUZXh0KFwiZ2FtZUVuZENvbnRhaW5lclwiLCBcIm1lbnVMYWJlbFwiLCBcIkdBTUUgT1ZFUjogREVGRUFUIVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLzNEIHRvd2VyIGJ1aWxkZXIgdmlld1xyXG4gICAgbWVudUdyb3VwVG93ZXI6TWVudUdyb3VwM0Q7XHJcbiAgICB0b3dlckRlZmluaXRpb25JbmRleDpudW1iZXIgPSAwOyAgICAvL3NlbGVjdGVkIHRvd2VyIGRlZlxyXG4gICAgXHJcbiAgICAvL2NhbGxiYWNrc1xyXG4gICAgLy8gIGJ1aWxkIHRvd2VyXHJcbiAgICBwdWJsaWMgVG93ZXJCdWlsZDooKSA9PiB2b2lkID0gdGhpcy50b3dlckJ1aWxkO1xyXG4gICAgcHJpdmF0ZSB0b3dlckJ1aWxkKCkgeyBsb2coXCJnYW1lIG1lbnUgY2FsbGJhY2sgbm90IHNldCAtIGJ1aWxkIHRvd2VyXCIpOyB9XHJcbiAgICAvLyAgZGVjb25zdHJ1Y3QgdG93ZXJcclxuICAgIHB1YmxpYyBUb3dlckRlY29uc3RydWN0OigpID0+IHZvaWQgPSB0aGlzLnRvd2VyRGVjb25zdHJ1Y3Q7XHJcbiAgICBwcml2YXRlIHRvd2VyRGVjb25zdHJ1Y3QoKSB7IGxvZyhcImdhbWUgbWVudSBjYWxsYmFjayBub3Qgc2V0IC0gZGVjb25zdHJ1Y3QgdG93ZXJcIik7IH1cclxuICAgIFxyXG4gICAgLy9jdXJyZW50bHkgc2VsZWN0ZWQgdG93ZXIgZm91bmRhdGlvblxyXG4gICAgcHJpdmF0ZSBzZWxlY3RlZFRvd2VyRm91bmRhdGlvbjogdW5kZWZpbmVkfFRvd2VyRm91bmRhdGlvbjtcclxuICAgIFxyXG4gICAgLy9zZXR1cFxyXG4gICAgcHJpdmF0ZSBtZW51VG93ZXJTZXR1cCgpXHJcbiAgICB7XHJcbiAgICAgICAgLy9jcmVhdGUgb3ZlcmhlYWQgb2JqZWN0XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGRNZW51T2JqZWN0KFwibWVudU9mZnNldFwiLCAwKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdE1lbnVPYmplY3QoXCJtZW51T2Zmc2V0XCIsIDAsIG5ldyBWZWN0b3IzKDAsMS41LC0xKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RNZW51T2JqZWN0KFwibWVudU9mZnNldFwiLCAxLCBuZXcgVmVjdG9yMygxLDEsMSkpO1xyXG5cclxuICAgICAgICAvL1RPV0VSIERFVEFJTFNcclxuICAgICAgICAvLyAgc2VsZWN0ZWQgdG93ZXIgZGlzcGxheSBvYmplY3RcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkZE1lbnVPYmplY3QoXCJzZWxlY3Rpb25JbmZvRnJhbWVcIiwgMiwgXCJtZW51T2Zmc2V0XCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0TWVudU9iamVjdChcInNlbGVjdGlvbkluZm9GcmFtZVwiLCAwLCBuZXcgVmVjdG9yMygwLDAsMCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0TWVudU9iamVjdChcInNlbGVjdGlvbkluZm9GcmFtZVwiLCAxLCBuZXcgVmVjdG9yMygxLDEsMSkpO1xyXG4gICAgICAgIC8vICBzZWxlY3RlZCB0b3dlciBkaXNwbGF5IG9iamVjdFxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRkTWVudU9iamVjdChcInNlbGVjdGlvbkluZm9cIiwgMCwgXCJtZW51T2Zmc2V0XCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0TWVudU9iamVjdChcInNlbGVjdGlvbkluZm9cIiwgMCwgbmV3IFZlY3RvcjMoMCwwLDAuMDEyNSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0TWVudU9iamVjdChcInNlbGVjdGlvbkluZm9cIiwgMSwgbmV3IFZlY3RvcjMoMSwxLDEpKTtcclxuICAgICAgICAvLyAgbGFiZWwgaGVhZGVyIHRleHRcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkZE1lbnVUZXh0KFwic2VsZWN0aW9uSW5mb1wiLCBcIm1lbnVMYWJlbFwiLCBcIk1FTlUgTEFCRUxcIik7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0T2JqZWN0KFwic2VsZWN0aW9uSW5mb1wiLCBcIm1lbnVMYWJlbFwiLCAwLCBuZXcgVmVjdG9yMygwLDAuNjUsMCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dE9iamVjdChcInNlbGVjdGlvbkluZm9cIiwgXCJtZW51TGFiZWxcIiwgMSwgbmV3IFZlY3RvcjMoMC40LDAuNCwxKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0RGlzcGxheShcInNlbGVjdGlvbkluZm9cIiwgXCJtZW51TGFiZWxcIiwgMCwgNCk7XHJcblxyXG4gICAgICAgIC8vICBkZWNvbnN0cnVjdCB0b3dlciBvYmplY3RcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkZE1lbnVPYmplY3QoXCJpbnRlcmFjdERlY29uc3RydWN0XCIsIDUsIFwic2VsZWN0aW9uSW5mb1wiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdE1lbnVPYmplY3QoXCJpbnRlcmFjdERlY29uc3RydWN0XCIsIDAsIG5ldyBWZWN0b3IzKC0xLjAsMC42NSwwKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RNZW51T2JqZWN0KFwiaW50ZXJhY3REZWNvbnN0cnVjdFwiLCAxLCBuZXcgVmVjdG9yMygwLjE1LDAuMTUsMC4xNSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuR2V0TWVudU9iamVjdChcImludGVyYWN0RGVjb25zdHJ1Y3RcIikuYWRkQ29tcG9uZW50XHJcbiAgICAgICAgKFxyXG4gICAgICAgICAgICAvL2FkZCBjbGljayBhY3Rpb24gbGlzdGVuZXJcclxuICAgICAgICAgICAgbmV3IE9uUG9pbnRlckRvd25cclxuICAgICAgICAgICAgKFxyXG4gICAgICAgICAgICAgICAgKGUpID0+IFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuVG93ZXJEZWNvbnN0cnVjdCgpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHsgYnV0dG9uOiBBY3Rpb25CdXR0b24uQU5ZLCBzaG93RmVlZGJhY2s6IHRydWUsIGhvdmVyVGV4dDogXCJEZWNvbnN0cnVjdCBUb3dlclwiLCBkaXN0YW5jZTogMTYgfVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgICAgICAvLyAgZGVjb25zdHJ1Y3Rpb24gbGFiZWxcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkZE1lbnVUZXh0KFwiaW50ZXJhY3REZWNvbnN0cnVjdFwiLCBcImJ1dHRvbkxhYmVsXCIsIFwiUkVGVU5EXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dE9iamVjdChcImludGVyYWN0RGVjb25zdHJ1Y3RcIiwgXCJidXR0b25MYWJlbFwiLCAwLCBuZXcgVmVjdG9yMygwLDAsLTAuMDQpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHRPYmplY3QoXCJpbnRlcmFjdERlY29uc3RydWN0XCIsIFwiYnV0dG9uTGFiZWxcIiwgMSwgbmV3IFZlY3RvcjMoMSwxLDEpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHREaXNwbGF5KFwiaW50ZXJhY3REZWNvbnN0cnVjdFwiLCBcImJ1dHRvbkxhYmVsXCIsIDAsIDUpO1xyXG5cclxuICAgICAgICAvLyAgdG9nZ2xlIHRvd2VyIHJhbmdlIG9iamVjdFxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRkTWVudU9iamVjdChcImludGVyYWN0VG9nZ2xlUmFuZ2VcIiwgNSwgXCJzZWxlY3Rpb25JbmZvXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0TWVudU9iamVjdChcImludGVyYWN0VG9nZ2xlUmFuZ2VcIiwgMCwgbmV3IFZlY3RvcjMoMS4wLDAuNTAsMCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0TWVudU9iamVjdChcImludGVyYWN0VG9nZ2xlUmFuZ2VcIiwgMSwgbmV3IFZlY3RvcjMoMC4xNSwwLjE1LDAuMTUpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkdldE1lbnVPYmplY3QoXCJpbnRlcmFjdFRvZ2dsZVJhbmdlXCIpLmFkZENvbXBvbmVudFxyXG4gICAgICAgIChcclxuICAgICAgICAgICAgLy9hZGQgY2xpY2sgYWN0aW9uIGxpc3RlbmVyXHJcbiAgICAgICAgICAgIG5ldyBPblBvaW50ZXJEb3duXHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgIChlKSA9PiBcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2lmIHRvd2VyIGlzIGJ1aWx0XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5zZWxlY3RlZFRvd2VyRm91bmRhdGlvbiAhPSB1bmRlZmluZWQgJiYgdGhpcy5zZWxlY3RlZFRvd2VyRm91bmRhdGlvbi5Ub3dlckZyYW1lLlRvd2VyRGVmICE9IC0xKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFRvd2VyRm91bmRhdGlvbi5Ub3dlckZyYW1lLlRvZ2dsZVJhbmdlSW5kaWNhdG9yKCk7IFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7IGJ1dHRvbjogQWN0aW9uQnV0dG9uLkFOWSwgc2hvd0ZlZWRiYWNrOiB0cnVlLCBob3ZlclRleHQ6IFwiVG9nZ2xlIFJhbmdlIFZpc2liaWxpdHlcIiwgZGlzdGFuY2U6IDE2IH1cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgLy8gIHJhbmdlIGxhYmVsXHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGRNZW51VGV4dChcImludGVyYWN0VG9nZ2xlUmFuZ2VcIiwgXCJidXR0b25MYWJlbFwiLCBcIlJBTkdFXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dE9iamVjdChcImludGVyYWN0VG9nZ2xlUmFuZ2VcIiwgXCJidXR0b25MYWJlbFwiLCAwLCBuZXcgVmVjdG9yMygwLDAsLTAuMDQpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHRPYmplY3QoXCJpbnRlcmFjdFRvZ2dsZVJhbmdlXCIsIFwiYnV0dG9uTGFiZWxcIiwgMSwgbmV3IFZlY3RvcjMoMSwxLDEpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHREaXNwbGF5KFwiaW50ZXJhY3RUb2dnbGVSYW5nZVwiLCBcImJ1dHRvbkxhYmVsXCIsIDAsIDUpO1xyXG5cclxuICAgICAgICAvLyAgY2xvc2UgdG93ZXIgbWVudVxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRkTWVudU9iamVjdChcImludGVyYWN0Q2xvc2VcIiwgNSwgXCJzZWxlY3Rpb25JbmZvXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0TWVudU9iamVjdChcImludGVyYWN0Q2xvc2VcIiwgMCwgbmV3IFZlY3RvcjMoMSwwLjY1LDApKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdE1lbnVPYmplY3QoXCJpbnRlcmFjdENsb3NlXCIsIDEsIG5ldyBWZWN0b3IzKDAuMTUsMC4xNSwwLjE1KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5HZXRNZW51T2JqZWN0KFwiaW50ZXJhY3RDbG9zZVwiKS5hZGRDb21wb25lbnRcclxuICAgICAgICAoXHJcbiAgICAgICAgICAgIC8vYWRkIGNsaWNrIGFjdGlvbiBsaXN0ZW5lclxyXG4gICAgICAgICAgICBuZXcgT25Qb2ludGVyRG93blxyXG4gICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICAoZSkgPT4gXHJcbiAgICAgICAgICAgICAgICB7IFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuU2V0VG93ZXJNZW51U3RhdGUoZmFsc2UpOyBcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7IGJ1dHRvbjogQWN0aW9uQnV0dG9uLkFOWSwgc2hvd0ZlZWRiYWNrOiB0cnVlLCBob3ZlclRleHQ6IFwiQ2xvc2UgTWVudVwiLCBkaXN0YW5jZTogMTYgfVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgICAgICAvLyAgY2xvc2UgbGFiZWxcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkZE1lbnVUZXh0KFwiaW50ZXJhY3RDbG9zZVwiLCBcImJ1dHRvbkxhYmVsXCIsIFwiQ0xPU0VcIik7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0T2JqZWN0KFwiaW50ZXJhY3RDbG9zZVwiLCBcImJ1dHRvbkxhYmVsXCIsIDAsIG5ldyBWZWN0b3IzKDAsMCwtMC4wNCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dE9iamVjdChcImludGVyYWN0Q2xvc2VcIiwgXCJidXR0b25MYWJlbFwiLCAxLCBuZXcgVmVjdG9yMygxLDEsMSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dERpc3BsYXkoXCJpbnRlcmFjdENsb3NlXCIsIFwiYnV0dG9uTGFiZWxcIiwgMCwgNSk7XHJcblxyXG4gICAgICAgIC8vICB0b3dlciBuYW1lXHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGRNZW51VGV4dChcInNlbGVjdGlvbkluZm9cIiwgXCJ0b3dlck5hbWVUZXh0XCIsIFwiVE9XRVJfTkFNRVwiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHRPYmplY3QoXCJzZWxlY3Rpb25JbmZvXCIsIFwidG93ZXJOYW1lVGV4dFwiLCAwLCBuZXcgVmVjdG9yMygwLDAuNCwwKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0T2JqZWN0KFwic2VsZWN0aW9uSW5mb1wiLCBcInRvd2VyTmFtZVRleHRcIiwgMSwgbmV3IFZlY3RvcjMoMC4yNSwwLjI1LDAuMjUpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHREaXNwbGF5KFwic2VsZWN0aW9uSW5mb1wiLCBcInRvd2VyTmFtZVRleHRcIiwgMCwgNik7XHJcbiAgICAgICAgLy8gIHRvd2VyIGRlc2NcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkZE1lbnVUZXh0KFwic2VsZWN0aW9uSW5mb1wiLCBcImRlc2NUZXh0XCIsIFwiVE9XRVJfREVTQ1wiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHRPYmplY3QoXCJzZWxlY3Rpb25JbmZvXCIsIFwiZGVzY1RleHRcIiwgMCwgbmV3IFZlY3RvcjMoMCwwLjMsMCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dE9iamVjdChcInNlbGVjdGlvbkluZm9cIiwgXCJkZXNjVGV4dFwiLCAxLCBuZXcgVmVjdG9yMygwLjI1LDAuMjUsMC4yNSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dERpc3BsYXkoXCJzZWxlY3Rpb25JbmZvXCIsIFwiZGVzY1RleHRcIiwgMCwgNCk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0RGlzcGxheShcInNlbGVjdGlvbkluZm9cIiwgXCJkZXNjVGV4dFwiLCAyLCAwKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkdldE1lbnVPYmplY3RUZXh0KFwic2VsZWN0aW9uSW5mb1wiLCBcImRlc2NUZXh0XCIpLmdldENvbXBvbmVudChUZXh0U2hhcGUpLndpZHRoID0gMTA7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5HZXRNZW51T2JqZWN0VGV4dChcInNlbGVjdGlvbkluZm9cIiwgXCJkZXNjVGV4dFwiKS5nZXRDb21wb25lbnQoVGV4dFNoYXBlKS50ZXh0V3JhcHBpbmcgPSB0cnVlO1xyXG4gICAgICAgIC8vICB0b3dlciBkYW1hZ2VcclxuICAgICAgICAvLyAgICAgIHRleHRcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkZE1lbnVUZXh0KFwic2VsZWN0aW9uSW5mb1wiLCBcImRtZ0xhYmVsXCIsIFwiREFNQUdFOlwiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHRPYmplY3QoXCJzZWxlY3Rpb25JbmZvXCIsIFwiZG1nTGFiZWxcIiwgMCwgbmV3IFZlY3RvcjMoLTAuODUsLTAuMjUsMCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dE9iamVjdChcInNlbGVjdGlvbkluZm9cIiwgXCJkbWdMYWJlbFwiLCAxLCBuZXcgVmVjdG9yMygwLjI1LDAuMjUsMC4yNSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dERpc3BsYXkoXCJzZWxlY3Rpb25JbmZvXCIsIFwiZG1nTGFiZWxcIiwgMCwgMyk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0RGlzcGxheShcInNlbGVjdGlvbkluZm9cIiwgXCJkbWdMYWJlbFwiLCAxLCAwKTtcclxuICAgICAgICAvLyAgICAgIHZhbHVlXHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGRNZW51VGV4dChcInNlbGVjdGlvbkluZm9cIiwgXCJkbWdWYWx1ZVwiLCBcIiMjI1wiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHRPYmplY3QoXCJzZWxlY3Rpb25JbmZvXCIsIFwiZG1nVmFsdWVcIiwgMCwgbmV3IFZlY3RvcjMoLTAuNSwtMC4yNSwwKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0T2JqZWN0KFwic2VsZWN0aW9uSW5mb1wiLCBcImRtZ1ZhbHVlXCIsIDEsIG5ldyBWZWN0b3IzKDAuMjUsMC4yNSwwLjI1KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0RGlzcGxheShcInNlbGVjdGlvbkluZm9cIiwgXCJkbWdWYWx1ZVwiLCAwLCAzKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHREaXNwbGF5KFwic2VsZWN0aW9uSW5mb1wiLCBcImRtZ1ZhbHVlXCIsIDEsIDApO1xyXG4gICAgICAgIC8vICB0b3dlciBzcGVlZFxyXG4gICAgICAgIC8vICAgICAgdGV4dFxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRkTWVudVRleHQoXCJzZWxlY3Rpb25JbmZvXCIsIFwicm9mTGFiZWxcIiwgXCJSb0Y6XCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dE9iamVjdChcInNlbGVjdGlvbkluZm9cIiwgXCJyb2ZMYWJlbFwiLCAwLCBuZXcgVmVjdG9yMygtMC44NSwtMC4zNSwwKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0T2JqZWN0KFwic2VsZWN0aW9uSW5mb1wiLCBcInJvZkxhYmVsXCIsIDEsIG5ldyBWZWN0b3IzKDAuMjUsMC4yNSwwLjI1KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0RGlzcGxheShcInNlbGVjdGlvbkluZm9cIiwgXCJyb2ZMYWJlbFwiLCAwLCAzKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHREaXNwbGF5KFwic2VsZWN0aW9uSW5mb1wiLCBcInJvZkxhYmVsXCIsIDEsIDApO1xyXG4gICAgICAgIC8vICAgICAgdmFsdWVcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkZE1lbnVUZXh0KFwic2VsZWN0aW9uSW5mb1wiLCBcInJvZlZhbHVlXCIsIFwiIyMjXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dE9iamVjdChcInNlbGVjdGlvbkluZm9cIiwgXCJyb2ZWYWx1ZVwiLCAwLCBuZXcgVmVjdG9yMygtMC42OCwtMC4zNSwwKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0T2JqZWN0KFwic2VsZWN0aW9uSW5mb1wiLCBcInJvZlZhbHVlXCIsIDEsIG5ldyBWZWN0b3IzKDAuMjUsMC4yNSwwLjI1KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0RGlzcGxheShcInNlbGVjdGlvbkluZm9cIiwgXCJyb2ZWYWx1ZVwiLCAwLCAzKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHREaXNwbGF5KFwic2VsZWN0aW9uSW5mb1wiLCBcInJvZlZhbHVlXCIsIDEsIDApO1xyXG4gICAgICAgIC8vICB0b3dlciByZW5kXHJcbiAgICAgICAgLy8gICAgICB0ZXh0XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGRNZW51VGV4dChcInNlbGVjdGlvbkluZm9cIiwgXCJyZW5kTGFiZWxcIiwgXCJSRU5EOlwiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHRPYmplY3QoXCJzZWxlY3Rpb25JbmZvXCIsIFwicmVuZExhYmVsXCIsIDAsIG5ldyBWZWN0b3IzKC0wLjE1LC0wLjI1LDApKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHRPYmplY3QoXCJzZWxlY3Rpb25JbmZvXCIsIFwicmVuZExhYmVsXCIsIDEsIG5ldyBWZWN0b3IzKDAuMjUsMC4yNSwwLjI1KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0RGlzcGxheShcInNlbGVjdGlvbkluZm9cIiwgXCJyZW5kTGFiZWxcIiwgMCwgMyk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0RGlzcGxheShcInNlbGVjdGlvbkluZm9cIiwgXCJyZW5kTGFiZWxcIiwgMSwgMCk7XHJcbiAgICAgICAgLy8gICAgICB2YWx1ZVxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRkTWVudVRleHQoXCJzZWxlY3Rpb25JbmZvXCIsIFwicmVuZFZhbHVlXCIsIFwiIyMjXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dE9iamVjdChcInNlbGVjdGlvbkluZm9cIiwgXCJyZW5kVmFsdWVcIiwgMCwgbmV3IFZlY3RvcjMoMC4xLC0wLjI1LDApKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHRPYmplY3QoXCJzZWxlY3Rpb25JbmZvXCIsIFwicmVuZFZhbHVlXCIsIDEsIG5ldyBWZWN0b3IzKDAuMjUsMC4yNSwwLjI1KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0RGlzcGxheShcInNlbGVjdGlvbkluZm9cIiwgXCJyZW5kVmFsdWVcIiwgMCwgMyk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0RGlzcGxheShcInNlbGVjdGlvbkluZm9cIiwgXCJyZW5kVmFsdWVcIiwgMSwgMCk7XHJcbiAgICAgICAgLy8gIHRvd2VyIHBlblxyXG4gICAgICAgIC8vICAgICAgdGV4dFxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRkTWVudVRleHQoXCJzZWxlY3Rpb25JbmZvXCIsIFwicGVuTGFiZWxcIiwgXCJQRU46XCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dE9iamVjdChcInNlbGVjdGlvbkluZm9cIiwgXCJwZW5MYWJlbFwiLCAwLCBuZXcgVmVjdG9yMygtMC4xNSwtMC4zNSwwKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0T2JqZWN0KFwic2VsZWN0aW9uSW5mb1wiLCBcInBlbkxhYmVsXCIsIDEsIG5ldyBWZWN0b3IzKDAuMjUsMC4yNSwwLjI1KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0RGlzcGxheShcInNlbGVjdGlvbkluZm9cIiwgXCJwZW5MYWJlbFwiLCAwLCAzKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHREaXNwbGF5KFwic2VsZWN0aW9uSW5mb1wiLCBcInBlbkxhYmVsXCIsIDEsIDApO1xyXG4gICAgICAgIC8vICAgICAgdmFsdWVcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkZE1lbnVUZXh0KFwic2VsZWN0aW9uSW5mb1wiLCBcInBlblZhbHVlXCIsIFwiIyMjXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dE9iamVjdChcInNlbGVjdGlvbkluZm9cIiwgXCJwZW5WYWx1ZVwiLCAwLCBuZXcgVmVjdG9yMygwLjA1LC0wLjM1LDApKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHRPYmplY3QoXCJzZWxlY3Rpb25JbmZvXCIsIFwicGVuVmFsdWVcIiwgMSwgbmV3IFZlY3RvcjMoMC4yNSwwLjI1LDAuMjUpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHREaXNwbGF5KFwic2VsZWN0aW9uSW5mb1wiLCBcInBlblZhbHVlXCIsIDAsIDMpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dERpc3BsYXkoXCJzZWxlY3Rpb25JbmZvXCIsIFwicGVuVmFsdWVcIiwgMSwgMCk7XHJcbiAgICAgICAgLy8gIHRvd2VyIHJhbmdlXHJcbiAgICAgICAgLy8gICAgICB0ZXh0XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGRNZW51VGV4dChcInNlbGVjdGlvbkluZm9cIiwgXCJyYW5nZUxhYmVsXCIsIFwiUkFOR0U6XCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dE9iamVjdChcInNlbGVjdGlvbkluZm9cIiwgXCJyYW5nZUxhYmVsXCIsIDAsIG5ldyBWZWN0b3IzKDAuNDUsLTAuMjUsMCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dE9iamVjdChcInNlbGVjdGlvbkluZm9cIiwgXCJyYW5nZUxhYmVsXCIsIDEsIG5ldyBWZWN0b3IzKDAuMjUsMC4yNSwwLjI1KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0RGlzcGxheShcInNlbGVjdGlvbkluZm9cIiwgXCJyYW5nZUxhYmVsXCIsIDAsIDMpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dERpc3BsYXkoXCJzZWxlY3Rpb25JbmZvXCIsIFwicmFuZ2VMYWJlbFwiLCAxLCAwKTtcclxuICAgICAgICAvLyAgICAgIHZhbHVlXHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGRNZW51VGV4dChcInNlbGVjdGlvbkluZm9cIiwgXCJyYW5nZVZhbHVlXCIsIFwiIyMjXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dE9iamVjdChcInNlbGVjdGlvbkluZm9cIiwgXCJyYW5nZVZhbHVlXCIsIDAsIG5ldyBWZWN0b3IzKDAuNzUsLTAuMjUsMCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dE9iamVjdChcInNlbGVjdGlvbkluZm9cIiwgXCJyYW5nZVZhbHVlXCIsIDEsIG5ldyBWZWN0b3IzKDAuMjUsMC4yNSwwLjI1KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0RGlzcGxheShcInNlbGVjdGlvbkluZm9cIiwgXCJyYW5nZVZhbHVlXCIsIDAsIDMpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dERpc3BsYXkoXCJzZWxlY3Rpb25JbmZvXCIsIFwicmFuZ2VWYWx1ZVwiLCAxLCAwKTtcclxuICAgICAgICAvLyAgdG93ZXIgZWZmZWN0c1xyXG4gICAgICAgIC8vICAgICAgdGV4dFxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRkTWVudVRleHQoXCJzZWxlY3Rpb25JbmZvXCIsIFwiZWZmZWN0TGFiZWxcIiwgXCJFZmZlY3RzOlwiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHRPYmplY3QoXCJzZWxlY3Rpb25JbmZvXCIsIFwiZWZmZWN0TGFiZWxcIiwgMCwgbmV3IFZlY3RvcjMoMC40NSwtMC4zNSwwKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0T2JqZWN0KFwic2VsZWN0aW9uSW5mb1wiLCBcImVmZmVjdExhYmVsXCIsIDEsIG5ldyBWZWN0b3IzKDAuMjUsMC4yNSwwLjI1KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0RGlzcGxheShcInNlbGVjdGlvbkluZm9cIiwgXCJlZmZlY3RMYWJlbFwiLCAwLCAzKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHREaXNwbGF5KFwic2VsZWN0aW9uSW5mb1wiLCBcImVmZmVjdExhYmVsXCIsIDEsIDApO1xyXG4gICAgICAgIC8vICAgICAgdmFsdWVcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkZE1lbnVUZXh0KFwic2VsZWN0aW9uSW5mb1wiLCBcImVmZmVjdFZhbHVlXCIsIFwiW05VTExdXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dE9iamVjdChcInNlbGVjdGlvbkluZm9cIiwgXCJlZmZlY3RWYWx1ZVwiLCAwLCBuZXcgVmVjdG9yMygwLjczLC0wLjM1LDApKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHRPYmplY3QoXCJzZWxlY3Rpb25JbmZvXCIsIFwiZWZmZWN0VmFsdWVcIiwgMSwgbmV3IFZlY3RvcjMoMC4yNSwwLjI1LDAuMjUpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHREaXNwbGF5KFwic2VsZWN0aW9uSW5mb1wiLCBcImVmZmVjdFZhbHVlXCIsIDAsIDMpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dERpc3BsYXkoXCJzZWxlY3Rpb25JbmZvXCIsIFwiZWZmZWN0VmFsdWVcIiwgMSwgMCk7XHJcbiAgICAgICAgLy8gIHRvd2VyIHRhcmdldGluZyB0eXBlXHJcbiAgICAgICAgLy8gICAgICB0ZXh0XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGRNZW51VGV4dChcInNlbGVjdGlvbkluZm9cIiwgXCJ0YXJnZXRMYWJlbFwiLCBcIlRBUkdFVElORzpcIik7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0T2JqZWN0KFwic2VsZWN0aW9uSW5mb1wiLCBcInRhcmdldExhYmVsXCIsIDAsIG5ldyBWZWN0b3IzKC0wLjIxLC0wLjU1LDApKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHRPYmplY3QoXCJzZWxlY3Rpb25JbmZvXCIsIFwidGFyZ2V0TGFiZWxcIiwgMSwgbmV3IFZlY3RvcjMoMC4yNSwwLjI1LDAuMjUpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHREaXNwbGF5KFwic2VsZWN0aW9uSW5mb1wiLCBcInRhcmdldExhYmVsXCIsIDAsIDMpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dERpc3BsYXkoXCJzZWxlY3Rpb25JbmZvXCIsIFwidGFyZ2V0TGFiZWxcIiwgMSwgMik7XHJcbiAgICAgICAgLy8gICAgICB2YWx1ZVxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRkTWVudVRleHQoXCJzZWxlY3Rpb25JbmZvXCIsIFwidGFyZ2V0VmFsdWVcIiwgXCJbVEFSR0VUSU5HIFRZUEVdXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dE9iamVjdChcInNlbGVjdGlvbkluZm9cIiwgXCJ0YXJnZXRWYWx1ZVwiLCAwLCBuZXcgVmVjdG9yMygtMC4xOSwtMC41NSwwKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0T2JqZWN0KFwic2VsZWN0aW9uSW5mb1wiLCBcInRhcmdldFZhbHVlXCIsIDEsIG5ldyBWZWN0b3IzKDAuMjUsMC4yNSwwLjI1KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0RGlzcGxheShcInNlbGVjdGlvbkluZm9cIiwgXCJ0YXJnZXRWYWx1ZVwiLCAwLCAzKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHREaXNwbGF5KFwic2VsZWN0aW9uSW5mb1wiLCBcInRhcmdldFZhbHVlXCIsIDEsIDApO1xyXG5cclxuICAgICAgICAvL1RPV0VSIERFRiBTRUxFQ1RJT04gTUVOVVxyXG4gICAgICAgIC8vICBkZWYgc2VsZWN0aW9uIGRpc3BsYXkgb2JqZWN0XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGRNZW51T2JqZWN0KFwiaW50ZXJhY3Rpb25QYW5lbEJ1aWxkXCIsIDAsIFwibWVudU9mZnNldFwiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdE1lbnVPYmplY3QoXCJpbnRlcmFjdGlvblBhbmVsQnVpbGRcIiwgMCwgbmV3IFZlY3RvcjMoMCwtMC42NSwpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdE1lbnVPYmplY3QoXCJpbnRlcmFjdGlvblBhbmVsQnVpbGRcIiwgMSwgbmV3IFZlY3RvcjMoMC41LDAuNSwwLjUpKTtcclxuICAgICAgICAvLyAgYnVpbGQgc2VsZWN0ZWQgdG93ZXJcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkZE1lbnVPYmplY3QoXCJpbnRlcmFjdGlvbkJ1aWxkXCIsIDQsIFwiaW50ZXJhY3Rpb25QYW5lbEJ1aWxkXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0TWVudU9iamVjdChcImludGVyYWN0aW9uQnVpbGRcIiwgMCwgbmV3IFZlY3RvcjMoMCwwLDApKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdE1lbnVPYmplY3QoXCJpbnRlcmFjdGlvbkJ1aWxkXCIsIDEsIG5ldyBWZWN0b3IzKDAuMywwLjMsMC4zKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5HZXRNZW51T2JqZWN0KFwiaW50ZXJhY3Rpb25CdWlsZFwiKS5hZGRDb21wb25lbnRcclxuICAgICAgICAoXHJcbiAgICAgICAgICAgIC8vYWRkIGNsaWNrIGFjdGlvbiBsaXN0ZW5lclxyXG4gICAgICAgICAgICBuZXcgT25Qb2ludGVyRG93blxyXG4gICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICAoZSkgPT4gXHJcbiAgICAgICAgICAgICAgICB7IFxyXG4gICAgICAgICAgICAgICAgICAgIC8vZW5zdXJlIGZvdW5kYXRpb24gaXMgc2VsZWN0ZWRcclxuICAgICAgICAgICAgICAgICAgICBpZih0aGlzLnNlbGVjdGVkVG93ZXJGb3VuZGF0aW9uID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2coXCJHYW1lIE1lbnUgLSBFUlJPUjogYXR0ZW1wdGluZyB0byBidWlsZCB0b3dlciBvbiB1bmRlZmluZWQgdG93ZXIgZm91bmRhdGlvblwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuc2VsZWN0ZWRUb3dlckZvdW5kYXRpb24uVG93ZXJGcmFtZS5Ub3dlckRlZiAhPSAtMSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZyhcIkdhbWUgTWVudSAtIEVSUk9SOiBhdHRlbXB0aW5nIHRvIGJ1aWxkIHRvd2VyIG9uIHRvd2VyIGZvdW5kYXRpb24gdGhhdCBhbHJlYWR5IGhhcyBhIGNvbnN0cnVjdGVkIHRvd2VyXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLlRvd2VyQnVpbGQoKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7IGJ1dHRvbjogQWN0aW9uQnV0dG9uLkFOWSwgc2hvd0ZlZWRiYWNrOiB0cnVlLCBob3ZlclRleHQ6IFwiQnVpbGQgVG93ZXJcIiwgZGlzdGFuY2U6IDE2IH1cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgLy8gIGxhYmVsXHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGRNZW51VGV4dChcImludGVyYWN0aW9uQnVpbGRcIiwgXCJidXR0b25MYWJlbFwiLCBcIkJVSUxEXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dE9iamVjdChcImludGVyYWN0aW9uQnVpbGRcIiwgXCJidXR0b25MYWJlbFwiLCAwLCBuZXcgVmVjdG9yMygwLDAsLTAuMDQpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHRPYmplY3QoXCJpbnRlcmFjdGlvbkJ1aWxkXCIsIFwiYnV0dG9uTGFiZWxcIiwgMSwgbmV3IFZlY3RvcjMoMSwxLDEpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHREaXNwbGF5KFwiaW50ZXJhY3Rpb25CdWlsZFwiLCBcImJ1dHRvbkxhYmVsXCIsIDAsIDYpO1xyXG4gICAgICAgIC8vICBidWlsZCBzZWxlY3RlZCB0b3dlclxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRkTWVudU9iamVjdChcImludGVyYWN0aW9uRGlzcGxheU5leHRcIiwgNCwgXCJpbnRlcmFjdGlvblBhbmVsQnVpbGRcIik7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RNZW51T2JqZWN0KFwiaW50ZXJhY3Rpb25EaXNwbGF5TmV4dFwiLCAwLCBuZXcgVmVjdG9yMygwLjg1LDAsMCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0TWVudU9iamVjdChcImludGVyYWN0aW9uRGlzcGxheU5leHRcIiwgMSwgbmV3IFZlY3RvcjMoMC4zLDAuMywwLjMpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkdldE1lbnVPYmplY3QoXCJpbnRlcmFjdGlvbkRpc3BsYXlOZXh0XCIpLmFkZENvbXBvbmVudFxyXG4gICAgICAgIChcclxuICAgICAgICAgICAgLy9hZGQgY2xpY2sgYWN0aW9uIGxpc3RlbmVyXHJcbiAgICAgICAgICAgIG5ldyBPblBvaW50ZXJEb3duXHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgIChlKSA9PiB7IHRoaXMuVXBkYXRlVG93ZXJCdWlsZGVyRGlzcGxheSh0aGlzLnRvd2VyRGVmaW5pdGlvbkluZGV4KzEpOyB9LFxyXG4gICAgICAgICAgICAgICAgeyBidXR0b246IEFjdGlvbkJ1dHRvbi5BTlksIHNob3dGZWVkYmFjazogdHJ1ZSwgaG92ZXJUZXh0OiBcIk5leHQgVG93ZXIgVHlwZVwiLCBkaXN0YW5jZTogMTYgfVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgICAgICAvLyAgbGFiZWxcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkZE1lbnVUZXh0KFwiaW50ZXJhY3Rpb25EaXNwbGF5TmV4dFwiLCBcImJ1dHRvbkxhYmVsXCIsIFwiTkVYVFwiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHRPYmplY3QoXCJpbnRlcmFjdGlvbkRpc3BsYXlOZXh0XCIsIFwiYnV0dG9uTGFiZWxcIiwgMCwgbmV3IFZlY3RvcjMoMCwwLC0wLjA0KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0T2JqZWN0KFwiaW50ZXJhY3Rpb25EaXNwbGF5TmV4dFwiLCBcImJ1dHRvbkxhYmVsXCIsIDEsIG5ldyBWZWN0b3IzKDEsMSwxKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0RGlzcGxheShcImludGVyYWN0aW9uRGlzcGxheU5leHRcIiwgXCJidXR0b25MYWJlbFwiLCAwLCA2KTtcclxuICAgICAgICAvLyAgYnVpbGQgc2VsZWN0ZWQgdG93ZXJcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkZE1lbnVPYmplY3QoXCJpbnRlcmFjdGlvbkRpc3BsYXlQcmV2XCIsIDQsIFwiaW50ZXJhY3Rpb25QYW5lbEJ1aWxkXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0TWVudU9iamVjdChcImludGVyYWN0aW9uRGlzcGxheVByZXZcIiwgMCwgbmV3IFZlY3RvcjMoLTAuODUsMCwwKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RNZW51T2JqZWN0KFwiaW50ZXJhY3Rpb25EaXNwbGF5UHJldlwiLCAxLCBuZXcgVmVjdG9yMygwLjMsMC4zLDAuMykpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuR2V0TWVudU9iamVjdChcImludGVyYWN0aW9uRGlzcGxheVByZXZcIikuYWRkQ29tcG9uZW50XHJcbiAgICAgICAgKFxyXG4gICAgICAgICAgICAvL2FkZCBjbGljayBhY3Rpb24gbGlzdGVuZXJcclxuICAgICAgICAgICAgbmV3IE9uUG9pbnRlckRvd25cclxuICAgICAgICAgICAgKFxyXG4gICAgICAgICAgICAgICAgKGUpID0+IHsgdGhpcy5VcGRhdGVUb3dlckJ1aWxkZXJEaXNwbGF5KHRoaXMudG93ZXJEZWZpbml0aW9uSW5kZXgtMSk7IH0sXHJcbiAgICAgICAgICAgICAgICB7IGJ1dHRvbjogQWN0aW9uQnV0dG9uLkFOWSwgc2hvd0ZlZWRiYWNrOiB0cnVlLCBob3ZlclRleHQ6IFwiUHJldmlvdXMgVG93ZXIgVHlwZVwiLCBkaXN0YW5jZTogMTYgfVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgICAgICAvLyAgbGFiZWxcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkZE1lbnVUZXh0KFwiaW50ZXJhY3Rpb25EaXNwbGF5UHJldlwiLCBcImJ1dHRvbkxhYmVsXCIsIFwiUFJFVlwiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHRPYmplY3QoXCJpbnRlcmFjdGlvbkRpc3BsYXlQcmV2XCIsIFwiYnV0dG9uTGFiZWxcIiwgMCwgbmV3IFZlY3RvcjMoMCwwLC0wLjA0KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0T2JqZWN0KFwiaW50ZXJhY3Rpb25EaXNwbGF5UHJldlwiLCBcImJ1dHRvbkxhYmVsXCIsIDEsIG5ldyBWZWN0b3IzKDEsMSwxKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0RGlzcGxheShcImludGVyYWN0aW9uRGlzcGxheVByZXZcIiwgXCJidXR0b25MYWJlbFwiLCAwLCA2KTtcclxuXHJcblxyXG4gICAgICAgIC8vVE9XRVIgVVBHUkFERSBNRU5VXHJcbiAgICAgICAgLy8gIHRvd2VyIHVwZ3JhZGUgZGlzcGxheSBvYmplY3RcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkZE1lbnVPYmplY3QoXCJpbnRlcmFjdGlvblBhbmVsVXBncmFkZVwiLCAwLCBcIm1lbnVPZmZzZXRcIik7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RNZW51T2JqZWN0KFwiaW50ZXJhY3Rpb25QYW5lbFVwZ3JhZGVcIiwgMCwgbmV3IFZlY3RvcjMoLTEuNjcsMCwtMC4zNykpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0TWVudU9iamVjdChcImludGVyYWN0aW9uUGFuZWxVcGdyYWRlXCIsIDEsIG5ldyBWZWN0b3IzKDAuNSwwLjUsMC41KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RNZW51T2JqZWN0KFwiaW50ZXJhY3Rpb25QYW5lbFVwZ3JhZGVcIiwgMiwgbmV3IFZlY3RvcjMoMCwtNDUsMCkpO1xyXG4gICAgICAgIC8vICB0b3dlciB1cGdyYWRlIGRpc3BsYXkgb2JqZWN0XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGRNZW51T2JqZWN0KFwibWVudUJhY2tncm91bmRcIiwgMiwgXCJpbnRlcmFjdGlvblBhbmVsVXBncmFkZVwiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdE1lbnVPYmplY3QoXCJtZW51QmFja2dyb3VuZFwiLCAwLCBuZXcgVmVjdG9yMygwLDAsMCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0TWVudU9iamVjdChcIm1lbnVCYWNrZ3JvdW5kXCIsIDEsIG5ldyBWZWN0b3IzKDEsMSwxKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RNZW51T2JqZWN0KFwibWVudUJhY2tncm91bmRcIiwgMiwgbmV3IFZlY3RvcjMoMCwwLDkwKSk7XHJcbiAgICAgICAgLy8gIGxhYmVsIGhlYWRlciB0ZXh0XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGRNZW51VGV4dChcImludGVyYWN0aW9uUGFuZWxVcGdyYWRlXCIsIFwibWVudUxhYmVsXCIsIFwiVVBHUkFERVNcIik7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0T2JqZWN0KFwiaW50ZXJhY3Rpb25QYW5lbFVwZ3JhZGVcIiwgXCJtZW51TGFiZWxcIiwgMCwgbmV3IFZlY3RvcjMoMCwxLjA1LDApKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHRPYmplY3QoXCJpbnRlcmFjdGlvblBhbmVsVXBncmFkZVwiLCBcIm1lbnVMYWJlbFwiLCAxLCBuZXcgVmVjdG9yMygwLjQsMC40LDEpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHREaXNwbGF5KFwiaW50ZXJhY3Rpb25QYW5lbFVwZ3JhZGVcIiwgXCJtZW51TGFiZWxcIiwgMCwgNik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gIHVwZ3JhZGUgMFxyXG4gICAgICAgIC8vICAgICAgYnV0dG9uXHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGRNZW51T2JqZWN0KFwidXBncmFkZUJ1dHRvbjBcIiwgNSwgXCJpbnRlcmFjdGlvblBhbmVsVXBncmFkZVwiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdE1lbnVPYmplY3QoXCJ1cGdyYWRlQnV0dG9uMFwiLCAwLCBuZXcgVmVjdG9yMygwLDAuNjUsMCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0TWVudU9iamVjdChcInVwZ3JhZGVCdXR0b24wXCIsIDEsIG5ldyBWZWN0b3IzKDAuNTUsMC40NSwwLjQ1KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5HZXRNZW51T2JqZWN0KFwidXBncmFkZUJ1dHRvbjBcIikuYWRkQ29tcG9uZW50XHJcbiAgICAgICAgKFxyXG4gICAgICAgICAgICAvL2FkZCBjbGljayBhY3Rpb24gbGlzdGVuZXJcclxuICAgICAgICAgICAgbmV3IE9uUG9pbnRlckRvd25cclxuICAgICAgICAgICAgKFxyXG4gICAgICAgICAgICAgICAgKGUpID0+IHsgdGhpcy5QdXJjaGFzZVRvd2VyVXBncmFkZSgwKTsgfSxcclxuICAgICAgICAgICAgICAgIHsgYnV0dG9uOiBBY3Rpb25CdXR0b24uQU5ZLCBzaG93RmVlZGJhY2s6IHRydWUsIGhvdmVyVGV4dDogXCJCdXkgVXBncmFkZVwiLCBkaXN0YW5jZTogMTYgfVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgICAgICAvLyAgICAgIGxhYmVsXHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGRNZW51VGV4dChcInVwZ3JhZGVCdXR0b24wXCIsIFwidXBncmFkZUxhYmVsXCIsIFwiUFVSQ0hBU0VEOiAgICAgICAgICAgQ09TVDpcIik7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0T2JqZWN0KFwidXBncmFkZUJ1dHRvbjBcIiwgXCJ1cGdyYWRlTGFiZWxcIiwgMCwgbmV3IFZlY3RvcjMoMCwwLC0wLjA0KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0T2JqZWN0KFwidXBncmFkZUJ1dHRvbjBcIiwgXCJ1cGdyYWRlTGFiZWxcIiwgMSwgbmV3IFZlY3RvcjMoMC44MTgsMSwxKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0RGlzcGxheShcInVwZ3JhZGVCdXR0b24wXCIsIFwidXBncmFkZUxhYmVsXCIsIDAsIDIpO1xyXG5cclxuICAgICAgICAvLyAgdXBncmFkZSAxXHJcbiAgICAgICAgLy8gICAgICBidXR0b25cclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkZE1lbnVPYmplY3QoXCJ1cGdyYWRlQnV0dG9uMVwiLCA1LCBcImludGVyYWN0aW9uUGFuZWxVcGdyYWRlXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0TWVudU9iamVjdChcInVwZ3JhZGVCdXR0b24xXCIsIDAsIG5ldyBWZWN0b3IzKDAsMC4xLDApKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdE1lbnVPYmplY3QoXCJ1cGdyYWRlQnV0dG9uMVwiLCAxLCBuZXcgVmVjdG9yMygwLjU1LDAuNDUsMC40NSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuR2V0TWVudU9iamVjdChcInVwZ3JhZGVCdXR0b24xXCIpLmFkZENvbXBvbmVudFxyXG4gICAgICAgIChcclxuICAgICAgICAgICAgLy9hZGQgY2xpY2sgYWN0aW9uIGxpc3RlbmVyXHJcbiAgICAgICAgICAgIG5ldyBPblBvaW50ZXJEb3duXHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgIChlKSA9PiB7IHRoaXMuUHVyY2hhc2VUb3dlclVwZ3JhZGUoMSk7IH0sXHJcbiAgICAgICAgICAgICAgICB7IGJ1dHRvbjogQWN0aW9uQnV0dG9uLkFOWSwgc2hvd0ZlZWRiYWNrOiB0cnVlLCBob3ZlclRleHQ6IFwiQnV5IFVwZ3JhZGVcIiwgZGlzdGFuY2U6IDE2IH1cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgLy8gICAgICBsYWJlbFxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRkTWVudVRleHQoXCJ1cGdyYWRlQnV0dG9uMVwiLCBcInVwZ3JhZGVMYWJlbFwiLCBcIlBVUkNIQVNFRDogICAgICAgICAgIENPU1Q6XCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dE9iamVjdChcInVwZ3JhZGVCdXR0b24xXCIsIFwidXBncmFkZUxhYmVsXCIsIDAsIG5ldyBWZWN0b3IzKDAsMCwtMC4wNCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dE9iamVjdChcInVwZ3JhZGVCdXR0b24xXCIsIFwidXBncmFkZUxhYmVsXCIsIDEsIG5ldyBWZWN0b3IzKDAuODE4LDEsMSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dERpc3BsYXkoXCJ1cGdyYWRlQnV0dG9uMVwiLCBcInVwZ3JhZGVMYWJlbFwiLCAwLCAyKTtcclxuXHJcbiAgICAgICAgLy8gIHVwZ3JhZGUgMlxyXG4gICAgICAgIC8vICAgICAgYnV0dG9uXHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGRNZW51T2JqZWN0KFwidXBncmFkZUJ1dHRvbjJcIiwgNSwgXCJpbnRlcmFjdGlvblBhbmVsVXBncmFkZVwiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdE1lbnVPYmplY3QoXCJ1cGdyYWRlQnV0dG9uMlwiLCAwLCBuZXcgVmVjdG9yMygwLC0wLjQ1LDApKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdE1lbnVPYmplY3QoXCJ1cGdyYWRlQnV0dG9uMlwiLCAxLCBuZXcgVmVjdG9yMygwLjU1LDAuNDUsMC40NSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuR2V0TWVudU9iamVjdChcInVwZ3JhZGVCdXR0b24yXCIpLmFkZENvbXBvbmVudFxyXG4gICAgICAgIChcclxuICAgICAgICAgICAgLy9hZGQgY2xpY2sgYWN0aW9uIGxpc3RlbmVyXHJcbiAgICAgICAgICAgIG5ldyBPblBvaW50ZXJEb3duXHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgIChlKSA9PiB7IHRoaXMuUHVyY2hhc2VUb3dlclVwZ3JhZGUoMik7IH0sXHJcbiAgICAgICAgICAgICAgICB7IGJ1dHRvbjogQWN0aW9uQnV0dG9uLkFOWSwgc2hvd0ZlZWRiYWNrOiB0cnVlLCBob3ZlclRleHQ6IFwiQnV5IFVwZ3JhZGVcIiwgZGlzdGFuY2U6IDE2IH1cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgLy8gICAgICBsYWJlbFxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRkTWVudVRleHQoXCJ1cGdyYWRlQnV0dG9uMlwiLCBcInVwZ3JhZGVMYWJlbFwiLCBcIlBVUkNIQVNFRDogICAgICAgICAgIENPU1Q6XCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dE9iamVjdChcInVwZ3JhZGVCdXR0b24yXCIsIFwidXBncmFkZUxhYmVsXCIsIDAsIG5ldyBWZWN0b3IzKDAsMCwtMC4wNCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dE9iamVjdChcInVwZ3JhZGVCdXR0b24yXCIsIFwidXBncmFkZUxhYmVsXCIsIDEsIG5ldyBWZWN0b3IzKDAuODE4LDEsMSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dERpc3BsYXkoXCJ1cGdyYWRlQnV0dG9uMlwiLCBcInVwZ3JhZGVMYWJlbFwiLCAwLCAyKTtcclxuXHJcbiAgICAgICAgLy8gIHVwZ3JhZGUgM1xyXG4gICAgICAgIC8vICAgICAgYnV0dG9uXHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGRNZW51T2JqZWN0KFwidXBncmFkZUJ1dHRvbjNcIiwgNSwgXCJpbnRlcmFjdGlvblBhbmVsVXBncmFkZVwiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdE1lbnVPYmplY3QoXCJ1cGdyYWRlQnV0dG9uM1wiLCAwLCBuZXcgVmVjdG9yMygwLC0xLjAsMCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0TWVudU9iamVjdChcInVwZ3JhZGVCdXR0b24zXCIsIDEsIG5ldyBWZWN0b3IzKDAuNTUsMC40NSwwLjQ1KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5HZXRNZW51T2JqZWN0KFwidXBncmFkZUJ1dHRvbjNcIikuYWRkQ29tcG9uZW50XHJcbiAgICAgICAgKFxyXG4gICAgICAgICAgICAvL2FkZCBjbGljayBhY3Rpb24gbGlzdGVuZXJcclxuICAgICAgICAgICAgbmV3IE9uUG9pbnRlckRvd25cclxuICAgICAgICAgICAgKFxyXG4gICAgICAgICAgICAgICAgKGUpID0+IHsgdGhpcy5QdXJjaGFzZVRvd2VyVXBncmFkZSgzKTsgfSxcclxuICAgICAgICAgICAgICAgIHsgYnV0dG9uOiBBY3Rpb25CdXR0b24uQU5ZLCBzaG93RmVlZGJhY2s6IHRydWUsIGhvdmVyVGV4dDogXCJCdXkgVXBncmFkZVwiLCBkaXN0YW5jZTogMTYgfVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgICAgICAvLyAgICAgIGxhYmVsXHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGRNZW51VGV4dChcInVwZ3JhZGVCdXR0b24zXCIsIFwidXBncmFkZUxhYmVsXCIsIFwiUFVSQ0hBU0VEOiAgICAgICAgICAgQ09TVDpcIik7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0T2JqZWN0KFwidXBncmFkZUJ1dHRvbjNcIiwgXCJ1cGdyYWRlTGFiZWxcIiwgMCwgbmV3IFZlY3RvcjMoMCwwLC0wLjA0KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0T2JqZWN0KFwidXBncmFkZUJ1dHRvbjNcIiwgXCJ1cGdyYWRlTGFiZWxcIiwgMSwgbmV3IFZlY3RvcjMoMC44MTgsMSwxKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0RGlzcGxheShcInVwZ3JhZGVCdXR0b24zXCIsIFwidXBncmFkZUxhYmVsXCIsIDAsIDIpO1xyXG4gICAgICAgIFxyXG5cclxuICAgICAgICAvL1RPV0VSIFRBUkdFVElORyBNRU5VXHJcbiAgICAgICAgLy8gIHRvd2VyIHRhcmdldCBkaXNwbGF5IG9iamVjdFxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRkTWVudU9iamVjdChcImludGVyYWN0aW9uUGFuZWxUYXJnZXRcIiwgMCwgXCJtZW51T2Zmc2V0XCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0TWVudU9iamVjdChcImludGVyYWN0aW9uUGFuZWxUYXJnZXRcIiwgMCwgbmV3IFZlY3RvcjMoMS42NywwLC0wLjM3KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RNZW51T2JqZWN0KFwiaW50ZXJhY3Rpb25QYW5lbFRhcmdldFwiLCAxLCBuZXcgVmVjdG9yMygwLjUsMC41LDAuNSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0TWVudU9iamVjdChcImludGVyYWN0aW9uUGFuZWxUYXJnZXRcIiwgMiwgbmV3IFZlY3RvcjMoMCw0NSwwKSk7XHJcbiAgICAgICAgLy8gIHRvd2VyIHVwZ3JhZGUgZGlzcGxheSBvYmplY3RcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkZE1lbnVPYmplY3QoXCJtZW51QmFja2dyb3VuZFwiLCAyLCBcImludGVyYWN0aW9uUGFuZWxUYXJnZXRcIik7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RNZW51T2JqZWN0KFwibWVudUJhY2tncm91bmRcIiwgMCwgbmV3IFZlY3RvcjMoMCwwLDApKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdE1lbnVPYmplY3QoXCJtZW51QmFja2dyb3VuZFwiLCAxLCBuZXcgVmVjdG9yMygxLDEsMSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0TWVudU9iamVjdChcIm1lbnVCYWNrZ3JvdW5kXCIsIDIsIG5ldyBWZWN0b3IzKDAsMCw5MCkpO1xyXG4gICAgICAgIC8vICBsYWJlbCBoZWFkZXIgdGV4dFxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRkTWVudVRleHQoXCJpbnRlcmFjdGlvblBhbmVsVGFyZ2V0XCIsIFwibWVudUxhYmVsXCIsIFwiVEFSR0VUSU5HXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dE9iamVjdChcImludGVyYWN0aW9uUGFuZWxUYXJnZXRcIiwgXCJtZW51TGFiZWxcIiwgMCwgbmV3IFZlY3RvcjMoMCwxLjA1LDApKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHRPYmplY3QoXCJpbnRlcmFjdGlvblBhbmVsVGFyZ2V0XCIsIFwibWVudUxhYmVsXCIsIDEsIG5ldyBWZWN0b3IzKDAuNCwwLjQsMSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dERpc3BsYXkoXCJpbnRlcmFjdGlvblBhbmVsVGFyZ2V0XCIsIFwibWVudUxhYmVsXCIsIDAsIDYpO1xyXG5cclxuICAgICAgICAvLyAgdGFyZ2V0aW5nIHR5cGUgLSBwYXRoaW5nIGZ1cnRoZXN0XHJcbiAgICAgICAgLy8gICAgICBidXR0b25cclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkZE1lbnVPYmplY3QoXCJ0YXJCdXR0b25MYW5lRnVydGhlc3RcIiwgNSwgXCJpbnRlcmFjdGlvblBhbmVsVGFyZ2V0XCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0TWVudU9iamVjdChcInRhckJ1dHRvbkxhbmVGdXJ0aGVzdFwiLCAwLCBuZXcgVmVjdG9yMygwLDAuNywwKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RNZW51T2JqZWN0KFwidGFyQnV0dG9uTGFuZUZ1cnRoZXN0XCIsIDEsIG5ldyBWZWN0b3IzKDAuNTUsMC4yNSwwLjQ1KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5HZXRNZW51T2JqZWN0KFwidGFyQnV0dG9uTGFuZUZ1cnRoZXN0XCIpLmFkZENvbXBvbmVudFxyXG4gICAgICAgIChcclxuICAgICAgICAgICAgLy9hZGQgY2xpY2sgYWN0aW9uIGxpc3RlbmVyXHJcbiAgICAgICAgICAgIG5ldyBPblBvaW50ZXJEb3duXHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgIChlKSA9PiB7IHRoaXMuU2V0VGFyZ2V0aW5nVHlwZSgwKTsgfSxcclxuICAgICAgICAgICAgICAgIHsgYnV0dG9uOiBBY3Rpb25CdXR0b24uQU5ZLCBzaG93RmVlZGJhY2s6IHRydWUsIGhvdmVyVGV4dDogXCJUYXJnZXQgRnVydGhlc3QgRG93biBMYW5lXCIsIGRpc3RhbmNlOiAxNiB9XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApO1xyXG4gICAgICAgIC8vICAgICAgbGFiZWxcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkZE1lbnVUZXh0KFwidGFyQnV0dG9uTGFuZUZ1cnRoZXN0XCIsIFwidGFyZ2V0TGFiZWxcIiwgXCJGVVJUSEVTVCBET1dOIExBTkVcIik7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0T2JqZWN0KFwidGFyQnV0dG9uTGFuZUZ1cnRoZXN0XCIsIFwidGFyZ2V0TGFiZWxcIiwgMCwgbmV3IFZlY3RvcjMoMCwwLC0wLjA0KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0T2JqZWN0KFwidGFyQnV0dG9uTGFuZUZ1cnRoZXN0XCIsIFwidGFyZ2V0TGFiZWxcIiwgMSwgbmV3IFZlY3RvcjMoMC44MTgsMiwxKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0RGlzcGxheShcInRhckJ1dHRvbkxhbmVGdXJ0aGVzdFwiLCBcInRhcmdldExhYmVsXCIsIDAsIDIpO1xyXG5cclxuICAgICAgICAvLyAgdGFyZ2V0aW5nIHR5cGUgLSBoZWFsdGggdmFsdWUgaGlnaFxyXG4gICAgICAgIC8vICAgICAgYnV0dG9uXHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGRNZW51T2JqZWN0KFwidGFyQnV0dG9uSGVhbHRoVmFsdWVIaWdoXCIsIDUsIFwiaW50ZXJhY3Rpb25QYW5lbFRhcmdldFwiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdE1lbnVPYmplY3QoXCJ0YXJCdXR0b25IZWFsdGhWYWx1ZUhpZ2hcIiwgMCwgbmV3IFZlY3RvcjMoMCwwLjQsMCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0TWVudU9iamVjdChcInRhckJ1dHRvbkhlYWx0aFZhbHVlSGlnaFwiLCAxLCBuZXcgVmVjdG9yMygwLjU1LDAuMjUsMC40NSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuR2V0TWVudU9iamVjdChcInRhckJ1dHRvbkhlYWx0aFZhbHVlSGlnaFwiKS5hZGRDb21wb25lbnRcclxuICAgICAgICAoXHJcbiAgICAgICAgICAgIC8vYWRkIGNsaWNrIGFjdGlvbiBsaXN0ZW5lclxyXG4gICAgICAgICAgICBuZXcgT25Qb2ludGVyRG93blxyXG4gICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICAoZSkgPT4geyB0aGlzLlNldFRhcmdldGluZ1R5cGUoMSk7IH0sXHJcbiAgICAgICAgICAgICAgICB7IGJ1dHRvbjogQWN0aW9uQnV0dG9uLkFOWSwgc2hvd0ZlZWRiYWNrOiB0cnVlLCBob3ZlclRleHQ6IFwiVGFyZ2V0IEhpZ2hlc3QgSGVhbHRoIFZhbHVlXCIsIGRpc3RhbmNlOiAxNiB9XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApO1xyXG4gICAgICAgIC8vICAgICAgbGFiZWxcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkZE1lbnVUZXh0KFwidGFyQnV0dG9uSGVhbHRoVmFsdWVIaWdoXCIsIFwidGFyZ2V0TGFiZWxcIiwgXCJISUdIRVNUIEhFQUxUSCBWQUxVRVwiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHRPYmplY3QoXCJ0YXJCdXR0b25IZWFsdGhWYWx1ZUhpZ2hcIiwgXCJ0YXJnZXRMYWJlbFwiLCAwLCBuZXcgVmVjdG9yMygwLDAsLTAuMDQpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHRPYmplY3QoXCJ0YXJCdXR0b25IZWFsdGhWYWx1ZUhpZ2hcIiwgXCJ0YXJnZXRMYWJlbFwiLCAxLCBuZXcgVmVjdG9yMygwLjgxOCwyLDEpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHREaXNwbGF5KFwidGFyQnV0dG9uSGVhbHRoVmFsdWVIaWdoXCIsIFwidGFyZ2V0TGFiZWxcIiwgMCwgMik7XHJcblxyXG4gICAgICAgIC8vICB0YXJnZXRpbmcgdHlwZSAtIGhlYWx0aCB2YWx1ZSBsb3dcclxuICAgICAgICAvLyAgICAgIGJ1dHRvblxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRkTWVudU9iamVjdChcInRhckJ1dHRvbkhlYWx0aFZhbHVlTG93ZXN0XCIsIDUsIFwiaW50ZXJhY3Rpb25QYW5lbFRhcmdldFwiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdE1lbnVPYmplY3QoXCJ0YXJCdXR0b25IZWFsdGhWYWx1ZUxvd2VzdFwiLCAwLCBuZXcgVmVjdG9yMygwLDAuMSwwKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RNZW51T2JqZWN0KFwidGFyQnV0dG9uSGVhbHRoVmFsdWVMb3dlc3RcIiwgMSwgbmV3IFZlY3RvcjMoMC41NSwwLjI1LDAuNDUpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkdldE1lbnVPYmplY3QoXCJ0YXJCdXR0b25IZWFsdGhWYWx1ZUxvd2VzdFwiKS5hZGRDb21wb25lbnRcclxuICAgICAgICAoXHJcbiAgICAgICAgICAgIC8vYWRkIGNsaWNrIGFjdGlvbiBsaXN0ZW5lclxyXG4gICAgICAgICAgICBuZXcgT25Qb2ludGVyRG93blxyXG4gICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICAoZSkgPT4geyB0aGlzLlNldFRhcmdldGluZ1R5cGUoMik7IH0sXHJcbiAgICAgICAgICAgICAgICB7IGJ1dHRvbjogQWN0aW9uQnV0dG9uLkFOWSwgc2hvd0ZlZWRiYWNrOiB0cnVlLCBob3ZlclRleHQ6IFwiVGFyZ2V0IExvd2VzdCBIZWFsdGggVmFsdWVcIiwgZGlzdGFuY2U6IDE2IH1cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgLy8gICAgICBsYWJlbFxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRkTWVudVRleHQoXCJ0YXJCdXR0b25IZWFsdGhWYWx1ZUxvd2VzdFwiLCBcInRhcmdldExhYmVsXCIsIFwiTE9XRVNUIEhFQUxUSCBWQUxVRVwiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHRPYmplY3QoXCJ0YXJCdXR0b25IZWFsdGhWYWx1ZUxvd2VzdFwiLCBcInRhcmdldExhYmVsXCIsIDAsIG5ldyBWZWN0b3IzKDAsMCwtMC4wNCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dE9iamVjdChcInRhckJ1dHRvbkhlYWx0aFZhbHVlTG93ZXN0XCIsIFwidGFyZ2V0TGFiZWxcIiwgMSwgbmV3IFZlY3RvcjMoMC44MTgsMiwxKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0RGlzcGxheShcInRhckJ1dHRvbkhlYWx0aFZhbHVlTG93ZXN0XCIsIFwidGFyZ2V0TGFiZWxcIiwgMCwgMik7XHJcblxyXG4gICAgICAgIC8vICB0YXJnZXRpbmcgdHlwZSAtIGhlYWx0aCAlIGhpZ2hcclxuICAgICAgICAvLyAgICAgIGJ1dHRvblxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRkTWVudU9iamVjdChcInRhckJ1dHRvbkhlYWx0aFBlcmNlbnRIaWdoXCIsIDUsIFwiaW50ZXJhY3Rpb25QYW5lbFRhcmdldFwiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdE1lbnVPYmplY3QoXCJ0YXJCdXR0b25IZWFsdGhQZXJjZW50SGlnaFwiLCAwLCBuZXcgVmVjdG9yMygwLC0wLjIsMCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0TWVudU9iamVjdChcInRhckJ1dHRvbkhlYWx0aFBlcmNlbnRIaWdoXCIsIDEsIG5ldyBWZWN0b3IzKDAuNTUsMC4yNSwwLjQ1KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5HZXRNZW51T2JqZWN0KFwidGFyQnV0dG9uSGVhbHRoUGVyY2VudEhpZ2hcIikuYWRkQ29tcG9uZW50XHJcbiAgICAgICAgKFxyXG4gICAgICAgICAgICAvL2FkZCBjbGljayBhY3Rpb24gbGlzdGVuZXJcclxuICAgICAgICAgICAgbmV3IE9uUG9pbnRlckRvd25cclxuICAgICAgICAgICAgKFxyXG4gICAgICAgICAgICAgICAgKGUpID0+IHsgdGhpcy5TZXRUYXJnZXRpbmdUeXBlKDMpOyB9LFxyXG4gICAgICAgICAgICAgICAgeyBidXR0b246IEFjdGlvbkJ1dHRvbi5BTlksIHNob3dGZWVkYmFjazogdHJ1ZSwgaG92ZXJUZXh0OiBcIlRhcmdldCBIaWdoZXN0IEhlYWx0aCAlXCIsIGRpc3RhbmNlOiAxNiB9XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApO1xyXG4gICAgICAgIC8vICAgICAgbGFiZWxcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkZE1lbnVUZXh0KFwidGFyQnV0dG9uSGVhbHRoUGVyY2VudEhpZ2hcIiwgXCJ0YXJnZXRMYWJlbFwiLCBcIkhJR0hFU1QgSEVBTFRIICVcIik7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0T2JqZWN0KFwidGFyQnV0dG9uSGVhbHRoUGVyY2VudEhpZ2hcIiwgXCJ0YXJnZXRMYWJlbFwiLCAwLCBuZXcgVmVjdG9yMygwLDAsLTAuMDQpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHRPYmplY3QoXCJ0YXJCdXR0b25IZWFsdGhQZXJjZW50SGlnaFwiLCBcInRhcmdldExhYmVsXCIsIDEsIG5ldyBWZWN0b3IzKDAuODE4LDIsMSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dERpc3BsYXkoXCJ0YXJCdXR0b25IZWFsdGhQZXJjZW50SGlnaFwiLCBcInRhcmdldExhYmVsXCIsIDAsIDIpO1xyXG5cclxuICAgICAgICAvLyAgdGFyZ2V0aW5nIHR5cGUgLSBoZWFsdGggJSBsb3dcclxuICAgICAgICAvLyAgICAgIGJ1dHRvblxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRkTWVudU9iamVjdChcInRhckJ1dHRvbkhlYWx0aFBlcmNlbnRMb3dcIiwgNSwgXCJpbnRlcmFjdGlvblBhbmVsVGFyZ2V0XCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0TWVudU9iamVjdChcInRhckJ1dHRvbkhlYWx0aFBlcmNlbnRMb3dcIiwgMCwgbmV3IFZlY3RvcjMoMCwtMC41LDApKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdE1lbnVPYmplY3QoXCJ0YXJCdXR0b25IZWFsdGhQZXJjZW50TG93XCIsIDEsIG5ldyBWZWN0b3IzKDAuNTUsMC4yNSwwLjQ1KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5HZXRNZW51T2JqZWN0KFwidGFyQnV0dG9uSGVhbHRoUGVyY2VudExvd1wiKS5hZGRDb21wb25lbnRcclxuICAgICAgICAoXHJcbiAgICAgICAgICAgIC8vYWRkIGNsaWNrIGFjdGlvbiBsaXN0ZW5lclxyXG4gICAgICAgICAgICBuZXcgT25Qb2ludGVyRG93blxyXG4gICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICAoZSkgPT4geyB0aGlzLlNldFRhcmdldGluZ1R5cGUoNCk7IH0sXHJcbiAgICAgICAgICAgICAgICB7IGJ1dHRvbjogQWN0aW9uQnV0dG9uLkFOWSwgc2hvd0ZlZWRiYWNrOiB0cnVlLCBob3ZlclRleHQ6IFwiVGFyZ2V0IExvd2VzdCBIZWFsdGggJVwiLCBkaXN0YW5jZTogMTYgfVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgICAgICAvLyAgICAgIGxhYmVsXHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGRNZW51VGV4dChcInRhckJ1dHRvbkhlYWx0aFBlcmNlbnRMb3dcIiwgXCJ0YXJnZXRMYWJlbFwiLCBcIkxPV0VTVCBIRUFMVEggJVwiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHRPYmplY3QoXCJ0YXJCdXR0b25IZWFsdGhQZXJjZW50TG93XCIsIFwidGFyZ2V0TGFiZWxcIiwgMCwgbmV3IFZlY3RvcjMoMCwwLC0wLjA0KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0T2JqZWN0KFwidGFyQnV0dG9uSGVhbHRoUGVyY2VudExvd1wiLCBcInRhcmdldExhYmVsXCIsIDEsIG5ldyBWZWN0b3IzKDAuODE4LDIsMSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dERpc3BsYXkoXCJ0YXJCdXR0b25IZWFsdGhQZXJjZW50TG93XCIsIFwidGFyZ2V0TGFiZWxcIiwgMCwgMik7XHJcblxyXG4gICAgICAgIC8vICB0YXJnZXRpbmcgdHlwZSAtIGFybW91ciBoaWdoXHJcbiAgICAgICAgLy8gICAgICBidXR0b25cclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkZE1lbnVPYmplY3QoXCJ0YXJCdXR0b25Bcm1vdXJIaWdoXCIsIDUsIFwiaW50ZXJhY3Rpb25QYW5lbFRhcmdldFwiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdE1lbnVPYmplY3QoXCJ0YXJCdXR0b25Bcm1vdXJIaWdoXCIsIDAsIG5ldyBWZWN0b3IzKDAsLTAuOCwwKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RNZW51T2JqZWN0KFwidGFyQnV0dG9uQXJtb3VySGlnaFwiLCAxLCBuZXcgVmVjdG9yMygwLjU1LDAuMjUsMC40NSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuR2V0TWVudU9iamVjdChcInRhckJ1dHRvbkFybW91ckhpZ2hcIikuYWRkQ29tcG9uZW50XHJcbiAgICAgICAgKFxyXG4gICAgICAgICAgICAvL2FkZCBjbGljayBhY3Rpb24gbGlzdGVuZXJcclxuICAgICAgICAgICAgbmV3IE9uUG9pbnRlckRvd25cclxuICAgICAgICAgICAgKFxyXG4gICAgICAgICAgICAgICAgKGUpID0+IHsgdGhpcy5TZXRUYXJnZXRpbmdUeXBlKDUpOyB9LFxyXG4gICAgICAgICAgICAgICAgeyBidXR0b246IEFjdGlvbkJ1dHRvbi5BTlksIHNob3dGZWVkYmFjazogdHJ1ZSwgaG92ZXJUZXh0OiBcIlRhcmdldCBIaWdoZXN0IEFybW91clwiLCBkaXN0YW5jZTogMTYgfVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgICAgICAvLyAgICAgIGxhYmVsXHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGRNZW51VGV4dChcInRhckJ1dHRvbkFybW91ckhpZ2hcIiwgXCJ0YXJnZXRMYWJlbFwiLCBcIkhJR0hFU1QgQVJNT1VSIFZBTFVFXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0VGV4dE9iamVjdChcInRhckJ1dHRvbkFybW91ckhpZ2hcIiwgXCJ0YXJnZXRMYWJlbFwiLCAwLCBuZXcgVmVjdG9yMygwLDAsLTAuMDQpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkanVzdFRleHRPYmplY3QoXCJ0YXJCdXR0b25Bcm1vdXJIaWdoXCIsIFwidGFyZ2V0TGFiZWxcIiwgMSwgbmV3IFZlY3RvcjMoMC44MTgsMiwxKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0RGlzcGxheShcInRhckJ1dHRvbkFybW91ckhpZ2hcIiwgXCJ0YXJnZXRMYWJlbFwiLCAwLCAyKTtcclxuXHJcbiAgICAgICAgLy8gIHRhcmdldGluZyB0eXBlIC0gaGVhbHRoICUgbG93XHJcbiAgICAgICAgLy8gICAgICBidXR0b25cclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkFkZE1lbnVPYmplY3QoXCJ0YXJCdXR0b25Bcm1vdXJMb3dcIiwgNSwgXCJpbnRlcmFjdGlvblBhbmVsVGFyZ2V0XCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0TWVudU9iamVjdChcInRhckJ1dHRvbkFybW91ckxvd1wiLCAwLCBuZXcgVmVjdG9yMygwLC0xLjEsMCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRqdXN0TWVudU9iamVjdChcInRhckJ1dHRvbkFybW91ckxvd1wiLCAxLCBuZXcgVmVjdG9yMygwLjU1LDAuMjUsMC40NSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuR2V0TWVudU9iamVjdChcInRhckJ1dHRvbkFybW91ckxvd1wiKS5hZGRDb21wb25lbnRcclxuICAgICAgICAoXHJcbiAgICAgICAgICAgIC8vYWRkIGNsaWNrIGFjdGlvbiBsaXN0ZW5lclxyXG4gICAgICAgICAgICBuZXcgT25Qb2ludGVyRG93blxyXG4gICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICAoZSkgPT4geyB0aGlzLlNldFRhcmdldGluZ1R5cGUoNik7IH0sXHJcbiAgICAgICAgICAgICAgICB7IGJ1dHRvbjogQWN0aW9uQnV0dG9uLkFOWSwgc2hvd0ZlZWRiYWNrOiB0cnVlLCBob3ZlclRleHQ6IFwiVGFyZ2V0IExvd2VzdCBBcm1vdXJcIiwgZGlzdGFuY2U6IDE2IH1cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgLy8gICAgICBsYWJlbFxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuQWRkTWVudVRleHQoXCJ0YXJCdXR0b25Bcm1vdXJMb3dcIiwgXCJ0YXJnZXRMYWJlbFwiLCBcIkxPV0VTVCBBUk1PVVIgVkFMVUVcIik7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0T2JqZWN0KFwidGFyQnV0dG9uQXJtb3VyTG93XCIsIFwidGFyZ2V0TGFiZWxcIiwgMCwgbmV3IFZlY3RvcjMoMCwwLC0wLjA0KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0T2JqZWN0KFwidGFyQnV0dG9uQXJtb3VyTG93XCIsIFwidGFyZ2V0TGFiZWxcIiwgMSwgbmV3IFZlY3RvcjMoMC44MTgsMiwxKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5BZGp1c3RUZXh0RGlzcGxheShcInRhckJ1dHRvbkFybW91ckxvd1wiLCBcInRhcmdldExhYmVsXCIsIDAsIDIpO1xyXG5cclxuICAgICAgICAvL21lbnUgb2ZmIGF0IHN0YXJ0XHJcbiAgICAgICAgdGhpcy5TZXRUb3dlck1lbnVTdGF0ZShmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy91cGRhdGVzXHJcbiAgICAvLyAgc2V0cyB2aXNpYmlsaXR5IG9mIHRvd2VyIGJ1aWxkZXJcclxuICAgIHB1YmxpYyBTZXRUb3dlck1lbnVTdGF0ZShzdGF0ZTpib29sZWFuKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuU2V0TWVudVN0YXRlKHN0YXRlKTtcclxuICAgIH1cclxuICAgIC8vICBzZXRzIG1lbnUgZGlzcGxheSB0eXBlXHJcbiAgICAvLyAgICAgIDA9YnVpbGQsIDE9dXBncmFkZVxyXG4gICAgcHVibGljIFNldFRvd2VyTWVudURpc3BsYXlUeXBlKHR5cGU6bnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIC8vc2V0IGJ1dHRvbiBzdGF0ZXNcclxuICAgICAgICBzd2l0Y2godHlwZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vYnVpbGRpbmcgbmV3IHRvd2VyXHJcbiAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuU2V0TWVudVRleHQoXCJzZWxlY3Rpb25JbmZvXCIsIFwibWVudUxhYmVsXCIsIFwiQlVJTEQgVE9XRVJcIik7XHJcbiAgICAgICAgICAgICAgICAvL2hpZGUgZGVjb25zdHJ1Y3QgYW5kIHJhbmdlIGJ1dHRvbnMgXHJcbiAgICAgICAgICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkdldE1lbnVPYmplY3QoXCJpbnRlcmFjdERlY29uc3RydWN0XCIpLlNldE9iamVjdFN0YXRlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuR2V0TWVudU9iamVjdChcImludGVyYWN0VG9nZ2xlUmFuZ2VcIikuU2V0T2JqZWN0U3RhdGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgLy9zaG93IGJ1aWxkIGJ1dHRvbnNcclxuICAgICAgICAgICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuR2V0TWVudU9iamVjdChcImludGVyYWN0aW9uUGFuZWxCdWlsZFwiKS5TZXRPYmplY3RTdGF0ZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgIC8vaGlkZSB1cGdyYWRlIGFuZCB0YXJnZXRpbmdcclxuICAgICAgICAgICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuR2V0TWVudU9iamVjdChcImludGVyYWN0aW9uUGFuZWxVcGdyYWRlXCIpLlNldE9iamVjdFN0YXRlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuR2V0TWVudU9iamVjdChcImludGVyYWN0aW9uUGFuZWxUYXJnZXRcIikuU2V0T2JqZWN0U3RhdGUoZmFsc2UpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgLy9tYW5hZ2luZyBleGlzdGluZyB0b3dlclxyXG4gICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLlNldE1lbnVUZXh0KFwic2VsZWN0aW9uSW5mb1wiLCBcIm1lbnVMYWJlbFwiLCBcIlVQR1JBREUgVE9XRVJcIik7XHJcbiAgICAgICAgICAgICAgICAvL3Nob3cgZGVjb25zdHJ1Y3QgYW5kIHJhbmdlIGJ1dHRvbnMgXHJcbiAgICAgICAgICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkdldE1lbnVPYmplY3QoXCJpbnRlcmFjdERlY29uc3RydWN0XCIpLlNldE9iamVjdFN0YXRlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5HZXRNZW51T2JqZWN0KFwiaW50ZXJhY3RUb2dnbGVSYW5nZVwiKS5TZXRPYmplY3RTdGF0ZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgIC8vaGlkZSBidWlsZCBidXR0b25zXHJcbiAgICAgICAgICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkdldE1lbnVPYmplY3QoXCJpbnRlcmFjdGlvblBhbmVsQnVpbGRcIikuU2V0T2JqZWN0U3RhdGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgLy9zaG93IHVwZ3JhZGUgYnV0dG9uc1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5HZXRNZW51T2JqZWN0KFwiaW50ZXJhY3Rpb25QYW5lbFVwZ3JhZGVcIikuU2V0T2JqZWN0U3RhdGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkdldE1lbnVPYmplY3QoXCJpbnRlcmFjdGlvblBhbmVsVGFyZ2V0XCIpLlNldE9iamVjdFN0YXRlKHRydWUpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvL2Rpc3BsYXlzIHRoZSBnaXZlbiB0b3dlciBmb3VuZGF0aW9uXHJcbiAgICBwdWJsaWMgRGlzcGxheVRvd2VyRm91bmRhdGlvbihUb3dlckZvdW5kYXRpb246VG93ZXJGb3VuZGF0aW9uKVxyXG4gICAge1xyXG4gICAgICAgIC8vcmVjb3JkIGZvdW5kYXRpb25cclxuICAgICAgICB0aGlzLnNlbGVjdGVkVG93ZXJGb3VuZGF0aW9uID0gVG93ZXJGb3VuZGF0aW9uO1xyXG5cclxuICAgICAgICAvL2FjdGl2YXRlIG1lbnVcclxuICAgICAgICB0aGlzLlNldFRvd2VyTWVudVN0YXRlKHRydWUpO1xyXG5cclxuICAgICAgICAvL2lmIGZvdW5kYXRpb24gaGFzIG5vIGJ1aWx0IHRvd2VyXHJcbiAgICAgICAgaWYodGhpcy5zZWxlY3RlZFRvd2VyRm91bmRhdGlvbi5Ub3dlckZyYW1lLlRvd2VyRGVmID09IC0xKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbG9nKFwiR2FtZSBNZW51OiBkaXNwbGF5aW5nIHRvd2VyPVwiK3RoaXMuc2VsZWN0ZWRUb3dlckZvdW5kYXRpb24uSW5kZXgrXCIgZGV0YWlscywgY29uc3RydWN0ZWQgdG93ZXI9bm9uZVwiKTtcclxuXHJcbiAgICAgICAgICAgIC8vdXBkYXRlIGJ1dHRvbiBkaXNwbGF5XHJcbiAgICAgICAgICAgIHRoaXMuU2V0VG93ZXJNZW51RGlzcGxheVR5cGUoMCk7XHJcblxyXG4gICAgICAgICAgICAvL2RyYXcgdG93ZXIgZGlzcGxheSBkZXRhaWxzXHJcbiAgICAgICAgICAgIHRoaXMuVXBkYXRlVG93ZXJCdWlsZGVyRGlzcGxheSgwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9pZiBmb3VuZGF0aW9uIGhhcyBhIGJ1aWx0IHRvd2VyXHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbG9nKFwiR2FtZSBNZW51OiBkaXNwbGF5aW5nIHRvd2VyPVwiK3RoaXMuc2VsZWN0ZWRUb3dlckZvdW5kYXRpb24uSW5kZXgrXCIgZGV0YWlscywgY29uc3RydWN0ZWQgdG93ZXI9XCJcclxuICAgICAgICAgICAgK3RoaXMuc2VsZWN0ZWRUb3dlckZvdW5kYXRpb24uVG93ZXJGcmFtZS5Ub3dlckRlZi50b1N0cmluZygpKTtcclxuXHJcbiAgICAgICAgICAgIC8vdXBkYXRlIGJ1dHRvbiBkaXNwbGF5XHJcbiAgICAgICAgICAgIHRoaXMuU2V0VG93ZXJNZW51RGlzcGxheVR5cGUoMSk7XHJcblxyXG4gICAgICAgICAgICAvL3JlZHJhdyB0b3dlciBkaXNwbGF5IGRldGFpbHNcclxuICAgICAgICAgICAgdGhpcy5VcGRhdGVUb3dlclVwZ3JhZGVyU3RhdGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyAgcmVkcmF3cyB0b3dlciBidWlsZGVyLCBkaXNwbGF5aW5nIHRoZSB0b3dlciBkZWYgb2YgZ2l2ZW4gaW5kZXhcclxuICAgIHB1YmxpYyBVcGRhdGVUb3dlckJ1aWxkZXJEaXNwbGF5KGluZGV4Om51bWJlcilcclxuICAgIHtcclxuICAgICAgICAvL2xlYXNoIHZhbHVlIHRvIHZhbGlkIHRhcmdldHMsIHdpdGggd3JhcCBhcm91bmRcclxuICAgICAgICBpZihpbmRleCA8IDApIHsgdGhpcy50b3dlckRlZmluaXRpb25JbmRleCA9IGRhdGFUb3dlcnMubGVuZ3RoLTE7IH1cclxuICAgICAgICBlbHNlIGlmKGluZGV4ID49IGRhdGFUb3dlcnMubGVuZ3RoKSB7IHRoaXMudG93ZXJEZWZpbml0aW9uSW5kZXggPSAwOyB9XHJcbiAgICAgICAgZWxzZSB7IHRoaXMudG93ZXJEZWZpbml0aW9uSW5kZXggPSBpbmRleDsgfVxyXG5cclxuICAgICAgICBpZihHYW1lU3RhdGUuZGVidWdnaW5nVG93ZXIpIHsgbG9nKFwiZGlzcGxheWluZyBkZWYgXCIrdGhpcy50b3dlckRlZmluaXRpb25JbmRleC50b1N0cmluZygpK1wiIGluIGJ1aWxkIG1lbnVcIik7IH1cclxuXHJcbiAgICAgICAgLy91cGRhdGUgc2hvd2Nhc2UgZGV0YWlsc1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuU2V0TWVudVRleHQoXCJzZWxlY3Rpb25JbmZvXCIsIFwidG93ZXJOYW1lVGV4dFwiLCBkYXRhVG93ZXJzW3RoaXMudG93ZXJEZWZpbml0aW9uSW5kZXhdLkRpc3BsYXlOYW1lKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLlNldE1lbnVUZXh0KFwic2VsZWN0aW9uSW5mb1wiLCBcImRlc2NUZXh0XCIsIFwiQ09TVDogXCIrZGF0YVRvd2Vyc1t0aGlzLnRvd2VyRGVmaW5pdGlvbkluZGV4XS5WYWx1ZUNvc3QudG9TdHJpbmcoKStcIlxcblxcblwiK2RhdGFUb3dlcnNbdGhpcy50b3dlckRlZmluaXRpb25JbmRleF0uRGlzcGxheURlc2MpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuU2V0TWVudVRleHQoXCJzZWxlY3Rpb25JbmZvXCIsIFwiZG1nVmFsdWVcIiwgZGF0YVRvd2Vyc1t0aGlzLnRvd2VyRGVmaW5pdGlvbkluZGV4XS5WYWx1ZUF0dGFja0RhbWFnZS50b1N0cmluZygpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLlNldE1lbnVUZXh0KFwic2VsZWN0aW9uSW5mb1wiLCBcInBlblZhbHVlXCIsIGRhdGFUb3dlcnNbdGhpcy50b3dlckRlZmluaXRpb25JbmRleF0uVmFsdWVBdHRhY2tQZW5ldHJhdGlvbi50b1N0cmluZygpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLlNldE1lbnVUZXh0KFwic2VsZWN0aW9uSW5mb1wiLCBcInJlbmRWYWx1ZVwiLCBkYXRhVG93ZXJzW3RoaXMudG93ZXJEZWZpbml0aW9uSW5kZXhdLlZhbHVlQXR0YWNrUmVuZC50b1N0cmluZygpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLlNldE1lbnVUZXh0KFwic2VsZWN0aW9uSW5mb1wiLCBcInJhbmdlVmFsdWVcIiwgZGF0YVRvd2Vyc1t0aGlzLnRvd2VyRGVmaW5pdGlvbkluZGV4XS5WYWx1ZUF0dGFja1JhbmdlLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuU2V0TWVudVRleHQoXCJzZWxlY3Rpb25JbmZvXCIsIFwicm9mVmFsdWVcIiwgZGF0YVRvd2Vyc1t0aGlzLnRvd2VyRGVmaW5pdGlvbkluZGV4XS5WYWx1ZUF0dGFja1NwZWVkLnRvU3RyaW5nKCkpO1xyXG4gICAgXHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5TZXRNZW51VGV4dChcInNlbGVjdGlvbkluZm9cIiwgXCJ0YXJnZXRMYWJlbFwiLCBcIlwiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLlNldE1lbnVUZXh0KFwic2VsZWN0aW9uSW5mb1wiLCBcInRhcmdldFZhbHVlXCIsIFwiXCIpO1xyXG5cclxuICAgICAgICBsb2coXCJHYW1lIE1lbnU6IHRvd2VyIGJ1aWxkZXIgbWVudSBoYXMgYmVlbiByZWRyYXduXCIpO1xyXG4gICAgfVxyXG4gICAgLy8gIHJlZHJhd3MgdG93ZXIgdXBncmFkZXIsIGRpc3BsYXlpbmcgdGhlIHRvd2VyIGZvdW5kYXRpb24gb2YgdGhlIGdpdmVuIGxvY2F0aW9uXHJcbiAgICBwdWJsaWMgVXBkYXRlVG93ZXJVcGdyYWRlclN0YXRlKClcclxuICAgIHtcclxuICAgICAgICBpZih0aGlzLnNlbGVjdGVkVG93ZXJGb3VuZGF0aW9uICE9IHVuZGVmaW5lZClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKEdhbWVTdGF0ZS5kZWJ1Z2dpbmdUb3dlcikgeyBsb2coXCJkaXNwbGF5aW5nIGRlZiBcIit0aGlzLnNlbGVjdGVkVG93ZXJGb3VuZGF0aW9uLlRvd2VyRnJhbWUuVG93ZXJEZWYudG9TdHJpbmcoKStcIiBpbiB1cGdyYWRlIG1lbnVcIik7IH1cclxuXHJcbiAgICAgICAgICAgIC8vdXBkYXRlIHNob3djYXNlIGRldGFpbHNcclxuICAgICAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5TZXRNZW51VGV4dChcInNlbGVjdGlvbkluZm9cIiwgXCJ0b3dlck5hbWVUZXh0XCIsIGRhdGFUb3dlcnNbdGhpcy5zZWxlY3RlZFRvd2VyRm91bmRhdGlvbi5Ub3dlckZyYW1lLlRvd2VyRGVmXS5EaXNwbGF5TmFtZSk7XHJcbiAgICAgICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuU2V0TWVudVRleHQoXCJzZWxlY3Rpb25JbmZvXCIsIFwiZGVzY1RleHRcIiwgXCJcXG5cXG5cIitkYXRhVG93ZXJzW3RoaXMuc2VsZWN0ZWRUb3dlckZvdW5kYXRpb24uVG93ZXJGcmFtZS5Ub3dlckRlZl0uRGlzcGxheURlc2MpO1xyXG4gICAgICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLlNldE1lbnVUZXh0KFwic2VsZWN0aW9uSW5mb1wiLCBcImRtZ1ZhbHVlXCIsIHRoaXMuc2VsZWN0ZWRUb3dlckZvdW5kYXRpb24uVG93ZXJGcmFtZS5Ub3dlclN5c3RlbS5hdHRhY2tEYW1hZ2UudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuU2V0TWVudVRleHQoXCJzZWxlY3Rpb25JbmZvXCIsIFwicGVuVmFsdWVcIiwgdGhpcy5zZWxlY3RlZFRvd2VyRm91bmRhdGlvbi5Ub3dlckZyYW1lLlRvd2VyU3lzdGVtLmF0dGFja1Blbi50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5TZXRNZW51VGV4dChcInNlbGVjdGlvbkluZm9cIiwgXCJyZW5kVmFsdWVcIiwgdGhpcy5zZWxlY3RlZFRvd2VyRm91bmRhdGlvbi5Ub3dlckZyYW1lLlRvd2VyU3lzdGVtLmF0dGFja1JlbmQudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuU2V0TWVudVRleHQoXCJzZWxlY3Rpb25JbmZvXCIsIFwicmFuZ2VWYWx1ZVwiLCB0aGlzLnNlbGVjdGVkVG93ZXJGb3VuZGF0aW9uLlRvd2VyRnJhbWUuVG93ZXJTeXN0ZW0uYXR0YWNrUmFuZ2UudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuU2V0TWVudVRleHQoXCJzZWxlY3Rpb25JbmZvXCIsIFwicm9mVmFsdWVcIiwgdGhpcy5zZWxlY3RlZFRvd2VyRm91bmRhdGlvbi5Ub3dlckZyYW1lLlRvd2VyU3lzdGVtLmF0dGFja1BlclNlY29uZC50b1N0cmluZygpKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuU2V0TWVudVRleHQoXCJzZWxlY3Rpb25JbmZvXCIsIFwidGFyZ2V0TGFiZWxcIiwgXCJUQVJHRVRJTkc6XCIpO1xyXG4gICAgICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLlNldE1lbnVUZXh0KFwic2VsZWN0aW9uSW5mb1wiLCBcInRhcmdldFZhbHVlXCIsIHRoaXMudGFyZ2V0VHlwZVN0cmluZ3NbdGhpcy5zZWxlY3RlZFRvd2VyRm91bmRhdGlvbi5Ub3dlckZyYW1lLlRvd2VyU3lzdGVtLlRhcmdldGluZ1R5cGVdKTtcclxuXHJcbiAgICAgICAgICAgIC8vdXBkYXRlIGJ1dHRvbnNcclxuICAgICAgICAgICAgZm9yKHZhciBpOm51bWJlciA9IDA7IGk8NDsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkdldE1lbnVPYmplY3QoXCJ1cGdyYWRlQnV0dG9uXCIraS50b1N0cmluZygpKS5TZXRPYmplY3RTdGF0ZShmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yKHZhciBpOm51bWJlciA9IDA7IGk8ZGF0YVRvd2Vyc1t0aGlzLnNlbGVjdGVkVG93ZXJGb3VuZGF0aW9uLlRvd2VyRnJhbWUuVG93ZXJEZWZdLlVwZ3JhZGVzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1lbnVHcm91cFRvd2VyLkdldE1lbnVPYmplY3QoXCJ1cGdyYWRlQnV0dG9uXCIraS50b1N0cmluZygpKS5TZXRPYmplY3RTdGF0ZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdGhpcy5tZW51R3JvdXBUb3dlci5HZXRNZW51T2JqZWN0VGV4dChcInVwZ3JhZGVCdXR0b25cIitpLnRvU3RyaW5nKCksIFwidXBncmFkZUxhYmVsXCIpLmdldENvbXBvbmVudChUZXh0U2hhcGUpLnZhbHVlID0gXHJcbiAgICAgICAgICAgICAgICAgICAgXCJDT1VOVDogXCIgKyB0aGlzLnNlbGVjdGVkVG93ZXJGb3VuZGF0aW9uLlRvd2VyRnJhbWUuVG93ZXJVcGdyYWRlc1tpXStcIiAvIFwiK2RhdGFUb3dlcnNbdGhpcy5zZWxlY3RlZFRvd2VyRm91bmRhdGlvbi5Ub3dlckZyYW1lLlRvd2VyRGVmXS5VcGdyYWRlc1tpXVsyXVxyXG4gICAgICAgICAgICAgICAgICAgICsgXCJcXHRDT1NUOiBcIiArZGF0YVRvd2Vyc1t0aGlzLnNlbGVjdGVkVG93ZXJGb3VuZGF0aW9uLlRvd2VyRnJhbWUuVG93ZXJEZWZdLlVwZ3JhZGVzW2ldWzFdICsgXCJcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgICsgZGF0YVRvd2Vyc1t0aGlzLnNlbGVjdGVkVG93ZXJGb3VuZGF0aW9uLlRvd2VyRnJhbWUuVG93ZXJEZWZdLlVwZ3JhZGVzW2ldWzNdICsgXCIgXCIgKyBkYXRhVG93ZXJzW3RoaXMuc2VsZWN0ZWRUb3dlckZvdW5kYXRpb24uVG93ZXJGcmFtZS5Ub3dlckRlZl0uVXBncmFkZXNbaV1bMF0gXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgbG9nKFwiR2FtZSBNZW51OiByZWRyZXcgdG93ZXIgdXBncmFkZXIgbWVudVwiKTtcclxuICAgIH1cclxuICAgIC8vICBwdXJjaGFzZXMgdXBncmFkZSBmb3IgYSBnaXZlbiB0b3dlclxyXG4gICAgcHVibGljIFB1cmNoYXNlVG93ZXJVcGdyYWRlKGluZGV4Om51bWJlcilcclxuICAgIHtcclxuICAgICAgICBpZih0aGlzLnNlbGVjdGVkVG93ZXJGb3VuZGF0aW9uICE9IG51bGwpXHJcbiAgICAgICAge1xyXG5cclxuICAgICAgICAgICAgLy9lbnN1cmUgdXBncmFkZSBpcyBhdmFpbGFibGUgYW5kIHBsYXllciBoYXMgbW9uZXlcclxuICAgICAgICAgICAgaWYodGhpcy5zZWxlY3RlZFRvd2VyRm91bmRhdGlvbi5Ub3dlckZyYW1lLlRvd2VyVXBncmFkZXNbaW5kZXhdID49ICtkYXRhVG93ZXJzW3RoaXMuc2VsZWN0ZWRUb3dlckZvdW5kYXRpb24uVG93ZXJGcmFtZS5Ub3dlckRlZl0uVXBncmFkZXNbaW5kZXhdWzJdXHJcbiAgICAgICAgICAgICAgICB8fCArZGF0YVRvd2Vyc1t0aGlzLnNlbGVjdGVkVG93ZXJGb3VuZGF0aW9uLlRvd2VyRnJhbWUuVG93ZXJEZWZdLlVwZ3JhZGVzW2luZGV4XVsxXSA+IEdhbWVTdGF0ZS5QbGF5ZXJNb25leSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9nKFwiR2FtZSBNZW51OiB0b3dlciB1cGdyYWRlIHB1cmNoYXNlIGZhaWxlZCwgbm90IGVub3VnaCBtb25leVwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsb2coXCJHYW1lIE1lbnU6IHRvd2VyIGZvdW5kYXRpb249XCIrdGhpcy5zZWxlY3RlZFRvd2VyRm91bmRhdGlvbi5JbmRleC50b1N0cmluZygpK1wiIHB1cmNoYXNlZCB0b3dlciB1cGdyYWRlPVwiK2luZGV4LnRvU3RyaW5nKCkpO1xyXG5cclxuICAgICAgICAgICAgLy9yZW1vdmUgbW9uZXlcclxuICAgICAgICAgICAgR2FtZVN0YXRlLlBsYXllck1vbmV5IC09ICtkYXRhVG93ZXJzW3RoaXMuc2VsZWN0ZWRUb3dlckZvdW5kYXRpb24uVG93ZXJGcmFtZS5Ub3dlckRlZl0uVXBncmFkZXNbaW5kZXhdWzFdO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZU1vbmV5Q291bnQoKTtcclxuXHJcbiAgICAgICAgICAgIC8vYXBwbHkgdXBncmFkZVxyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkVG93ZXJGb3VuZGF0aW9uLlRvd2VyRnJhbWUuQXBwbHlVcGdyYWRlKGluZGV4KTtcclxuXHJcbiAgICAgICAgICAgIC8vdXBkYXRlIHRvd2VyIGRpc3BsYXlcclxuICAgICAgICAgICAgdGhpcy5VcGRhdGVUb3dlclVwZ3JhZGVyU3RhdGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gIHNldHMgdGFyZ2V0aW5nIHR5cGUgZm9yIGN1cnJlbnRseSBzZWxlY3RlZCB0b3dlcnNcclxuICAgIHByaXZhdGUgdGFyZ2V0VHlwZVN0cmluZ3MgPSBcclxuICAgIFtcclxuICAgICAgICBcIkZVUlRIRVNUIERPV04gTEFORVwiLFxyXG4gICAgICAgIFwiSElHSEVTVCBIRUFMVEggVkFMVUVcIixcclxuICAgICAgICBcIkxPV0VTVCBIRUFMVEggVkFMVUVcIixcclxuICAgICAgICBcIkhJR0hFU1QgSEVBTFRIICVcIixcclxuICAgICAgICBcIkxPV0VTVCBIRUFMVEggJVwiLFxyXG4gICAgICAgIFwiSElHSEVTVCBBUk1PVVIgVkFMVUVcIixcclxuICAgICAgICBcIkxPV0VTVCBBUk1PVVIgVkFMVUVcIlxyXG4gICAgXTtcclxuICAgIHB1YmxpYyBTZXRUYXJnZXRpbmdUeXBlKGluZGV4Om51bWJlcilcclxuICAgIHtcclxuICAgICAgICBpZih0aGlzLnNlbGVjdGVkVG93ZXJGb3VuZGF0aW9uID09IHVuZGVmaW5lZCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAvL3NldCB0YXJnZXRpbmcgdHlwZVxyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRUb3dlckZvdW5kYXRpb24uVG93ZXJGcmFtZS5Ub3dlclN5c3RlbS5UYXJnZXRpbmdUeXBlID0gaW5kZXg7XHJcblxyXG4gICAgICAgIC8vdXBkYXRlIHRhcmdldGluZyBVSVxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwVG93ZXIuU2V0TWVudVRleHQoXCJzZWxlY3Rpb25JbmZvXCIsIFwidGFyZ2V0VmFsdWVcIiwgdGhpcy50YXJnZXRUeXBlU3RyaW5nc1t0aGlzLnNlbGVjdGVkVG93ZXJGb3VuZGF0aW9uLlRvd2VyRnJhbWUuVG93ZXJTeXN0ZW0uVGFyZ2V0aW5nVHlwZV0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vM0Qgc2NlbmUgaW5mby9ob3cgdG8gcGxheVxyXG4gICAgbWVudUdyb3VwU2NlbmVJbmZvOk1lbnVHcm91cDNEO1xyXG4gICAgLy8gIHNldHVwXHJcbiAgICBwcml2YXRlIG1lbnVUdXRvcmlhbFNldHVwKClcclxuICAgIHtcclxuICAgICAgICAvL1NDRU5FIEhPVyBUT1xyXG4gICAgICAgIC8vICBmcmFtZVxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwU2NlbmVJbmZvLkFkZE1lbnVPYmplY3QoXCJoMnBGcmFtZVwiLCAyKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5BZGp1c3RNZW51T2JqZWN0KFwiaDJwRnJhbWVcIiwgMCwgbmV3IFZlY3RvcjMoMi40LDEuOSwtMi45KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBTY2VuZUluZm8uQWRqdXN0TWVudU9iamVjdChcImgycEZyYW1lXCIsIDEsIG5ldyBWZWN0b3IzKDEuNCwxLjQsMS40KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBTY2VuZUluZm8uQWRqdXN0TWVudU9iamVjdChcImgycEZyYW1lXCIsIDIsIG5ldyBWZWN0b3IzKDAsMTgwLDApKTtcclxuICAgICAgICAvLyAgdGV4dCBwYXJlbnRcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5BZGRNZW51T2JqZWN0KFwiaDJwQ29udGVudFwiLCAwLCBcImgycEZyYW1lXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwU2NlbmVJbmZvLkFkanVzdE1lbnVPYmplY3QoXCJoMnBDb250ZW50XCIsIDAsIG5ldyBWZWN0b3IzKDAsMCwwLjAxMjUpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5BZGp1c3RNZW51T2JqZWN0KFwiaDJwQ29udGVudFwiLCAxLCBuZXcgVmVjdG9yMygxLDEsMSkpO1xyXG4gICAgICAgIC8vICBsYWJlbCBoZWFkZXIgdGV4dFxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwU2NlbmVJbmZvLkFkZE1lbnVUZXh0KFwiaDJwQ29udGVudFwiLCBcImluZm9IZWFkZXJcIiwgXCJIT1cgVE8gUExBWVwiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5BZGp1c3RUZXh0T2JqZWN0KFwiaDJwQ29udGVudFwiLCBcImluZm9IZWFkZXJcIiwgMCwgbmV3IFZlY3RvcjMoMCwwLjYsMCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwU2NlbmVJbmZvLkFkanVzdFRleHRPYmplY3QoXCJoMnBDb250ZW50XCIsIFwiaW5mb0hlYWRlclwiLCAxLCBuZXcgVmVjdG9yMygwLjM1LDAuMzUsMC4wMzUpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5BZGp1c3RUZXh0RGlzcGxheShcImgycENvbnRlbnRcIiwgXCJpbmZvSGVhZGVyXCIsIDAsIDYpO1xyXG4gICAgICAgIC8vICBpbmZvIHRleHRcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5BZGRNZW51VGV4dChcImgycENvbnRlbnRcIiwgXCJpbmZvVGV4dFwiLCBcclxuICAgICAgICAgICAgXCIxIC0gRGVmZWF0IGVuZW1pZXMgYW5kIGNsZWFyIHdhdmVzIHRvIGVhcm4gbW9uZXlcXG5cIiArIFxyXG4gICAgICAgICAgICBcIjIgLSBTcGVuZCBtb25leSBvbiBjb25zdHJ1Y3RpbmcgbmV3IHRvd2VycyBvciB1cGdyYWRpbmcgZXhpc3RpbmcgdG93ZXJzICh5b3UgY2FuIG1vdmUgdG93ZXJzIGJldHdlZW4gd2F2ZXMgb3Igc2VsbCB0aGVtIHRvIGdldCBzb21lIG9mIHRoZWlyIHZhbHVlIGJhY2spXFxuXCIgK1xyXG4gICAgICAgICAgICBcIjMgLSBFbmVtaWVzIGdyb3cgc3Ryb25nZXIgd2l0aCBldmVyeSB3YXZlIHlvdSBkZWZlYXQsIGV2ZXJ5IDV0aCB3YXZlIGlzIGEgc3BlY2lhbCBib3NzIHdhdmVcXG5cIiArXHJcbiAgICAgICAgICAgIFwiNCAtIEVhY2ggZW5lbXkgdGhhdCByZWFjaGVzIHlvdXIgYmFzZSB3aWxsIGRhbWFnZSB5b3VyIGhlYWx0aCAoMUhQIHBlciBzdGFuZGFyZCB1bml0LCAxMEhQIHBlciBib3NzIHVuaXQpIGFuZCB0aGVuIHNlbGYgZGVzdHJ1Y3QuIElmIHlvdSByZWFjaCAwIEhQIHlvdSBsb3NlIHRoZSBnYW1lIVxcblwiXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5BZGp1c3RUZXh0T2JqZWN0KFwiaDJwQ29udGVudFwiLCBcImluZm9UZXh0XCIsIDAsIG5ldyBWZWN0b3IzKDAsMC40NSwwKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBTY2VuZUluZm8uQWRqdXN0VGV4dE9iamVjdChcImgycENvbnRlbnRcIiwgXCJpbmZvVGV4dFwiLCAxLCBuZXcgVmVjdG9yMygwLjM1LDAuMzUsMC4wMzUpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5HZXRNZW51T2JqZWN0VGV4dChcImgycENvbnRlbnRcIiwgXCJpbmZvVGV4dFwiKS5nZXRDb21wb25lbnQoVGV4dFNoYXBlKS53aWR0aCA9IDY7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBTY2VuZUluZm8uR2V0TWVudU9iamVjdFRleHQoXCJoMnBDb250ZW50XCIsIFwiaW5mb1RleHRcIikuZ2V0Q29tcG9uZW50KFRleHRTaGFwZSkudGV4dFdyYXBwaW5nID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5BZGp1c3RUZXh0RGlzcGxheShcImgycENvbnRlbnRcIiwgXCJpbmZvVGV4dFwiLCAwLCAyKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5BZGp1c3RUZXh0RGlzcGxheShcImgycENvbnRlbnRcIiwgXCJpbmZvVGV4dFwiLCAxLCAwKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5BZGp1c3RUZXh0RGlzcGxheShcImgycENvbnRlbnRcIiwgXCJpbmZvVGV4dFwiLCAyLCAwKTtcclxuICAgICAgICAvLyAgbGFiZWwgaGVhZGVyIHRleHRcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5BZGRNZW51VGV4dChcImgycENvbnRlbnRcIiwgXCJpbmZvVGV4dDJcIixcIkNhbiB5b3UgY2xlYXIgYWxsIDMwIHdhdmVzP1wiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5BZGp1c3RUZXh0T2JqZWN0KFwiaDJwQ29udGVudFwiLCBcImluZm9UZXh0MlwiLCAwLCBuZXcgVmVjdG9yMygwLC0wLjY1LDApKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5BZGp1c3RUZXh0T2JqZWN0KFwiaDJwQ29udGVudFwiLCBcImluZm9UZXh0MlwiLCAxLCBuZXcgVmVjdG9yMygwLjM1LDAuMzUsMC4wMzUpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5HZXRNZW51T2JqZWN0VGV4dChcImgycENvbnRlbnRcIiwgXCJpbmZvVGV4dDJcIikuZ2V0Q29tcG9uZW50KFRleHRTaGFwZSkud2lkdGggPSA2O1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwU2NlbmVJbmZvLkdldE1lbnVPYmplY3RUZXh0KFwiaDJwQ29udGVudFwiLCBcImluZm9UZXh0MlwiKS5nZXRDb21wb25lbnQoVGV4dFNoYXBlKS50ZXh0V3JhcHBpbmcgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwU2NlbmVJbmZvLkFkanVzdFRleHREaXNwbGF5KFwiaDJwQ29udGVudFwiLCBcImluZm9UZXh0MlwiLCAwLCA0KTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5BZGp1c3RUZXh0RGlzcGxheShcImgycENvbnRlbnRcIiwgXCJpbmZvVGV4dDJcIiwgMSwgMSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBTY2VuZUluZm8uQWRqdXN0VGV4dERpc3BsYXkoXCJoMnBDb250ZW50XCIsIFwiaW5mb1RleHQyXCIsIDIsIDEpO1xyXG5cclxuICAgICAgICAvL1NDRU5FIElORk9cclxuICAgICAgICAvLyAgZnJhbWVcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5BZGRNZW51T2JqZWN0KFwiaW5mb0ZyYW1lXCIsIDIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwU2NlbmVJbmZvLkFkanVzdE1lbnVPYmplY3QoXCJpbmZvRnJhbWVcIiwgMCwgbmV3IFZlY3RvcjMoLTEuMzUsMS45LC0xLjM1KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBTY2VuZUluZm8uQWRqdXN0TWVudU9iamVjdChcImluZm9GcmFtZVwiLCAxLCBuZXcgVmVjdG9yMygxLjQsMS40LDEuNCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwU2NlbmVJbmZvLkFkanVzdE1lbnVPYmplY3QoXCJpbmZvRnJhbWVcIiwgMiwgbmV3IFZlY3RvcjMoMCwyMjUsMCkpO1xyXG4gICAgICAgIC8vICB0ZXh0IHBhcmVudFxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwU2NlbmVJbmZvLkFkZE1lbnVPYmplY3QoXCJpbmZvQ29udGVudFwiLCAwLCBcImluZm9GcmFtZVwiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5BZGp1c3RNZW51T2JqZWN0KFwiaW5mb0NvbnRlbnRcIiwgMCwgbmV3IFZlY3RvcjMoMCwwLDAuMDEyNSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwU2NlbmVJbmZvLkFkanVzdE1lbnVPYmplY3QoXCJpbmZvQ29udGVudFwiLCAxLCBuZXcgVmVjdG9yMygxLDEsMSkpO1xyXG4gICAgICAgIC8vICBsYWJlbCBoZWFkZXIgdGV4dFxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwU2NlbmVJbmZvLkFkZE1lbnVUZXh0KFwiaW5mb0NvbnRlbnRcIiwgXCJpbmZvSGVhZGVyXCIsIFwiU0NFTkUgSU5GT1wiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5BZGp1c3RUZXh0T2JqZWN0KFwiaW5mb0NvbnRlbnRcIiwgXCJpbmZvSGVhZGVyXCIsIDAsIG5ldyBWZWN0b3IzKDAsMC42LDApKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5BZGp1c3RUZXh0T2JqZWN0KFwiaW5mb0NvbnRlbnRcIiwgXCJpbmZvSGVhZGVyXCIsIDEsIG5ldyBWZWN0b3IzKDAuMzUsMC4zNSwwLjAzNSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwU2NlbmVJbmZvLkFkanVzdFRleHREaXNwbGF5KFwiaW5mb0NvbnRlbnRcIiwgXCJpbmZvSGVhZGVyXCIsIDAsIDYpO1xyXG4gICAgICAgIC8vICBsYWJlbCBoZWFkZXIgdGV4dFxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwU2NlbmVJbmZvLkFkZE1lbnVUZXh0KFwiaW5mb0NvbnRlbnRcIiwgXCJpbmZvSGVhZGVyXCIsIFxyXG4gICAgICAgICAgICBcIlRoaXMgc2NlbmUgaXMgYW4gZXhhbXBsZSBpbXBsZW1lbnRhdGlvbiBvZiBob3cgdGhlIERlY2VudHJhbGFuZCBUb3dlciBEZWZlbmNlIE1vZHVsZSBjYW4gYmUgZGVwbG95ZWQgb24gRGVjZW50cmFsYW5kIFdvcmxkcy5cIitcclxuICAgICAgICAgICAgXCJcXG5cXG5TZXZlcmFsIG90aGVyIHNjZW5lcyBoYXZlIGFsc28gYmVlbiBkZXZlbG9wZWQgdXNpbmcgdGhpcyBraXQhIFlvdSBjYW4gY2hlY2sgdGhlbSBvdXQgaGVyZTpcIitcclxuICAgICAgICAgICAgXCJcXG5cXG5cXG5cXG5UaGlzIG1vZHVsZSdzIGRldmVsb3BtZW50IHdhcyBmdW5kZWQgdGhyb3VnaCB0aGUgQ29tbXVuaXR5IEdyYW50cyBQcm9ncmFtIGFuZCB0aGUgZW50aXJlIFRvd2VyIERlZmVuY2UgQ3JlYXRpb24gS2l0IGlzIGNvbXBsZXRlbHkgb3Blbi1zb3VyY2UgYW5kIGZyZWUgdG8gdXNlLiBZb3UgY2FuIGNoZWNrIG91dCB0aGUgcmVwb3NpdG9yeSBmb3IgdGhlIHNvdXJjZSBhbmQgYSBxdWljayBndWlkZSBvbiBob3cgdG8gZ2V0IHN0YXJ0ZWQhXCJcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwU2NlbmVJbmZvLkFkanVzdFRleHRPYmplY3QoXCJpbmZvQ29udGVudFwiLCBcImluZm9IZWFkZXJcIiwgMCwgbmV3IFZlY3RvcjMoMCwwLjQ1LDApKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5BZGp1c3RUZXh0T2JqZWN0KFwiaW5mb0NvbnRlbnRcIiwgXCJpbmZvSGVhZGVyXCIsIDEsIG5ldyBWZWN0b3IzKDAuMzUsMC4zNSwwLjAzNSkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwU2NlbmVJbmZvLkdldE1lbnVPYmplY3RUZXh0KFwiaW5mb0NvbnRlbnRcIiwgXCJpbmZvSGVhZGVyXCIpLmdldENvbXBvbmVudChUZXh0U2hhcGUpLndpZHRoID0gNjtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5HZXRNZW51T2JqZWN0VGV4dChcImluZm9Db250ZW50XCIsIFwiaW5mb0hlYWRlclwiKS5nZXRDb21wb25lbnQoVGV4dFNoYXBlKS50ZXh0V3JhcHBpbmcgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwU2NlbmVJbmZvLkFkanVzdFRleHREaXNwbGF5KFwiaW5mb0NvbnRlbnRcIiwgXCJpbmZvSGVhZGVyXCIsIDAsIDIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwU2NlbmVJbmZvLkFkanVzdFRleHREaXNwbGF5KFwiaW5mb0NvbnRlbnRcIiwgXCJpbmZvSGVhZGVyXCIsIDEsIDApO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwU2NlbmVJbmZvLkFkanVzdFRleHREaXNwbGF5KFwiaW5mb0NvbnRlbnRcIiwgXCJpbmZvSGVhZGVyXCIsIDIsIDApO1xyXG4gICAgICAgIC8vICBidXR0b24gb3RoZXIgc2NlbmVzXHJcbiAgICAgICAgZm9yKHZhciBpOm51bWJlcj0wOyBpPHRoaXMuc3RyaW5nc1NjZW5lTmFtZXMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCBwb3M6VmVjdG9yMyA9IG5ldyBWZWN0b3IzKCgoaSUzKS0xKSowLjY2LC0wLjA3NSwwKTtcclxuICAgICAgICAgICAgLy8gIGJ1dHRvbiBjcmVhdG9yIG9iamVjdFxyXG4gICAgICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5BZGRNZW51T2JqZWN0KFwiYnV0dG9uU2NlbmVcIitpLCA1LCBcImluZm9GcmFtZVwiKTtcclxuICAgICAgICAgICAgdGhpcy5tZW51R3JvdXBTY2VuZUluZm8uQWRqdXN0TWVudU9iamVjdChcImJ1dHRvblNjZW5lXCIraSwgMCwgcG9zKTtcclxuICAgICAgICAgICAgdGhpcy5tZW51R3JvdXBTY2VuZUluZm8uQWRqdXN0TWVudU9iamVjdChcImJ1dHRvblNjZW5lXCIraSwgMSwgbmV3IFZlY3RvcjMoMC4yMiwwLjE4LDAuMikpO1xyXG4gICAgICAgICAgICAvKnRoaXMubWVudUdyb3VwU2NlbmVJbmZvLkdldE1lbnVPYmplY3QoXCJidXR0b25TY2VuZVwiK2kpLmFkZENvbXBvbmVudFxyXG4gICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICBuZXcgT25Qb2ludGVyRG93blxyXG4gICAgICAgICAgICAgICAgKFxyXG4gICAgICAgICAgICAgICAgICAgIChlKSA9PlxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAvL29wZW4gbGlua1xyXG4gICAgICAgICAgICAgICAgICAgIG9wZW5FeHRlcm5hbFVSTChcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBidXR0b246IEFjdGlvbkJ1dHRvbi5BTlksXHJcbiAgICAgICAgICAgICAgICAgICAgc2hvd0ZlZWRiYWNrOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGhvdmVyVGV4dDogXCJbRV0gQ1JFQVRPUl9OQU1FX1wiK2ksXHJcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2U6IDhcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICk7Ki9cclxuICAgICAgICAgICAgLy8gIGJ1dHRvbiBjcmVhdG9yIHRleHRcclxuICAgICAgICAgICAgdGhpcy5tZW51R3JvdXBTY2VuZUluZm8uQWRkTWVudVRleHQoXCJidXR0b25TY2VuZVwiK2ksIFwiYnV0dG9uVGV4dFwiLCB0aGlzLnN0cmluZ3NTY2VuZU5hbWVzW2ldKTtcclxuICAgICAgICAgICAgdGhpcy5tZW51R3JvdXBTY2VuZUluZm8uQWRqdXN0VGV4dE9iamVjdChcImJ1dHRvblNjZW5lXCIraSwgXCJidXR0b25UZXh0XCIsIDAsIG5ldyBWZWN0b3IzKDAsMCwtMC4wMzEpKTtcclxuICAgICAgICAgICAgdGhpcy5tZW51R3JvdXBTY2VuZUluZm8uQWRqdXN0VGV4dE9iamVjdChcImJ1dHRvblNjZW5lXCIraSwgXCJidXR0b25UZXh0XCIsIDEsIG5ldyBWZWN0b3IzKDAuMzQsMC40MiwwLjAzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vICBidXR0b24gcmVwbyBvYmplY3RcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5BZGRNZW51T2JqZWN0KFwiYnV0dG9uUmVwb1wiLCA1LCBcImluZm9GcmFtZVwiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5BZGp1c3RNZW51T2JqZWN0KFwiYnV0dG9uUmVwb1wiLCAwLCBuZXcgVmVjdG9yMygtMC40LC0wLjY1LDApKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5BZGp1c3RNZW51T2JqZWN0KFwiYnV0dG9uUmVwb1wiLCAxLCBuZXcgVmVjdG9yMygwLjIsMC4yLDAuMikpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwU2NlbmVJbmZvLkdldE1lbnVPYmplY3QoXCJidXR0b25SZXBvXCIpLmFkZENvbXBvbmVudFxyXG4gICAgICAgIChcclxuICAgICAgICAgICAgbmV3IE9uUG9pbnRlckRvd25cclxuICAgICAgICAgICAgKFxyXG4gICAgICAgICAgICAgICAgKGUpID0+XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgIC8vb3BlbiBsaW5rXHJcbiAgICAgICAgICAgICAgICAgIG9wZW5FeHRlcm5hbFVSTChcImh0dHBzOi8vZ2l0aHViLmNvbS9UaGVDcnlwdG9UcmFkZXI2OS9EZWNlbnRyYWxhbmQtVG93ZXItRGVmZW5jZS1DcmVhdGlvbi1LaXRcIik7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICBidXR0b246IEFjdGlvbkJ1dHRvbi5BTlksXHJcbiAgICAgICAgICAgICAgICAgIHNob3dGZWVkYmFjazogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgaG92ZXJUZXh0OiBcIltFXSBQdWJsaWMgUmVwb3NpdG9yeVwiLFxyXG4gICAgICAgICAgICAgICAgICBkaXN0YW5jZTogOFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgICAgICAvLyAgYnV0dG9uIHJlcG8gdGV4dFxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwU2NlbmVJbmZvLkFkZE1lbnVUZXh0KFwiYnV0dG9uUmVwb1wiLCBcImJ1dHRvblRleHRcIiwgXCJSRVBPU0lUT1JZXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwU2NlbmVJbmZvLkFkanVzdFRleHRPYmplY3QoXCJidXR0b25SZXBvXCIsIFwiYnV0dG9uVGV4dFwiLCAwLCBuZXcgVmVjdG9yMygwLDAsLTAuMDMxKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBTY2VuZUluZm8uQWRqdXN0VGV4dE9iamVjdChcImJ1dHRvblJlcG9cIiwgXCJidXR0b25UZXh0XCIsIDEsIG5ldyBWZWN0b3IzKDAuNCwwLjQsMC4wMykpO1xyXG4gICAgICAgIC8vICBidXR0b24gcHJvcG9zYWwgb2JqZWN0XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBTY2VuZUluZm8uQWRkTWVudU9iamVjdChcImJ1dHRvblJlcG9cIiwgNSwgXCJpbmZvRnJhbWVcIik7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBTY2VuZUluZm8uQWRqdXN0TWVudU9iamVjdChcImJ1dHRvblJlcG9cIiwgMCwgbmV3IFZlY3RvcjMoMC40LC0wLjY1LDApKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5BZGp1c3RNZW51T2JqZWN0KFwiYnV0dG9uUmVwb1wiLCAxLCBuZXcgVmVjdG9yMygwLjIsMC4yLDAuMikpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwU2NlbmVJbmZvLkdldE1lbnVPYmplY3QoXCJidXR0b25SZXBvXCIpLmFkZENvbXBvbmVudFxyXG4gICAgICAgIChcclxuICAgICAgICAgICAgbmV3IE9uUG9pbnRlckRvd25cclxuICAgICAgICAgICAgKFxyXG4gICAgICAgICAgICAgICAgKGUpID0+XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgIC8vb3BlbiBsaW5rXHJcbiAgICAgICAgICAgICAgICAgIG9wZW5FeHRlcm5hbFVSTChcImh0dHBzOi8vZ292ZXJuYW5jZS5kZWNlbnRyYWxhbmQub3JnL3Byb3Bvc2FsLz9pZD1mOTJlMzdhMC01ZWU5LTExZWQtOTEyOC1kOTVlM2I2ZDc5MTJcIik7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICBidXR0b246IEFjdGlvbkJ1dHRvbi5BTlksXHJcbiAgICAgICAgICAgICAgICAgIHNob3dGZWVkYmFjazogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgaG92ZXJUZXh0OiBcIltFXSBEQU8gUHJvcG9zYWxcIixcclxuICAgICAgICAgICAgICAgICAgZGlzdGFuY2U6IDhcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgLy8gIGJ1dHRvbiByZXBvIHByb3Bvc2FsXHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBTY2VuZUluZm8uQWRkTWVudVRleHQoXCJidXR0b25SZXBvXCIsIFwiYnV0dG9uVGV4dFwiLCBcIlBST1BPU0FMXCIpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwU2NlbmVJbmZvLkFkanVzdFRleHRPYmplY3QoXCJidXR0b25SZXBvXCIsIFwiYnV0dG9uVGV4dFwiLCAwLCBuZXcgVmVjdG9yMygwLDAsLTAuMDMxKSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBTY2VuZUluZm8uQWRqdXN0VGV4dE9iamVjdChcImJ1dHRvblJlcG9cIiwgXCJidXR0b25UZXh0XCIsIDEsIG5ldyBWZWN0b3IzKDAuNCwwLjQsMC4wMykpO1xyXG5cclxuICAgICAgICAvL1NDRU5FIENSRURJVFNcclxuICAgICAgICAvLyAgZnJhbWVcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5BZGRNZW51T2JqZWN0KFwiY3JlZGl0RnJhbWVcIiwgMik7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBTY2VuZUluZm8uQWRqdXN0TWVudU9iamVjdChcImNyZWRpdEZyYW1lXCIsIDAsIG5ldyBWZWN0b3IzKC0yLjksMS45LDIuNCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwU2NlbmVJbmZvLkFkanVzdE1lbnVPYmplY3QoXCJjcmVkaXRGcmFtZVwiLCAxLCBuZXcgVmVjdG9yMygxLjQsMS40LDEuNCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwU2NlbmVJbmZvLkFkanVzdE1lbnVPYmplY3QoXCJjcmVkaXRGcmFtZVwiLCAyLCBuZXcgVmVjdG9yMygwLDI3MCwwKSk7XHJcbiAgICAgICAgLy8gIHRleHQgcGFyZW50XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBTY2VuZUluZm8uQWRkTWVudU9iamVjdChcImNyZWRpdENvbnRlbnRcIiwgMCwgXCJjcmVkaXRGcmFtZVwiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5BZGp1c3RNZW51T2JqZWN0KFwiY3JlZGl0Q29udGVudFwiLCAwLCBuZXcgVmVjdG9yMygwLDAsMC4wMTI1KSk7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBTY2VuZUluZm8uQWRqdXN0TWVudU9iamVjdChcImNyZWRpdENvbnRlbnRcIiwgMSwgbmV3IFZlY3RvcjMoMSwxLDEpKTtcclxuICAgICAgICAvLyAgbGFiZWwgaGVhZGVyIHRleHRcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5BZGRNZW51VGV4dChcImNyZWRpdENvbnRlbnRcIiwgXCJpbmZvSGVhZGVyXCIsIFwiU0NFTkUgQ1JFRElUU1wiKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5BZGp1c3RUZXh0T2JqZWN0KFwiY3JlZGl0Q29udGVudFwiLCBcImluZm9IZWFkZXJcIiwgMCwgbmV3IFZlY3RvcjMoMCwwLjYsMCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwU2NlbmVJbmZvLkFkanVzdFRleHRPYmplY3QoXCJjcmVkaXRDb250ZW50XCIsIFwiaW5mb0hlYWRlclwiLCAxLCBuZXcgVmVjdG9yMygwLjM1LDAuMzUsMC4wMzUpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5BZGp1c3RUZXh0RGlzcGxheShcImNyZWRpdENvbnRlbnRcIiwgXCJpbmZvSGVhZGVyXCIsIDAsIDYpO1xyXG4gICAgICAgIC8vICBsYWJlbCBoZWFkZXIgdGV4dFxyXG4gICAgICAgIHRoaXMubWVudUdyb3VwU2NlbmVJbmZvLkFkZE1lbnVUZXh0KFwiY3JlZGl0Q29udGVudFwiLCBcImluZm9IZWFkZXJcIiwgXHJcbiAgICAgICAgICAgIFwiVGhpcyBwcm9qZWN0IGluY2x1ZGVkIGEgbGFyZ2UgbnVtYmVyIG9mIGNyZWF0b3JzIGZyb20gdGhlIERlY2VudHJhbGFuZCBjb21tdW5pdHkhIFRob3VnaCB0aGlzIHNwZWNpZmljIHNjZW5lIG1heSBub3QgaW5jbHVkZSBhc3NldHMgZnJvbSBldmVyeSBjcmVhdG9yLFwiK1xyXG4gICAgICAgICAgICBcIiBJIGZlZWwgaXQgaXMgaW1wb3J0YW50IHRvIHN0aWxsIGluY2x1ZGUgZXZlcnkgcGVyc29uIHdobyBoZWxwZWQgbWFrZSB0aGlzIHByb2plY3QgYSByZWFsaXR5IVwiXHJcbiAgICAgICAgICAgICtcIlxcblxcblxcblxcblxcdFxcdCAgIE11c2ljOiBLYXJsIENhc2V5IEAgV2hpdGUgQmF0IEF1ZGlvXCJcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwU2NlbmVJbmZvLkFkanVzdFRleHRPYmplY3QoXCJjcmVkaXRDb250ZW50XCIsIFwiaW5mb0hlYWRlclwiLCAwLCBuZXcgVmVjdG9yMygwLDAuNDUsMCkpO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwU2NlbmVJbmZvLkFkanVzdFRleHRPYmplY3QoXCJjcmVkaXRDb250ZW50XCIsIFwiaW5mb0hlYWRlclwiLCAxLCBuZXcgVmVjdG9yMygwLjM1LDAuMzUsMC4wMzUpKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5HZXRNZW51T2JqZWN0VGV4dChcImNyZWRpdENvbnRlbnRcIiwgXCJpbmZvSGVhZGVyXCIpLmdldENvbXBvbmVudChUZXh0U2hhcGUpLndpZHRoID0gNjtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5HZXRNZW51T2JqZWN0VGV4dChcImNyZWRpdENvbnRlbnRcIiwgXCJpbmZvSGVhZGVyXCIpLmdldENvbXBvbmVudChUZXh0U2hhcGUpLnRleHRXcmFwcGluZyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5tZW51R3JvdXBTY2VuZUluZm8uQWRqdXN0VGV4dERpc3BsYXkoXCJjcmVkaXRDb250ZW50XCIsIFwiaW5mb0hlYWRlclwiLCAwLCAyKTtcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5BZGp1c3RUZXh0RGlzcGxheShcImNyZWRpdENvbnRlbnRcIiwgXCJpbmZvSGVhZGVyXCIsIDEsIDApO1xyXG4gICAgICAgIHRoaXMubWVudUdyb3VwU2NlbmVJbmZvLkFkanVzdFRleHREaXNwbGF5KFwiY3JlZGl0Q29udGVudFwiLCBcImluZm9IZWFkZXJcIiwgMiwgMCk7XHJcblxyXG4gICAgICAgIC8vZ2VuZXJhdGUgY3JlYXRvciBsaW5rYWdlc1xyXG4gICAgICAgIGZvcih2YXIgaTpudW1iZXI9MDsgaTx0aGlzLnN0cmluZ3NDcmVhdG9ycy5sZW5ndGg7IGkrKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBvczpWZWN0b3IzID0gbmV3IFZlY3RvcjMoKChpJTQpLTEuNSkqMC42MSwtMC4zOC0oTWF0aC5yb3VuZChpLzgpKjAuMjM1KSwwKTtcclxuICAgICAgICAgICAgLy8gIGJ1dHRvbiBjcmVhdG9yIG9iamVjdFxyXG4gICAgICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5BZGRNZW51T2JqZWN0KFwiYnV0dG9uQ3JlYXRvclwiK2ksIDUsIFwiY3JlZGl0RnJhbWVcIik7XHJcbiAgICAgICAgICAgIHRoaXMubWVudUdyb3VwU2NlbmVJbmZvLkFkanVzdE1lbnVPYmplY3QoXCJidXR0b25DcmVhdG9yXCIraSwgMCwgcG9zKTtcclxuICAgICAgICAgICAgdGhpcy5tZW51R3JvdXBTY2VuZUluZm8uQWRqdXN0TWVudU9iamVjdChcImJ1dHRvbkNyZWF0b3JcIitpLCAxLCBuZXcgVmVjdG9yMygwLjIyLDAuMiwwLjIpKTtcclxuICAgICAgICAgICAgLyp0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5HZXRNZW51T2JqZWN0KFwiYnV0dG9uQ3JlYXRvclwiK2kpLmFkZENvbXBvbmVudFxyXG4gICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICBuZXcgT25Qb2ludGVyRG93blxyXG4gICAgICAgICAgICAgICAgKFxyXG4gICAgICAgICAgICAgICAgICAgIChlKSA9PlxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAvL29wZW4gbGlua1xyXG4gICAgICAgICAgICAgICAgICAgIG9wZW5FeHRlcm5hbFVSTChcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBidXR0b246IEFjdGlvbkJ1dHRvbi5BTlksXHJcbiAgICAgICAgICAgICAgICAgICAgc2hvd0ZlZWRiYWNrOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGhvdmVyVGV4dDogXCJbRV0gQ1JFQVRPUl9OQU1FX1wiK2ksXHJcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2U6IDhcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICk7Ki9cclxuICAgICAgICAgICAgLy8gIGJ1dHRvbiBjcmVhdG9yIHRleHRcclxuICAgICAgICAgICAgdGhpcy5tZW51R3JvdXBTY2VuZUluZm8uQWRkTWVudVRleHQoXCJidXR0b25DcmVhdG9yXCIraSwgXCJidXR0b25UZXh0XCIsIHRoaXMuc3RyaW5nc0NyZWF0b3JzW2ldKTtcclxuICAgICAgICAgICAgdGhpcy5tZW51R3JvdXBTY2VuZUluZm8uQWRqdXN0VGV4dE9iamVjdChcImJ1dHRvbkNyZWF0b3JcIitpLCBcImJ1dHRvblRleHRcIiwgMCwgbmV3IFZlY3RvcjMoMCwwLC0wLjAzMSkpO1xyXG4gICAgICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5BZGp1c3RUZXh0T2JqZWN0KFwiYnV0dG9uQ3JlYXRvclwiK2ksIFwiYnV0dG9uVGV4dFwiLCAxLCBuZXcgVmVjdG9yMygwLjMwLDAuMzAsMC4wMykpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9hY3RpdmF0ZSBtZW51IGJ5IGRlZmF1bHRcclxuICAgICAgICB0aGlzLm1lbnVHcm91cFNjZW5lSW5mby5TZXRNZW51U3RhdGUodHJ1ZSk7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIHN0cmluZ3NTY2VuZU5hbWVzOnN0cmluZ1tdID0gXHJcbiAgICBbXHJcbiAgICAgICAgXCJURCBGYWN0b3J5XCIsXHJcbiAgICAgICAgXCJURCBTaGlweWFyZFwiLFxyXG4gICAgICAgIFwiVEQgTmVvbiBDaXR5XCIsXHJcbiAgICBdO1xyXG4gICAgcHJpdmF0ZSBzdHJpbmdzU2NlbmVVUkxzOnN0cmluZ1tdID0gXHJcbiAgICBbXHJcbiAgICAgICAgXCIvL1wiLFxyXG4gICAgICAgIFwiLy9cIixcclxuICAgICAgICBcIi8vXCIsXHJcbiAgICBdO1xyXG4gICAgcHJpdmF0ZSBzdHJpbmdzQ3JlYXRvcnM6c3RyaW5nW10gPSBcclxuICAgIFtcclxuICAgICAgICBcIkphY2tvXCIsXHJcbiAgICAgICAgXCJDRy1LSU5HXCIsXHJcbiAgICAgICAgXCJUaGVDcnlwdG9UcmFkZXI2OVwiLFxyXG4gICAgICAgIFwiT3R0b25hbWFzXCIsXHJcbiAgICAgICAgXCJKZXRyb2xlZVwiLFxyXG4gICAgICAgIFwiRGVtaURlc2lnblwiLFxyXG4gICAgICAgIFwiRW1pbGllXCIsXHJcbiAgICAgICAgXCJGaW5lZ3JhcGdoXCIsXHJcbiAgICBdO1xyXG59IiwiLyogICAgICBBVURJTyBNQU5BR0VSXHJcbiAgICBjb250cm9scyBhdWRpbyBjb21wb25lbnRzIGluLXNjZW5lLCBtYWlubHkgbG9iYnkgKGdhbWUgaWRsZSkgYW5kXHJcbiAgICBiYXR0bGUgKGR1cmluZyB3YXZlKSBtdXNpYy5cclxuKi9cclxuZXhwb3J0IGNsYXNzIEF1ZGlvTWFuYWdlciBleHRlbmRzIEVudGl0eSBcclxue1xyXG4gICAgLy9hY2Nlc3MgcG9ja2V0aW5nXHJcbiAgICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTp1bmRlZmluZWR8QXVkaW9NYW5hZ2VyO1xyXG4gICAgcHVibGljIHN0YXRpYyBnZXQgSW5zdGFuY2UoKTpBdWRpb01hbmFnZXJcclxuICAgIHtcclxuICAgICAgICAvL2Vuc3VyZSBpbnN0YW5jZSBpcyBzZXRcclxuICAgICAgICBpZihBdWRpb01hbmFnZXIuaW5zdGFuY2UgPT09IHVuZGVmaW5lZClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEF1ZGlvTWFuYWdlci5pbnN0YW5jZSA9IG5ldyBBdWRpb01hbmFnZXIoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBBdWRpb01hbmFnZXIuaW5zdGFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgLy9sb2JieSBtdXNpY1xyXG4gICAgcHJpdmF0ZSBtdXNpY0xvYmJ5T2JqOkVudGl0eTtcclxuICAgIHByaXZhdGUgbXVzaWNMb2JieVNvdXJjZTpBdWRpb1NvdXJjZTtcclxuICAgIC8vYmF0dGxlIG11c2ljXHJcbiAgICBwcml2YXRlIG11c2ljQmF0dGxlT2JqOkVudGl0eTtcclxuICAgIHByaXZhdGUgbXVzaWNCYXR0bGVTb3VyY2U6QXVkaW9Tb3VyY2U7XHJcblxyXG4gICAgLy9jb25zdHJ1Y3RvclxyXG4gICAgY29uc3RydWN0b3IoKVxyXG4gICAge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5hZGRDb21wb25lbnQobmV3IFRyYW5zZm9ybVxyXG4gICAgICAgICh7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiBuZXcgVmVjdG9yMygzMiwyMCwzMiksXHJcbiAgICAgICAgICAgIHNjYWxlOiBuZXcgVmVjdG9yMygxLDEsMSksXHJcbiAgICAgICAgICAgIHJvdGF0aW9uOiBuZXcgUXVhdGVybmlvbigpLnNldEV1bGVyKDAsMCwwKVxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgLy9pbml0aWFsaXplIG11c2ljIGNvbXBvbmVudHNcclxuICAgICAgICAvLyAgbG9iYnlcclxuICAgICAgICB0aGlzLm11c2ljTG9iYnlPYmogPSBuZXcgRW50aXR5KCk7XHJcbiAgICAgICAgdGhpcy5tdXNpY0xvYmJ5T2JqLnNldFBhcmVudCh0aGlzKTtcclxuICAgICAgICB0aGlzLm11c2ljTG9iYnlTb3VyY2UgPSBuZXcgQXVkaW9Tb3VyY2UobmV3IEF1ZGlvQ2xpcChcImF1ZGlvL1doaXRlQmF0QXVkaW9fVkhTX01lbW9yeS5tcDNcIikpO1xyXG4gICAgICAgIHRoaXMubXVzaWNMb2JieVNvdXJjZS5wbGF5aW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5tdXNpY0xvYmJ5U291cmNlLmxvb3AgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMubXVzaWNMb2JieU9iai5hZGRDb21wb25lbnQodGhpcy5tdXNpY0xvYmJ5U291cmNlKTtcclxuICAgICAgICAvLyAgYmF0dGxlXHJcbiAgICAgICAgdGhpcy5tdXNpY0JhdHRsZU9iaiA9IG5ldyBFbnRpdHkoKTtcclxuICAgICAgICB0aGlzLm11c2ljQmF0dGxlT2JqLnNldFBhcmVudCh0aGlzKTtcclxuICAgICAgICB0aGlzLm11c2ljQmF0dGxlU291cmNlID0gbmV3IEF1ZGlvU291cmNlKG5ldyBBdWRpb0NsaXAoXCJhdWRpby9XaGl0ZUJhdEF1ZGlvX1NvbWEubXAzXCIpKTtcclxuICAgICAgICB0aGlzLm11c2ljQmF0dGxlU291cmNlLnBsYXlpbmcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLm11c2ljQmF0dGxlU291cmNlLmxvb3AgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMubXVzaWNCYXR0bGVPYmouYWRkQ29tcG9uZW50KHRoaXMubXVzaWNCYXR0bGVTb3VyY2UpO1xyXG5cclxuICAgICAgICAvL2FkZCBvYmplY3QgdG8gc2NlbmVcclxuICAgICAgICBlbmdpbmUuYWRkRW50aXR5KHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gc3RhdGUgdGFyZ2V0ZWQgbXVzaWMgc3RhdGUgKDA9b2ZmLCAxPWxvYmJ5KVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgU2V0TXVzaWNTdGF0ZShzdGF0ZTpudW1iZXIpXHJcbiAgICB7XHJcbiAgICAgICAgLy9kaXNhYmxlIGFsbCB0cmFja3NcclxuICAgICAgICB0aGlzLm11c2ljTG9iYnlTb3VyY2UucGxheWluZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMubXVzaWNCYXR0bGVTb3VyY2UucGxheWluZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAvL2FjdGl2YXRlIHRhcmdldGVkIG11c2ljXHJcbiAgICAgICAgc3dpdGNoKHN0YXRlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5tdXNpY0xvYmJ5U291cmNlLnBsYXlpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5tdXNpY0JhdHRsZVNvdXJjZS5wbGF5aW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiLyogICAgICBUT1dFUiBERUZFTkNFIE1BTkFHRVJcclxuICAgIGFjdHMgYXMgdGhlIG1haW4gY29udHJvbGxlciBmb3IgYSB0b3dlciBkZWZlbmNlIGdhbWU6IGluY2x1ZGluZyBzcGF3bmluZywgXHJcbiAgICB0b3dlciBtYW5hZ2VtZW50LCBhbmQgc2NvcmluZy4gTW9zdCBtZWNoYW5pY3MgYXJlIG9ubHkgaW5pdGlhbGl6ZWQgQUZURVJcclxuICAgIGEgcGxheWVyIGJlZ2lucyB0aGVpciBmaXJzdCBtYXRjaCwgc28gdXNlcnMgZW50ZXJpbmcgdGhlIHNjZW5lIGZvciB0aGVcclxuICAgIGZpcnN0IHRpbWUgZG9uJ3QgcnVuIHByb2Nlc3NlcyB1bnRpbCB0aGV5IGRlY2lkZSB0byBwbGF5IHRoZSBnYW1lLlxyXG4gICAgXHJcbiAgICBhbGwgb2JqZWN0cyBhbmQgY29tcG9uZW50cyBhcmUgcGFyZW50ZWQgdW5kZXIgdGhpcyBlbnRpdHksIGFsbG93aW5nIGZvclxyXG4gICAgZWFzeSBkZS9hY3RpdmF0aW9uLiBFYWNoIG1hbmFnZW1lbnQgb2JqZWN0IGlzIG5lc3RlZCBiZW5lYXRoIHRoaXMgb2JqZWN0XHJcbiAgICBhbmQgcGFyZW50cyBhbGwgb2JqZWN0cyB0aGV5IG1hbmFnZS4gIFxyXG5cclxuICAgIG1hbnkgb2YgdGhlIHN5c3RlbSdzIGZ1bmN0aW9ucyBhcmUgZ2l2ZW4gY2FsbGJhY2tzIHRvIHRoZSBzaW5nbGV0b24gaW5zdGFuY2VcclxuICAgIG9mIHRoZSBnYW1lIG1hbmFnZXIuIHRoaXMgbGV0cyB1cyBjb250cm9sIGltcG9ydGFudCBjYWxscyAoZGFtYWdpbmcgcGxheWVyIGJhc2VcclxuICAgIGFuZCBraWxsaW5nIHVuaXRzKSBmcm9tIHRoZSB0b3AgZG93biB3aXRob3V0IGNyZWF0aW5nIGN5Y2xpbmRyaWNhbCBkZXBlbmRhbmNpZXMuXHJcblxyXG4gICAgVE9ETzpcclxuICAgIC1hIGxvdCBvZiBVSSB1cGRhdGUgY2FsbHMgYXJlIHRpZWQgdG8gYSBzaW5nbGUgdmFyLCB0aGVzZSBjYW4gYmUgcHVzaGVkIGRpcmVjdGx5IGludG8gdGhlIHZhcidzIGFjY2Vzc1xyXG4qL1xyXG5pbXBvcnQgeyBEaWZmaWN1bHR5RGF0YSB9IGZyb20gXCIuL2RhdGEvZGlmZmljdWx0eS1kYXRhXCI7XHJcbmltcG9ydCB7IGRhdGFUb3dlcnMgfSBmcm9tIFwiLi9kYXRhL3Rvd2VyLWRhdGFcIjtcclxuaW1wb3J0IHsgRW5lbXlVbml0TWFuYWdlciB9IGZyb20gXCIuL2VuZW15LW1hbmFnZXJcIjtcclxuaW1wb3J0IHsgRW5lbXlXYXZlTWFuYWdlciB9IGZyb20gXCIuL2VuZW15LXdhdmUtbWFuYWdlclwiO1xyXG5pbXBvcnQgeyBXYXlwb2ludCwgV2F5cG9pbnRNYW5hZ2VyIH0gZnJvbSBcIi4vbWFwLXBhdGhpbmdcIjtcclxuaW1wb3J0IHsgVG93ZXJGb3VuZGF0aW9uLCBUb3dlckZyYW1lIH0gZnJvbSBcIi4vdG93ZXItZW50aXR5XCI7XHJcbmltcG9ydCB7IFRvd2VyTWFuYWdlciB9IGZyb20gXCIuL3Rvd2VyLW1hbmFnZXJcIjtcclxuaW1wb3J0IHsgR2FtZVN0YXRlIH0gZnJvbSBcIi4vZ2FtZS1zdGF0ZXNcIjtcclxuaW1wb3J0IHsgR2FtZU1lbnUgfSBmcm9tIFwiLi9nYW1lLW1lbnVcIjtcclxuaW1wb3J0IHsgRW5lbXlVbml0T2JqZWN0IH0gZnJvbSBcIi4vZW5lbXktZW50aXR5XCI7XHJcbmltcG9ydCB7IEVuZW15RGF0YSB9IGZyb20gXCIuL2RhdGEvZW5lbXktZGF0YVwiO1xyXG5pbXBvcnQgeyBBdWRpb01hbmFnZXIgfSBmcm9tIFwic3JjL3V0aWxpdGllcy9hdWRpby1tYW5hZ2VyXCI7XHJcbi8vbWFuYWdlbWVudCBjbGFzcyBmb3IgdG93ZXIgZGVmZW5jZSBzY2VuZVxyXG5leHBvcnQgY2xhc3MgR2FtZU1hbmFnZXIgZXh0ZW5kcyBFbnRpdHlcclxue1xyXG4gICAgLy9hY2Nlc3MgcG9ja2V0aW5nXHJcbiAgICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTp1bmRlZmluZWR8R2FtZU1hbmFnZXI7XHJcbiAgICBwdWJsaWMgc3RhdGljIGdldCBJbnN0YW5jZSgpOkdhbWVNYW5hZ2VyXHJcbiAgICB7XHJcbiAgICAgICAgLy9lbnN1cmUgaW5zdGFuY2UgaXMgc2V0XHJcbiAgICAgICAgaWYoR2FtZU1hbmFnZXIuaW5zdGFuY2UgPT09IHVuZGVmaW5lZClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEdhbWVNYW5hZ2VyLmluc3RhbmNlID0gbmV3IEdhbWVNYW5hZ2VyKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gR2FtZU1hbmFnZXIuaW5zdGFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgLy9nYW1lIHRpbWVyXHJcbiAgICBnYW1lVGltZXJTeXN0ZW06R2FtZVRpbWVyU3lzdGVtO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogY29uc3RydWN0b3JcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoKVxyXG4gICAge1xyXG4gICAgICAgIC8vb2JqZWN0XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLmFkZENvbXBvbmVudChuZXcgVHJhbnNmb3JtXHJcbiAgICAgICAgKHtcclxuICAgICAgICAgICAgcG9zaXRpb246IG5ldyBWZWN0b3IzKDAsMCwwKSxcclxuICAgICAgICAgICAgc2NhbGU6IG5ldyBWZWN0b3IzKDEsMSwxKSxcclxuICAgICAgICAgICAgcm90YXRpb246IG5ldyBRdWF0ZXJuaW9uKCkuc2V0RXVsZXIoMCwwLDApXHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAvL21lbnUgY2FsbGJhY2tzXHJcbiAgICAgICAgR2FtZU1lbnUuSW5zdGFuY2UuU2V0RGlmZmljdWx0eSA9IHRoaXMuY2FsbGJhY2tTZXREaWZmaWN1bHR5O1xyXG4gICAgICAgIEdhbWVNZW51Lkluc3RhbmNlLkdhbWVTdGFydCA9IHRoaXMuY2FsbGJhY2tHYW1lU3RhcnQ7XHJcbiAgICAgICAgR2FtZU1lbnUuSW5zdGFuY2UuR2FtZVJlc2V0ID0gdGhpcy5jYWxsYmFja0dhbWVSZXNldDtcclxuICAgICAgICBHYW1lTWVudS5JbnN0YW5jZS5XYXZlU3RhcnQgPSB0aGlzLmNhbGxiYWNrV2F2ZVN0YXJ0O1xyXG4gICAgICAgIEdhbWVNZW51Lkluc3RhbmNlLlRvd2VyQnVpbGQgPSB0aGlzLmNhbGxiYWNrVG93ZXJCdWlsZDtcclxuICAgICAgICBHYW1lTWVudS5JbnN0YW5jZS5Ub3dlckRlY29uc3RydWN0ID0gdGhpcy5jYWxsYmFja1Rvd2VyRGVjb25zdHJ1Y3Q7XHJcbiAgICAgICAgLy9lbmFibGUgYW5kIHBsYWNlIHRvd2VyIG1lbnUgKHdvcmsgYXJvdW5kIHRvIGVuZm9yY2UgcG9zaXRpb25hbCB1cGRhdGUgYmFzZWQgb24gcGxheWVyIGxvY2F0aW9uKVxyXG4gICAgICAgIC8vICBpbml0aWFsIHBvc2l0aW9uXHJcbiAgICAgICAgR2FtZU1lbnUuSW5zdGFuY2UubWVudUdyb3VwVG93ZXIuQWRqdXN0TWVudVBhcmVudCgwLCBuZXcgVmVjdG9yMyg0LDI0LDQpKTtcclxuICAgICAgICAvLyAgcm90YXRpb25cclxuICAgICAgICBHYW1lTWVudS5JbnN0YW5jZS5tZW51R3JvdXBUb3dlci5ncm91cFBhcmVudC5nZXRDb21wb25lbnQoVHJhbnNmb3JtKS5sb29rQXQoQ2FtZXJhLmluc3RhbmNlLnBvc2l0aW9uKTtcclxuICAgICAgICBHYW1lTWVudS5JbnN0YW5jZS5tZW51R3JvdXBUb3dlci5ncm91cFBhcmVudC5nZXRDb21wb25lbnQoVHJhbnNmb3JtKS5yb3RhdGlvbiA9IFF1YXRlcm5pb24uRXVsZXJcclxuICAgICAgICAoXHJcbiAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgIEdhbWVNZW51Lkluc3RhbmNlLm1lbnVHcm91cFRvd2VyLmdyb3VwUGFyZW50LmdldENvbXBvbmVudChUcmFuc2Zvcm0pLmV1bGVyQW5nbGVzLnkgKyAxODAsXHJcbiAgICAgICAgICAgIDBcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvL3RpbWVyIHN5c3RlbSBzZXR1cFxyXG4gICAgICAgIHRoaXMuZ2FtZVRpbWVyU3lzdGVtID0gbmV3IEdhbWVUaW1lclN5c3RlbSgpO1xyXG4gICAgICAgIHRoaXMuZ2FtZVRpbWVyU3lzdGVtLlNwYXduRW5lbXkgPSB0aGlzLmNhbGxiYWNrRW5lbXlVbml0U3Bhd247XHJcbiAgICAgICAgdGhpcy5nYW1lVGltZXJTeXN0ZW0uU3RhcnRXYXZlID0gdGhpcy5jYWxsYmFja1dhdmVTdGFydDtcclxuICAgICAgICBlbmdpbmUuYWRkU3lzdGVtKHRoaXMuZ2FtZVRpbWVyU3lzdGVtKTtcclxuXHJcbiAgICAgICAgLy9tYW5hZ2VyIGNvbXBvbmVudCBzZXR1cFxyXG4gICAgICAgIC8vICB3YXlwb2ludCBtYW5hZ2VyXHJcbiAgICAgICAgV2F5cG9pbnRNYW5hZ2VyLkluc3RhbmNlLkdlbmVyYXRlV2F5cG9pbnRzKCk7XHJcbiAgICAgICAgV2F5cG9pbnRNYW5hZ2VyLkluc3RhbmNlLnNldFBhcmVudCh0aGlzKTtcclxuICAgICAgICAvLyAgdG93ZXIgbWFuYWdlclxyXG4gICAgICAgIFRvd2VyTWFuYWdlci5JbnN0YW5jZS5HZXRTZWxlY3RlZFRvd2VyTW92ZSA9IHRoaXMuZ2V0U2VsZWN0ZWRUb3dlck1vdmU7XHJcbiAgICAgICAgVG93ZXJNYW5hZ2VyLkluc3RhbmNlLk1vdmVUb3dlciA9IHRoaXMuY2FsbGJhY2tUb3dlck1vdmVcclxuICAgICAgICBUb3dlck1hbmFnZXIuSW5zdGFuY2UuR2V0U2VsZWN0ZWRUb3dlciA9IHRoaXMuZ2V0U2VsZWN0ZWRUb3dlcjtcclxuICAgICAgICBUb3dlck1hbmFnZXIuSW5zdGFuY2UuU2VsZWN0VG93ZXIgPSB0aGlzLmNhbGxiYWNrVG93ZXJTZWxlY3Q7XHJcbiAgICAgICAgVG93ZXJNYW5hZ2VyLkluc3RhbmNlLkRhbWFnZUVuZW15ID0gdGhpcy5jYWxsYmFja0VuZW15VW5pdERhbWFnZTtcclxuICAgICAgICBUb3dlck1hbmFnZXIuSW5zdGFuY2UuQXBwbHlFZmZlY3QgPSBFbmVteVVuaXRNYW5hZ2VyLkluc3RhbmNlLmNhbGxiYWNrQXBwbHlFZmZlY3Q7XHJcbiAgICAgICAgVG93ZXJNYW5hZ2VyLkluc3RhbmNlLkdlbmVyYXRlVG93ZXJGb3VuZGF0aW9ucygpO1xyXG4gICAgICAgIFRvd2VyTWFuYWdlci5JbnN0YW5jZS5zZXRQYXJlbnQodGhpcyk7XHJcbiAgICAgICAgLy8gIGVuZW15IHVuaXQgbWFuYWdlclxyXG4gICAgICAgIEVuZW15VW5pdE1hbmFnZXIuSW5zdGFuY2UuVW5pdEF0dGFjayA9IHRoaXMuY2FsbGJhY2tQbGF5ZXJCYXNlRGFtYWdlO1xyXG4gICAgICAgIEVuZW15VW5pdE1hbmFnZXIuSW5zdGFuY2UuVW5pdERlYXRoID0gdGhpcy5jYWxsYmFja0VuZW15VW5pdERlYXRoO1xyXG4gICAgICAgIEVuZW15VW5pdE1hbmFnZXIuSW5zdGFuY2Uuc2V0UGFyZW50KHRoaXMpO1xyXG4gICAgICAgIEVuZW15VW5pdE1hbmFnZXIuSW5zdGFuY2UuSW5pdGlhbGl6ZSgpO1xyXG5cclxuICAgICAgICAvL2FkZCB0byBlbmdpbmVcclxuICAgICAgICBlbmdpbmUuYWRkRW50aXR5KHRoaXMpO1xyXG5cclxuICAgICAgICAvL3NldCBkZWZhdWx0IGRpZmZpY3VsdHlcclxuICAgICAgICB0aGlzLlNldERpZmZpY3VsdHkoMik7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vY2FsbGJhY2sgdG8gc2V0IGRpZmZpY3VsdHlcclxuICAgIHB1YmxpYyBjYWxsYmFja1NldERpZmZpY3VsdHkoZGlmOm51bWJlcilcclxuICAgIHtcclxuICAgICAgICBHYW1lTWFuYWdlci5JbnN0YW5jZS5TZXREaWZmaWN1bHR5KGRpZik7XHJcbiAgICB9XHJcbiAgICAvL3NldHMgdGhlIGdhbWUncyBkaWZmaWN1bHR5XHJcbiAgICBwdWJsaWMgU2V0RGlmZmljdWx0eShkaWY6bnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIC8vcmVkZWZpbmUgZGlmZmljdWx0eVxyXG4gICAgICAgIGlmKGRpZiA+PSBEaWZmaWN1bHR5RGF0YS5sZW5ndGgpIHsgR2FtZVN0YXRlLkRpZmZpY3VsdHlDdXIgPSAwOyB9XHJcbiAgICAgICAgZWxzZSBpZihkaWYgPCAwKSB7IEdhbWVTdGF0ZS5EaWZmaWN1bHR5Q3VyID0gRGlmZmljdWx0eURhdGEubGVuZ3RoLTE7IH1cclxuICAgICAgICBlbHNlIHsgR2FtZVN0YXRlLkRpZmZpY3VsdHlDdXIgPSBkaWY7IH1cclxuXHJcbiAgICAgICAgLy91cGRhdGUgdGV4dFxyXG4gICAgICAgIEdhbWVNZW51Lkluc3RhbmNlLnVwZGF0ZURpZmZpY3VsdHkoKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiByZXR1cm5zIHRoZSBnYW1lIHRvIGl0cyBpbml0aWFsaXphdGlvbiBwb2ludCwgZGlzcGxheWluZyB0aGUgZGlmZmljdWx0eSBtZW51XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjYWxsYmFja0dhbWVSZXNldCgpXHJcbiAgICB7XHJcbiAgICAgICAgR2FtZU1hbmFnZXIuSW5zdGFuY2UuR2FtZVJlc2V0KCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgR2FtZVJlc2V0KClcclxuICAgIHtcclxuICAgICAgICBpZihHYW1lU3RhdGUuZGVidWdnaW5nTWFuYWdlcikgbG9nKFwiVEQgTUFOQUdFUjogZ2FtZSByZXNldHRpbmcuLi5cIik7XHJcblxyXG4gICAgICAgIC8vdXBkYXRlIGdhbWVzdGF0ZVxyXG4gICAgICAgIEdhbWVTdGF0ZS5zdGF0ZUN1ciA9IDA7XHJcbiAgICAgICAgLy9oYWx0IHdhdmUvc3Bhd25pbmdcclxuICAgICAgICB0aGlzLmdhbWVUaW1lclN5c3RlbS5oYWx0ZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAvL2NsZWFuIG1hcFxyXG4gICAgICAgIEVuZW15VW5pdE1hbmFnZXIuSW5zdGFuY2UuQ2xlYXJVbml0cygpO1xyXG4gICAgICAgIFRvd2VyTWFuYWdlci5JbnN0YW5jZS5DbGVhclRvd2VycygpO1xyXG4gICAgICAgIC8vcmVtb3ZlIHNlbGVjdGVkIG1vdmUgZm91bmRhdGlvblxyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRGb3VuZGF0aW9uTW92ZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICBUb3dlck1hbmFnZXIuSW5zdGFuY2UuU2V0VG93ZXJNb3ZlTWFya2VyU3RhdGUoZmFsc2UpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vcmVkcmF3IGRpc3BsYXlcclxuICAgICAgICBHYW1lTWVudS5JbnN0YW5jZS5VcGRhdGVNYWluTWVudVN0YXRlKDApO1xyXG4gICAgICAgIEdhbWVNZW51Lkluc3RhbmNlLlVwZGF0ZVdhdmVDb3VudCgpO1xyXG4gICAgICAgIEdhbWVNZW51Lkluc3RhbmNlLnVwZGF0ZUxpZmVDb3VudCgpO1xyXG4gICAgICAgIEdhbWVNZW51Lkluc3RhbmNlLnVwZGF0ZU1vbmV5Q291bnQoKTtcclxuICAgICAgICBcclxuICAgICAgICAvL3BsYXkgbXVzaWM6IGxvYmJ5XHJcbiAgICAgICAgQXVkaW9NYW5hZ2VyLkluc3RhbmNlLlNldE11c2ljU3RhdGUoMSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYoR2FtZVN0YXRlLmRlYnVnZ2luZ01hbmFnZXIpIGxvZyhcIlREIE1BTkFHRVI6IGdhbWUgcmVzZXQhXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogc3RhcnRzIHRoZSBnYW1lLCBpbml0aWFsaXppbmcgYWxsIHN5c3RlbXMgYW5kIHNldHRpbmcgdGhlIGdhbWUgc3RhZ2UgdG8gYSBuZXV0cmFsIHN0YXRlLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY2FsbGJhY2tHYW1lU3RhcnQoKVxyXG4gICAge1xyXG4gICAgICAgIEdhbWVNYW5hZ2VyLkluc3RhbmNlLkdhbWVTdGFydCgpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIEdhbWVTdGFydCgpXHJcbiAgICB7XHJcbiAgICAgICAgaWYoR2FtZVN0YXRlLmRlYnVnZ2luZ01hbmFnZXIpIGxvZyhcIlREIE1BTkFHRVI6IGdhbWUgc3RhcnRpbmcuLi5cIik7XHJcblxyXG4gICAgICAgIC8vdXBkYXRlIGdhbWVzdGF0ZVxyXG4gICAgICAgIEdhbWVTdGF0ZS5zdGF0ZUN1ciA9IDE7XHJcblxyXG4gICAgICAgIC8vY2xlYW4gbWFwXHJcbiAgICAgICAgLy9zZXQgZGVmYXVsdCBnYW1lIHN0YXRlXHJcbiAgICAgICAgR2FtZVN0YXRlLldhdmVDdXIgPSAwO1xyXG4gICAgICAgIEdhbWVTdGF0ZS5QbGF5ZXJIZWFsdGggPSBEaWZmaWN1bHR5RGF0YVtHYW1lU3RhdGUuRGlmZmljdWx0eUN1cl0uUGxheWVySGVhbHRoO1xyXG4gICAgICAgIEdhbWVTdGF0ZS5QbGF5ZXJNb25leSA9IEdhbWVTdGF0ZS5tb25leVN0YXJ0O1xyXG5cclxuICAgICAgICAvL3Jlc2V0IG1hbmFnZXJzXHJcbiAgICAgICAgLy8gIHNwYXduZXJzXHJcbiAgICAgICAgV2F5cG9pbnRNYW5hZ2VyLkluc3RhbmNlLlJlc2V0U3Bhd25lcigpO1xyXG4gICAgICAgIFdheXBvaW50TWFuYWdlci5JbnN0YW5jZS5QYXJzZVNwYXduZXJDb25maWcoKTtcclxuICAgICAgICAvLyAgdW5pdHNcclxuICAgICAgICBFbmVteVVuaXRNYW5hZ2VyLkluc3RhbmNlLkNsZWFyVW5pdHMoKTtcclxuICAgICAgICAvLyAgd2F2ZXNcclxuICAgICAgICBFbmVteVdhdmVNYW5hZ2VyLkluc3RhbmNlLkdlbmVyYXRlV2F2ZXMoKTtcclxuICAgICAgICAvLyAgdG93ZXJzXHJcbiAgICAgICAgVG93ZXJNYW5hZ2VyLkluc3RhbmNlLkNsZWFyVG93ZXJzKCk7XHJcblxyXG4gICAgICAgIC8vcmVkcmF3IGRpc3BsYXlcclxuICAgICAgICBHYW1lTWVudS5JbnN0YW5jZS5VcGRhdGVNYWluTWVudVN0YXRlKDEpO1xyXG4gICAgICAgIEdhbWVNZW51Lkluc3RhbmNlLlVwZGF0ZVdhdmVDb3VudCgpO1xyXG4gICAgICAgIEdhbWVNZW51Lkluc3RhbmNlLnVwZGF0ZUxpZmVDb3VudCgpO1xyXG4gICAgICAgIEdhbWVNZW51Lkluc3RhbmNlLnVwZGF0ZU1vbmV5Q291bnQoKTtcclxuXHJcbiAgICAgICAgLy9yZXNldCB0aW1lciBzeXN0ZW1cclxuICAgICAgICB0aGlzLmdhbWVUaW1lclN5c3RlbS5Jbml0aWFsaXplKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy9wbGF5IG11c2ljOiBsb2JieVxyXG4gICAgICAgIEF1ZGlvTWFuYWdlci5JbnN0YW5jZS5TZXRNdXNpY1N0YXRlKDEpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKEdhbWVTdGF0ZS5kZWJ1Z2dpbmdNYW5hZ2VyKSBsb2coXCJURCBNQU5BR0VSOiBnYW1lIHN0YXJ0ZWQhXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogZW5kcyB0aGUgZ2FtZSwgZGlzcGxheSBnYW1lIHN0YXRzIGFuZCByZW1vdmluZyBlbmVtaWVzIChrZWVwcyB0b3dlcnMgdG8gdmlldyBzdGF0cylcclxuICAgICAqIEBwYXJhbSBpc1ZpY3Rvcnkgd2hldGhlciB0aGUgZ2FtZSBlbmRzIGluIGEgd2luIG9yIGEgbG9zc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY2FsbGJhY2tHYW1lRW5kKGlzVmljdG9yeTpib29sZWFuKVxyXG4gICAge1xyXG4gICAgICAgIEdhbWVNYW5hZ2VyLkluc3RhbmNlLkdhbWVFbmQoaXNWaWN0b3J5KTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBHYW1lRW5kKGlzVmljdG9yeTpib29sZWFuKVxyXG4gICAge1xyXG4gICAgICAgIGlmKEdhbWVTdGF0ZS5kZWJ1Z2dpbmdNYW5hZ2VyKSBsb2coXCJURCBNQU5BR0VSOiBnYW1lIGVuZGluZyAoXCIraXNWaWN0b3J5K1wiKS4uLlwiKTtcclxuICAgICAgICAvL3VwZGF0ZSBnYW1lc3RhdGVcclxuICAgICAgICBHYW1lU3RhdGUuc3RhdGVDdXIgPSAzO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vcmVtb3ZlIHNlbGVjdGVkIG1vdmUgZm91bmRhdGlvblxyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRGb3VuZGF0aW9uTW92ZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICBUb3dlck1hbmFnZXIuSW5zdGFuY2UuU2V0VG93ZXJNb3ZlTWFya2VyU3RhdGUoZmFsc2UpO1xyXG5cclxuICAgICAgICAvL2NsZWFyIHVuaXRzXHJcbiAgICAgICAgRW5lbXlVbml0TWFuYWdlci5JbnN0YW5jZS5DbGVhclVuaXRzKCk7XHJcblxyXG4gICAgICAgIC8vcGxheSBtdXNpYzogbG9iYnlcclxuICAgICAgICBBdWRpb01hbmFnZXIuSW5zdGFuY2UuU2V0TXVzaWNTdGF0ZSgxKTtcclxuICAgICAgICBcclxuICAgICAgICBpZihHYW1lU3RhdGUuZGVidWdnaW5nTWFuYWdlcikgbG9nKFwiVEQgTUFOQUdFUjogZ2FtZSBlbmRlZCAoXCIraXNWaWN0b3J5K1wiKSFcIik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBiZWdpbnMgdGhlIG5leHQgd2F2ZSwgc3Bhd25pbmcgYWxsIGVuZW1pZXMgaW4gY3VycmVudCB3YXZlIHBlciBpbnRlcnZhbCBcclxuICAgICAqL1xyXG4gICAgcHVibGljIGNhbGxiYWNrV2F2ZVN0YXJ0KClcclxuICAgIHtcclxuICAgICAgICBHYW1lTWFuYWdlci5JbnN0YW5jZS5XYXZlU3RhcnQoKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBXYXZlU3RhcnQoKVxyXG4gICAge1xyXG4gICAgICAgIGlmKEdhbWVTdGF0ZS5kZWJ1Z2dpbmdXYXZlKSBsb2coXCJURCBNQU5BR0VSOiBzdGFydGluZyB3YXZlIFwiK0dhbWVTdGF0ZS5XYXZlQ3VyK1wiLi4uXCIpO1xyXG4gICAgICAgIC8vZW5zdXJlIGdhbWUgaXMgYmV0d2VlbiB3YXZlc1xyXG4gICAgICAgIGlmKEdhbWVTdGF0ZS5zdGF0ZUN1ciAhPSAxKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoR2FtZVN0YXRlLmRlYnVnZ2luZ1dhdmUpIGxvZyhcIlREIE1BTkFHRVI6IGZhaWxlZCwgaW5jb3JyZWN0IHN0YXRlIChcIitHYW1lU3RhdGUuc3RhdGVDdXIudG9TdHJpbmcoKStcIilcIik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy91cGRhdGUgZ2FtZXN0YXRlXHJcbiAgICAgICAgR2FtZVN0YXRlLnN0YXRlQ3VyID0gMjtcclxuICAgICAgICBcclxuICAgICAgICAvL3JlbW92ZSBzZWxlY3RlZCBtb3ZlIGZvdW5kYXRpb25cclxuICAgICAgICB0aGlzLnNlbGVjdGVkRm91bmRhdGlvbk1vdmUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgVG93ZXJNYW5hZ2VyLkluc3RhbmNlLlNldFRvd2VyTW92ZU1hcmtlclN0YXRlKGZhbHNlKTtcclxuXHJcbiAgICAgICAgLy9nZXQgcm9vc3RlciBsZW5ndGhcclxuICAgICAgICB0aGlzLnVuaXRMZW5ndGggPSBFbmVteVdhdmVNYW5hZ2VyLkluc3RhbmNlLkdldEVuZW15V2F2ZUN1cnJlbnQoKS5lbmVteVVuaXRzLmxlbmd0aDtcclxuXHJcbiAgICAgICAgLy9kZWZpbmUgbnVtYmVyIG9mIHVuaXRzIGluIHdhdmVcclxuICAgICAgICBFbmVteVVuaXRNYW5hZ2VyLkluc3RhbmNlLmVuZW15U2l6ZVJlbWFpbmluZyA9IDA7XHJcbiAgICAgICAgZm9yKHZhciBpOm51bWJlcj0wOyBpPHRoaXMudW5pdExlbmd0aDsgaSsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgRW5lbXlVbml0TWFuYWdlci5JbnN0YW5jZS5lbmVteVNpemVSZW1haW5pbmcgKz0gRW5lbXlXYXZlTWFuYWdlci5JbnN0YW5jZS5HZXRFbmVteVdhdmVDdXJyZW50KCkuZW5lbXlVbml0c1tpXS5lbmVteUNvdW50O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9wcmltZSB0aW1lciBzeXN0ZW1cclxuICAgICAgICB0aGlzLmdhbWVUaW1lclN5c3RlbS5Jbml0aWFsaXplKCk7XHJcbiAgICAgICAgdGhpcy5nYW1lVGltZXJTeXN0ZW0uaGFsdGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgIC8vcmVkcmF3IGRpc3BsYXlcclxuICAgICAgICBHYW1lTWVudS5JbnN0YW5jZS5VcGRhdGVNYWluTWVudVN0YXRlKDIpO1xyXG5cclxuICAgICAgICAvL3BsYXkgbXVzaWM6IGJhdHRsZVxyXG4gICAgICAgIEF1ZGlvTWFuYWdlci5JbnN0YW5jZS5TZXRNdXNpY1N0YXRlKDIpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKEdhbWVTdGF0ZS5kZWJ1Z2dpbmdXYXZlKSBsb2coXCJURCBNQU5BR0VSOiBzdGFydGVkIHdhdmUgXCIrR2FtZVN0YXRlLldhdmVDdXIrXCIgd2l0aCBcIitFbmVteVVuaXRNYW5hZ2VyLkluc3RhbmNlLmVuZW15U2l6ZVJlbWFpbmluZytcIiBlbmVtaWVzIVwiKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGNhbGxlZCB3aGVuIGFsbCB1bml0cyBpbiBhIHdhdmUgaGF2ZSBiZWVuIGRlZmVhdGVkXHJcbiAgICAgKi9cclxuICAgIFdhdmVFbmQoKVxyXG4gICAge1xyXG4gICAgICAgIGlmKEdhbWVTdGF0ZS5kZWJ1Z2dpbmdXYXZlKSBsb2coXCJURCBNQU5BR0VSOiB3YXZlIFwiK0dhbWVTdGF0ZS5XYXZlQ3VyK1wiIGVuZGluZy4uLlwiKTtcclxuICAgICAgICAvL2NoZWNrIGlmIHRoZXJlIGFyZSB3YXZlcyByZW1haW5pbmdcclxuICAgICAgICBpZihHYW1lU3RhdGUuV2F2ZUN1ciA+PSBHYW1lU3RhdGUuV2F2ZU1heC0xKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoR2FtZVN0YXRlLmRlYnVnZ2luZ1dhdmUpIGxvZyhcIlREIE1BTkFHRVI6IGdhbWUgZW5kZWQgb24gd2F2ZSBcIitHYW1lU3RhdGUuV2F2ZUN1citcIiFcIik7XHJcbiAgICAgICAgICAgIHRoaXMuR2FtZUVuZCh0cnVlKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL3VwZGF0ZSBnYW1lc3RhdGVcclxuICAgICAgICBHYW1lU3RhdGUuc3RhdGVDdXIgPSAxO1xyXG5cclxuICAgICAgICAvL2F3YXJkIGJvdW50eSB0byBwbGF5ZXJcclxuICAgICAgICBHYW1lU3RhdGUuUGxheWVyTW9uZXkgKz0gR2FtZVN0YXRlLk1vbmV5UmV3YXJkV2F2ZTtcclxuICAgICAgICBHYW1lTWVudS5JbnN0YW5jZS51cGRhdGVNb25leUNvdW50KCk7XHJcblxyXG4gICAgICAgIC8vcHVzaCBuZXh0IHdhdmVcclxuICAgICAgICBHYW1lU3RhdGUuV2F2ZUN1cisrO1xyXG5cclxuICAgICAgICAvL2NoZWNrIHdheXBvaW50IGFjdGlvbnNcclxuICAgICAgICBXYXlwb2ludE1hbmFnZXIuSW5zdGFuY2UuUGFyc2VTcGF3bmVyQ29uZmlnKCk7XHJcblxyXG4gICAgICAgIC8vcmVkcmF3IGRpc3BsYXlcclxuICAgICAgICBHYW1lTWVudS5JbnN0YW5jZS5VcGRhdGVNYWluTWVudVN0YXRlKDEpO1xyXG5cclxuICAgICAgICAvL3BsYXkgbXVzaWM6IGxvYmJ5XHJcbiAgICAgICAgQXVkaW9NYW5hZ2VyLkluc3RhbmNlLlNldE11c2ljU3RhdGUoMSk7XHJcblxyXG4gICAgICAgIGlmKEdhbWVTdGF0ZS5kZWJ1Z2dpbmdXYXZlKSBsb2coXCJURCBNQU5BR0VSOiB3YXZlIFwiK0dhbWVTdGF0ZS5XYXZlQ3VyK1wiIGVuZGVkIVwiKTtcclxuICAgIH1cclxuXHJcbiAgICAvL2N1cnJlbnRseSBzZWxlY3RlZCB0b3dlciBmb3VuZGF0aW9uXHJcbiAgICBzZWxlY3RlZEZvdW5kYXRpb25Nb3ZlOnVuZGVmaW5lZHxUb3dlckZvdW5kYXRpb247XHJcbiAgICBwdWJsaWMgZ2V0U2VsZWN0ZWRUb3dlck1vdmUoKTp1bmRlZmluZWR8VG93ZXJGb3VuZGF0aW9uXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIEdhbWVNYW5hZ2VyLkluc3RhbmNlLnNlbGVjdGVkRm91bmRhdGlvbk1vdmU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBjYWxsZWQgd2hlbiBwbGF5ZXIgaW50ZXJhY3RzIHdpdGggYSB0b3dlciBmb3VuZGF0aW9uIG9iamVjdCB0byBtb3ZlIHRvd2VyLFxyXG4gICAgICogIGZpcnN0IHNlbGVjdGlvbiAtPiBzZXRzIGZvdW5kYXRpb24gZm9yIHN3YXBcclxuICAgICAqICBzZWNvbmQgc2VsZWN0aW9uIC0+IHN3YXAgdG93ZXJzIGJldHdlZW4gZm91bmRhdGlvbnNcclxuICAgICAqL1xyXG4gICAgcHVibGljIGNhbGxiYWNrVG93ZXJNb3ZlKGluZGV4Om51bWJlcilcclxuICAgIHtcclxuICAgICAgICBHYW1lTWFuYWdlci5JbnN0YW5jZS5Ub3dlck1vdmUoaW5kZXgpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIFRvd2VyTW92ZShpbmRleDpudW1iZXIpXHJcbiAgICB7XHJcbiAgICAgICAgaWYoR2FtZVN0YXRlLmRlYnVnZ2luZ1Rvd2VyKSBsb2coXCJURCBNQU5BR0VSOiBmb3VuZGF0aW9uIFwiK2luZGV4LnRvU3RyaW5nKCkrXCIgc2VsZWN0ZWQgZm9yIG1vdmVcIik7XHJcblxyXG4gICAgICAgIC8vaGlkZSBlZGl0IG1lbnVcclxuICAgICAgICBHYW1lTWVudS5JbnN0YW5jZS5TZXRUb3dlck1lbnVTdGF0ZShmYWxzZSk7XHJcblxyXG4gICAgICAgIC8vb25seSBhbGxvdyB0b3dlciBtb3ZlcyBiZXR3ZWVuIHdhdmVzXHJcbiAgICAgICAgaWYoR2FtZVN0YXRlLnN0YXRlQ3VyICE9IDEpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihHYW1lU3RhdGUuZGVidWdnaW5nVG93ZXIpIGxvZyhcIlREIE1BTkFHRVIgKEVSUk9SKTogdG93ZXIgbW92ZSBmYWlsZWQsIHdyb25nIGdhbWUgc3RhdGVcIik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vaWYgbm8gZm91bmRhdGlvbiBpcyBzZWxlY3RlZCBmb3Igc3dhcFxyXG4gICAgICAgIGlmKHRoaXMuc2VsZWN0ZWRGb3VuZGF0aW9uTW92ZSA9PSB1bmRlZmluZWQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihHYW1lU3RhdGUuZGVidWdnaW5nVG93ZXIpIGxvZyhcIlREIE1BTkFHRVI6IG1vdmUgZm91bmRhdGlvbiB3YXMgdW5kZWZpbmVkLCBzZXQgdG86IFwiK2luZGV4LnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAvL3NlbGVjdCBmb3VuZGF0aW9uXHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRGb3VuZGF0aW9uTW92ZSA9IFRvd2VyTWFuYWdlci5JbnN0YW5jZS5Ub3dlckZvdW5kYXRpb25EaWN0LmdldEl0ZW0oaW5kZXgudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvL3NldCB0b3dlciBtb3ZlIG1hcmtlclxyXG4gICAgICAgICAgICBpZih0aGlzLnNlbGVjdGVkRm91bmRhdGlvbk1vdmUgIT0gdW5kZWZpbmVkKSBUb3dlck1hbmFnZXIuSW5zdGFuY2UuU2V0VG93ZXJNb3ZlTWFya2VyKGluZGV4KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9pZiBmb3VuZGF0aW9uIGlzIHNlbGVjdGVkIGZvciBzd2FwXHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy9pZiB0YXJnZXRlZCBmb3VuZGF0aW9uIGlzIGRpZmZlcmVudCBmb3VuZGF0aW9uXHJcbiAgICAgICAgICAgIGlmKHRoaXMuc2VsZWN0ZWRGb3VuZGF0aW9uTW92ZS5JbmRleCAhPSBpbmRleClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoR2FtZVN0YXRlLmRlYnVnZ2luZ1Rvd2VyKSBsb2coXCJURCBNQU5BR0VSOiBtb3ZlIGZvdW5kYXRpb24gd2FzIGRlZmluZWQgYXMgXCIrdGhpcy5zZWxlY3RlZEZvdW5kYXRpb25Nb3ZlLkluZGV4LnRvU3RyaW5nKCkrXCIsIHN3YXBwaW5nIHdpdGggXCIraW5kZXgudG9TdHJpbmcoKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgVG93ZXJNYW5hZ2VyLkluc3RhbmNlLk1vdmVUb3dlck9iamVjdCh0aGlzLnNlbGVjdGVkRm91bmRhdGlvbk1vdmUuSW5kZXgsIGluZGV4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKEdhbWVTdGF0ZS5kZWJ1Z2dpbmdUb3dlcikgbG9nKFwiVEQgTUFOQUdFUjogbW92ZSBmb3VuZGF0aW9uIHdhcyBkZWZpbmVkIGFzIFwiK3RoaXMuc2VsZWN0ZWRGb3VuZGF0aW9uTW92ZS5JbmRleC50b1N0cmluZygpK1wiLCBzZWxlY3RlZCBzYW1lIGZvdW5kYXRpb24gKGNsZWFyZWQpXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIC8vcmVtb3ZlIHNlbGVjdGVkIG1vdmUgZm91bmRhdGlvblxyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkRm91bmRhdGlvbk1vdmUgPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgICAgICAvL3NldCB0b3dlciBtb3ZlIG1hcmtlclxyXG4gICAgICAgICAgICBUb3dlck1hbmFnZXIuSW5zdGFuY2UuU2V0VG93ZXJNb3ZlTWFya2VyU3RhdGUoZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvL2N1cnJlbnRseSBzZWxlY3RlZCB0b3dlciBmb3VuZGF0aW9uXHJcbiAgICBzZWxlY3RlZEZvdW5kYXRpb246dW5kZWZpbmVkfFRvd2VyRm91bmRhdGlvbjtcclxuICAgIHB1YmxpYyBnZXRTZWxlY3RlZFRvd2VyKCk6dW5kZWZpbmVkfFRvd2VyRm91bmRhdGlvblxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBHYW1lTWFuYWdlci5JbnN0YW5jZS5zZWxlY3RlZEZvdW5kYXRpb247XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGNhbGxlZCB3aGVuIHBsYXllciBpbnRlcmFjdHMgd2l0aCBhIHRvd2VyIGZvdW5kYXRpb24gb2JqZWN0IHRvIGVkaXQgdG93ZXIsIFxyXG4gICAgICogb3BlbnMgaW50ZXJhY3Rpb24gbWVudSBiYXNlZCBvbiBmb3VuZGF0aW9uJ3Mgc3RhdGU6XHJcbiAgICAgKiAgaWYgdG93ZXIgZG9lcyBub3QgZXhpc3QgLT4gdG93ZXIgY29uc3RydWN0aW9uIG1lbnVcclxuICAgICAqICBpZiB0b3dlciBleGlzdHMgLT4gdG93ZXIgZWRpdGluZyBtZW51XHJcbiAgICAgKiBAcGFyYW0gaW5kZXggdG93ZXIgdGFyZ2V0ZWQgZm9yIGludGVyYWN0aW9uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjYWxsYmFja1Rvd2VyU2VsZWN0KGluZGV4Om51bWJlcilcclxuICAgIHtcclxuICAgICAgICBHYW1lTWFuYWdlci5JbnN0YW5jZS5Ub3dlclNlbGVjdChpbmRleCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgVG93ZXJTZWxlY3QoaW5kZXg6bnVtYmVyKSBcclxuICAgIHtcclxuICAgICAgICBpZihHYW1lU3RhdGUuZGVidWdnaW5nVG93ZXIpIGxvZyhcIlREIE1BTkFHRVI6IHNlbGVjdGluZyB0b3dlciBmb3VuZGF0aW9uIFwiK2luZGV4LnRvU3RyaW5nKCkrXCIuLi5cIik7XHJcblxyXG4gICAgICAgIC8vb25seSBhbGxvdyB0b3dlciBpbnRlcmFjdGlvbnMgd2hlbiBnYW1lIGlzIHJ1bm5pbmdcclxuICAgICAgICBpZihHYW1lU3RhdGUuc3RhdGVDdXIgPT0gMClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKEdhbWVTdGF0ZS5kZWJ1Z2dpbmdUb3dlcikgbG9nKFwiVEQgTUFOQUdFUiAoRVJST1IpOiB0b3dlciBtb3ZlIGZhaWxlZCwgd3JvbmcgZ2FtZSBzdGF0ZVwiKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9oaWRlIHN3YXAgc2VsZWN0aW9uIG9iamVjdFxyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRGb3VuZGF0aW9uTW92ZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICBUb3dlck1hbmFnZXIuSW5zdGFuY2UuU2V0VG93ZXJNb3ZlTWFya2VyU3RhdGUoZmFsc2UpO1xyXG5cclxuICAgICAgICAvL2F0dGVtcHQgdG8gZ2V0IHRhcmdldGVkIGZvdW5kYXRpb25cclxuICAgICAgICB0aGlzLnNlbGVjdGVkRm91bmRhdGlvbiA9IFRvd2VyTWFuYWdlci5JbnN0YW5jZS5Ub3dlckZvdW5kYXRpb25EaWN0LmdldEl0ZW0oaW5kZXgudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgaWYodGhpcy5zZWxlY3RlZEZvdW5kYXRpb24gPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoR2FtZVN0YXRlLmRlYnVnZ2luZ1Rvd2VyKSB7IGxvZyhcIlREIE1BTkFHRVIgKEVSUk9SKTogYXR0ZW1wdGluZyB0byBzZWxlY3Qgbm9uLWV4aXN0YW50IHRvd2VyIGZvdW5kYXRpb24gKGluZGV4ID0gXCIraW5kZXgudG9TdHJpbmcoKStcIilcIik7IH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9wb3NpdGlvbiBtZW51IHRvIHNlbGVjdGVkIGZvdW5kYXRpb25cclxuICAgICAgICAvLyAgaW5pdGlhbCBwb3NpdGlvblxyXG4gICAgICAgIEdhbWVNZW51Lkluc3RhbmNlLm1lbnVHcm91cFRvd2VyLkFkanVzdE1lbnVQYXJlbnQoMCwgdGhpcy5zZWxlY3RlZEZvdW5kYXRpb24uZ2V0Q29tcG9uZW50KFRyYW5zZm9ybSkucG9zaXRpb24pO1xyXG4gICAgICAgIC8vICByb3RhdGlvblxyXG4gICAgICAgIEdhbWVNZW51Lkluc3RhbmNlLm1lbnVHcm91cFRvd2VyLmdyb3VwUGFyZW50LmdldENvbXBvbmVudChUcmFuc2Zvcm0pLmxvb2tBdChDYW1lcmEuaW5zdGFuY2UucG9zaXRpb24pO1xyXG4gICAgICAgIEdhbWVNZW51Lkluc3RhbmNlLm1lbnVHcm91cFRvd2VyLmdyb3VwUGFyZW50LmdldENvbXBvbmVudChUcmFuc2Zvcm0pLnJvdGF0aW9uID0gUXVhdGVybmlvbi5FdWxlclxyXG4gICAgICAgIChcclxuICAgICAgICAgICAgMCxcclxuICAgICAgICAgICAgR2FtZU1lbnUuSW5zdGFuY2UubWVudUdyb3VwVG93ZXIuZ3JvdXBQYXJlbnQuZ2V0Q29tcG9uZW50KFRyYW5zZm9ybSkuZXVsZXJBbmdsZXMueSArIDE4MCxcclxuICAgICAgICAgICAgMFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vdXBkYXRlIG1lbnUgZGlzcGxheSBmb3IgdG93ZXIgZm91bmRhdGlvblxyXG4gICAgICAgIEdhbWVNZW51Lkluc3RhbmNlLkRpc3BsYXlUb3dlckZvdW5kYXRpb24odGhpcy5zZWxlY3RlZEZvdW5kYXRpb24pO1xyXG5cclxuICAgICAgICBpZihHYW1lU3RhdGUuZGVidWdnaW5nVG93ZXIpIGxvZyhcIlREIE1BTkFHRVI6IHNlbGVjdGVkIHRvd2VyIGZvdW5kYXRpb24gXCIraW5kZXgudG9TdHJpbmcoKStcIiFcIik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBidWlsZHMgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCB0b3dlciBkZWYgb24gdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBmb3VuZGF0aW9uLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY2FsbGJhY2tUb3dlckJ1aWxkKClcclxuICAgIHtcclxuICAgICAgICBHYW1lTWFuYWdlci5JbnN0YW5jZS5Ub3dlckJ1aWxkKCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgVG93ZXJCdWlsZCgpXHJcbiAgICB7XHJcbiAgICAgICAgLy9vbmx5IGFsbG93IHRvd2VyIGludGVyYWN0aW9ucyB3aGVuIGdhbWUgaXMgcnVubmluZ1xyXG4gICAgICAgIGlmKEdhbWVTdGF0ZS5zdGF0ZUN1ciA9PSAwIHx8IEdhbWVTdGF0ZS5zdGF0ZUN1ciA9PSAzKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoR2FtZVN0YXRlLmRlYnVnZ2luZ1Rvd2VyKSBsb2coXCJURCBNQU5BR0VSIChFUlJPUik6IHRvd2VyIGJ1aWxkIGZhaWxlZCwgd3JvbmcgZ2FtZSBzdGF0ZVwiKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL2Vuc3VyZSBmb3VuZGF0aW9uIGlzIHNlbGVjdGVkXHJcbiAgICAgICAgaWYodGhpcy5zZWxlY3RlZEZvdW5kYXRpb24gPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoR2FtZVN0YXRlLmRlYnVnZ2luZ1Rvd2VyKSB7IGxvZyhcIlREIE1BTkFHRVIgKEVSUk9SKTogdG93ZXIgYnVpbGQgZmFpbGVkLCBubyB0b3dlciBmb3VuZGF0aW9uIHNlbGVjdGVkXCIpOyB9XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9jaGVjayBwbGF5ZXIncyBtb25leSBiYWxhbmNlXHJcbiAgICAgICAgaWYoR2FtZVN0YXRlLlBsYXllck1vbmV5IDwgZGF0YVRvd2Vyc1tHYW1lTWVudS5JbnN0YW5jZS50b3dlckRlZmluaXRpb25JbmRleF0uVmFsdWVDb3N0ICYmICFHYW1lU3RhdGUuZGVidWdnaW5nVG93ZXIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihHYW1lU3RhdGUuZGVidWdnaW5nVG93ZXIpIHsgbG9nKFwiVEQgTUFOQUdFUiAoRVJST1IpOiB0b3dlciBidWlsZCBmYWlsZWQsIG5vdCBlbm91Z2ggcGxheWVyIGZ1bmRpbmdcIik7IH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBpZihHYW1lU3RhdGUuZGVidWdnaW5nVG93ZXIpIHsgbG9nKFwiVEQgTUFOQUdFUjogY29uc3RydWN0aW5nIHRvd2VyICh0eXBlPVwiK0dhbWVNZW51Lkluc3RhbmNlLnRvd2VyRGVmaW5pdGlvbkluZGV4LnRvU3RyaW5nKCkrXCIpIG9uIGZvdW5kYXRpb24gKGluZGV4PVwiXHJcbiAgICAgICAgICAgICt0aGlzLnNlbGVjdGVkRm91bmRhdGlvbi5JbmRleC50b1N0cmluZygpK1wiKS4uLlwiKTsgfVxyXG5cclxuICAgICAgICAvL3JlbW92ZSBmdW5kaW5nXHJcbiAgICAgICAgR2FtZVN0YXRlLlBsYXllck1vbmV5IC09IGRhdGFUb3dlcnNbR2FtZU1lbnUuSW5zdGFuY2UudG93ZXJEZWZpbml0aW9uSW5kZXhdLlZhbHVlQ29zdDtcclxuICAgICAgICBHYW1lTWVudS5JbnN0YW5jZS51cGRhdGVNb25leUNvdW50KCk7XHJcblxyXG4gICAgICAgIC8vY29uc3RydWN0IHRvd2VyXHJcbiAgICAgICAgVG93ZXJNYW5hZ2VyLkluc3RhbmNlLkJ1aWxkVG93ZXIodGhpcy5zZWxlY3RlZEZvdW5kYXRpb24uSW5kZXgsIEdhbWVNZW51Lkluc3RhbmNlLnRvd2VyRGVmaW5pdGlvbkluZGV4KTtcclxuXHJcbiAgICAgICAgLy91cGRhdGUgbWVudSBkaXNwbGF5IGZvciB0b3dlciBmb3VuZGF0aW9uXHJcbiAgICAgICAgR2FtZU1lbnUuSW5zdGFuY2UuRGlzcGxheVRvd2VyRm91bmRhdGlvbih0aGlzLnNlbGVjdGVkRm91bmRhdGlvbik7XHJcblxyXG4gICAgICAgIGlmKEdhbWVTdGF0ZS5kZWJ1Z2dpbmdUb3dlcikgeyBsb2coXCJURCBNQU5BR0VSOiBjb25zdHJ1Y3RlZCB0b3dlciBmcmFtZSAodHlwZT1cIit0aGlzLnNlbGVjdGVkRm91bmRhdGlvbi5Ub3dlckZyYW1lLlRvd2VyRGVmLnRvU3RyaW5nKClcclxuICAgICAgICAgICAgK1wiKSBmb3VuZGF0aW9uIChpbmRleD1cIit0aGlzLnNlbGVjdGVkRm91bmRhdGlvbi5JbmRleC50b1N0cmluZygpK1wiKSFcIik7IH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHJlbW92ZXMgdGhlIHRvd2VyIGZyb20gdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBmb3VuZGF0aW9uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjYWxsYmFja1Rvd2VyRGVjb25zdHJ1Y3QoKVxyXG4gICAge1xyXG4gICAgICAgIEdhbWVNYW5hZ2VyLkluc3RhbmNlLlRvd2VyRGVjb25zdHJ1Y3QoKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBUb3dlckRlY29uc3RydWN0KClcclxuICAgIHtcclxuICAgICAgICAvL29ubHkgYWxsb3cgdG93ZXIgaW50ZXJhY3Rpb25zIHdoZW4gZ2FtZSBpcyBydW5uaW5nXHJcbiAgICAgICAgaWYoR2FtZVN0YXRlLnN0YXRlQ3VyID09IDAgfHwgR2FtZVN0YXRlLnN0YXRlQ3VyID09IDMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihHYW1lU3RhdGUuZGVidWdnaW5nVG93ZXIpIGxvZyhcIlREIE1BTkFHRVIgKEVSUk9SKTogdG93ZXIgZGVjb25zdHJ1Y3QgZmFpbGVkLCB3cm9uZyBnYW1lIHN0YXRlXCIpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vZW5zdXJlIGZvdW5kYXRpb24gaXMgc2VsZWN0ZWRcclxuICAgICAgICBpZih0aGlzLnNlbGVjdGVkRm91bmRhdGlvbiA9PSB1bmRlZmluZWQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihHYW1lU3RhdGUuZGVidWdnaW5nVG93ZXIpIHsgbG9nKFwiVEQgTUFOQUdFUiAoRVJST1IpOiB0b3dlciBkZWNvbnN0cnVjdCBmYWlsZWQsIG5vIHRvd2VyIGZvdW5kYXRpb24gc2VsZWN0ZWRcIik7IH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL2Vuc3VyZSBmcmFtZSBpcyBzZWxlY3RlZFxyXG4gICAgICAgIGlmKHRoaXMuc2VsZWN0ZWRGb3VuZGF0aW9uLlRvd2VyRnJhbWUuVG93ZXJEZWYgPT0gLTEpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihHYW1lU3RhdGUuZGVidWdnaW5nVG93ZXIpIHsgbG9nKFwiVEQgTUFOQUdFUiAoRVJST1IpOiB0b3dlciBkZWNvbnN0cnVjdCBmYWlsZWQsIG5vIHRvd2VyIGZyYW1lIHNlbGVjdGVkXCIpOyB9XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoR2FtZVN0YXRlLmRlYnVnZ2luZ1Rvd2VyKSB7IGxvZyhcIlREIE1BTkFHRVI6IGRlY29uc3RydWN0aW5nIHRvd2VyIG9uIGZvdW5kYXRpb24gKGluZGV4PVwiICt0aGlzLnNlbGVjdGVkRm91bmRhdGlvbi5JbmRleC50b1N0cmluZygpK1wiKS4uLlwiKTsgfVxyXG5cclxuICAgICAgICAvL3JlZnVuZCB0b3dlclxyXG4gICAgICAgIFRvd2VyTWFuYWdlci5JbnN0YW5jZS5DbGVhclRvd2VyKHRoaXMuc2VsZWN0ZWRGb3VuZGF0aW9uLkluZGV4LCB0cnVlKTsgXHJcbiAgICAgICAgXHJcbiAgICAgICAgLy9yZWRyYXcgZGlzcGxheVxyXG4gICAgICAgIEdhbWVNZW51Lkluc3RhbmNlLkRpc3BsYXlUb3dlckZvdW5kYXRpb24odGhpcy5zZWxlY3RlZEZvdW5kYXRpb24pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKEdhbWVTdGF0ZS5kZWJ1Z2dpbmdUb3dlcikgeyBsb2coXCJURCBNQU5BR0VSOiBkZWNvbnN0cnVjdGVkIHRvd2VyIG9uIGZvdW5kYXRpb24gKGluZGV4PVwiICt0aGlzLnNlbGVjdGVkRm91bmRhdGlvbi5JbmRleC50b1N0cmluZygpK1wiKSFcIik7IH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGNyZWF0ZXMgYW4gZW5lbXkgdW5pdCBiYXNlZCBvbiB0aGUgY3VycmVudCB3YXZlLCBwdWxsaW5nIGZyb20gYW55IHRpZWQgXHJcbiAgICAgKiBlbmVteSBkZWZpbml0aW9uc1xyXG4gICAgICovXHJcbiAgICB1bml0TGVuZ3RoOm51bWJlciA9IDA7XHJcbiAgICB1bml0SW5kZXg6bnVtYmVyID0gMDtcclxuICAgIHVuaXRJbmRleFRlc3Q6bnVtYmVyID0gMDtcclxuICAgIHB1YmxpYyBjYWxsYmFja0VuZW15VW5pdFNwYXduKCkgXHJcbiAgICB7IFxyXG4gICAgICAgIEdhbWVNYW5hZ2VyLkluc3RhbmNlLkVuZW15VW5pdFNwYXduKCk7IFxyXG4gICAgfVxyXG4gICAgcHVibGljIEVuZW15VW5pdFNwYXduKClcclxuICAgIHtcclxuICAgICAgICBpZihHYW1lU3RhdGUuZGVidWdnaW5nRW5lbXkpIGxvZyhcIlREIE1BTkFHRVI6IHNwYXduaW5nIGVuZW15IHVuaXQuLi5cIik7XHJcblxyXG4gICAgICAgIC8vYXR0ZW1wdCB0byBzcGF3biBhbiBlbmVteSBmb3IgZWFjaCBzcGF3biBwb2ludFxyXG4gICAgICAgIGZvcih2YXIgazpudW1iZXIgPSAwOyBrPFdheXBvaW50TWFuYWdlci5JbnN0YW5jZS5TcGF3blBvaW50cy5zaXplKCk7IGsrKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vY2hlY2sgd2F5cG9pbnRcclxuICAgICAgICAgICAgaWYoV2F5cG9pbnRNYW5hZ2VyLkluc3RhbmNlLlNwYXduUG9pbnRzLmdldEl0ZW0oaykuU3RhdGUgIT0gMSkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICAvL2dldCB0eXBlIG9mIG5leHQgdW5pdCwgZW5zdXJpbmcgcmFuZG9tbHkgc2VsZWN0ZWQgdW5pdCBoYXMgYSBjb3VudCBhdmFpbGFibGVcclxuICAgICAgICAgICAgdGhpcy51bml0TGVuZ3RoID0gRW5lbXlXYXZlTWFuYWdlci5JbnN0YW5jZS5HZXRFbmVteVdhdmVDdXJyZW50KCkuZW5lbXlVbml0cy5sZW5ndGg7XHJcbiAgICAgICAgICAgIHRoaXMudW5pdEluZGV4VGVzdCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSp0aGlzLnVuaXRMZW5ndGgpO1xyXG4gICAgICAgICAgICBmb3IodmFyIGk6bnVtYmVyPTA7IGk8dGhpcy51bml0TGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vY2hlY2sgdW5pdFxyXG4gICAgICAgICAgICAgICAgaWYoRW5lbXlXYXZlTWFuYWdlci5JbnN0YW5jZS5HZXRFbmVteVdhdmVDdXJyZW50KCkuZW5lbXlVbml0c1t0aGlzLnVuaXRJbmRleFRlc3RdLmVuZW15Q291bnQgIT0gMClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuaXRJbmRleCA9IHRoaXMudW5pdEluZGV4VGVzdDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vcHVzaCBuZXh0IGNoZWNrXHJcbiAgICAgICAgICAgICAgICB0aGlzLnVuaXRJbmRleFRlc3QrKztcclxuICAgICAgICAgICAgICAgIGlmKHRoaXMudW5pdEluZGV4VGVzdD49dGhpcy51bml0TGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5pdEluZGV4VGVzdCA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vZXJyb3IgY2hlY2sgZm9yIDAgdW5pdCBjb3VudFxyXG4gICAgICAgICAgICBpZihFbmVteVdhdmVNYW5hZ2VyLkluc3RhbmNlLkdldEVuZW15V2F2ZUN1cnJlbnQoKS5lbmVteVVuaXRzW3RoaXMudW5pdEluZGV4XS5lbmVteUNvdW50ID09IDApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vaGFsdCBzcGF3bmluZ1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lVGltZXJTeXN0ZW0uc3Bhd25pbmdGaW5pc2hlZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9jaGVjayBmb3IgYnJlYWsgcGVyaW9kIChwbGF5ZXIgZ2V0cyAxIHN0YWxsIGV2ZXJ5IGJvc3Mgd2F2ZSlcclxuICAgICAgICAgICAgICAgIGlmKGkgIT0gMSAmJiAoKGkrMSklRW5lbXlXYXZlTWFuYWdlci5JbnN0YW5jZS5ib3NzSW50ZXJ2YWwpID09IDApIFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZVRpbWVyU3lzdGVtLmhhbHRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvL2JlZ2luIGNvdW50aW5nIGRvd24gdG8gbmV4dCB3YXZlXHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lVGltZXJTeXN0ZW0ud2F2ZVdhaXRpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGxvZyhcIlREIE1BTkFHRVIgKEVSUk9SKTogYXR0ZW1wdGVkIHRvIGNyZWF0ZSBlbmVteSB1bml0IGZvciBhbiBlbXB0eSB3YXZlXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9IFxyXG5cclxuICAgICAgICAgICAgLy9hdHRlbXB0IHRvIGFzc2lnbiB1bml0XHJcbiAgICAgICAgICAgIHZhciB1bml0T2JqID0gRW5lbXlVbml0TWFuYWdlci5JbnN0YW5jZS5Bc3NpZ25FbmVteVVuaXQoRW5lbXlXYXZlTWFuYWdlci5JbnN0YW5jZS5HZXRFbmVteVdhdmVDdXJyZW50KCkuZW5lbXlVbml0c1t0aGlzLnVuaXRJbmRleF0uZW5lbXlJbmRleCwgayk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvL2NoZWNrIGlmIHVuaXQgd2FzIGF2YWlsYWJsZSBmb3IgYXNzaWdubWVudFxyXG4gICAgICAgICAgICBpZih1bml0T2JqICE9IHVuZGVmaW5lZClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy9yZW1vdmUgdW5pdCBmcm9tIHdhdmVcclxuICAgICAgICAgICAgICAgIEVuZW15V2F2ZU1hbmFnZXIuSW5zdGFuY2UuR2V0RW5lbXlXYXZlQ3VycmVudCgpLmVuZW15VW5pdHNbdGhpcy51bml0SW5kZXhdLmVuZW15Q291bnQtLTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy9jaGVjayBpZiBhbGwgdW5pdHMgaGF2ZSBiZWVuIHNwYXduZWRcclxuICAgICAgICAgICAgICAgIHZhciBzcGF3bkNoZWNrOmJvb2xlYW4gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgZm9yKHZhciBpOm51bWJlcj0wOyBpPEVuZW15V2F2ZU1hbmFnZXIuSW5zdGFuY2UuR2V0RW5lbXlXYXZlQ3VycmVudCgpLmVuZW15VW5pdHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoRW5lbXlXYXZlTWFuYWdlci5JbnN0YW5jZS5HZXRFbmVteVdhdmVDdXJyZW50KCkuZW5lbXlVbml0c1tpXS5lbmVteUNvdW50ID4gMClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwYXduQ2hlY2sgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvL2lmIGFsbCB1bml0cyBoYXZlIGJlZW4gZXhwZW5kZWQsIGhhbHQgc3Bhd25pbmdcclxuICAgICAgICAgICAgICAgIGlmKHNwYXduQ2hlY2spXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lVGltZXJTeXN0ZW0uc3Bhd25pbmdGaW5pc2hlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vdXBkYXRlIGh1ZFxyXG4gICAgICAgICAgICAgICAgR2FtZU1lbnUuSW5zdGFuY2UuVXBkYXRlRW5lbXlDb3VudCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKEdhbWVTdGF0ZS5kZWJ1Z2dpbmdFbmVteSkgbG9nKFwiVEQgTUFOQUdFUjogc3Bhd25lZCBlbmVteSB1bml0LCBJRDpcIit1bml0T2JqLkluZGV4LnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKEdhbWVTdGF0ZS5kZWJ1Z2dpbmdFbmVteSkgbG9nKFwiVEQgTUFOQUdFUjogZmFpbGVkIHRvIHNwYXduIGVuZW15IHVuaXQsIGFsbCB1bml0cyBhcmUgcmVzZXJ2ZWRcIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBjYWxsZWQgd2hlbiBhbiBlbmVteSB1bml0IGhhcyBiZWVuIGRhbWFnZWQgYnkgYSB0b3dlclxyXG4gICAgICogQHBhcmFtIGVuZW15SW5kZXggaW5kZXggb2YgZW5lbXkgZGVmIHRvIGJlIHVzZWQgXHJcbiAgICAgKiBAcGFyYW0gZGFtIGFtb3VudCBvZiBkYW1hZ2UgZW5lbXkgd2lsbCB0YWtlXHJcbiAgICAgKiBAcGFyYW0gcGVuIGFtb3VudCBvZiBhcm1vdXIgcGVuZXRyYXRlZFxyXG4gICAgICogQHBhcmFtIHJlbmQgYW1vdW50IG9mIGFybW91ciB0byByZW5kIGZyb20gZW5lbXlcclxuICAgICAqL1xyXG4gICAgcHVibGljIGNhbGxiYWNrRW5lbXlVbml0RGFtYWdlKGVuZW15SW5kZXg6bnVtYmVyLCBkYW06bnVtYmVyLCBwZW46bnVtYmVyLCByZW5kOm51bWJlcilcclxuICAgIHtcclxuICAgICAgICBHYW1lTWFuYWdlci5JbnN0YW5jZS5FbmVteVVuaXREYW1hZ2UoZW5lbXlJbmRleCwgZGFtLCBwZW4sIHJlbmQpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIEVuZW15VW5pdERhbWFnZShlbmVteUluZGV4Om51bWJlciwgZGFtOm51bWJlciwgcGVuOm51bWJlciwgcmVuZDpudW1iZXIpXHJcbiAgICB7XHJcbiAgICAgICAgLy9yZW1vdmUgdW5pdCBvYmplY3RcclxuICAgICAgICBFbmVteVVuaXRNYW5hZ2VyLkluc3RhbmNlLkRhbWFnZVVuaXQoZW5lbXlJbmRleCwgZGFtLCBwZW4sIHJlbmQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogY2FsbGVkIHdoZW4gYW4gZW5lbXkgdW5pdCBoYXMgYmVlbiBraWxsZWQsIHVuaXQgaXMgYXV0b21hdGljYWxseVxyXG4gICAgICogY2xlYW5lZCB1cCBpbiBlbmVteSBlbnRpdHkgY2xhc3MgYmVmb3JlIHRoaXMgaXMgY2FsbGVkLlxyXG4gICAgICogQHBhcmFtIGluZGV4IGluZGV4IG9mIGVuZW15IHVuaXQgb2JqZWN0IHRoYXQgd2FzIGtpbGxlZFxyXG4gICAgICogQHBhcmFtIHJld2FyZGVkIGlmIHRydWUgcmV3YXJkcyB3aWxsIGJlIHByb3ZpZGVkIGZvciB0aGUgdW5pdCdzIGRlYXRoXHJcbiAgICAgKi9cclxuICAgIGVuZW15VW5pdDp1bmRlZmluZWR8RW5lbXlVbml0T2JqZWN0O1xyXG4gICAgcHVibGljIGNhbGxiYWNrRW5lbXlVbml0RGVhdGgoaW5kZXg6bnVtYmVyLCByZXdhcmRlZDpib29sZWFuKVxyXG4gICAge1xyXG4gICAgICAgIEdhbWVNYW5hZ2VyLkluc3RhbmNlLkVuZW15VW5pdERlYXRoKGluZGV4LCByZXdhcmRlZCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgRW5lbXlVbml0RGVhdGgoaW5kZXg6bnVtYmVyLCByZXdhcmRlZDpib29sZWFuKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuZW5lbXlVbml0ID0gRW5lbXlVbml0TWFuYWdlci5JbnN0YW5jZS5HZXRFbmVteVVuaXRCeUluZGV4KGluZGV4KTtcclxuICAgICAgICAvL2Vuc3VyZSB1bml0IGV4aXN0c1xyXG4gICAgICAgIGlmKHRoaXMuZW5lbXlVbml0ID09IHVuZGVmaW5lZClcclxuICAgICAgICB7IFxyXG4gICAgICAgICAgICBsb2coXCJURCBNQU5BR0VSIChFUlJPUik6IGF0dGVtcHRpbmcgdG8ga2lsbCBub25leGlzdGFudCBlbmVteT1cIitpbmRleC50b1N0cmluZygpKTsgXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9lbnN1cmUgdW5pdCBpcyBhbGl2ZVxyXG4gICAgICAgIGlmKCF0aGlzLmVuZW15VW5pdC5Jc0FsaXZlKVxyXG4gICAgICAgIHsgXHJcbiAgICAgICAgICAgIGxvZyhcIlREIE1BTkFHRVIgKEVSUk9SKTogYXR0ZW1wdGluZyB0byBraWxsIGRlYWQgZW5lbXk9XCIraW5kZXgudG9TdHJpbmcoKSk7IFxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKEdhbWVTdGF0ZS5kZWJ1Z2dpbmdFbmVteSkgbG9nKFwiVEQgTUFOQUdFUjogZW5lbXkgdW5pdCBcIitpbmRleC50b1N0cmluZygpK1wiIGhhcyBiZWVuIGtpbGxlZCwgcHJvY2Vzc2luZyBFbmVteVVuaXREZWF0aFwiKTsgXHJcblxyXG4gICAgICAgIGlmKHJld2FyZGVkKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy9hd2FyZCBib3VudHkgdG8gcGxheWVyXHJcbiAgICAgICAgICAgIEdhbWVTdGF0ZS5QbGF5ZXJNb25leSArPSBFbmVteURhdGFbdGhpcy5lbmVteVVuaXQuVHlwZV0uVmFsdWVSZXdhcmRzO1xyXG4gICAgICAgICAgICBHYW1lTWVudS5JbnN0YW5jZS51cGRhdGVNb25leUNvdW50KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL3NlbmQgZGVhdGggdXBkYXRlIHRvIGFsbCB0b3dlcnNcclxuICAgICAgICBUb3dlck1hbmFnZXIuSW5zdGFuY2UuVGFyZ2V0RGVhdGhDaGVjayhpbmRleCk7XHJcblxyXG4gICAgICAgIC8vdXBkYXRlIG51bWJlciBvZiBlbmVtaWVzXHJcbiAgICAgICAgRW5lbXlVbml0TWFuYWdlci5JbnN0YW5jZS5lbmVteVNpemVDdXItLTtcclxuICAgICAgICBFbmVteVVuaXRNYW5hZ2VyLkluc3RhbmNlLmVuZW15U2l6ZVJlbWFpbmluZy0tO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vdXBkYXRlIGh1ZFxyXG4gICAgICAgIEdhbWVNZW51Lkluc3RhbmNlLlVwZGF0ZUVuZW15Q291bnQoKTtcclxuXHJcbiAgICAgICAgLy9jaGVjayBmb3Igd2F2ZSBlbmRcclxuICAgICAgICBpZihFbmVteVVuaXRNYW5hZ2VyLkluc3RhbmNlLmVuZW15U2l6ZVJlbWFpbmluZyA8PSAwKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5XYXZlRW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogY2FsbGVkIHdoZW4gdGhlIHBsYXllcidzIGJhc2UgdGFrZXMgZGFtYWdlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjYWxsYmFja1BsYXllckJhc2VEYW1hZ2UodmFsdWU6bnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIEdhbWVNYW5hZ2VyLkluc3RhbmNlLlBsYXllckJhc2VEYW1hZ2UodmFsdWUpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIFBsYXllckJhc2VEYW1hZ2UodmFsdWU6bnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIGlmKEdhbWVTdGF0ZS5kZWJ1Z2dpbmdNYW5hZ2VyKSBsb2coXCJURCBNQU5BR0VSOiBwbGF5ZXIgYmFzZSBkZWFsdCBcIit2YWx1ZS50b1N0cmluZygpK1wiIGRhbWFnZVwiKTtcclxuXHJcbiAgICAgICAgLy9kZWFsIGRhbWFnZVxyXG4gICAgICAgIEdhbWVTdGF0ZS5QbGF5ZXJIZWFsdGggLT0gdmFsdWU7XHJcblxyXG4gICAgICAgIC8vY2hlY2sgaWYgcGxheWVyJ3MgYmFzZSBpcyBkZXN0cm95ZWRcclxuICAgICAgICBpZihHYW1lU3RhdGUuUGxheWVySGVhbHRoIDw9IDApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihHYW1lU3RhdGUuZGVidWdnaW5nTWFuYWdlcikgbG9nKFwiVEQgTUFOQUdFUjogcGxheWVyIGJhc2UgaGFzIGJlZW4gZGVzdHJveWVkLCBlbmRpbmcgZ2FtZS4uLlwiKTtcclxuICAgICAgICAgICAgdGhpcy5HYW1lRW5kKGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgR2FtZU1lbnUuSW5zdGFuY2UudXBkYXRlTGlmZUNvdW50KCk7XHJcbiAgICB9XHJcbn1cclxuLy9nYW1lIHRpbWVycyB1c2VkIGZvciBkZWxheWluZyB3YXZlcyBhbmQgc3Bhd25zXHJcbmNsYXNzIEdhbWVUaW1lclN5c3RlbSBpbXBsZW1lbnRzIElTeXN0ZW1cclxue1xyXG4gICAgLy9pZiB0cnVlIGF1dG9tYXRpY2FsbHkgYmVnaW5zIHRoZSBuZXh0IHdhdmUgYWZ0ZXIgY291bnRkb3duXHJcbiAgICBhdXRvU3RhcnQ6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgLy9pZiB0cnVlLCB3YWl0cyBmb3IgcGxheWVyIGludGVyYWN0aW9uIGJlZm9yZSBzdGFydGluZyBhIHdhdmVcclxuICAgIC8vICBldmVyeSAxMCB3YXZlcyB0aGUgcGxheWVyIGlzIHByb3ZpZGVkIHdpdGggb25lIG9mIHRoZXNlIHBlcmlvZHMgdG8gYnVpbGQgdXBcclxuICAgIGhhbHRlZDpib29sZWFuO1xyXG4gICAgLy90aW1pbmcgZm9yIHVuaXQgd2F2ZXNcclxuICAgIHdhdmVXYWl0aW5nOmJvb2xlYW47XHJcbiAgICAvLyAgdGltZSBkZWxheSBiZXR3ZWVuIHdhdmVzXHJcbiAgICBkZWxheVdhdmVMZW5ndGg6bnVtYmVyO1xyXG4gICAgZGVsYXlXYXZlVGltZVN0YW1wOm51bWJlcjtcclxuICAgIC8vdGltaW5nIGZvciB1bml0IHNwYXduc1xyXG4gICAgc3Bhd25pbmdGaW5pc2hlZDpib29sZWFuO1xyXG4gICAgLy8gIHRpbWUgZGVsYXkgYmV0d2VlbiBzcGF3bnNcclxuICAgIGRlbGF5U3Bhd25MZW5ndGg6bnVtYmVyO1xyXG4gICAgZGVsYXlTcGF3blRpbWVTdGFtcDpudW1iZXI7XHJcblxyXG4gICAgcHVibGljIFN0YXJ0V2F2ZTooKSA9PiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBzdGFydFdhdmUoKSB7IGxvZyhcInRpbWVyIHN5c3RlbSBjYWxsYmFjayBub3Qgc2V0IC0gc3RhcnQgd2F2ZVwiKTsgfVxyXG4gICAgcHVibGljIFNwYXduRW5lbXk6KCkgPT4gdm9pZDtcclxuICAgIHByaXZhdGUgc3Bhd25FbmVteSgpIHsgbG9nKFwidGltZXIgc3lzdGVtIGNhbGxiYWNrIG5vdCBzZXQgLSBzcGF3biBlbmVteVwiKTsgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogY29uc3RydWN0b3JcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoKVxyXG4gICAge1xyXG4gICAgICAgIC8vcGF1c2VkXHJcbiAgICAgICAgdGhpcy5oYWx0ZWQgPSB0cnVlO1xyXG4gICAgICAgIC8vd2F2ZSB0aW1pbmdcclxuICAgICAgICB0aGlzLndhdmVXYWl0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5kZWxheVdhdmVMZW5ndGggPSAyMDtcclxuICAgICAgICB0aGlzLmRlbGF5V2F2ZVRpbWVTdGFtcCA9IDA7XHJcbiAgICAgICAgLy9zcGF3biB0aW1pbmdcclxuICAgICAgICB0aGlzLnNwYXduaW5nRmluaXNoZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmRlbGF5U3Bhd25MZW5ndGggPSAxLjI1O1xyXG4gICAgICAgIHRoaXMuZGVsYXlTcGF3blRpbWVTdGFtcCA9IDA7XHJcblxyXG4gICAgICAgIC8vZGVsZWdhdGlvbiBkZWZhdWx0c1xyXG4gICAgICAgIHRoaXMuU3RhcnRXYXZlID0gdGhpcy5zdGFydFdhdmU7XHJcbiAgICAgICAgdGhpcy5TcGF3bkVuZW15ID0gdGhpcy5zcGF3bkVuZW15O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogc2V0cyBnYW1lIHNlc3Npb24gdGltZXJzIHRvIGRlZmF1bHQgc3RhdGUgY2FsbGVkIGF0IHRoZSBzdGFydCBvZiBldmVyeSB3YXZlXHJcbiAgICAgKi9cclxuICAgIEluaXRpYWxpemUoKVxyXG4gICAge1xyXG4gICAgICAgIC8vd2F2ZSB0aW1pbmdcclxuICAgICAgICB0aGlzLndhdmVXYWl0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5kZWxheVdhdmVUaW1lU3RhbXAgPSAwO1xyXG4gICAgICAgIC8vc3Bhd24gdGltaW5nXHJcbiAgICAgICAgdGhpcy5zcGF3bmluZ0ZpbmlzaGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5kZWxheVNwYXduVGltZVN0YW1wID0gMDtcclxuXHJcbiAgICAgICAgLy9hY3RpdmF0ZSB0aW1lIHByb2Nlc3NpbmdcclxuICAgICAgICB0aGlzLmhhbHRlZCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBwcm9jZXNzaW5nIG92ZXIgdGltZVxyXG4gICAgICogQHBhcmFtIGR0IGRlbHRhIHRpbWUgXHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZShkdDogbnVtYmVyKSBcclxuICAgIHtcclxuICAgICAgICAvL2lmIHRpbWUgaXMgc3RpbGwgYmVpbmcgcHJvY2Vzc2VkXHJcbiAgICAgICAgaWYoIXRoaXMuaGFsdGVkKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy9pZiBzdGlsbCBzcGF3bmluZyBlbmVtaWVzXHJcbiAgICAgICAgICAgIGlmKCF0aGlzLnNwYXduaW5nRmluaXNoZWQpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vaW5jcmVtZW50IHRpbWVyXHJcbiAgICAgICAgICAgICAgICB0aGlzLmRlbGF5U3Bhd25UaW1lU3RhbXAgLT0gZHQ7XHJcbiAgICAgICAgICAgICAgICAvL2NoZWNrIHNwYXduIHRpbWVyXHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLmRlbGF5U3Bhd25UaW1lU3RhbXAgPD0gMClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2F0dGVtcHQgdG8gc3Bhd24gZW5lbXlcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLlNwYXduRW5lbXkoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9yZXNldCB0aW1lclxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGVsYXlTcGF3blRpbWVTdGFtcCA9IHRoaXMuZGVsYXlTcGF3bkxlbmd0aDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvL2lmIHdhdmUgaXMgd2FpdGluZyB0byBzdGFydFxyXG4gICAgICAgICAgICBpZih0aGlzLndhdmVXYWl0aW5nICYmIHRoaXMuYXV0b1N0YXJ0KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAvL2NoZWNrIHdhdmUgdGltZXJcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVsYXlXYXZlVGltZVN0YW1wIC09IGR0O1xyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5kZWxheVdhdmVUaW1lU3RhbXAgPD0gMClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAvL3Jlc2V0IHRpbWVyXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWxheVdhdmVUaW1lU3RhbXAgPSB0aGlzLmRlbGF5V2F2ZUxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAvL3N0YXJ0IG5leHQgd2F2ZVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuU3RhcnRXYXZlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCIvKiAgICBEQ0wgVE9XRVIgREVGRU5DRSBDUkVBVElPTiBLSVRcbiAgICB0aGlzIGlzIGFuIGV4YW1wbGUgb2Ygc2V0dGluZyB1cCB0aGUgY3JlYXRpb24ga2l0IGZvciB1c2UuXG4gICAgaWYgeW91IGFyZSB1c2luZyBhIGN1c3RvbSBlbnZpcm9ubWVudCB5b3Ugd2lsbCBhbHNvIG5lZWQgdG9cbiAgICBjcmVhdGUgYSBub2RlIHBhdGggYW5kIHRvd2VyIGZvdW5kYXRpb25zIChmb3VuZCB3aXRoaW4gdGQtY29yZS9zZXR0aW5ncykuXG5cbiAgICBUaGlzIG1vZHVsZSBsZWFucyBoZWF2aWx5IGludG8gc2luZ2xldG9uIGRlc2lnbi4gVW5saWtlIHByZXZpb3VzIG1vZHVsZXMsXG4gICAgb25seSBhIHNpbmdsZSBpbnN0YW5jZSBvZiBtb3N0IG1hbmFnZXJzIGNhbiBleGlzdCBhdCBhIHRpbWUuIFRoaXMgbWVhbnMgdGhlcmVcbiAgICB3aWxsIG9ubHkgZXZlciBiZSBhIHNpbmdsZSBlbnZpcm9ubWVudCBwb3NzaWJsZSBwZXIgcGFyY2VsLCB3aGljaCBzaG91bGQgYmVcbiAgICBmaW5lLlxuKi9cblxuaW1wb3J0IHsgR2FtZU1hbmFnZXIgfSBmcm9tIFwiLi90ZC1jb3JlL2dhbWUtbWFuYWdlclwiO1xuXG4vL3ByZXBhcmUgdG93ZXIgZGVmZW5jZSBnYW1lIG1hbmFnZXJcbkdhbWVNYW5hZ2VyLkluc3RhbmNlLkdhbWVSZXNldCgpO1xuXG4vL3ByZXBhcmUgZ2FtZSBlbnZpcm9ubWVudFxuLy8gIGZyYW1pbmdcbmNvbnN0IGVudmlyb246RW50aXR5ID0gbmV3IEVudGl0eSgpO1xuZW52aXJvbi5hZGRDb21wb25lbnQobmV3IEdMVEZTaGFwZShcIm1vZGVscy9lbnZpcm9ubWVudC9lbnZMb3dQb2x5LmdsYlwiKSk7XG5lbnZpcm9uLmFkZENvbXBvbmVudChuZXcgVHJhbnNmb3JtXG4oe1xuICAgIHBvc2l0aW9uOiBuZXcgVmVjdG9yMygwLDAsMCksXG4gICAgc2NhbGU6IG5ldyBWZWN0b3IzKDEsMSwxKSxcbiAgICByb3RhdGlvbjogbmV3IFF1YXRlcm5pb24oKS5zZXRFdWxlcigwLDAsMClcbn0pKTtcbmVuZ2luZS5hZGRFbnRpdHkoZW52aXJvbik7IiwiaW1wb3J0IHsgTWVudUdyb3VwM0QgfSBmcm9tIFwic3JjL3V0aWxpdGllcy9tZW51LWdyb3VwLTNEXCI7XHJcblxyXG4vKiAgICAgIEVORU1ZIFdBVkUgRElTUExBWVxyXG4gICAgYWxsb3dzIHRoZSBwbGF5ZXIgdG8gcHJldmlldyBlbmVteSB3YXZlc1xyXG4qL1xyXG5leHBvcnQgY2xhc3MgRW5lbXlXYXZlRGlzcGxheSBleHRlbmRzIEVudGl0eVxyXG57XHJcbiAgICAvL2Rpc3BsYXkgb2JqZWN0c1xyXG4gICAgLy8gIHN0YW5kXHJcbiAgICBkaXNwbGF5U3RhbmRzOkVudGl0eVtdO1xyXG4gICAgLy8gIGVuZW15XHJcbiAgICBkaXNwbGF5T2JqZWN0OkVudGl0eVtdO1xyXG5cclxuICAgIC8vM0QgdGV4dCBzY3JlZW5zXHJcbiAgICAvL21lbnVHcm91cDpNZW51R3JvdXAzRDtcclxuXHJcbiAgICAvL2NvbnN0cnVjdG9yXHJcbiAgICBjb25zdHJ1Y3RvcigpXHJcbiAgICB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLmFkZENvbXBvbmVudChuZXcgVHJhbnNmb3JtXHJcbiAgICAgICAgKHtcclxuICAgICAgICAgICAgcG9zaXRpb246IG5ldyBWZWN0b3IzKDAsMCwwKSxcclxuICAgICAgICAgICAgc2NhbGU6IG5ldyBWZWN0b3IzKDEsMSwxKSxcclxuICAgICAgICAgICAgcm90YXRpb246IG5ldyBRdWF0ZXJuaW9uKCkuc2V0RXVsZXIoMCwwLDApXHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAvL3ByZXBhcmUgM0QgZW5lbXkgb2JqZWN0IGRpc3BsYXlcclxuICAgICAgICAvLyAgc3RhbmRzXHJcbiAgICAgICAgdGhpcy5kaXNwbGF5U3RhbmRzID0gW25ldyBFbnRpdHkoKSwgbmV3IEVudGl0eSgpXTtcclxuICAgICAgICBmb3IodmFyIGk6bnVtYmVyPTA7IGk8dGhpcy5kaXNwbGF5U3RhbmRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5U3RhbmRzW2ldLnNldFBhcmVudCh0aGlzKTsgXHJcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheVN0YW5kc1tpXS5hZGRDb21wb25lbnQobmV3IEJveFNoYXBlKCkpOyBcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5kaXNwbGF5U3RhbmRzWzBdLmFkZENvbXBvbmVudChuZXcgVHJhbnNmb3JtXHJcbiAgICAgICAgKHtcclxuICAgICAgICAgICAgcG9zaXRpb246IG5ldyBWZWN0b3IzKC0yLDAsMCksXHJcbiAgICAgICAgICAgIHNjYWxlOiBuZXcgVmVjdG9yMygxLDEsMSksXHJcbiAgICAgICAgICAgIHJvdGF0aW9uOiBuZXcgUXVhdGVybmlvbigpLnNldEV1bGVyKDAsMCwwKVxyXG4gICAgICAgIH0pKTtcclxuICAgICAgICB0aGlzLmRpc3BsYXlTdGFuZHNbMV0uYWRkQ29tcG9uZW50KG5ldyBUcmFuc2Zvcm1cclxuICAgICAgICAoe1xyXG4gICAgICAgICAgICBwb3NpdGlvbjogbmV3IFZlY3RvcjMoMiwwLDApLFxyXG4gICAgICAgICAgICBzY2FsZTogbmV3IFZlY3RvcjMoMSwxLDEpLFxyXG4gICAgICAgICAgICByb3RhdGlvbjogbmV3IFF1YXRlcm5pb24oKS5zZXRFdWxlcigwLDAsMClcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgLy8gIG9iamVjdHNcclxuICAgICAgICB0aGlzLmRpc3BsYXlPYmplY3QgPSBbbmV3IEVudGl0eSgpLCBuZXcgRW50aXR5KCldO1xyXG4gICAgICAgIGZvcih2YXIgaTpudW1iZXI9MDsgaTx0aGlzLmRpc3BsYXlPYmplY3QubGVuZ3RoOyBpKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmRpc3BsYXlPYmplY3RbaV0uc2V0UGFyZW50KHRoaXMpOyBcclxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5T2JqZWN0W2ldLmFkZENvbXBvbmVudChuZXcgQm94U2hhcGUoKSk7IFxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmRpc3BsYXlPYmplY3RbMF0uYWRkQ29tcG9uZW50KG5ldyBUcmFuc2Zvcm1cclxuICAgICAgICAoe1xyXG4gICAgICAgICAgICBwb3NpdGlvbjogbmV3IFZlY3RvcjMoLTIsMiwwKSxcclxuICAgICAgICAgICAgc2NhbGU6IG5ldyBWZWN0b3IzKDEsMSwxKSxcclxuICAgICAgICAgICAgcm90YXRpb246IG5ldyBRdWF0ZXJuaW9uKCkuc2V0RXVsZXIoMCwwLDApXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIHRoaXMuZGlzcGxheU9iamVjdFsxXS5hZGRDb21wb25lbnQobmV3IFRyYW5zZm9ybVxyXG4gICAgICAgICh7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiBuZXcgVmVjdG9yMygyLDIsMCksXHJcbiAgICAgICAgICAgIHNjYWxlOiBuZXcgVmVjdG9yMygxLDEsMSksXHJcbiAgICAgICAgICAgIHJvdGF0aW9uOiBuZXcgUXVhdGVybmlvbigpLnNldEV1bGVyKDAsMCwwKVxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgLy9wcmVwYXJlIDNEIHRleHQvc3RhdHMgZGlzcGxheVxyXG4gICAgICAgIC8vdGhpcy5tZW51R3JvdXAgPSBuZXcgTWVudUdyb3VwM0QodGhpcyk7XHJcbiAgICB9XHJcbn0iLCIvL21hcCBkYXRhXHJcbmV4cG9ydCBjb25zdCBkYXRhTWFwID1cclxuW1xyXG4gICAgLy8wOiBkZWJ1Z2dpbmcgbWFwXHJcbiAgICB7XHJcbiAgICAgICAgRGlzcGxheU5hbWU6XCJEZWJ1Z2dlclwiLFxyXG4gICAgICAgIERpc3BsYXlEZXNjOlwiUmVhbG0gZm9yIGRlYnVnZ2luZyB0aGUgZ2FtZVwiLFxyXG4gICAgICAgIE1vbnN0ZXJUeXBlczpcIjBfMV8yXCIsXHJcbiAgICAgICAgV2F2ZUNvdW50OjEwLFxyXG4gICAgICAgIERpZmZpY3VsdHlXYXZlQWRkOjJcclxuICAgIH1cclxuICAgIC8vMTpcclxuXSJdfQ==",
    "sha256": "2617f7443d77f961667059b96690c4b0a5793a8fbebfabb3fb6ef2f5dde9a691"
  }
]